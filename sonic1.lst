00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; =============================================================
00000000                            stopZ80        macro
00000000                                    move.w    #$100,($A11100).l
00000000                                    nop
00000000                                    nop
00000000                                    nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                                    bne.s    @wait\@
00000000                                    endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            startZ80    macro
00000000                                    move.w    #0,($A11100).l    ; start the Z80
00000000                                    endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            waitYM        macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                                    btst    #7,d2
00000000                                    bne.s    @wait\@
00000000                                    endm
00000000                            ; ===========================================================================
00000000                            ; Level Order Stuff
00000000                            ; ===========================================================================
00000000 =00000000                  lvlord_sega		= $0000
00000000 =00000000                  green_hill_act_1	= $0000
00000000 =00000001                  green_hill_act_2	= $0001
00000000 =00000002                  green_hill_act_3	= $0002
00000000                            
00000000 =00000200                  marble_act_1	= $0200
00000000 =00000201                  marble_act_2	= $0201
00000000 =00000202                  marble_act_3	= $0202
00000000                            		
00000000 =00000400                  spring_yard_act_1	= $0400
00000000 =00000401                  spring_yard_act_2	= $0401
00000000 =00000402                  spring_yard_act_3	= $0402
00000000                            
00000000 =00000100                  labyrinth_act_1		= $0100
00000000 =00000101                  labyrinth_act_2		= $0101
00000000 =00000102                  labyrinth_act_3		= $0102
00000000 =00000103                  scrap_brain_act_3	= $0103
00000000                            		
00000000 =00000300                  star_light_act_1	= $0300
00000000 =00000301                  star_light_act_2	= $0301
00000000 =00000302                  star_light_act_3	= $0302
00000000                            
00000000 =00000500                  scrap_brain_act_1	= $0500
00000000 =00000501                  scrap_brain_act_2	= $0501
00000000 =00000502                  final_zone		= $0502
00000000                            
00000000 =00000700                  egg_plant_act_1	= $0700
00000000 =00000701                  egg_plant_act_2	= $0701
00000000 =00000702                  egg_plant_act_3	= $0702
00000000                            
00000000 =00000800                  island_nowhere_act_1	= $0800
00000000 =00000801                  island_nowhere_act_2	= $0801
00000000 =00000802                  island_nowhere_act_3	= $0802
00000000                            ; ===========================================================================
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 414D 4F4E 4720 5448 4520+  Title_Local:	dc.b 'AMONG THE OTHERS                                ' ; Domestic name
00000150 414D 4F4E 4720 5448 4520+  Title_Int:	dc.b 'AMONG THE OTHERS                                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            ;		beq.s	CheckSumCheck
0000030E                            ;		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000030E                            ;		beq.w	GameInit	; if yes, branch
0000030E                            ;
0000030E                            ;CheckSumCheck:
0000030E                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
0000030E                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000030E                            ;		move.l	(a1),d0
0000030E                            ;		moveq	#0,d1
0000030E                            ;
0000030E                            ;loc_32C:
0000030E                            ;		add.w	(a0)+,d1
0000030E                            ;		cmp.l	a0,d0
0000030E                            ;		bcc.s	loc_32C
0000030E                            ;		movea.l	#Checksum,a1	; read the checksum
0000030E                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000030E                            ;		bne.w	CheckSumError	; if they don't match, branch
0000030E                            ;		lea	($FFFFFE00).w,a6
0000030E                            ;		moveq	#0,d7
0000030E                            ;		move.w	#$7F,d6
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E                            MainGameLoop:
0000034E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000352 0240 001C                  		andi.w	#$1C,d0
00000356 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000035A 60F2                       		bra.s	MainGameLoop
0000035C                            ; ===========================================================================
0000035C                            ; ---------------------------------------------------------------------------
0000035C                            ; Main game mode array
0000035C                            ; ---------------------------------------------------------------------------
0000035C                            
0000035C                            GameModeArray:
0000035C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000360                            ; ===========================================================================
00000360 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000364                            ; ===========================================================================
00000364 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000368                            ; ===========================================================================
00000368 6000 0000                  		bra.w	Level		; Normal Level ($0C)
0000036C                            ; ===========================================================================
0000036C 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000370                            ; ===========================================================================
00000370 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000374                            ; ===========================================================================
00000374 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000378                            ; ===========================================================================
00000378 6000 0000                  		bra.w	Credits		; Credits ($1C)
0000037C                            ; ===========================================================================
0000037C 4E75                       		rts	
0000037E                            ; ===========================================================================
0000037E                            
0000037E                            ;CheckSumError:
0000037E                            ;		bsr.w	VDPSetupGame
0000037E                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000037E                            ;		moveq	#$3F,d7
0000037E                            ;
0000037E                            ;CheckSum_Red:
0000037E                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
0000037E                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
0000037E                            ;
0000037E                            ;CheckSum_Loop:
0000037E                            ;		bra.s	CheckSum_Loop
0000037E                            ; ===========================================================================
0000037E                            
0000037E                            loc_43A:
0000037E 46FC 2700                  		move	#$2700,sr
00000382 544F                       		addq.w	#2,sp
00000384 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000388 544F                       		addq.w	#2,sp
0000038A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000390 6100 0000                  		bsr.w	ShowErrorMsg
00000394 202F 0002                  		move.l	2(sp),d0
00000398 6100 0000                  		bsr.w	sub_5BA
0000039C 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003A0 6100 0000                  		bsr.w	sub_5BA
000003A4 6000                       		bra.s	loc_478
000003A6                            ; ===========================================================================
000003A6                            
000003A6                            loc_462:
000003A6 46FC 2700                  		move	#$2700,sr
000003AA 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003B0 6100 0000                  		bsr.w	ShowErrorMsg
000003B4 202F 0002                  		move.l	2(sp),d0
000003B8 6100 0000                  		bsr.w	sub_5BA
000003BC                            
000003BC                            loc_478:
000003BC 6100 0000                  		bsr.w	ErrorWaitForC
000003C0 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003C6 46FC 2300                  		move	#$2300,sr
000003CA 4E73                       		rte	
000003CC                            
000003CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003CC                            
000003CC                            
000003CC                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003CC 4DF9 00C0 0000             		lea	($C00000).l,a6
000003D2 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003DC 41F9 0000 0000             		lea	(Art_Text).l,a0
000003E2 323C 027F                  		move.w	#$27F,d1
000003E6                            
000003E6                            Error_LoadGfx:
000003E6 3C98                       		move.w	(a0)+,(a6)
000003E8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000003EC 7000                       		moveq	#0,d0		; clear	d0
000003EE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000003F2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000003F6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000003FA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000404 7212                       		moveq	#$12,d1		; number of characters
00000406                            
00000406                            Error_LoopChars:
00000406 7000                       		moveq	#0,d0
00000408 1018                       		move.b	(a0)+,d0
0000040A 0640 0790                  		addi.w	#$790,d0
0000040E 3C80                       		move.w	d0,(a6)
00000410 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000414 4E75                       		rts	
00000416                            ; End of function ShowErrorMsg
00000416                            
00000416                            ; ===========================================================================
00000416 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
0000041A 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000041E 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
00000422 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000426 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
0000042A 0000                       		dc.w asc_5A6-ErrorText
0000042C 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000043F 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000452 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000465 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000478 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000048B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000049E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004B1 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004C4 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004D7 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000004EA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000004FE 00                         		even
000004FE                            
000004FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004FE                            
000004FE                            
000004FE                            sub_5BA:				; XREF: loc_43A; loc_462
000004FE 3CBC 07CA                  		move.w	#$7CA,(a6)
00000502 7407                       		moveq	#7,d2
00000504                            
00000504                            loc_5C0:
00000504 E998                       		rol.l	#4,d0
00000506 6100                       		bsr.s	sub_5CA
00000508 51CA FFFA                  		dbf	d2,loc_5C0
0000050C 4E75                       		rts	
0000050E                            ; End of function sub_5BA
0000050E                            
0000050E                            
0000050E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000050E                            
0000050E                            
0000050E                            sub_5CA:				; XREF: sub_5BA
0000050E 3200                       		move.w	d0,d1
00000510 0241 000F                  		andi.w	#$F,d1
00000514 0C41 000A                  		cmpi.w	#$A,d1
00000518 6500                       		bcs.s	loc_5D8
0000051A 5E41                       		addq.w	#7,d1
0000051C                            
0000051C                            loc_5D8:
0000051C 0641 07C0                  		addi.w	#$7C0,d1
00000520 3C81                       		move.w	d1,(a6)
00000522 4E75                       		rts	
00000524                            ; End of function sub_5CA
00000524                            
00000524                            
00000524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000524                            
00000524                            
00000524                            ErrorWaitForC:				; XREF: loc_478
00000524 6100 0000                  		bsr.w	ReadJoypads
00000528 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000052E 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000532 4E75                       		rts	
00000534                            ; End of function ErrorWaitForC
00000534                            
00000534                            ; ===========================================================================
00000534                            
00000534                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A54                            		even
00000A54                            
00000A54                            ; ===========================================================================
00000A54                            
00000A54                            loc_B10:				; XREF: Vectors
00000A54 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A58 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A5C 6700                       		beq.s	loc_B88
00000A5E 3039 00C0 0004             		move.w	($C00004).l,d0
00000A64 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A6E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A76 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A7C 6700                       		beq.s	loc_B42
00000A7E 303C 0700                  		move.w	#$700,d0
00000A82                            
00000A82                            loc_B3E:
00000A82 51C8 FFFE                  		dbf	d0,loc_B3E
00000A86                            
00000A86                            loc_B42:
00000A86 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000A8A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000A90 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000A96 0240 003E                  		andi.w	#$3E,d0
00000A9A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000A9E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AA2                            
00000AA2                            loc_B5E:				; XREF: loc_B88
00000AA2 4EB9 0000 0000             		jsr	sub_71B4C
00000AA8                            
00000AA8                            loc_B64:				; XREF: loc_D50
00000AA8 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AAC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000AB0 4E73                       		rte	
00000AB2                            ; ===========================================================================
00000AB2 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AB6 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000ABA 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ABE 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000AC2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AC6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000ACA 0000                       		dc.w loc_E72-off_B6E
00000ACC                            ; ===========================================================================
00000ACC                            
00000ACC                            loc_B88:				; XREF: loc_B10; off_B6E
00000ACC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AD2 6700                       		beq.s	loc_B9A
00000AD4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000ADA 6600 FFC6                  		bne.w	loc_B5E
00000ADE                            
00000ADE                            loc_B9A:
00000ADE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000AE4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000AE8 3039 00C0 0004             		move.w	($C00004).l,d0
00000AEE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AF4 6700                       		beq.s	loc_BBA
00000AF6 303C 0700                  		move.w	#$700,d0
00000AFA                            
00000AFA                            loc_BB6:
00000AFA 51C8 FFFE                  		dbf	d0,loc_BB6
00000AFE                            
00000AFE                            loc_BBA:
00000AFE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B04 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B08 6600                       		bne.s	loc_BFE
00000B0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B10 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B16 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B1C 3ABC 977F                  		move.w	#$977F,(a5)
00000B20 3ABC C000                  		move.w	#$C000,(a5)
00000B24 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B2E 6000                       		bra.s	loc_C22
00000B30                            ; ===========================================================================
00000B30                            
00000B30                            loc_BFE:				; XREF: loc_BC8
00000B30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B36 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B3C 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000B42 3ABC 977F                  		move.w	#$977F,(a5)
00000B46 3ABC C000                  		move.w	#$C000,(a5)
00000B4A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B54                            
00000B54                            loc_C22:				; XREF: loc_BC8
00000B54 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B58                            ;		move.w	#0,($A11100).l
00000B58 6000 FF48                  		bra.w	loc_B5E
00000B5C                            ; ===========================================================================
00000B5C                            
00000B5C                            loc_C32:				; XREF: off_B6E
00000B5C 6100 0000                  		bsr.w	sub_106E
00000B60                            
00000B60                            loc_C36:				; XREF: off_B6E
00000B60 4A78 F614                  		tst.w	($FFFFF614).w
00000B64 6700 0000                  		beq.w	locret_C42
00000B68 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B6C                            
00000B6C                            locret_C42:
00000B6C 4E75                       		rts	
00000B6E                            ; ===========================================================================
00000B6E                            
00000B6E                            loc_C44:				; XREF: off_B6E
00000B6E 6100 0000                  		bsr.w	sub_106E
00000B72 6100 0000                  		bsr.w	sub_6886
00000B76 6100 0000                  		bsr.w	sub_1642
00000B7A 4A78 F614                  		tst.w	($FFFFF614).w
00000B7E 6700 0000                  		beq.w	locret_C5C
00000B82 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B86                            
00000B86                            locret_C5C:
00000B86 4E75                       		rts	
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_C5E:				; XREF: off_B6E
00000B88 6100 0000                  		bsr.w	sub_106E
00000B8C 4E75                       		rts	
00000B8E                            ; ===========================================================================
00000B8E                            
00000B8E                            loc_C64:				; XREF: off_B6E
00000B8E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000B94 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000B98                            
00000B98                            loc_C6E:				; XREF: off_B6E
00000B98 6100 0000                  		bsr.w	ReadJoypads
00000B9C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BA0 6600                       		bne.s	loc_CB0
00000BA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BAE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BB4 3ABC 977F                  		move.w	#$977F,(a5)
00000BB8 3ABC C000                  		move.w	#$C000,(a5)
00000BBC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BC6 6000                       		bra.s	loc_CD4
00000BC8                            ; ===========================================================================
00000BC8                            
00000BC8                            loc_CB0:				; XREF: loc_C76
00000BC8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BCE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BD4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BDA 3ABC 977F                  		move.w	#$977F,(a5)
00000BDE 3ABC C000                  		move.w	#$C000,(a5)
00000BE2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BE8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BEC                            
00000BEC                            loc_CD4:				; XREF: loc_C76
00000BEC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BF6 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000BFC 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C02 3ABC 977F                  		move.w	#$977F,(a5)
00000C06 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C0A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C14 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C1A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C20 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C26 3ABC 977F                  		move.w	#$977F,(a5)
00000C2A 3ABC 7800                  		move.w	#$7800,(a5)
00000C2E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C34 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C38 4EB9 0000 0000                     jsr     (ProcessDMAQueue).l 
00000C3E                            
00000C3E                            loc_D50:
00000C3E                            ;		move.w	#0,($A11100).l
00000C3E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C44 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C4A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C50 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C56 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C5C 6400                       		bcc.s	Demo_Time
00000C5E 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C64 588F                       		addq.l	#4,sp
00000C66 6000 FE40                  		bra.w	loc_B64
00000C6A                            
00000C6A                            ; ---------------------------------------------------------------------------
00000C6A                            ; Subroutine to	run a demo for an amount of time
00000C6A                            ; ---------------------------------------------------------------------------
00000C6A                            
00000C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C6A                            
00000C6A                            
00000C6A                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000C6A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000C6E 4EB9 0000 0000             		jsr	AniArt_Load
00000C74                            ;		jsr	HudUpdate
00000C74 6100 0000                  		bsr.w	sub_165E
00000C78 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000C7C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000C80 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000C84                            
00000C84                            Demo_TimeEnd:
00000C84 4E75                       		rts	
00000C86                            ; End of function Demo_Time
00000C86                            
00000C86                            ; ===========================================================================
00000C86                            
00000C86                            loc_DA6:				; XREF: off_B6E
00000C86                            ;		move.w	#$100,($A11100).l ; stop the Z80
00000C86                            
00000C86                            loc_DAE:
00000C86                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00000C86                            ;		bne.s	loc_DAE		; if not, branch
00000C86 6100 0000                  		bsr.w	ReadJoypads
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CBA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CC0 3ABC 977F                  		move.w	#$977F,(a5)
00000CC4 3ABC 7800                  		move.w	#$7800,(a5)
00000CC8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CDE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CE4 3ABC 977F                  		move.w	#$977F,(a5)
00000CE8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF6                            ;		move.w	#0,($A11100).l
00000CF6 6100 0000                  		bsr.w	PalCycle_SS
00000CFA 4EB9 0000 0000                     jsr     (ProcessDMAQueue).l 
00000D00                            
00000D00                            loc_E64:
00000D00 4A78 F614                  		tst.w	($FFFFF614).w
00000D04 6700 0000                  		beq.w	locret_E70
00000D08 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D0C                            
00000D0C                            locret_E70:
00000D0C 4E75                       		rts	
00000D0E                            ; ===========================================================================
00000D0E                            
00000D0E                            loc_E72:				; XREF: off_B6E
00000D0E                            ;		move.w	#$100,($A11100).l ; stop the Z80
00000D0E                            
00000D0E                            loc_E7A:
00000D0E                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00000D0E                            ;		bne.s	loc_E7A		; if not, branch
00000D0E 6100 0000                  		bsr.w	ReadJoypads
00000D12 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D16 6600                       		bne.s	loc_EB4
00000D18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D1E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D24 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D2A 3ABC 977F                  		move.w	#$977F,(a5)
00000D2E 3ABC C000                  		move.w	#$C000,(a5)
00000D32 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D3C 6000                       		bra.s	loc_ED8
00000D3E                            ; ===========================================================================
00000D3E                            
00000D3E                            loc_EB4:				; XREF: loc_E7A
00000D3E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D44 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D4A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000D50 3ABC 977F                  		move.w	#$977F,(a5)
00000D54 3ABC C000                  		move.w	#$C000,(a5)
00000D58 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D5E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D62                            
00000D62                            loc_ED8:				; XREF: loc_E7A
00000D62 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000D66 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D6C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D72 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D78                            
00000D78                            loc_EEE:
00000D78 3ABC 977F                  		move.w	#$977F,(a5)
00000D7C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D80 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D90 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D96 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D9C 3ABC 977F                  		move.w	#$977F,(a5)
00000DA0 3ABC 7800                  		move.w	#$7800,(a5)
00000DA4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DAE 4EB9 0000 0000             		jsr     (ProcessDMAQueue).l 
00000DB4                            
00000DB4                            loc_F54:
00000DB4                            ;		move.w	#0,($A11100).l	; start	the Z80
00000DB4 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000DBA 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000DC0 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000DC6 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000DCC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000DD0 4EB9 0000 0000             		jsr	AniArt_Load
00000DD6                            ;		jsr	HudUpdate
00000DD6 6100 0000                  		bsr.w	sub_1642
00000DDA 4E75                       		rts	
00000DDC                            ; ===========================================================================
00000DDC                            
00000DDC                            loc_F8A:				; XREF: off_B6E
00000DDC 6100 0000                  		bsr.w	sub_106E
00000DE0 5238 F628                  		addq.b	#1,($FFFFF628).w
00000DE4 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000DEA 4E75                       		rts	
00000DEC                            ; ===========================================================================
00000DEC                            
00000DEC                            loc_F9A:				; XREF: off_B6E
00000DEC 6100 0000                  		bsr.w	sub_106E
00000DF0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DF4 6000 0000                  		bra.w	sub_1642
00000DF8                            ; ===========================================================================
00000DF8                            
00000DF8                            loc_FA6:				; XREF: off_B6E
00000DF8                            ;		move.w	#$100,($A11100).l ; stop the Z80
00000DF8                            
00000DF8                            loc_FAE:
00000DF8                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00000DF8                            ;		bne.s	loc_FAE		; if not, branch
00000DF8 6100 0000                  		bsr.w	ReadJoypads
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E32 3ABC 977F                  		move.w	#$977F,(a5)
00000E36 3ABC 7800                  		move.w	#$7800,(a5)
00000E3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E44 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E4A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E50 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E56 3ABC 977F                  		move.w	#$977F,(a5)
00000E5A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E5E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E64 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E68                            ;		move.w	#0,($A11100).l	; start	the Z80
00000E68 4EB9 0000 0000             		jsr     (ProcessDMAQueue).l 
00000E6E                            
00000E6E                            loc_1060:
00000E6E 4A78 F614                  		tst.w	($FFFFF614).w
00000E72 6700 0000                  		beq.w	locret_106C
00000E76 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7A                            
00000E7A                            locret_106C:
00000E7A 4E75                       		rts	
00000E7C                            
00000E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E7C                            
00000E7C                            
00000E7C                            sub_106E:				; XREF: loc_C32; et al
00000E7C                            ;		move.w	#$100,($A11100).l ; stop the Z80
00000E7C                            
00000E7C                            loc_1076:
00000E7C                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00000E7C                            ;		bne.s	loc_1076	; if not, branch
00000E7C 6100 0000                  		bsr.w	ReadJoypads
00000E80 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E84 6600                       		bne.s	loc_10B0
00000E86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E92 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E98 3ABC 977F                  		move.w	#$977F,(a5)
00000E9C 3ABC C000                  		move.w	#$C000,(a5)
00000EA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EAA 6000                       		bra.s	loc_10D4
00000EAC                            ; ===========================================================================
00000EAC                            
00000EAC                            loc_10B0:				; XREF: sub_106E
00000EAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EBE 3ABC 977F                  		move.w	#$977F,(a5)
00000EC2 3ABC C000                  		move.w	#$C000,(a5)
00000EC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED0                            
00000ED0                            loc_10D4:				; XREF: sub_106E
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC 7800                  		move.w	#$7800,(a5)
00000EEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F00 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F06 3ABC 977F                  		move.w	#$977F,(a5)
00000F0A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F0E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F14 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F18                            ;		move.w	#0,($A11100).l	; start	the Z80
00000F18 4E75                       		rts	
00000F1A                            ; End of function sub_106E
00000F1A                            
00000F1A                            ; ---------------------------------------------------------------------------
00000F1A                            ; Subroutine to	move pallets from the RAM to CRAM
00000F1A                            ; ---------------------------------------------------------------------------
00000F1A                            
00000F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F1A                            
00000F1A                            
00000F1A                            PalToCRAM:
00000F1A 46FC 2700                  		move	#$2700,sr
00000F1E 4A78 F644                  		tst.w	($FFFFF644).w
00000F22 6700                       		beq.s	locret_119C
00000F24 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000F2A 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000F2E 43F9 00C0 0000             		lea	($C00000).l,a1
00000F34 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00000F38 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000F40 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00000F42 2298                       		move.l	(a0)+,(a1)
00000F44 2298                       		move.l	(a0)+,(a1)
00000F46 2298                       		move.l	(a0)+,(a1)
00000F48 2298                       		move.l	(a0)+,(a1)
00000F4A 2298                       		move.l	(a0)+,(a1)
00000F4C 2298                       		move.l	(a0)+,(a1)
00000F4E 2298                       		move.l	(a0)+,(a1)
00000F50 2298                       		move.l	(a0)+,(a1)
00000F52 2298                       		move.l	(a0)+,(a1)
00000F54 2298                       		move.l	(a0)+,(a1)
00000F56 2298                       		move.l	(a0)+,(a1)
00000F58 2298                       		move.l	(a0)+,(a1)
00000F5A 2298                       		move.l	(a0)+,(a1)
00000F5C 2298                       		move.l	(a0)+,(a1)
00000F5E 2298                       		move.l	(a0)+,(a1)
00000F60 2298                       		move.l	(a0)+,(a1)
00000F62 2298                       		move.l	(a0)+,(a1)
00000F64 2298                       		move.l	(a0)+,(a1)
00000F66 2298                       		move.l	(a0)+,(a1)
00000F68 2298                       		move.l	(a0)+,(a1)
00000F6A 2298                       		move.l	(a0)+,(a1)
00000F6C 2298                       		move.l	(a0)+,(a1)
00000F6E 2298                       		move.l	(a0)+,(a1)
00000F70 2298                       		move.l	(a0)+,(a1)
00000F72 2298                       		move.l	(a0)+,(a1)
00000F74 2298                       		move.l	(a0)+,(a1)
00000F76 2298                       		move.l	(a0)+,(a1)
00000F78 2298                       		move.l	(a0)+,(a1)
00000F7A 2298                       		move.l	(a0)+,(a1)
00000F7C 2298                       		move.l	(a0)+,(a1)
00000F7E 2298                       		move.l	(a0)+,(a1)
00000F80 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00000F86 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000F8A 4A38 F64F                  		tst.b	($FFFFF64F).w
00000F8E 6600                       		bne.s	loc_119E
00000F90                            
00000F90                            locret_119C:
00000F90 4E73                       		rte	
00000F92                            ; ===========================================================================
00000F92                            
00000F92                            loc_119E:				; XREF: PalToCRAM
00000F92 4238 F64F                  		clr.b	($FFFFF64F).w
00000F96 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000F9A 6100 FCCE                  		bsr.w	Demo_Time
00000F9E 4EB9 0000 0000             		jsr	sub_71B4C
00000FA4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FA8 4E73                       		rte	
00000FAA                            ; End of function PalToCRAM
00000FAA                            
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            ; Subroutine to	initialise joypads
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            
00000FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FAA                            
00000FAA                            
00000FAA                            JoypadInit:				; XREF: GameClrRAM
00000FAA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FB2                            
00000FB2                            Joypad_WaitZ80:
00000FB2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FBA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FBC 7040                       		moveq	#$40,d0
00000FBE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000FC4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000FCA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000FD0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FD8 4E75                       		rts	
00000FDA                            ; End of function JoypadInit
00000FDA                            
00000FDA                            ; ---------------------------------------------------------------------------
00000FDA                            ; Subroutine to	read joypad input, and send it to the RAM
00000FDA                            ; ---------------------------------------------------------------------------
00000FDA                            
00000FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FDA                            
00000FDA                            
00000FDA                            ReadJoypads:
00000FDA 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000FDE 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000FE4 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000FE6 5449                       		addq.w	#2,a1		; do the second	joypad
00000FE8                            
00000FE8                            Joypad_Read:
00000FE8 12BC 0000                  		move.b	#0,(a1)
00000FEC 4E71                       		nop	
00000FEE 4E71                       		nop	
00000FF0 1011                       		move.b	(a1),d0
00000FF2 E508                       		lsl.b	#2,d0
00000FF4 0200 00C0                  		andi.b	#$C0,d0
00000FF8 12BC 0040                  		move.b	#$40,(a1)
00000FFC 4E71                       		nop	
00000FFE 4E71                       		nop	
00001000 1211                       		move.b	(a1),d1
00001002 0201 003F                  		andi.b	#$3F,d1
00001006 8001                       		or.b	d1,d0
00001008 4600                       		not.b	d0
0000100A 1210                       		move.b	(a0),d1
0000100C B101                       		eor.b	d0,d1
0000100E 10C0                       		move.b	d0,(a0)+
00001010 C200                       		and.b	d0,d1
00001012 10C1                       		move.b	d1,(a0)+
00001014 4E75                       		rts	
00001016                            ; End of function ReadJoypads
00001016                            
00001016                            
00001016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001016                            
00001016                            
00001016                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001016 41F9 00C0 0004             		lea	($C00004).l,a0
0000101C 43F9 00C0 0000             		lea	($C00000).l,a1
00001022 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001028 7E12                       		moveq	#$12,d7
0000102A                            
0000102A                            VDP_Loop:
0000102A 309A                       		move.w	(a2)+,(a0)
0000102C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001030                            
00001030 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001036 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000103A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001040 7000                       		moveq	#0,d0
00001042 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000104C 3E3C 003F                  		move.w	#$3F,d7
00001050                            
00001050                            VDP_ClrCRAM:
00001050 3280                       		move.w	d0,(a1)
00001052 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001056                            
00001056 42B8 F616                  		clr.l	($FFFFF616).w
0000105A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000105E 2F01                       		move.l	d1,-(sp)
00001060 4BF9 00C0 0004             		lea	($C00004).l,a5
00001066 3ABC 8F01                  		move.w	#$8F01,(a5)
0000106A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001070 3ABC 9780                  		move.w	#$9780,(a5)
00001074 2ABC 4000 0080             		move.l	#$40000080,(a5)
0000107A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001082                            
00001082                            loc_128E:
00001082 3215                       		move.w	(a5),d1
00001084 0801 0001                  		btst	#1,d1
00001088 66F8                       		bne.s	loc_128E
0000108A                            
0000108A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000108E 221F                       		move.l	(sp)+,d1
00001090 4E75                       		rts	
00001092                            ; End of function VDPSetupGame
00001092                            
00001092                            ; ===========================================================================
00001092 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
0000109A 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010A2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010AA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010B2 9001 9100 9200             		dc.w $9001, $9100, $9200
000010B8                            
000010B8                            ; ---------------------------------------------------------------------------
000010B8                            ; Subroutine to	clear the screen
000010B8                            ; ---------------------------------------------------------------------------
000010B8                            
000010B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010B8                            
000010B8                            
000010B8                            ClearScreen:
000010B8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010BE 3ABC 8F01                  		move.w	#$8F01,(a5)
000010C2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000010C8 3ABC 9780                  		move.w	#$9780,(a5)
000010CC 2ABC 4000 0083             		move.l	#$40000083,(a5)
000010D2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000010DA                            
000010DA                            loc_12E6:
000010DA 3215                       		move.w	(a5),d1
000010DC 0801 0001                  		btst	#1,d1
000010E0 66F8                       		bne.s	loc_12E6
000010E2                            
000010E2 3ABC 8F02                  		move.w	#$8F02,(a5)
000010E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010EC 3ABC 8F01                  		move.w	#$8F01,(a5)
000010F0 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000010F6 3ABC 9780                  		move.w	#$9780,(a5)
000010FA 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001100 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001108                            
00001108                            loc_1314:
00001108 3215                       		move.w	(a5),d1
0000110A 0801 0001                  		btst	#1,d1
0000110E 66F8                       		bne.s	loc_1314
00001110                            
00001110 3ABC 8F02                  		move.w	#$8F02,(a5)
00001114 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000111C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001124 43F8 F800                  		lea	($FFFFF800).w,a1
00001128 7000                       		moveq	#0,d0
0000112A 323C 00A0                  		move.w	#$A0,d1
0000112E                            
0000112E                            loc_133A:
0000112E 22C0                       		move.l	d0,(a1)+
00001130 51C9 FFFC                  		dbf	d1,loc_133A
00001134                            
00001134 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001138 7000                       		moveq	#0,d0
0000113A 323C 0100                  		move.w	#$100,d1
0000113E                            
0000113E                            loc_134A:
0000113E 22C0                       		move.l	d0,(a1)+
00001140 51C9 FFFC                  		dbf	d1,loc_134A
00001144 4E75                       		rts	
00001146                            ; End of function ClearScreen
00001146                            
00001146                            ; ---------------------------------------------------------------------------
00001146                            ; Subroutine to	load the sound driver
00001146                            ; ---------------------------------------------------------------------------
00001146                            
00001146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001146                            
00001146                            
00001146                            SoundDriverLoad:                        ; XREF: GameClrRAM; TitleScreen
00001146 4E71                                       nop
00001148 303C 0100                                  move.w  #$100,d0
0000114C 33C0 00A1 1100                             move.w  d0,($A11100).l
00001152 33C0 00A1 1200                             move.w  d0,($A11200).l
00001158 41F9 0000 0000                             lea     (MegaPCM).l,a0
0000115E 43F9 00A0 0000                             lea     ($A00000).l,a1
00001164 323C 0000                                  move.w  #(MegaPCM_End-MegaPCM)-1,d1
00001168                            
00001168 12D8                               @Load:  move.b  (a0)+,(a1)+
0000116A 51C9 FFFC                                  dbf     d1,@Load
0000116E 7200                                       moveq   #0,d1
00001170 33C1 00A1 1200                             move.w  d1,($A11200).l
00001176 4E71                                       nop
00001178 4E71                                       nop
0000117A 4E71                                       nop
0000117C 4E71                                       nop
0000117E 33C0 00A1 1200                             move.w  d0,($A11200).l
00001184 33C1 00A1 1100                             move.w  d1,($A11100).l
0000118A 4E75                                       rts
0000118C                            ; End of function SoundDriverLoad
0000118C                            
0000118C                            ; ---------------------------------------------------------------------------
0000118C                            ; Subroutine to play a DAC sample
0000118C                            ; ---------------------------------------------------------------------------
0000118C                            
0000118C                            PlaySample:
0000118C 33FC 0100 00A1 1100                move.w  #$100,($A11100).l       ; stop the Z80
00001194 0839 0000 00A1 1100        @0      btst    #0,($A11100).l
0000119C 66F6                               bne.s   @0
0000119E 13C0 00A0 1FFF                     move.b  d0,$A01FFF
000011A4 33FC 0000 00A1 1100                move.w  #0,($A11100).l
000011AC 4E75                               rts
000011AE                            
000011AE                            ; ---------------------------------------------------------------------------
000011AE                            ; Subroutine to	play a sound or	music track
000011AE                            ; ---------------------------------------------------------------------------
000011AE                            
000011AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011AE                            
000011AE                            
000011AE                            PlaySound:
000011AE 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000011B2 4E75                       		rts	
000011B4                            ; End of function PlaySound
000011B4                            
000011B4                            ; ---------------------------------------------------------------------------
000011B4                            ; Subroutine to	play a special sound/music (E0-E4)
000011B4                            ;
000011B4                            ; E0 - Fade out
000011B4                            ; E1 - Sega
000011B4                            ; E2 - Speed up
000011B4                            ; E3 - Normal speed
000011B4                            ; E4 - Stop
000011B4                            ; ---------------------------------------------------------------------------
000011B4                            
000011B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B4                            
000011B4                            
000011B4                            PlaySound_Special:
000011B4 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000011B8 4E75                       		rts	
000011BA                            ; End of function PlaySound_Special
000011BA                            
000011BA                            ; ===========================================================================
000011BA                            ; ---------------------------------------------------------------------------
000011BA                            ; Unused sound/music subroutine
000011BA                            ; ---------------------------------------------------------------------------
000011BA                            
000011BA                            PlaySound_Unk:
000011BA 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000011BE 4E75                       		rts	
000011C0                            
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            ; Subroutine to	pause the game
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            
000011C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C0                            
000011C0                            
000011C0                            PauseGame:				; XREF: Level_MainLoop; et al
000011C0 4E71                       		nop	
000011C2 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000011C6 6700                       		beq.s	Unpause		; if not, branch
000011C8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000011CC 6600                       		bne.s	loc_13BE	; if yes, branch
000011CE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000011D4 6700                       		beq.s	Pause_DoNothing	; if not, branch
000011D6                            
000011D6                            loc_13BE:
000011D6 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000011DC 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000011E2                            
000011E2                            loc_13CA:
000011E2 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000011E8 6100 0000                  		bsr.w	DelayProgram
000011EC 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000011F0 6700                       		beq.s	Pause_ChkStart	; if not, branch
000011F2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000011F8 6700                       		beq.s	Pause_ChkBC	; if not, branch
000011FA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001200 4E71                       		nop	
00001202 6000                       		bra.s	loc_1404
00001204                            ; ===========================================================================
00001204                            
00001204                            Pause_ChkBC:				; XREF: PauseGame
00001204 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000120A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000120C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001212 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001214                            
00001214                            Pause_ChkStart:				; XREF: PauseGame
00001214 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000121A 67C6                       		beq.s	loc_13CA	; if not, branch
0000121C                            
0000121C                            loc_1404:				; XREF: PauseGame
0000121C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001222                            
00001222                            Unpause:				; XREF: PauseGame
00001222 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001228                            
00001228                            Pause_DoNothing:			; XREF: PauseGame
00001228 4E75                       		rts	
0000122A                            ; ===========================================================================
0000122A                            
0000122A                            Pause_SlowMo:				; XREF: PauseGame
0000122A 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001230 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001236 4E75                       		rts	
00001238                            ; End of function PauseGame
00001238                            
00001238                            ; ---------------------------------------------------------------------------
00001238                            ; Subroutine to	display	patterns via the VDP
00001238                            ; ---------------------------------------------------------------------------
00001238                            
00001238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001238                            
00001238                            
00001238                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001238 4DF9 00C0 0000             		lea	($C00000).l,a6
0000123E 283C 0080 0000             		move.l	#$800000,d4
00001244                            
00001244                            loc_142C:
00001244 2D40 0004                  		move.l	d0,4(a6)
00001248 3601                       		move.w	d1,d3
0000124A                            
0000124A                            loc_1432:
0000124A 3C99                       		move.w	(a1)+,(a6)
0000124C 51CB FFFC                  		dbf	d3,loc_1432
00001250 D084                       		add.l	d4,d0
00001252 51CA FFF0                  		dbf	d2,loc_142C
00001256 4E75                       		rts	
00001258                            ; End of function ShowVDPGraphics
00001258                            
00001258                            ; ---------------------------------------------------------------------------
00001258                            ; Nemesis decompression	algorithm
00001258                            ; ---------------------------------------------------------------------------
00001258                            
00001258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001258                            
00001258                            
00001258                            NemDec:
00001258 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000125C 47F9 0000 0000             		lea	(loc_1502).l,a3
00001262 49F9 00C0 0000             		lea	($C00000).l,a4
00001268 6000                       		bra.s	loc_145C
0000126A                            ; ===========================================================================
0000126A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000126E 47F9 0000 0000             		lea	(loc_1518).l,a3
00001274                            
00001274                            loc_145C:				; XREF: NemDec
00001274 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001278 3418                       		move.w	(a0)+,d2
0000127A E34A                       		lsl.w	#1,d2
0000127C 6400                       		bcc.s	loc_146A
0000127E D6FC 000A                  		adda.w	#$A,a3
00001282                            
00001282                            loc_146A:
00001282 E54A                       		lsl.w	#2,d2
00001284 3A42                       		movea.w	d2,a5
00001286 7608                       		moveq	#8,d3
00001288 7400                       		moveq	#0,d2
0000128A 7800                       		moveq	#0,d4
0000128C 6100 0000                  		bsr.w	NemDec4
00001290 1A18                       		move.b	(a0)+,d5
00001292 E145                       		asl.w	#8,d5
00001294 1A18                       		move.b	(a0)+,d5
00001296 3C3C 0010                  		move.w	#$10,d6
0000129A 6100                       		bsr.s	NemDec2
0000129C 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000012A0 4E75                       		rts	
000012A2                            ; End of function NemDec
000012A2                            
000012A2                            
000012A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A2                            
000012A2                            
000012A2                            NemDec2:				; XREF: NemDec
000012A2 3E06                       		move.w	d6,d7
000012A4 5147                       		subq.w	#8,d7
000012A6 3205                       		move.w	d5,d1
000012A8 EE69                       		lsr.w	d7,d1
000012AA 0C01 00FC                  		cmpi.b	#-4,d1
000012AE 6400                       		bcc.s	loc_14D6
000012B0 0241 00FF                  		andi.w	#$FF,d1
000012B4 D241                       		add.w	d1,d1
000012B6 1031 1000                  		move.b	(a1,d1.w),d0
000012BA 4880                       		ext.w	d0
000012BC 9C40                       		sub.w	d0,d6
000012BE 0C46 0009                  		cmpi.w	#9,d6
000012C2 6400                       		bcc.s	loc_14B2
000012C4 5046                       		addq.w	#8,d6
000012C6 E145                       		asl.w	#8,d5
000012C8 1A18                       		move.b	(a0)+,d5
000012CA                            
000012CA                            loc_14B2:
000012CA 1231 1001                  		move.b	1(a1,d1.w),d1
000012CE 3001                       		move.w	d1,d0
000012D0 0241 000F                  		andi.w	#$F,d1
000012D4 0240 00F0                  		andi.w	#$F0,d0
000012D8                            
000012D8                            loc_14C0:				; XREF: NemDec3
000012D8 E848                       		lsr.w	#4,d0
000012DA                            
000012DA                            loc_14C2:				; XREF: NemDec3
000012DA E98C                       		lsl.l	#4,d4
000012DC 8801                       		or.b	d1,d4
000012DE 5343                       		subq.w	#1,d3
000012E0 6600                       		bne.s	loc_14D0
000012E2 4ED3                       		jmp	(a3)
000012E4                            ; End of function NemDec2
000012E4                            
000012E4                            
000012E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012E4                            
000012E4                            
000012E4                            NemDec3:				; XREF: loc_1502
000012E4 7800                       		moveq	#0,d4
000012E6 7608                       		moveq	#8,d3
000012E8                            
000012E8                            loc_14D0:				; XREF: NemDec2
000012E8 51C8 FFF0                  		dbf	d0,loc_14C2
000012EC 60B4                       		bra.s	NemDec2
000012EE                            ; ===========================================================================
000012EE                            
000012EE                            loc_14D6:				; XREF: NemDec2
000012EE 5D46                       		subq.w	#6,d6
000012F0 0C46 0009                  		cmpi.w	#9,d6
000012F4 6400                       		bcc.s	loc_14E4
000012F6 5046                       		addq.w	#8,d6
000012F8 E145                       		asl.w	#8,d5
000012FA 1A18                       		move.b	(a0)+,d5
000012FC                            
000012FC                            loc_14E4:				; XREF: NemDec3
000012FC 5F46                       		subq.w	#7,d6
000012FE 3205                       		move.w	d5,d1
00001300 EC69                       		lsr.w	d6,d1
00001302 3001                       		move.w	d1,d0
00001304 0241 000F                  		andi.w	#$F,d1
00001308 0240 0070                  		andi.w	#$70,d0
0000130C 0C46 0009                  		cmpi.w	#9,d6
00001310 64C6                       		bcc.s	loc_14C0
00001312 5046                       		addq.w	#8,d6
00001314 E145                       		asl.w	#8,d5
00001316 1A18                       		move.b	(a0)+,d5
00001318 60BE                       		bra.s	loc_14C0
0000131A                            ; End of function NemDec3
0000131A                            
0000131A                            ; ===========================================================================
0000131A                            
0000131A                            loc_1502:				; XREF: NemDec
0000131A 2884                       		move.l	d4,(a4)
0000131C 534D                       		subq.w	#1,a5
0000131E 380D                       		move.w	a5,d4
00001320 66C2                       		bne.s	NemDec3
00001322 4E75                       		rts	
00001324                            ; ===========================================================================
00001324 B982                       		eor.l	d4,d2
00001326 2882                       		move.l	d2,(a4)
00001328 534D                       		subq.w	#1,a5
0000132A 380D                       		move.w	a5,d4
0000132C 66B6                       		bne.s	NemDec3
0000132E 4E75                       		rts	
00001330                            ; ===========================================================================
00001330                            
00001330                            loc_1518:				; XREF: NemDec
00001330 28C4                       		move.l	d4,(a4)+
00001332 534D                       		subq.w	#1,a5
00001334 380D                       		move.w	a5,d4
00001336 66AC                       		bne.s	NemDec3
00001338 4E75                       		rts	
0000133A                            ; ===========================================================================
0000133A B982                       		eor.l	d4,d2
0000133C 28C2                       		move.l	d2,(a4)+
0000133E 534D                       		subq.w	#1,a5
00001340 380D                       		move.w	a5,d4
00001342 66A0                       		bne.s	NemDec3
00001344 4E75                       		rts	
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            NemDec4:				; XREF: NemDec
00001346 1018                       		move.b	(a0)+,d0
00001348                            
00001348                            loc_1530:
00001348 0C00 00FF                  		cmpi.b	#-1,d0
0000134C 6600                       		bne.s	loc_1538
0000134E 4E75                       		rts	
00001350                            ; ===========================================================================
00001350                            
00001350                            loc_1538:				; XREF: NemDec4
00001350 3E00                       		move.w	d0,d7
00001352                            
00001352                            loc_153A:
00001352 1018                       		move.b	(a0)+,d0
00001354 0C00 0080                  		cmpi.b	#$80,d0
00001358 64EE                       		bcc.s	loc_1530
0000135A 1200                       		move.b	d0,d1
0000135C 0247 000F                  		andi.w	#$F,d7
00001360 0241 0070                  		andi.w	#$70,d1
00001364 8E41                       		or.w	d1,d7
00001366 0240 000F                  		andi.w	#$F,d0
0000136A 1200                       		move.b	d0,d1
0000136C E149                       		lsl.w	#8,d1
0000136E 8E41                       		or.w	d1,d7
00001370 7208                       		moveq	#8,d1
00001372 9240                       		sub.w	d0,d1
00001374 6600                       		bne.s	loc_1568
00001376 1018                       		move.b	(a0)+,d0
00001378 D040                       		add.w	d0,d0
0000137A 3387 0000                  		move.w	d7,(a1,d0.w)
0000137E 60D2                       		bra.s	loc_153A
00001380                            ; ===========================================================================
00001380                            
00001380                            loc_1568:				; XREF: NemDec4
00001380 1018                       		move.b	(a0)+,d0
00001382 E368                       		lsl.w	d1,d0
00001384 D040                       		add.w	d0,d0
00001386 7A01                       		moveq	#1,d5
00001388 E36D                       		lsl.w	d1,d5
0000138A 5345                       		subq.w	#1,d5
0000138C                            
0000138C                            loc_1574:
0000138C 3387 0000                  		move.w	d7,(a1,d0.w)
00001390 5440                       		addq.w	#2,d0
00001392 51CD FFF8                  		dbf	d5,loc_1574
00001396 60BA                       		bra.s	loc_153A
00001398                            ; End of function NemDec4
00001398                            
00001398                            ; ---------------------------------------------------------------------------
00001398                            ; Subroutine to load the art for the animals for the current zone
00001398                            ; ---------------------------------------------------------------------------
00001398                            
00001398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001398                            
00001398                            
00001398                            LoadAnimalPLC:
00001398 7000                       		moveq	#0,d0
0000139A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000139E 0C40 0007                  		cmpi.w	#7,d0
000013A2 6400                       		bhs.s	LoadAnimalPLC_New
000013A4 0640 0015                  		addi.w	#$15,d0
000013A8 6000                       		bra.s	LoadPLC
000013AA                            ; ---------------------------------------------------------------------------
000013AA                            
000013AA                            LoadAnimalPLC_New:
000013AA 5F40                       		subi.w	#7,d0
000013AC                            		; multiply d0 by 3
000013AC 3200                       		move.w	d0,d1
000013AE D040                       		add.w	d0,d0
000013B0 D041                       		add.w	d1,d0
000013B2                            		; add $22 (this is the index of the animal PLC for the first added zone)
000013B2 0640 0022                  		addi.w	#$22,d0
000013B6                            		; bra.s	LoadPLC
000013B6                            ; End of function LoadAnimalPLC
000013B6                            
000013B6                            ; ---------------------------------------------------------------------------
000013B6                            ; Subroutine to	load pattern load cues
000013B6                            ; ---------------------------------------------------------------------------
000013B6                            
000013B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013B6                            
000013B6                            
000013B6                            LoadPLC:
000013B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000013BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000013C0 D040                       		add.w	d0,d0
000013C2 3031 0000                  		move.w	(a1,d0.w),d0
000013C6 43F1 0000                  		lea	(a1,d0.w),a1
000013CA 45F8 F680                  		lea	($FFFFF680).w,a2
000013CE                            
000013CE                            loc_1598:
000013CE 4A92                       		tst.l	(a2)
000013D0 6700                       		beq.s	loc_15A0
000013D2 5C4A                       		addq.w	#6,a2
000013D4 60F8                       		bra.s	loc_1598
000013D6                            ; ===========================================================================
000013D6                            
000013D6                            loc_15A0:				; XREF: LoadPLC
000013D6 3019                       		move.w	(a1)+,d0
000013D8 6B00                       		bmi.s	loc_15AC
000013DA                            
000013DA                            loc_15A4:
000013DA 24D9                       		move.l	(a1)+,(a2)+
000013DC 34D9                       		move.w	(a1)+,(a2)+
000013DE 51C8 FFFA                  		dbf	d0,loc_15A4
000013E2                            
000013E2                            loc_15AC:
000013E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000013E6 4E75                       		rts	
000013E8                            ; End of function LoadPLC
000013E8                            
000013E8                            
000013E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013E8                            
000013E8                            
000013E8                            LoadPLC2:
000013E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000013EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000013F2 D040                       		add.w	d0,d0
000013F4 3031 0000                  		move.w	(a1,d0.w),d0
000013F8 43F1 0000                  		lea	(a1,d0.w),a1
000013FC 6100                       		bsr.s	ClearPLC
000013FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001402 3019                       		move.w	(a1)+,d0
00001404 6B00                       		bmi.s	loc_15D8
00001406                            
00001406                            loc_15D0:
00001406 24D9                       		move.l	(a1)+,(a2)+
00001408 34D9                       		move.w	(a1)+,(a2)+
0000140A 51C8 FFFA                  		dbf	d0,loc_15D0
0000140E                            
0000140E                            loc_15D8:
0000140E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001412 4E75                       		rts	
00001414                            ; End of function LoadPLC2
00001414                            
00001414                            ; ---------------------------------------------------------------------------
00001414                            ; Subroutine to	clear the pattern load cues
00001414                            ; ---------------------------------------------------------------------------
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            ClearPLC:				; XREF: LoadPLC2
00001414 45F8 F680                  		lea	($FFFFF680).w,a2
00001418 701F                       		moveq	#$1F,d0
0000141A                            
0000141A                            ClearPLC_Loop:
0000141A 429A                       		clr.l	(a2)+
0000141C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001420 4E75                       		rts	
00001422                            ; End of function ClearPLC
00001422                            
00001422                            ; ---------------------------------------------------------------------------
00001422                            ; Subroutine to	use graphics listed in a pattern load cue
00001422                            ; ---------------------------------------------------------------------------
00001422                            
00001422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001422                            
00001422                            
00001422                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001422 4AB8 F680                  		tst.l	($FFFFF680).w
00001426 6700                       		beq.s	locret_1640
00001428 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000142C 6600                       		bne.s	locret_1640
0000142E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001432 47F9 0000 131A             		lea	(loc_1502).l,a3
00001438 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000143C 3418                       		move.w	(a0)+,d2
0000143E 6A00                       		bpl.s	loc_160E
00001440 D6FC 000A                  		adda.w	#$A,a3
00001444                            
00001444                            loc_160E:
00001444 0242 7FFF                  		andi.w	#$7FFF,d2
00001448 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000144C 6100 FEF8                  		bsr.w	NemDec4
00001450 1A18                       		move.b	(a0)+,d5
00001452 E145                       		asl.w	#8,d5
00001454 1A18                       		move.b	(a0)+,d5
00001456 7C10                       		moveq	#$10,d6
00001458 7000                       		moveq	#0,d0
0000145A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000145E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001462 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001466 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000146A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000146E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001472 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001476                            
00001476                            locret_1640:
00001476 4E75                       		rts	
00001478                            ; End of function RunPLC_RAM
00001478                            
00001478                            
00001478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001478                            
00001478                            
00001478                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001478 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000147C 6700 0000                  		beq.w	locret_16DA
00001480 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001486 7000                       		moveq	#0,d0
00001488 3038 F684                  		move.w	($FFFFF684).w,d0
0000148C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001492 6000                       		bra.s	loc_1676
00001494                            ; End of function sub_1642
00001494                            
00001494                            
00001494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001494                            
00001494                            
00001494                            sub_165E:				; XREF: Demo_Time
00001494 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001498 6700                       		beq.s	locret_16DA
0000149A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000014A0 7000                       		moveq	#0,d0
000014A2 3038 F684                  		move.w	($FFFFF684).w,d0
000014A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000014AC                            
000014AC                            loc_1676:				; XREF: sub_1642
000014AC 49F9 00C0 0004             		lea	($C00004).l,a4
000014B2 E588                       		lsl.l	#2,d0
000014B4 E448                       		lsr.w	#2,d0
000014B6 0040 4000                  		ori.w	#$4000,d0
000014BA 4840                       		swap	d0
000014BC 2880                       		move.l	d0,(a4)
000014BE 594C                       		subq.w	#4,a4
000014C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000014C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000014C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000014CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000014D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000014D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000014D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000014DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014E0                            
000014E0                            loc_16AA:				; XREF: sub_165E
000014E0 3A7C 0008                  		movea.w	#8,a5
000014E4 6100 FDFE                  		bsr.w	NemDec3
000014E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000014EC 6700                       		beq.s	loc_16DC
000014EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000014F2 66EC                       		bne.s	loc_16AA
000014F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000014F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000014FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001500 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001504 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001508 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000150C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001510                            
00001510                            locret_16DA:				; XREF: sub_1642
00001510 4E75                       		rts	
00001512                            ; ===========================================================================
00001512                            
00001512                            loc_16DC:				; XREF: sub_165E
00001512 41F8 F680                  		lea	($FFFFF680).w,a0
00001516 7015                       		moveq	#$15,d0
00001518                            
00001518                            loc_16E2:				; XREF: sub_165E
00001518 20E8 0006                  		move.l	6(a0),(a0)+
0000151C 51C8 FFFA                  		dbf	d0,loc_16E2
00001520 4E75                       		rts	
00001522                            ; End of function sub_165E
00001522                            
00001522                            ; ---------------------------------------------------------------------------
00001522                            ; Subroutine to	execute	the pattern load cue
00001522                            ; ---------------------------------------------------------------------------
00001522                            
00001522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001522                            
00001522                            
00001522                            RunPLC_ROM:
00001522 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001528 D040                       		add.w	d0,d0
0000152A 3031 0000                  		move.w	(a1,d0.w),d0
0000152E 43F1 0000                  		lea	(a1,d0.w),a1
00001532 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001534                            
00001534                            RunPLC_Loop:
00001534 2059                       		movea.l	(a1)+,a0	; get art pointer
00001536 7000                       		moveq	#0,d0
00001538 3019                       		move.w	(a1)+,d0	; get VRAM address
0000153A E588                       		lsl.l	#2,d0		; divide address by $20
0000153C E448                       		lsr.w	#2,d0
0000153E 0040 4000                  		ori.w	#$4000,d0
00001542 4840                       		swap	d0
00001544 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000154A 6100 FD0C                  		bsr.w	NemDec		; decompress
0000154E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001552 4E75                       		rts	
00001554                            ; End of function RunPLC_ROM
00001554                            
00001554                            ; ---------------------------------------------------------------------------
00001554                            ; Enigma decompression algorithm
00001554                            ; ---------------------------------------------------------------------------
00001554                            
00001554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001554                            
00001554                            
00001554                            EniDec:
00001554 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001558 3640                       		movea.w	d0,a3
0000155A 1018                       		move.b	(a0)+,d0
0000155C 4880                       		ext.w	d0
0000155E 3A40                       		movea.w	d0,a5
00001560 1818                       		move.b	(a0)+,d4
00001562 E70C                       		lsl.b	#3,d4
00001564 3458                       		movea.w	(a0)+,a2
00001566 D4CB                       		adda.w	a3,a2
00001568 3858                       		movea.w	(a0)+,a4
0000156A D8CB                       		adda.w	a3,a4
0000156C 1A18                       		move.b	(a0)+,d5
0000156E E145                       		asl.w	#8,d5
00001570 1A18                       		move.b	(a0)+,d5
00001572 7C10                       		moveq	#$10,d6
00001574                            
00001574                            loc_173E:				; XREF: loc_1768
00001574 7007                       		moveq	#7,d0
00001576 3E06                       		move.w	d6,d7
00001578 9E40                       		sub.w	d0,d7
0000157A 3205                       		move.w	d5,d1
0000157C EE69                       		lsr.w	d7,d1
0000157E 0241 007F                  		andi.w	#$7F,d1
00001582 3401                       		move.w	d1,d2
00001584 0C41 0040                  		cmpi.w	#$40,d1
00001588 6400                       		bcc.s	loc_1758
0000158A 7006                       		moveq	#6,d0
0000158C E24A                       		lsr.w	#1,d2
0000158E                            
0000158E                            loc_1758:
0000158E 6100 0000                  		bsr.w	sub_188C
00001592 0242 000F                  		andi.w	#$F,d2
00001596 E849                       		lsr.w	#4,d1
00001598 D241                       		add.w	d1,d1
0000159A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000159E                            ; End of function EniDec
0000159E                            
0000159E                            ; ===========================================================================
0000159E                            
0000159E                            loc_1768:				; XREF: loc_17B4
0000159E 32CA                       		move.w	a2,(a1)+
000015A0 524A                       		addq.w	#1,a2
000015A2 51CA FFFA                  		dbf	d2,loc_1768
000015A6 60CC                       		bra.s	loc_173E
000015A8                            ; ===========================================================================
000015A8                            
000015A8                            loc_1772:				; XREF: loc_17B4
000015A8 32CC                       		move.w	a4,(a1)+
000015AA 51CA FFFC                  		dbf	d2,loc_1772
000015AE 60C4                       		bra.s	loc_173E
000015B0                            ; ===========================================================================
000015B0                            
000015B0                            loc_177A:				; XREF: loc_17B4
000015B0 6100 0000                  		bsr.w	loc_17DC
000015B4                            
000015B4                            loc_177E:
000015B4 32C1                       		move.w	d1,(a1)+
000015B6 51CA FFFC                  		dbf	d2,loc_177E
000015BA 60B8                       		bra.s	loc_173E
000015BC                            ; ===========================================================================
000015BC                            
000015BC                            loc_1786:				; XREF: loc_17B4
000015BC 6100 0000                  		bsr.w	loc_17DC
000015C0                            
000015C0                            loc_178A:
000015C0 32C1                       		move.w	d1,(a1)+
000015C2 5241                       		addq.w	#1,d1
000015C4 51CA FFFA                  		dbf	d2,loc_178A
000015C8 60AA                       		bra.s	loc_173E
000015CA                            ; ===========================================================================
000015CA                            
000015CA                            loc_1794:				; XREF: loc_17B4
000015CA 6100 0000                  		bsr.w	loc_17DC
000015CE                            
000015CE                            loc_1798:
000015CE 32C1                       		move.w	d1,(a1)+
000015D0 5341                       		subq.w	#1,d1
000015D2 51CA FFFA                  		dbf	d2,loc_1798
000015D6 609C                       		bra.s	loc_173E
000015D8                            ; ===========================================================================
000015D8                            
000015D8                            loc_17A2:				; XREF: loc_17B4
000015D8 0C42 000F                  		cmpi.w	#$F,d2
000015DC 6700                       		beq.s	loc_17C4
000015DE                            
000015DE                            loc_17A8:
000015DE 6100 0000                  		bsr.w	loc_17DC
000015E2 32C1                       		move.w	d1,(a1)+
000015E4 51CA FFF8                  		dbf	d2,loc_17A8
000015E8 608A                       		bra.s	loc_173E
000015EA                            ; ===========================================================================
000015EA                            
000015EA                            loc_17B4:				; XREF: EniDec
000015EA 60B2                       		bra.s	loc_1768
000015EC                            ; ===========================================================================
000015EC 60B0                       		bra.s	loc_1768
000015EE                            ; ===========================================================================
000015EE 60B8                       		bra.s	loc_1772
000015F0                            ; ===========================================================================
000015F0 60B6                       		bra.s	loc_1772
000015F2                            ; ===========================================================================
000015F2 60BC                       		bra.s	loc_177A
000015F4                            ; ===========================================================================
000015F4 60C6                       		bra.s	loc_1786
000015F6                            ; ===========================================================================
000015F6 60D2                       		bra.s	loc_1794
000015F8                            ; ===========================================================================
000015F8 60DE                       		bra.s	loc_17A2
000015FA                            ; ===========================================================================
000015FA                            
000015FA                            loc_17C4:				; XREF: loc_17A2
000015FA 5348                       		subq.w	#1,a0
000015FC 0C46 0010                  		cmpi.w	#$10,d6
00001600 6600                       		bne.s	loc_17CE
00001602 5348                       		subq.w	#1,a0
00001604                            
00001604                            loc_17CE:
00001604 3008                       		move.w	a0,d0
00001606 E248                       		lsr.w	#1,d0
00001608 6400                       		bcc.s	loc_17D6
0000160A 5248                       		addq.w	#1,a0
0000160C                            
0000160C                            loc_17D6:
0000160C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001610 4E75                       		rts	
00001612                            ; ===========================================================================
00001612                            
00001612                            loc_17DC:				; XREF: loc_17A2
00001612 360B                       		move.w	a3,d3
00001614 1204                       		move.b	d4,d1
00001616 D201                       		add.b	d1,d1
00001618 6400                       		bcc.s	loc_17EE
0000161A 5346                       		subq.w	#1,d6
0000161C 0D05                       		btst	d6,d5
0000161E 6700                       		beq.s	loc_17EE
00001620 0043 8000                  		ori.w	#-$8000,d3
00001624                            
00001624                            loc_17EE:
00001624 D201                       		add.b	d1,d1
00001626 6400                       		bcc.s	loc_17FC
00001628 5346                       		subq.w	#1,d6
0000162A 0D05                       		btst	d6,d5
0000162C 6700                       		beq.s	loc_17FC
0000162E 0643 4000                  		addi.w	#$4000,d3
00001632                            
00001632                            loc_17FC:
00001632 D201                       		add.b	d1,d1
00001634 6400                       		bcc.s	loc_180A
00001636 5346                       		subq.w	#1,d6
00001638 0D05                       		btst	d6,d5
0000163A 6700                       		beq.s	loc_180A
0000163C 0643 2000                  		addi.w	#$2000,d3
00001640                            
00001640                            loc_180A:
00001640 D201                       		add.b	d1,d1
00001642 6400                       		bcc.s	loc_1818
00001644 5346                       		subq.w	#1,d6
00001646 0D05                       		btst	d6,d5
00001648 6700                       		beq.s	loc_1818
0000164A 0043 1000                  		ori.w	#$1000,d3
0000164E                            
0000164E                            loc_1818:
0000164E D201                       		add.b	d1,d1
00001650 6400                       		bcc.s	loc_1826
00001652 5346                       		subq.w	#1,d6
00001654 0D05                       		btst	d6,d5
00001656 6700                       		beq.s	loc_1826
00001658 0043 0800                  		ori.w	#$800,d3
0000165C                            
0000165C                            loc_1826:
0000165C 3205                       		move.w	d5,d1
0000165E 3E06                       		move.w	d6,d7
00001660 9E4D                       		sub.w	a5,d7
00001662 6400                       		bcc.s	loc_1856
00001664 3C07                       		move.w	d7,d6
00001666 0646 0010                  		addi.w	#$10,d6
0000166A 4447                       		neg.w	d7
0000166C EF69                       		lsl.w	d7,d1
0000166E 1A10                       		move.b	(a0),d5
00001670 EF3D                       		rol.b	d7,d5
00001672 DE47                       		add.w	d7,d7
00001674 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001678 D245                       		add.w	d5,d1
0000167A                            
0000167A                            loc_1844:				; XREF: loc_1868
0000167A 300D                       		move.w	a5,d0
0000167C D040                       		add.w	d0,d0
0000167E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001682 D243                       		add.w	d3,d1
00001684 1A18                       		move.b	(a0)+,d5
00001686 E14D                       		lsl.w	#8,d5
00001688 1A18                       		move.b	(a0)+,d5
0000168A 4E75                       		rts	
0000168C                            ; ===========================================================================
0000168C                            
0000168C                            loc_1856:				; XREF: loc_1826
0000168C 6700                       		beq.s	loc_1868
0000168E EE69                       		lsr.w	d7,d1
00001690 300D                       		move.w	a5,d0
00001692 D040                       		add.w	d0,d0
00001694 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001698 D243                       		add.w	d3,d1
0000169A 300D                       		move.w	a5,d0
0000169C 6000                       		bra.s	sub_188C
0000169E                            ; ===========================================================================
0000169E                            
0000169E                            loc_1868:				; XREF: loc_1856
0000169E 7C10                       		moveq	#$10,d6
000016A0                            
000016A0                            loc_186A:
000016A0 60D8                       		bra.s	loc_1844
000016A2                            ; ===========================================================================
000016A2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000016B8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000016C2                            
000016C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C2                            
000016C2                            
000016C2                            sub_188C:				; XREF: EniDec
000016C2 9C40                       		sub.w	d0,d6
000016C4 0C46 0009                  		cmpi.w	#9,d6
000016C8 6400                       		bcc.s	locret_189A
000016CA 5046                       		addq.w	#8,d6
000016CC E145                       		asl.w	#8,d5
000016CE 1A18                       		move.b	(a0)+,d5
000016D0                            
000016D0                            locret_189A:
000016D0 4E75                       		rts	
000016D2                            ; End of function sub_188C
000016D2                            
000016D2                            ; ---------------------------------------------------------------------------
000016D2                            ; Kosinski decompression algorithm
000016D2                            ; ---------------------------------------------------------------------------
000016D2                            
000016D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016D2                            
000016D2                            
000016D2                            KosDec:
000016D2                            
000016D2 =FFFFFFFE                  var_2		= -2
000016D2 =FFFFFFFF                  var_1		= -1
000016D2                            
000016D2 558F                       		subq.l	#2,sp
000016D4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000016D8 1E98                       		move.b	(a0)+,(sp)
000016DA 3A17                       		move.w	(sp),d5
000016DC 780F                       		moveq	#$F,d4
000016DE                            
000016DE                            loc_18A8:
000016DE E24D                       		lsr.w	#1,d5
000016E0 40C6                       		move	sr,d6
000016E2 51CC 0000                  		dbf	d4,loc_18BA
000016E6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000016EA 1E98                       		move.b	(a0)+,(sp)
000016EC 3A17                       		move.w	(sp),d5
000016EE 780F                       		moveq	#$F,d4
000016F0                            
000016F0                            loc_18BA:
000016F0 44C6                       		move	d6,ccr
000016F2 6400                       		bcc.s	loc_18C2
000016F4 12D8                       		move.b	(a0)+,(a1)+
000016F6 60E6                       		bra.s	loc_18A8
000016F8                            ; ===========================================================================
000016F8                            
000016F8                            loc_18C2:				; XREF: KosDec
000016F8 7600                       		moveq	#0,d3
000016FA E24D                       		lsr.w	#1,d5
000016FC 40C6                       		move	sr,d6
000016FE 51CC 0000                  		dbf	d4,loc_18D6
00001702 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001706 1E98                       		move.b	(a0)+,(sp)
00001708 3A17                       		move.w	(sp),d5
0000170A 780F                       		moveq	#$F,d4
0000170C                            
0000170C                            loc_18D6:
0000170C 44C6                       		move	d6,ccr
0000170E 6500                       		bcs.s	loc_1906
00001710 E24D                       		lsr.w	#1,d5
00001712 51CC 0000                  		dbf	d4,loc_18EA
00001716 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000171A 1E98                       		move.b	(a0)+,(sp)
0000171C 3A17                       		move.w	(sp),d5
0000171E 780F                       		moveq	#$F,d4
00001720                            
00001720                            loc_18EA:
00001720 E353                       		roxl.w	#1,d3
00001722 E24D                       		lsr.w	#1,d5
00001724 51CC 0000                  		dbf	d4,loc_18FC
00001728 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000172C 1E98                       		move.b	(a0)+,(sp)
0000172E 3A17                       		move.w	(sp),d5
00001730 780F                       		moveq	#$F,d4
00001732                            
00001732                            loc_18FC:
00001732 E353                       		roxl.w	#1,d3
00001734 5243                       		addq.w	#1,d3
00001736 74FF                       		moveq	#-1,d2
00001738 1418                       		move.b	(a0)+,d2
0000173A 6000                       		bra.s	loc_191C
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1906:				; XREF: loc_18C2
0000173C 1018                       		move.b	(a0)+,d0
0000173E 1218                       		move.b	(a0)+,d1
00001740 74FF                       		moveq	#-1,d2
00001742 1401                       		move.b	d1,d2
00001744 EB4A                       		lsl.w	#5,d2
00001746 1400                       		move.b	d0,d2
00001748 0241 0007                  		andi.w	#7,d1
0000174C 6700                       		beq.s	loc_1928
0000174E 1601                       		move.b	d1,d3
00001750 5243                       		addq.w	#1,d3
00001752                            
00001752                            loc_191C:
00001752 1031 2000                  		move.b	(a1,d2.w),d0
00001756 12C0                       		move.b	d0,(a1)+
00001758 51CB FFF8                  		dbf	d3,loc_191C
0000175C 6080                       		bra.s	loc_18A8
0000175E                            ; ===========================================================================
0000175E                            
0000175E                            loc_1928:				; XREF: loc_1906
0000175E 1218                       		move.b	(a0)+,d1
00001760 6700                       		beq.s	loc_1938
00001762 0C01 0001                  		cmpi.b	#1,d1
00001766 6700 FF76                  		beq.w	loc_18A8
0000176A 1601                       		move.b	d1,d3
0000176C 60E4                       		bra.s	loc_191C
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1938:				; XREF: loc_1928
0000176E 548F                       		addq.l	#2,sp
00001770 4E75                       		rts	
00001772                            ; End of function KosDec
00001772                            
00001772                            ; ---------------------------------------------------------------------------
00001772                            ; Pallet cycling routine loading subroutine
00001772                            ; ---------------------------------------------------------------------------
00001772                            
00001772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001772                            
00001772                            
00001772                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001772 7400                       		moveq	#0,d2
00001774 7000                       		moveq	#0,d0
00001776 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
0000177A D040                       		add.w	d0,d0		; multiply by 2
0000177C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001780 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001784                            ; End of function PalCycle_Load
00001784                            
00001784                            ; ===========================================================================
00001784                            ; ---------------------------------------------------------------------------
00001784                            ; Pallet cycling routines
00001784                            ; ---------------------------------------------------------------------------
00001784 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001786 0000                       		dc.w PalCycle_LZ-PalCycle
00001788 0000                       		dc.w PalCycle_MZ-PalCycle
0000178A 0000                       		dc.w PalCycle_SLZ-PalCycle
0000178C 0000                       		dc.w PalCycle_SYZ-PalCycle
0000178E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001790 0000                       		dc.w PalCycle_GHZ-PalCycle
00001792 0000                       		dc.w PalCycle_EPZ-PalCycle	; Egg Plant Zone
00001794 0000                       		dc.w PalCycle_INZ-PalCycle	; Island Nowhere
00001796                            
00001796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001796                            
00001796                            
00001796                            PalCycle_Title:
00001796                            PalCycle_GHZ:
00001796 5378 F634                  		subq.w	#1,($FFFFF634).w	; epic new palette cycling code by MarkeyJester
0000179A 6A00                       		bpl.s	locret_1990
0000179C 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000017A2 41F8 FB56                  		lea	($FFFFFB50+$06).w,a0
000017A6 43D0                       		lea	(a0),a1
000017A8 3018                       		move.w	(a0)+,d0
000017AA 3121                       		move.w	-(a1),-(a0)
000017AC 2121                       		move.l	-(a1),-(a0)
000017AE 3100                       		move.w	d0,-(a0)
000017B0                            
000017B0                            locret_1990:
000017B0 4E75                       		rts
000017B2                            
000017B2                            ; End of function PalCycle_Title
000017B2                            
000017B2                            
000017B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B2                            
000017B2                            
000017B2                            PalCycle_LZ:				; XREF: PalCycle
000017B2 5378 F634                  		subq.w	#1,($FFFFF634).w
000017B6 6A00                       		bpl.s	loc_19D8
000017B8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000017BE 3038 F632                  		move.w	($FFFFF632).w,d0
000017C2 5278 F632                  		addq.w	#1,($FFFFF632).w
000017C6 0240 0003                  		andi.w	#3,d0
000017CA E748                       		lsl.w	#3,d0
000017CC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000017D2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000017D8 6600                       		bne.s	loc_19C0
000017DA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000017E0                            
000017E0                            loc_19C0:
000017E0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000017E4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000017E8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000017EC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000017F0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000017F4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000017F8                            
000017F8                            loc_19D8:
000017F8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000017FC 0240 0007                  		andi.w	#7,d0
00001800 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001804 6700                       		beq.s	locret_1A3A
00001806 7201                       		moveq	#1,d1
00001808 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0000180C 6700                       		beq.s	loc_19F0
0000180E 4441                       		neg.w	d1
00001810                            
00001810                            loc_19F0:
00001810 3038 F650                  		move.w	($FFFFF650).w,d0
00001814 0240 0003                  		andi.w	#3,d0
00001818 D041                       		add.w	d1,d0
0000181A 0C40 0003                  		cmpi.w	#3,d0
0000181E 6500                       		bcs.s	loc_1A0A
00001820 3200                       		move.w	d0,d1
00001822 7000                       		moveq	#0,d0
00001824 4A41                       		tst.w	d1
00001826 6A00                       		bpl.s	loc_1A0A
00001828 7002                       		moveq	#2,d0
0000182A                            
0000182A                            loc_1A0A:
0000182A 31C0 F650                  		move.w	d0,($FFFFF650).w
0000182E D040                       		add.w	d0,d0
00001830 3200                       		move.w	d0,d1
00001832 D040                       		add.w	d0,d0
00001834 D041                       		add.w	d1,d0
00001836 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
0000183C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001840 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001844 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001848 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
0000184E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001852 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001856 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000185A                            
0000185A                            locret_1A3A:
0000185A 4E75                       		rts	
0000185C                            ; End of function PalCycle_LZ
0000185C                            
0000185C                            ; ===========================================================================
0000185C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001864                            ; ===========================================================================
00001864                            
00001864                            PalCycle_MZ:				; XREF: PalCycle
00001864 4E75                       		rts	
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            PalCycle_SLZ:				; XREF: PalCycle
00001866 4E75                       		rts
00001868 5378 F634                  		subq.w	#1,($FFFFF634).w
0000186C 6A00                       		bpl.s	locret_1A80
0000186E 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001874 3038 F632                  		move.w	($FFFFF632).w,d0
00001878 5240                       		addq.w	#1,d0
0000187A 0C40 0006                  		cmpi.w	#6,d0
0000187E 6500                       		bcs.s	loc_1A60
00001880 7000                       		moveq	#0,d0
00001882                            
00001882                            loc_1A60:
00001882 31C0 F632                  		move.w	d0,($FFFFF632).w
00001886 3200                       		move.w	d0,d1
00001888 D241                       		add.w	d1,d1
0000188A D041                       		add.w	d1,d0
0000188C D040                       		add.w	d0,d0
0000188E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001894 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001898 32B0 0000                  		move.w	(a0,d0.w),(a1)
0000189C 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
000018A2                            
000018A2                            locret_1A80:
000018A2 4E75                       		rts	
000018A4                            ; End of function PalCycle_SLZ
000018A4                            
000018A4                            
000018A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A4                            
000018A4                            
000018A4                            PalCycle_SYZ:				; XREF: PalCycle
000018A4 4E75                       		rts
000018A6 5378 F634                  		subq.w	#1,($FFFFF634).w
000018AA 6A00                       		bpl.s	locret_1AC6
000018AC 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000018B2 3038 F632                  		move.w	($FFFFF632).w,d0
000018B6 5278 F632                  		addq.w	#1,($FFFFF632).w
000018BA 0240 0003                  		andi.w	#3,d0
000018BE E548                       		lsl.w	#2,d0
000018C0 3200                       		move.w	d0,d1
000018C2 D040                       		add.w	d0,d0
000018C4 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
000018CA 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
000018CE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000018D2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000018D6 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
000018DC 43F8 FB76                  		lea	($FFFFFB76).w,a1
000018E0 32B0 1000                  		move.w	(a0,d1.w),(a1)
000018E4 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
000018EA                            
000018EA                            locret_1AC6:
000018EA 4E75                       		rts	
000018EC                            ; End of function PalCycle_SYZ
000018EC                            
000018EC                            
000018EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018EC                            
000018EC                            
000018EC                            PalCycle_SBZ:				; XREF: PalCycle
000018EC 4E75                       		rts
000018EE 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
000018F4 4A38 FE11                  		tst.b	($FFFFFE11).w
000018F8 6700                       		beq.s	loc_1ADA
000018FA 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001900                            
00001900                            loc_1ADA:
00001900 43F8 F650                  		lea	($FFFFF650).w,a1
00001904 321A                       		move.w	(a2)+,d1
00001906                            
00001906                            loc_1AE0:
00001906 5311                       		subq.b	#1,(a1)
00001908 6B00                       		bmi.s	loc_1AEA
0000190A 5489                       		addq.l	#2,a1
0000190C 5C8A                       		addq.l	#6,a2
0000190E 6000                       		bra.s	loc_1B06
00001910                            ; ===========================================================================
00001910                            
00001910                            loc_1AEA:				; XREF: PalCycle_SBZ
00001910 12DA                       		move.b	(a2)+,(a1)+
00001912 1011                       		move.b	(a1),d0
00001914 5200                       		addq.b	#1,d0
00001916 B01A                       		cmp.b	(a2)+,d0
00001918 6500                       		bcs.s	loc_1AF6
0000191A 7000                       		moveq	#0,d0
0000191C                            
0000191C                            loc_1AF6:
0000191C 12C0                       		move.b	d0,(a1)+
0000191E 0240 000F                  		andi.w	#$F,d0
00001922 D040                       		add.w	d0,d0
00001924 305A                       		movea.w	(a2)+,a0
00001926 365A                       		movea.w	(a2)+,a3
00001928 36B0 0000                  		move.w	(a0,d0.w),(a3)
0000192C                            
0000192C                            loc_1B06:				; XREF: PalCycle_SBZ
0000192C 51C9 FFD8                  		dbf	d1,loc_1AE0
00001930 5378 F634                  		subq.w	#1,($FFFFF634).w
00001934 6A00                       		bpl.s	locret_1B64
00001936 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
0000193C 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001942 4A38 FE11                  		tst.b	($FFFFFE11).w
00001946 6700                       		beq.s	loc_1B2E
00001948 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
0000194E 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001954                            
00001954                            loc_1B2E:
00001954 72FF                       		moveq	#-1,d1
00001956 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0000195A 6700                       		beq.s	loc_1B38
0000195C 4441                       		neg.w	d1
0000195E                            
0000195E                            loc_1B38:
0000195E 3038 F632                  		move.w	($FFFFF632).w,d0
00001962 0240 0003                  		andi.w	#3,d0
00001966 D041                       		add.w	d1,d0
00001968 0C40 0003                  		cmpi.w	#3,d0
0000196C 6500                       		bcs.s	loc_1B52
0000196E 3200                       		move.w	d0,d1
00001970 7000                       		moveq	#0,d0
00001972 4A41                       		tst.w	d1
00001974 6A00                       		bpl.s	loc_1B52
00001976 7002                       		moveq	#2,d0
00001978                            
00001978                            loc_1B52:
00001978 31C0 F632                  		move.w	d0,($FFFFF632).w
0000197C D040                       		add.w	d0,d0
0000197E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001982 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001986 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000198A                            
0000198A                            locret_1B64:
0000198A 4E75                       		rts	
0000198C                            ; End of function PalCycle_SBZ
0000198C                            
0000198C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000198C                            
0000198C                            
0000198C                            PalCycle_EPZ:				; XREF: PalCycle
0000198C 4E75                       		rts	
0000198E                            ; End of function PalCycle_ABZ
0000198E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000198E                            
0000198E                            
0000198E                            PalCycle_INZ:				; XREF: PalCycle
0000198E 4E75                       		rts	
00001990                            ; End of function PalCycle_ABZ
00001990                            
00001990                            ; ===========================================================================
00001990                            Pal_TitleCyc:	incbin	pallet\c_title.bin
000019B0                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
000019D0                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
000019F0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001A02                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001A14                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001A7C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001AA0                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001AC0                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001AD0                            
00001AD0                            Pal_SBZCycList:
00001AD0                            	include "_inc\SBZ pallet script 1.asm"
00001AD0                            ; ---------------------------------------------------------------------------
00001AD0                            ; Scrap Brain Zone 1 pallet cycling script
00001AD0                            ; ---------------------------------------------------------------------------
00001AD0 0008                       	dc.w 8			; number of entries - 1
00001AD2 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001AD4 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001AD6 FB50                       	dc.w $FB50		; RAM address
00001AD8 0D08                       	dc.b $D, 8
00001ADA 0000                       	dc.w Pal_SBZCyc2
00001ADC FB52                       	dc.w $FB52
00001ADE 0E08                       	dc.b $E, 8
00001AE0 0000                       	dc.w Pal_SBZCyc3
00001AE2 FB6E                       	dc.w $FB6E
00001AE4 0B08                       	dc.b $B, 8
00001AE6 0000                       	dc.w Pal_SBZCyc5
00001AE8 FB70                       	dc.w $FB70
00001AEA 0708                       	dc.b 7,	8
00001AEC 0000                       	dc.w Pal_SBZCyc6
00001AEE FB72                       	dc.w $FB72
00001AF0 1C10                       	dc.b $1C, $10
00001AF2 0000                       	dc.w Pal_SBZCyc7
00001AF4 FB7E                       	dc.w $FB7E
00001AF6 0303                       	dc.b 3,	3
00001AF8 0000                       	dc.w Pal_SBZCyc8
00001AFA FB78                       	dc.w $FB78
00001AFC 0303                       	dc.b 3,	3
00001AFE 0000                       	dc.w Pal_SBZCyc8+2
00001B00 FB7A                       	dc.w $FB7A
00001B02 0303                       	dc.b 3,	3
00001B04 0000                       	dc.w Pal_SBZCyc8+4
00001B06 FB7C                       	dc.w $FB7C
00001B08                            	even
00001B08                            	even
00001B08                            
00001B08                            Pal_SBZCycList2:
00001B08                            	include "_inc\SBZ pallet script 2.asm"
00001B08                            ; ---------------------------------------------------------------------------
00001B08                            ; Scrap Brain Zone 2 pallet cycling script
00001B08                            ; ---------------------------------------------------------------------------
00001B08 0006                       	dc.w 6
00001B0A 0708                       	dc.b 7,	8
00001B0C 0000                       	dc.w Pal_SBZCyc1
00001B0E FB50                       	dc.w $FB50
00001B10 0D08                       	dc.b $D, 8
00001B12 0000                       	dc.w Pal_SBZCyc2
00001B14 FB52                       	dc.w $FB52
00001B16 0908                       	dc.b 9,	8
00001B18 0000                       	dc.w Pal_SBZCyc9
00001B1A FB70                       	dc.w $FB70
00001B1C 0708                       	dc.b 7,	8
00001B1E 0000                       	dc.w Pal_SBZCyc6
00001B20 FB72                       	dc.w $FB72
00001B22 0303                       	dc.b 3,	3
00001B24 0000                       	dc.w Pal_SBZCyc8
00001B26 FB78                       	dc.w $FB78
00001B28 0303                       	dc.b 3,	3
00001B2A 0000                       	dc.w Pal_SBZCyc8+2
00001B2C FB7A                       	dc.w $FB7A
00001B2E 0303                       	dc.b 3,	3
00001B30 0000                       	dc.w Pal_SBZCyc8+4
00001B32 FB7C                       	dc.w $FB7C
00001B34                            	even
00001B34                            	even
00001B34                            
00001B34                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001B44                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001B54                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001B64                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001B70                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001B80                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001B90                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001BB0                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001BBA                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001BCA                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001BD6                            ; ---------------------------------------------------------------------------
00001BD6                            ; Subroutine to	fade out and fade in
00001BD6                            ; ---------------------------------------------------------------------------
00001BD6                            
00001BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BD6                            
00001BD6                            
00001BD6                            Pal_FadeTo:
00001BD6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001BDC                            
00001BDC                            Pal_FadeTo2:
00001BDC 7000                       		moveq	#0,d0
00001BDE 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001BE2 1038 F626                  		move.b	($FFFFF626).w,d0
00001BE6 D0C0                       		adda.w	d0,a0
00001BE8 7200                       		moveq	#0,d1
00001BEA 1038 F627                  		move.b	($FFFFF627).w,d0
00001BEE                            
00001BEE                            Pal_ToBlack:
00001BEE 30C1                       		move.w	d1,(a0)+
00001BF0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001BF4                            
00001BF4 383C 0015                  		move.w	#$15,d4
00001BF8                            
00001BF8                            loc_1DCE:
00001BF8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001BFE 6100 0000                  		bsr.w	DelayProgram
00001C02 6100                       		bsr.s	Pal_FadeIn
00001C04 6100 F81C                  		bsr.w	RunPLC_RAM
00001C08 51CC FFEE                  		dbf	d4,loc_1DCE
00001C0C 4E75                       		rts	
00001C0E                            ; End of function Pal_FadeTo
00001C0E                            
00001C0E                            ; ---------------------------------------------------------------------------
00001C0E                            ; Pallet fade-in subroutine
00001C0E                            ; ---------------------------------------------------------------------------
00001C0E                            
00001C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C0E                            
00001C0E                            
00001C0E                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001C0E 7000                       		moveq	#0,d0
00001C10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001C14 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001C18 1038 F626                  		move.b	($FFFFF626).w,d0
00001C1C D0C0                       		adda.w	d0,a0
00001C1E D2C0                       		adda.w	d0,a1
00001C20 1038 F627                  		move.b	($FFFFF627).w,d0
00001C24                            
00001C24                            loc_1DFA:
00001C24 6100                       		bsr.s	Pal_AddColor
00001C26 51C8 FFFC                  		dbf	d0,loc_1DFA
00001C2A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001C30 6600                       		bne.s	locret_1E24
00001C32 7000                       		moveq	#0,d0
00001C34 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001C38 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001C3C 1038 F626                  		move.b	($FFFFF626).w,d0
00001C40 D0C0                       		adda.w	d0,a0
00001C42 D2C0                       		adda.w	d0,a1
00001C44 1038 F627                  		move.b	($FFFFF627).w,d0
00001C48                            
00001C48                            loc_1E1E:
00001C48 6100                       		bsr.s	Pal_AddColor
00001C4A 51C8 FFFC                  		dbf	d0,loc_1E1E
00001C4E                            
00001C4E                            locret_1E24:
00001C4E 4E75                       		rts	
00001C50                            ; End of function Pal_FadeIn
00001C50                            
00001C50                            
00001C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C50                            
00001C50                            
00001C50                            Pal_AddColor:				; XREF: Pal_FadeIn
00001C50 3419                       		move.w	(a1)+,d2
00001C52 3610                       		move.w	(a0),d3
00001C54 B642                       		cmp.w	d2,d3
00001C56 6700                       		beq.s	loc_1E4E
00001C58 3203                       		move.w	d3,d1
00001C5A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001C5E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001C60 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001C62 30C1                       		move.w	d1,(a0)+	; update pallet
00001C64 4E75                       		rts	
00001C66                            ; ===========================================================================
00001C66                            
00001C66                            Pal_AddGreen:				; XREF: Pal_AddColor
00001C66 3203                       		move.w	d3,d1
00001C68 0641 0020                  		addi.w	#$20,d1		; increase green value
00001C6C B242                       		cmp.w	d2,d1
00001C6E 6200                       		bhi.s	Pal_AddRed
00001C70 30C1                       		move.w	d1,(a0)+	; update pallet
00001C72 4E75                       		rts	
00001C74                            ; ===========================================================================
00001C74                            
00001C74                            Pal_AddRed:				; XREF: Pal_AddGreen
00001C74 5458                       		addq.w	#2,(a0)+	; increase red value
00001C76 4E75                       		rts	
00001C78                            ; ===========================================================================
00001C78                            
00001C78                            loc_1E4E:				; XREF: Pal_AddColor
00001C78 5448                       		addq.w	#2,a0
00001C7A 4E75                       		rts	
00001C7C                            ; End of function Pal_AddColor
00001C7C                            
00001C7C                            
00001C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7C                            
00001C7C                            
00001C7C                            Pal_FadeFrom:
00001C7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001C82 383C 0015                  		move.w	#$15,d4
00001C86                            
00001C86                            loc_1E5C:
00001C86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001C8C 6100 0000                  		bsr.w	DelayProgram
00001C90 6100                       		bsr.s	Pal_FadeOut
00001C92 6100 F78E                  		bsr.w	RunPLC_RAM
00001C96 51CC FFEE                  		dbf	d4,loc_1E5C
00001C9A 4E75                       		rts	
00001C9C                            ; End of function Pal_FadeFrom
00001C9C                            
00001C9C                            ; ---------------------------------------------------------------------------
00001C9C                            ; Pallet fade-out subroutine
00001C9C                            ; ---------------------------------------------------------------------------
00001C9C                            
00001C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C9C                            
00001C9C                            
00001C9C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001C9C 7000                       		moveq	#0,d0
00001C9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001CA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001CA6 D0C0                       		adda.w	d0,a0
00001CA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001CAC                            
00001CAC                            loc_1E82:
00001CAC 6100                       		bsr.s	Pal_DecColor
00001CAE 51C8 FFFC                  		dbf	d0,loc_1E82
00001CB2                            
00001CB2 7000                       		moveq	#0,d0
00001CB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001CB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001CBC D0C0                       		adda.w	d0,a0
00001CBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001CC2                            
00001CC2                            loc_1E98:
00001CC2 6100                       		bsr.s	Pal_DecColor
00001CC4 51C8 FFFC                  		dbf	d0,loc_1E98
00001CC8 4E75                       		rts	
00001CCA                            ; End of function Pal_FadeOut
00001CCA                            
00001CCA                            
00001CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCA                            
00001CCA                            
00001CCA                            Pal_DecColor:				; XREF: Pal_FadeOut
00001CCA 3410                       		move.w	(a0),d2
00001CCC 6700                       		beq.s	loc_1ECC
00001CCE 3202                       		move.w	d2,d1
00001CD0 0241 000E                  		andi.w	#$E,d1
00001CD4 6700                       		beq.s	Pal_DecGreen
00001CD6 5558                       		subq.w	#2,(a0)+	; decrease red value
00001CD8 4E75                       		rts	
00001CDA                            ; ===========================================================================
00001CDA                            
00001CDA                            Pal_DecGreen:				; XREF: Pal_DecColor
00001CDA 3202                       		move.w	d2,d1
00001CDC 0241 00E0                  		andi.w	#$E0,d1
00001CE0 6700                       		beq.s	Pal_DecBlue
00001CE2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001CE6 4E75                       		rts	
00001CE8                            ; ===========================================================================
00001CE8                            
00001CE8                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001CE8 3202                       		move.w	d2,d1
00001CEA 0241 0E00                  		andi.w	#$E00,d1
00001CEE 6700                       		beq.s	loc_1ECC
00001CF0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001CF4 4E75                       		rts	
00001CF6                            ; ===========================================================================
00001CF6                            
00001CF6                            loc_1ECC:				; XREF: Pal_DecColor
00001CF6 5448                       		addq.w	#2,a0
00001CF8 4E75                       		rts	
00001CFA                            ; End of function Pal_DecColor
00001CFA                            
00001CFA                            ; ---------------------------------------------------------------------------
00001CFA                            ; Subroutine to	fill the pallet	with white (special stage)
00001CFA                            ; ---------------------------------------------------------------------------
00001CFA                            
00001CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CFA                            
00001CFA                            
00001CFA                            Pal_MakeWhite:				; XREF: SpecialStage
00001CFA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001D00 7000                       		moveq	#0,d0
00001D02 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D06 1038 F626                  		move.b	($FFFFF626).w,d0
00001D0A D0C0                       		adda.w	d0,a0
00001D0C 323C 0EEE                  		move.w	#$EEE,d1
00001D10 1038 F627                  		move.b	($FFFFF627).w,d0
00001D14                            
00001D14                            PalWhite_Loop:
00001D14 30C1                       		move.w	d1,(a0)+
00001D16 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001D1A 383C 0015                  		move.w	#$15,d4
00001D1E                            
00001D1E                            loc_1EF4:
00001D1E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D24 6100 0000                  		bsr.w	DelayProgram
00001D28 6100                       		bsr.s	Pal_WhiteToBlack
00001D2A 6100 F6F6                  		bsr.w	RunPLC_RAM
00001D2E 51CC FFEE                  		dbf	d4,loc_1EF4
00001D32 4E75                       		rts	
00001D34                            ; End of function Pal_MakeWhite
00001D34                            
00001D34                            
00001D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D34                            
00001D34                            
00001D34                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001D34 7000                       		moveq	#0,d0
00001D36 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D3A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001D3E 1038 F626                  		move.b	($FFFFF626).w,d0
00001D42 D0C0                       		adda.w	d0,a0
00001D44 D2C0                       		adda.w	d0,a1
00001D46 1038 F627                  		move.b	($FFFFF627).w,d0
00001D4A                            
00001D4A                            loc_1F20:
00001D4A 6100                       		bsr.s	Pal_DecColor2
00001D4C 51C8 FFFC                  		dbf	d0,loc_1F20
00001D50                            
00001D50 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001D56 6600                       		bne.s	locret_1F4A
00001D58 7000                       		moveq	#0,d0
00001D5A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D5E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001D62 1038 F626                  		move.b	($FFFFF626).w,d0
00001D66 D0C0                       		adda.w	d0,a0
00001D68 D2C0                       		adda.w	d0,a1
00001D6A 1038 F627                  		move.b	($FFFFF627).w,d0
00001D6E                            
00001D6E                            loc_1F44:
00001D6E 6100                       		bsr.s	Pal_DecColor2
00001D70 51C8 FFFC                  		dbf	d0,loc_1F44
00001D74                            
00001D74                            locret_1F4A:
00001D74 4E75                       		rts	
00001D76                            ; End of function Pal_WhiteToBlack
00001D76                            
00001D76                            
00001D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D76                            
00001D76                            
00001D76                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001D76 3419                       		move.w	(a1)+,d2
00001D78 3610                       		move.w	(a0),d3
00001D7A B642                       		cmp.w	d2,d3
00001D7C 6700                       		beq.s	loc_1F78
00001D7E 3203                       		move.w	d3,d1
00001D80 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001D84 6500                       		bcs.s	loc_1F64
00001D86 B242                       		cmp.w	d2,d1
00001D88 6500                       		bcs.s	loc_1F64
00001D8A 30C1                       		move.w	d1,(a0)+
00001D8C 4E75                       		rts	
00001D8E                            ; ===========================================================================
00001D8E                            
00001D8E                            loc_1F64:				; XREF: Pal_DecColor2
00001D8E 3203                       		move.w	d3,d1
00001D90 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001D94 6500                       		bcs.s	loc_1F74
00001D96 B242                       		cmp.w	d2,d1
00001D98 6500                       		bcs.s	loc_1F74
00001D9A 30C1                       		move.w	d1,(a0)+
00001D9C 4E75                       		rts	
00001D9E                            ; ===========================================================================
00001D9E                            
00001D9E                            loc_1F74:				; XREF: loc_1F64
00001D9E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001DA0 4E75                       		rts	
00001DA2                            ; ===========================================================================
00001DA2                            
00001DA2                            loc_1F78:				; XREF: Pal_DecColor2
00001DA2 5448                       		addq.w	#2,a0
00001DA4 4E75                       		rts	
00001DA6                            ; End of function Pal_DecColor2
00001DA6                            
00001DA6                            ; ---------------------------------------------------------------------------
00001DA6                            ; Subroutine to	make a white flash when	you enter a special stage
00001DA6                            ; ---------------------------------------------------------------------------
00001DA6                            
00001DA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA6                            
00001DA6                            
00001DA6                            Pal_MakeFlash:				; XREF: SpecialStage
00001DA6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DAC 383C 0015                  		move.w	#$15,d4
00001DB0                            
00001DB0                            loc_1F86:
00001DB0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DB6 6100 0000                  		bsr.w	DelayProgram
00001DBA 6100                       		bsr.s	Pal_ToWhite
00001DBC 6100 F664                  		bsr.w	RunPLC_RAM
00001DC0 51CC FFEE                  		dbf	d4,loc_1F86
00001DC4 4E75                       		rts	
00001DC6                            ; End of function Pal_MakeFlash
00001DC6                            
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001DC6 7000                       		moveq	#0,d0
00001DC8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DCC 1038 F626                  		move.b	($FFFFF626).w,d0
00001DD0 D0C0                       		adda.w	d0,a0
00001DD2 1038 F627                  		move.b	($FFFFF627).w,d0
00001DD6                            
00001DD6                            loc_1FAC:
00001DD6 6100                       		bsr.s	Pal_AddColor2
00001DD8 51C8 FFFC                  		dbf	d0,loc_1FAC
00001DDC 7000                       		moveq	#0,d0
00001DDE 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DE2 1038 F626                  		move.b	($FFFFF626).w,d0
00001DE6 D0C0                       		adda.w	d0,a0
00001DE8 1038 F627                  		move.b	($FFFFF627).w,d0
00001DEC                            
00001DEC                            loc_1FC2:
00001DEC 6100                       		bsr.s	Pal_AddColor2
00001DEE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001DF2 4E75                       		rts	
00001DF4                            ; End of function Pal_ToWhite
00001DF4                            
00001DF4                            
00001DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DF4                            
00001DF4                            
00001DF4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001DF4 3410                       		move.w	(a0),d2
00001DF6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001DFA 6700                       		beq.s	loc_2006
00001DFC 3202                       		move.w	d2,d1
00001DFE 0241 000E                  		andi.w	#$E,d1
00001E02 0C41 000E                  		cmpi.w	#$E,d1
00001E06 6700                       		beq.s	loc_1FE2
00001E08 5458                       		addq.w	#2,(a0)+	; increase red value
00001E0A 4E75                       		rts	
00001E0C                            ; ===========================================================================
00001E0C                            
00001E0C                            loc_1FE2:				; XREF: Pal_AddColor2
00001E0C 3202                       		move.w	d2,d1
00001E0E 0241 00E0                  		andi.w	#$E0,d1
00001E12 0C41 00E0                  		cmpi.w	#$E0,d1
00001E16 6700                       		beq.s	loc_1FF4
00001E18 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001E1C 4E75                       		rts	
00001E1E                            ; ===========================================================================
00001E1E                            
00001E1E                            loc_1FF4:				; XREF: loc_1FE2
00001E1E 3202                       		move.w	d2,d1
00001E20 0241 0E00                  		andi.w	#$E00,d1
00001E24 0C41 0E00                  		cmpi.w	#$E00,d1
00001E28 6700                       		beq.s	loc_2006
00001E2A 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001E2E 4E75                       		rts	
00001E30                            ; ===========================================================================
00001E30                            
00001E30                            loc_2006:				; XREF: Pal_AddColor2
00001E30 5448                       		addq.w	#2,a0
00001E32 4E75                       		rts	
00001E34                            ; End of function Pal_AddColor2
00001E34                            
00001E34                            ; ---------------------------------------------------------------------------
00001E34                            ; Pallet cycling routine - Sega	logo
00001E34                            ; ---------------------------------------------------------------------------
00001E34                            
00001E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E34                            
00001E34                            
00001E34                            PalCycle_Sega:				; XREF: SegaScreen
00001E34 4A38 F635                  		tst.b	($FFFFF635).w
00001E38 6600                       		bne.s	loc_206A
00001E3A 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001E3E 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001E44 7205                       		moveq	#5,d1
00001E46 3038 F632                  		move.w	($FFFFF632).w,d0
00001E4A                            
00001E4A                            loc_2020:
00001E4A 6A00                       		bpl.s	loc_202A
00001E4C 5448                       		addq.w	#2,a0
00001E4E 5341                       		subq.w	#1,d1
00001E50 5440                       		addq.w	#2,d0
00001E52 60F6                       		bra.s	loc_2020
00001E54                            ; ===========================================================================
00001E54                            
00001E54                            loc_202A:				; XREF: PalCycle_Sega
00001E54 3400                       		move.w	d0,d2
00001E56 0242 001E                  		andi.w	#$1E,d2
00001E5A 6600                       		bne.s	loc_2034
00001E5C 5440                       		addq.w	#2,d0
00001E5E                            
00001E5E                            loc_2034:
00001E5E 0C40 0060                  		cmpi.w	#$60,d0
00001E62 6400                       		bcc.s	loc_203E
00001E64 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001E68                            
00001E68                            loc_203E:
00001E68 5440                       		addq.w	#2,d0
00001E6A 51C9 FFE8                  		dbf	d1,loc_202A
00001E6E 3038 F632                  		move.w	($FFFFF632).w,d0
00001E72 5440                       		addq.w	#2,d0
00001E74 3400                       		move.w	d0,d2
00001E76 0242 001E                  		andi.w	#$1E,d2
00001E7A 6600                       		bne.s	loc_2054
00001E7C 5440                       		addq.w	#2,d0
00001E7E                            
00001E7E                            loc_2054:
00001E7E 0C40 0064                  		cmpi.w	#$64,d0
00001E82 6D00                       		blt.s	loc_2062
00001E84 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00001E8A 70F4                       		moveq	#-$C,d0
00001E8C                            
00001E8C                            loc_2062:
00001E8C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001E90 7001                       		moveq	#1,d0
00001E92 4E75                       		rts	
00001E94                            ; ===========================================================================
00001E94                            
00001E94                            loc_206A:				; XREF: loc_202A
00001E94 5338 F634                  		subq.b	#1,($FFFFF634).w
00001E98 6A00                       		bpl.s	loc_20BC
00001E9A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00001EA0 3038 F632                  		move.w	($FFFFF632).w,d0
00001EA4 0640 000C                  		addi.w	#$C,d0
00001EA8 0C40 0030                  		cmpi.w	#$30,d0
00001EAC 6500                       		bcs.s	loc_2088
00001EAE 7000                       		moveq	#0,d0
00001EB0 4E75                       		rts	
00001EB2                            ; ===========================================================================
00001EB2                            
00001EB2                            loc_2088:				; XREF: loc_206A
00001EB2 31C0 F632                  		move.w	d0,($FFFFF632).w
00001EB6 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00001EBC 41F0 0000                  		lea	(a0,d0.w),a0
00001EC0 43F8 FB04                  		lea	($FFFFFB04).w,a1
00001EC4 22D8                       		move.l	(a0)+,(a1)+
00001EC6 22D8                       		move.l	(a0)+,(a1)+
00001EC8 3298                       		move.w	(a0)+,(a1)
00001ECA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001ECE 7000                       		moveq	#0,d0
00001ED0 722C                       		moveq	#$2C,d1
00001ED2                            
00001ED2                            loc_20A8:
00001ED2 3400                       		move.w	d0,d2
00001ED4 0242 001E                  		andi.w	#$1E,d2
00001ED8 6600                       		bne.s	loc_20B2
00001EDA 5440                       		addq.w	#2,d0
00001EDC                            
00001EDC                            loc_20B2:
00001EDC 3390 0000                  		move.w	(a0),(a1,d0.w)
00001EE0 5440                       		addq.w	#2,d0
00001EE2 51C9 FFEE                  		dbf	d1,loc_20A8
00001EE6                            
00001EE6                            loc_20BC:
00001EE6 7001                       		moveq	#1,d0
00001EE8 4E75                       		rts	
00001EEA                            ; End of function PalCycle_Sega
00001EEA                            
00001EEA                            ; ===========================================================================
00001EEA                            
00001EEA                            Pal_Sega1:	incbin	pallet\sega1.bin
00001EF6                            Pal_Sega2:	incbin	pallet\sega2.bin
00001F26                            
00001F26                            ; ---------------------------------------------------------------------------
00001F26                            ; Subroutines to load pallets
00001F26                            ; ---------------------------------------------------------------------------
00001F26                            
00001F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F26                            
00001F26                            
00001F26                            PalLoad1:
00001F26 43F9 0000 0000             		lea	(PalPointers).l,a1
00001F2C 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
00001F32 6600 0000                  		bne.w	PalLoad1_Cont	; if not, branch
00001F36 43F9 0000 0000             		lea	(PalPointers2).l,a1
00001F3C                            		
00001F3C                            PalLoad1_Cont:
00001F3C E748                       		lsl.w	#3,d0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 2459                       		movea.l	(a1)+,a2
00001F42 3659                       		movea.w	(a1)+,a3
00001F44 D6FC 0080                  		adda.w	#$80,a3
00001F48 3E19                       		move.w	(a1)+,d7
00001F4A                            
00001F4A                            loc_2110:
00001F4A 26DA                       		move.l	(a2)+,(a3)+
00001F4C 51CF FFFC                  		dbf	d7,loc_2110
00001F50 4E75                       		rts	
00001F52                            ; End of function PalLoad1
00001F52                            
00001F52                            
00001F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F52                            
00001F52                            
00001F52                            PalLoad2:
00001F52 43F9 0000 0000             		lea	(PalPointers).l,a1
00001F58 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
00001F5E 6600 0000                  		bne.w	PalLoad2_Cont	; if not, branch
00001F62 43F9 0000 0000             		lea	(PalPointers2).l,a1
00001F68                            		
00001F68                            PalLoad2_Cont:
00001F68 E748                       		lsl.w	#3,d0
00001F6A D2C0                       		adda.w	d0,a1
00001F6C 2459                       		movea.l	(a1)+,a2
00001F6E 3659                       		movea.w	(a1)+,a3
00001F70 3E19                       		move.w	(a1)+,d7
00001F72                            
00001F72                            loc_2128:
00001F72 26DA                       		move.l	(a2)+,(a3)+
00001F74 51CF FFFC                  		dbf	d7,loc_2128
00001F78 4E75                       		rts	
00001F7A                            ; End of function PalLoad2
00001F7A                            
00001F7A                            ; ---------------------------------------------------------------------------
00001F7A                            ; Underwater pallet loading subroutine
00001F7A                            ; ---------------------------------------------------------------------------
00001F7A                            
00001F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7A                            
00001F7A                            
00001F7A                            PalLoad3_Water:
00001F7A 43F9 0000 0000             		lea	(PalPointers).l,a1
00001F80 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
00001F86 6600 0000                  		bne.w	PalLoad3_Cont	; if not, branch
00001F8A 43F9 0000 0000             		lea	(PalPointers2).l,a1
00001F90                            		
00001F90                            PalLoad3_Cont:
00001F90 E748                       		lsl.w	#3,d0
00001F92 D2C0                       		adda.w	d0,a1
00001F94 2459                       		movea.l	(a1)+,a2
00001F96 3659                       		movea.w	(a1)+,a3
00001F98 96FC 0080                  		suba.w	#$80,a3
00001F9C 3E19                       		move.w	(a1)+,d7
00001F9E                            
00001F9E                            loc_2144:
00001F9E 26DA                       		move.l	(a2)+,(a3)+
00001FA0 51CF FFFC                  		dbf	d7,loc_2144
00001FA4 4E75                       		rts	
00001FA6                            ; End of function PalLoad3_Water
00001FA6                            
00001FA6                            
00001FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA6                            
00001FA6                            
00001FA6                            PalLoad4_Water:
00001FA6 43F9 0000 0000             		lea	(PalPointers).l,a1
00001FAC 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
00001FB2 6600 0000                  		bne.w	PalLoad4_Cont	; if not, branch
00001FB6 43F9 0000 0000             		lea	(PalPointers2).l,a1
00001FBC                            		
00001FBC                            PalLoad4_Cont:
00001FBC E748                       		lsl.w	#3,d0
00001FBE D2C0                       		adda.w	d0,a1
00001FC0 2459                       		movea.l	(a1)+,a2
00001FC2 3659                       		movea.w	(a1)+,a3
00001FC4 96FC 0100                  		suba.w	#$100,a3
00001FC8 3E19                       		move.w	(a1)+,d7
00001FCA                            
00001FCA                            loc_2160:
00001FCA 26DA                       		move.l	(a2)+,(a3)+
00001FCC 51CF FFFC                  		dbf	d7,loc_2160
00001FD0 4E75                       		rts	
00001FD2                            ; End of function PalLoad4_Water
00001FD2                            
00001FD2                            ; ===========================================================================
00001FD2                            ; ---------------------------------------------------------------------------
00001FD2                            ; Pallet pointers
00001FD2                            ; ---------------------------------------------------------------------------
00001FD2                            PalPointers:
00001FD2                            	include "_inc\Pallet pointers.asm"
00001FD2                            ; ---------------------------------------------------------------------------
00001FD2                            ; Pallet pointers
00001FD2                            ; ---------------------------------------------------------------------------
00001FD2 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00001FD6 FB00                       	dc.w $FB00		; RAM address
00001FD8 001F                       	dc.w $1F		; (pallet length / 2) - 1
00001FDA 0000 0000                  	dc.l Pal_Title
00001FDE FB00                       	dc.w $FB00
00001FE0 001F                       	dc.w $1F
00001FE2 0000 0000                  	dc.l Pal_LevelSel
00001FE6 FB00                       	dc.w $FB00
00001FE8 001F                       	dc.w $1F
00001FEA 0000 0000                  	dc.l Pal_Sonic
00001FEE FB00                       	dc.w $FB00
00001FF0 0007                       	dc.w 7
00001FF2 0000 0000                  	dc.l Pal_GHZ
00001FF6 FB20                       	dc.w $FB20
00001FF8 0017                       	dc.w $17
00001FFA 0000 0000                  	dc.l Pal_LZ
00001FFE FB20                       	dc.w $FB20
00002000 0017                       	dc.w $17
00002002 0000 0000                  	dc.l Pal_MZ
00002006 FB20                       	dc.w $FB20
00002008 0017                       	dc.w $17
0000200A 0000 0000                  	dc.l Pal_SLZ
0000200E FB20                       	dc.w $FB20
00002010 0017                       	dc.w $17
00002012 0000 0000                  	dc.l Pal_SYZ
00002016 FB20                       	dc.w $FB20
00002018 0017                       	dc.w $17
0000201A 0000 0000                  	dc.l Pal_SBZ1
0000201E FB20                       	dc.w $FB20
00002020 0017                       	dc.w $17
00002022 0000 0000                  	dc.l Pal_Special
00002026 FB00                       	dc.w $FB00
00002028 001F                       	dc.w $1F
0000202A 0000 0000                  	dc.l Pal_LZWater
0000202E FB00                       	dc.w $FB00
00002030 001F                       	dc.w $1F
00002032 0000 0000                  	dc.l Pal_SBZ3
00002036 FB20                       	dc.w $FB20
00002038 0017                       	dc.w $17
0000203A 0000 0000                  	dc.l Pal_SBZ3Water
0000203E FB00                       	dc.w $FB00
00002040 001F                       	dc.w $1F
00002042 0000 0000                  	dc.l Pal_SBZ2
00002046 FB20                       	dc.w $FB20
00002048 0017                       	dc.w $17
0000204A 0000 0000                  	dc.l Pal_LZSonWater
0000204E FB00                       	dc.w $FB00
00002050 0007                       	dc.w 7
00002052 0000 0000                  	dc.l Pal_SBZ3SonWat
00002056 FB00                       	dc.w $FB00
00002058 0007                       	dc.w 7
0000205A 0000 0000                  	dc.l Pal_SpeResult
0000205E FB00                       	dc.w $FB00
00002060 001F                       	dc.w $1F
00002062 0000 0000                  	dc.l Pal_SpeContinue
00002066 FB00                       	dc.w $FB00
00002068 000F                       	dc.w $F
0000206A 0000 0000                  	dc.l Pal_Ending
0000206E FB00                       	dc.w $FB00
00002070 001F                       	dc.w $1F
00002072 0000 0000                  	dc.l Pal_EPZ
00002076 FB20                       	dc.w $FB20
00002078 0017                       	dc.w $17
0000207A 0000 0000                  	dc.l Pal_INZ
0000207E FB20                       	dc.w $FB20
00002080 0017                       	dc.w $17
00002080 0017                       	dc.w $17
00002082                            PalPointers2:
00002082                            	include "_inc\Pallet pointers2.asm"
00002082                            ; ---------------------------------------------------------------------------
00002082                            ; Pallet pointers 2
00002082                            ; ---------------------------------------------------------------------------
00002082 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002086 FB00                       	dc.w $FB00		; RAM address
00002088 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000208A 0000 0000                  	dc.l Pal_Title	; 0
0000208E FB00                       	dc.w $FB00
00002090 001F                       	dc.w $1F
00002092 0000 0000                  	dc.l Pal_LevelSel ; 1
00002096 FB00                       	dc.w $FB00
00002098 001F                       	dc.w $1F
0000209A 0000 0000                  	dc.l Pal_Sonic2 ; 2
0000209E FB00                       	dc.w $FB00
000020A0 0007                       	dc.w 7
000020A2 0000 0000                  	dc.l Pal_GHZ2 ; 3
000020A6 FB20                       	dc.w $FB20
000020A8 0017                       	dc.w $17
000020AA 0000 0000                  	dc.l Pal_LZ2 ; 4
000020AE FB20                       	dc.w $FB20
000020B0 0017                       	dc.w $17
000020B2 0000 0000                  	dc.l Pal_MZ2 ; 5
000020B6 FB20                       	dc.w $FB20
000020B8 0017                       	dc.w $17
000020BA 0000 0000                  	dc.l Pal_SLZ2 ; 5
000020BE FB20                       	dc.w $FB20
000020C0 0017                       	dc.w $17
000020C2 0000 0000                  	dc.l Pal_SYZ2 ; 6
000020C6 FB20                       	dc.w $FB20
000020C8 0017                       	dc.w $17
000020CA 0000 0000                  	dc.l Pal_SBZ1 ; 7
000020CE FB20                       	dc.w $FB20
000020D0 0017                       	dc.w $17
000020D2 0000 0000                  	dc.l Pal_Special ; 8 
000020D6 FB00                       	dc.w $FB00
000020D8 001F                       	dc.w $1F
000020DA 0000 0000                  	dc.l Pal_LZWater2 ; 9
000020DE FB00                       	dc.w $FB00
000020E0 001F                       	dc.w $1F
000020E2 0000 0000                  	dc.l Pal_SBZ3 ; A
000020E6 FB20                       	dc.w $FB20
000020E8 0017                       	dc.w $17
000020EA 0000 0000                  	dc.l Pal_SBZ3Water ; B
000020EE FB00                       	dc.w $FB00
000020F0 001F                       	dc.w $1F
000020F2 0000 0000                  	dc.l Pal_SBZ2 ; C
000020F6 FB20                       	dc.w $FB20
000020F8 0017                       	dc.w $17
000020FA 0000 0000                  	dc.l Pal_LZSonWater2 ; D
000020FE FB00                       	dc.w $FB00
00002100 0007                       	dc.w 7
00002102 0000 0000                  	dc.l Pal_SBZ3SonWat ; E
00002106 FB00                       	dc.w $FB00
00002108 0007                       	dc.w 7
0000210A 0000 0000                  	dc.l Pal_SpeResult ; F
0000210E FB00                       	dc.w $FB00
00002110 001F                       	dc.w $1F
00002112 0000 0000                  	dc.l Pal_SpeContinue ; 10
00002116 FB00                       	dc.w $FB00
00002118 000F                       	dc.w $F
0000211A 0000 0000                  	dc.l Pal_Ending ; 11
0000211E FB00                       	dc.w $FB00
00002120 001F                       	dc.w $1F
00002122 0000 0000                  	dc.l Pal_EPZ2
00002126 FB20                       	dc.w $FB20
00002128 0017                       	dc.w $17
0000212A 0000 0000                  	dc.l Pal_INZ2
0000212E FB20                       	dc.w $FB20
00002130 0017                       	dc.w $17
00002130 0017                       	dc.w $17
00002132                            ; ---------------------------------------------------------------------------
00002132                            ; Pallet data
00002132                            ; ---------------------------------------------------------------------------
00002132                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000021B2                            Pal_Title:	incbin	pallet\title.bin
00002232                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000022B2                            Pal_Sonic:	incbin	pallet\sonic.bin
000022D2                            Pal_Sonic2:	incbin	pallet\sonic2.bin
000022F2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002352                            Pal_GHZ2:	incbin	pallet\ghz2.bin
000023D2                            Pal_LZ:		incbin	pallet\lz.bin
00002432                            Pal_LZ2:		incbin	pallet\lz2.bin
00002492                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002512                            Pal_LZWater2:	incbin	pallet\lz2_uw.bin	; LZ underwater pallets
00002592                            Pal_MZ:		incbin	pallet\mz.bin
000025F2                            Pal_MZ2:		incbin	pallet\mz2.bin
00002652                            Pal_SLZ:	incbin	pallet\slz.bin
000026B2                            Pal_SLZ2:	incbin	pallet\slz2.bin
00002712                            Pal_SYZ:	incbin	pallet\syz.bin
00002772                            Pal_SYZ2:	incbin	pallet\syz2.bin
000027D2                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002832                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002892                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002912                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002972                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000029F2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A12                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00002A32                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A52                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AD2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B12                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002B92                            Pal_Peepee:	incbin	pallet\pee.bin
00002BB2                            Pal_EPZ:	incbin	pallet\epz.bin
00002C12                            Pal_EPZ2:	incbin	pallet\epz2.bin
00002C72                            Pal_INZ:	incbin	pallet\inz.bin
00002CD2                            Pal_INZ2:	incbin	pallet\inz2.bin
00002D32                            
00002D32                            ; ---------------------------------------------------------------------------
00002D32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D32                            ; ---------------------------------------------------------------------------
00002D32                            
00002D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D32                            
00002D32                            
00002D32                            DelayProgram:				; XREF: PauseGame
00002D32 46FC 2300                  		move	#$2300,sr
00002D36                            
00002D36                            loc_29AC:
00002D36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D3A 66FA                       		bne.s	loc_29AC
00002D3C 4E75                       		rts	
00002D3E                            ; End of function DelayProgram
00002D3E                            
00002D3E                            ; ---------------------------------------------------------------------------
00002D3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002D3E                            ; ---------------------------------------------------------------------------
00002D3E                            
00002D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D3E                            
00002D3E                            
00002D3E                            RandomNumber:
00002D3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002D42 6600                       		bne.s	loc_29C0
00002D44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D4A                            
00002D4A                            loc_29C0:
00002D4A 2001                       		move.l	d1,d0
00002D4C E581                       		asl.l	#2,d1
00002D4E D280                       		add.l	d0,d1
00002D50 E781                       		asl.l	#3,d1
00002D52 D280                       		add.l	d0,d1
00002D54 3001                       		move.w	d1,d0
00002D56 4841                       		swap	d1
00002D58 D041                       		add.w	d1,d0
00002D5A 3200                       		move.w	d0,d1
00002D5C 4841                       		swap	d1
00002D5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D62 4E75                       		rts	
00002D64                            ; End of function RandomNumber
00002D64                            
00002D64                            
00002D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D64                            
00002D64                            
00002D64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D64 0240 00FF                  		andi.w	#$FF,d0
00002D68 D040                       		add.w	d0,d0
00002D6A 0640 0080                  		addi.w	#$80,d0
00002D6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D72 0440 0080                  		subi.w	#$80,d0
00002D76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D7A 4E75                       		rts	
00002D7C                            ; End of function CalcSine
00002D7C                            
00002D7C                            ; ===========================================================================
00002D7C                            
00002D7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002FFC                            
00002FFC                            ; ===========================================================================
00002FFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00003000 3200                       		move.w	d0,d1
00003002 4841                       		swap	d1
00003004 7000                       		moveq	#0,d0
00003006 3200                       		move.w	d0,d1
00003008 7407                       		moveq	#7,d2
0000300A                            
0000300A                            loc_2C80:
0000300A E599                       		rol.l	#2,d1
0000300C D040                       		add.w	d0,d0
0000300E 5240                       		addq.w	#1,d0
00003010 9240                       		sub.w	d0,d1
00003012 6400                       		bcc.s	loc_2C9A
00003014 D240                       		add.w	d0,d1
00003016 5340                       		subq.w	#1,d0
00003018 51CA FFF0                  		dbf	d2,loc_2C80
0000301C E248                       		lsr.w	#1,d0
0000301E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003022 4E75                       		rts	
00003024                            ; ===========================================================================
00003024                            
00003024                            loc_2C9A:
00003024 5240                       		addq.w	#1,d0
00003026 51CA FFE2                  		dbf	d2,loc_2C80
0000302A E248                       		lsr.w	#1,d0
0000302C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003030 4E75                       		rts	
00003032                            
00003032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003032                            
00003032                            
00003032                            CalcAngle:
00003032 48E7 1800                  		movem.l	d3-d4,-(sp)
00003036 7600                       		moveq	#0,d3
00003038 7800                       		moveq	#0,d4
0000303A 3601                       		move.w	d1,d3
0000303C 3802                       		move.w	d2,d4
0000303E 8843                       		or.w	d3,d4
00003040 6700                       		beq.s	loc_2D04
00003042 3802                       		move.w	d2,d4
00003044 4A43                       		tst.w	d3
00003046 6A00 0000                  		bpl.w	loc_2CC2
0000304A 4443                       		neg.w	d3
0000304C                            
0000304C                            loc_2CC2:
0000304C 4A44                       		tst.w	d4
0000304E 6A00 0000                  		bpl.w	loc_2CCA
00003052 4444                       		neg.w	d4
00003054                            
00003054                            loc_2CCA:
00003054 B843                       		cmp.w	d3,d4
00003056 6400 0000                  		bcc.w	loc_2CDC
0000305A E18C                       		lsl.l	#8,d4
0000305C 88C3                       		divu.w	d3,d4
0000305E 7000                       		moveq	#0,d0
00003060 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003064 6000                       		bra.s	loc_2CE6
00003066                            ; ===========================================================================
00003066                            
00003066                            loc_2CDC:				; XREF: CalcAngle
00003066 E18B                       		lsl.l	#8,d3
00003068 86C4                       		divu.w	d4,d3
0000306A 7040                       		moveq	#$40,d0
0000306C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003070                            
00003070                            loc_2CE6:
00003070 4A41                       		tst.w	d1
00003072 6A00 0000                  		bpl.w	loc_2CF2
00003076 4440                       		neg.w	d0
00003078 0640 0080                  		addi.w	#$80,d0
0000307C                            
0000307C                            loc_2CF2:
0000307C 4A42                       		tst.w	d2
0000307E 6A00 0000                  		bpl.w	loc_2CFE
00003082 4440                       		neg.w	d0
00003084 0640 0100                  		addi.w	#$100,d0
00003088                            
00003088                            loc_2CFE:
00003088 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000308C 4E75                       		rts	
0000308E                            ; ===========================================================================
0000308E                            
0000308E                            loc_2D04:				; XREF: CalcAngle
0000308E 303C 0040                  		move.w	#$40,d0
00003092 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003096 4E75                       		rts	
00003098                            ; End of function CalcAngle
00003098                            
00003098                            ; ===========================================================================
00003098                            
00003098                            Angle_Data:	incbin	misc\angles.bin
0000319A                            
0000319A                            ; ===========================================================================
0000319A                            
0000319A                            ; ---------------------------------------------------------------------------
0000319A                            ; Sega screen
0000319A                            ; ---------------------------------------------------------------------------
0000319A                            
0000319A                            SegaScreen:				; XREF: GameModeArray
0000319A 103C 00E4                  		move.b	#$E4,d0
0000319E 6100 E014                  		bsr.w	PlaySound_Special ; stop music
000031A2 6100 E270                  		bsr.w	ClearPLC
000031A6 6100 EAD4                  		bsr.w	Pal_FadeFrom
000031AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031B0 3CBC 8004                  		move.w	#$8004,(a6)
000031B4 3CBC 8230                  		move.w	#$8230,(a6)
000031B8 3CBC 8407                  		move.w	#$8407,(a6)
000031BC 3CBC 8700                  		move.w	#$8700,(a6)
000031C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000031C4 4238 F64E                  		clr.b	($FFFFF64E).w
000031C8 46FC 2700                  		move	#$2700,sr
000031CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D0 0200 00BF                  		andi.b	#$BF,d0
000031D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000031DA 6100 DEDC                  		bsr.w	ClearScreen
000031DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031EE 6100 E068                  		bsr.w	NemDec
000031F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031FE 303C 0000                  		move.w	#0,d0
00003202 6100 E350                  		bsr.w	EniDec
00003206 43F9 00FF 0000             		lea	($FF0000).l,a1
0000320C 203C 6510 0003             		move.l	#$65100003,d0
00003212 7217                       		moveq	#$17,d1
00003214 7407                       		moveq	#7,d2
00003216 6100 E020                  		bsr.w	ShowVDPGraphics
0000321A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003220 203C 4000 0003             		move.l	#$40000003,d0
00003226 7227                       		moveq	#$27,d1
00003228 741B                       		moveq	#$1B,d2
0000322A 6100 E00C                  		bsr.w	ShowVDPGraphics
0000322E 7000                       		moveq	#0,d0
00003230 6100 ED20                  		bsr.w	PalLoad2	; load Sega logo pallet
00003234 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000323A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003240 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003246 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000324C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003250 0000 0040                  		ori.b	#$40,d0
00003254 33C0 00C0 0004             		move.w	d0,($C00004).l
0000325A                            
0000325A                            Sega_WaitPallet:
0000325A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003260 6100 FAD0                  		bsr.w	DelayProgram
00003264 6100 EBCE                  		bsr.w	PalCycle_Sega
00003268 66F0                       		bne.s	Sega_WaitPallet
0000326A                            
0000326A 709B                       		moveq   #$FFFFFF9B,d0
0000326C 6100 DF1E                  		bsr.w	PlaySample ; play "PEPSIMAN sound"	sound
00003270 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003276 6100 FABA                  		bsr.w	DelayProgram
0000327A 31FC 006C F614             		move.w	#$6C,($FFFFF614).w
00003280                            
00003280                            Sega_WaitEnd:
00003280 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003286 6100 FAAA                  		bsr.w	DelayProgram
0000328A 4A78 F614                  		tst.w	($FFFFF614).w
0000328E 6700                       		beq.s	Sega_GotoTitle
00003290 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003296 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003298                            
00003298                            Sega_GotoTitle:
00003298 11FC 0020 F600             		move.b	#$20,($FFFFF600).w			; set screen mode to "UT Screen"
0000329E                            ;		rts						; return
0000329E                            
0000329E                            		include	'UTScreen.asm'	
0000329E                            ; ===========================================================================
0000329E                            ; ---------------------------------------------------------------------------
0000329E                            ; SSRG Splash Screen
0000329E                            ; ---------------------------------------------------------------------------
0000329E                            
0000329E                            SSRGScreen:
0000329E 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
000032A0 4EB8 11B4                  		jsr	PlaySound_Special			; play ID
000032A4 4EB8 1414                  		jsr	ClearPLC				; clear pattern load cues list
000032A8 4EB8 1C7C                  		jsr	Pal_FadeFrom				; fade palettes out
000032AC 4EB8 10B8                  		jsr	ClearScreen				; clear the plane mappings
000032B0 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
000032B4 7000                       		moveq	#$00,d0					; clear d0
000032B6 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
000032BA                            
000032BA                            SRG_ClearObjects:
000032BA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000032C0 6700 0000                  		beq.w	HiddenScreen	; if yes, branch
000032C4 22C0                       		move.l	d0,(a1)+
000032C6 51C9 FFF2                  		dbf	d1,SRG_ClearObjects ; fill object RAM ($D000-$EFFF) with	$0
000032CA                            
000032CA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032D4 41F9 0000 0000             		lea	(Nem_UTScreen).l,a0 ; load Japanese credits
000032DA 6100 DF7C                  		bsr.w	NemDec
000032DE                            ;		move.l	#$54C00000,($C00004).l
000032DE                            ;		lea	(Nem_CreditText).l,a0 ;	load alphabet
000032DE                            ;		bsr.w	NemDec
000032DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E4 41F9 0000 0000             		lea	(Eni_UTScreen).l,a0 ; load mappings for	Japanese credits
000032EA 303C 0000                  		move.w	#0,d0
000032EE 6100 E264                  		bsr.w	EniDec
000032F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000032F8 203C 4000 0003             		move.l	#$40000003,d0
000032FE 7227                       		moveq	#$27,d1
00003300 741B                       		moveq	#$1B,d2
00003302 6100 DF34                  		bsr.w	ShowVDPGraphics
00003306 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000330A 7000                       		moveq	#0,d0
0000330C 323C 001F                  		move.w	#$1F,d1
00003310                            
00003310                            TitlePee_ClrPallet:
00003310 22C0                       		move.l	d0,(a1)+
00003312 51C9 FFFC                  		dbf	d1,TitlePee_ClrPallet ; fill pallet with 0	(black)
00003316                            
00003316 7003                       		moveq	#3,d0		; load Sonic's pallet
00003318 6100 EC0C                  		bsr.w	PalLoad1
0000331C                            ;		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000331C                            ;		jsr	ObjectsLoad
0000331C                            ;		jsr	BuildSprites
0000331C 4EB8 1BD6                  		jsr	Pal_FadeTo				; fade palettes in
00003320 7000                       		moveq	#$00,d0					; clear d0
00003322 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
00003328 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
0000332E 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
00003334                            
00003334                            ; ---------------------------------------------------------------------------
00003334                            ; SSRG Splash Screen main loop
00003334                            ; ---------------------------------------------------------------------------
00003334                            
00003334                            ;SSRGScreen_Loop:
00003334                            ;		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
00003334                            ;		jsr	DelayProgram				; hult til V-Blank begins
00003334                            ;		addq.w	#$01,($FFFF7800).l			; increase timer
00003334                            ;		lea	($FFFFD000).w,a0			; load "S" object ram
00003334                            ;		bsr	ObjectLetters				; run "S"
00003334                            ;		lea	$40(a0),a0				; load "S" object ram
00003334                            ;		bsr	ObjectLetters				; run "S"
00003334                            ;		lea	$40(a0),a0				; load "R" object ram
00003334                            ;		bsr	ObjectLetters				; run "R"
00003334                            ;		lea	$40(a0),a0				; load "G" object ram
00003334                            ;		bsr	ObjectLetters				; run "G"
00003334                            ;		lea	$40(a0),a0				; load Square object ram
00003334                            ;		bsr	ObjectSquare				; run Square
00003334                            ;		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
00003334                            ;		bsr	ObjectSonicNeon				; run Neon Sonic
00003334                            ;		bsr	SRG_ScrollFG				; scroll the FG plane correctly
00003334                            ;		bsr	SRG_DrawFG				; draw the FG plane correctly
00003334                            ;		jsr	BuildSprites				; present all object sprites on screen
00003334                            ;		tst.b	($FFFFF605).w				; has player 1 pressed start button?
00003334                            ;		bmi	SSRGScreen_Finish			; if so, branch
00003334                            ;		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
00003334                            ;		blt	SSRGScreen_Loop				; if not, loop
00003334                            SuperMegaPoo:
00003334                            ;		moveq   #$FFFFFF9A,d0
00003334                            ;		bsr.w	PlaySample ; play "SEGA"	sound
00003334 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000333A 6100 F9F6                  		bsr.w	DelayProgram
0000333E 31FC 006C F614             		move.w	#$6C,($FFFFF614).w
00003344                            
00003344                            SSRG_WaitEnd:
00003344 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000334A 6100 F9E6                  		bsr.w	DelayProgram
0000334E 4A78 F614                  		tst.w	($FFFFF614).w
00003352 6700                       		beq.s	SSRGScreen_Finish
00003354 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000335A 67E8                       		beq.s	SSRG_WaitEnd	; if not, branch
0000335C                            
0000335C                            SSRGScreen_Finish:
0000335C 4238 FFF9                  		clr.b	($FFFFFFF9).w	; clear multiple character flag
00003360 11FC 0004 F600             		move.b	#$04,($FFFFF600).w			; set the screen mode to Title Screen
00003366 4E75                       		rts						; return
00003368                            ; ===========================================================================
00003368                            HiddenScreen:
00003368 22C0                       		move.l	d0,(a1)+
0000336A 51C9 FFFC                  		dbf	d1,HiddenScreen ; fill object RAM ($D000-$EFFF) with	$0
0000336E                            
0000336E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003378 41F9 0000 0000             		lea	(Nem_HiddenScreen).l,a0 ; load Japanese credits
0000337E 6100 DED8                  		bsr.w	NemDec
00003382                            ;		move.l	#$54C00000,($C00004).l
00003382                            ;		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003382                            ;		bsr.w	NemDec
00003382 43F9 00FF 0000             		lea	($FF0000).l,a1
00003388 41F9 0000 0000             		lea	(Eni_HiddenScreen).l,a0 ; load mappings for	Japanese credits
0000338E 303C 0000                  		move.w	#0,d0
00003392 6100 E1C0                  		bsr.w	EniDec
00003396 43F9 00FF 0000             		lea	($FF0000).l,a1
0000339C 203C 4000 0003             		move.l	#$40000003,d0
000033A2 7227                       		moveq	#$27,d1
000033A4 741B                       		moveq	#$1B,d2
000033A6 6100 DE90                  		bsr.w	ShowVDPGraphics
000033AA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033AE 7000                       		moveq	#0,d0
000033B0 323C 001F                  		move.w	#$1F,d1
000033B4 4EF8 3310                  		jmp	TitlePee_ClrPallet
000033B4 4EF8 3310                  		jmp	TitlePee_ClrPallet
000033B8                            ; ===========================================================================
000033B8                            
000033B8                            ; ---------------------------------------------------------------------------
000033B8                            ; Title	screen
000033B8                            ; ---------------------------------------------------------------------------
000033B8                            
000033B8                            TitleScreen:				; XREF: GameModeArray
000033B8 103C 00E4                  		move.b	#$E4,d0
000033BC 6100 DDF6                  		bsr.w	PlaySound_Special ; stop music
000033C0 6100 E052                  		bsr.w	ClearPLC
000033C4 6100 E8B6                  		bsr.w	Pal_FadeFrom
000033C8 46FC 2700                  		move	#$2700,sr
000033CC 6100 DD78                  		bsr.w	SoundDriverLoad
000033D0 4DF9 00C0 0004             		lea	($C00004).l,a6
000033D6 3CBC 8004                  		move.w	#$8004,(a6)
000033DA 3CBC 8230                  		move.w	#$8230,(a6)
000033DE 3CBC 8407                  		move.w	#$8407,(a6)
000033E2 3CBC 9001                  		move.w	#$9001,(a6)
000033E6 3CBC 9200                  		move.w	#$9200,(a6)
000033EA 3CBC 8B03                  		move.w	#$8B03,(a6)
000033EE 3CBC 8720                  		move.w	#$8720,(a6)
000033F2 4238 F64E                  		clr.b	($FFFFF64E).w
000033F6 6100 DCC0                  		bsr.w	ClearScreen
000033FA 43F8 D000                  		lea	($FFFFD000).w,a1
000033FE 7000                       		moveq	#0,d0
00003400 323C 07FF                  		move.w	#$7FF,d1
00003404                            
00003404                            Title_ClrObjRam:
00003404 22C0                       		move.l	d0,(a1)+
00003406 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000340A                            
0000340A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003414 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000341A 6100 DE3C                  		bsr.w	NemDec
0000341E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003428 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000342E 6100 DE28                  		bsr.w	NemDec
00003432 43F9 00FF 0000             		lea	($FF0000).l,a1
00003438 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000343E 303C 0000                  		move.w	#0,d0
00003442 6100 E110                  		bsr.w	EniDec
00003446 43F9 00FF 0000             		lea	($FF0000).l,a1
0000344C 203C 4000 0003             		move.l	#$40000003,d0
00003452 7227                       		moveq	#$27,d1
00003454 741B                       		moveq	#$1B,d2
00003456 6100 DDE0                  		bsr.w	ShowVDPGraphics
0000345A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000345E 7000                       		moveq	#0,d0
00003460 323C 001F                  		move.w	#$1F,d1
00003464                            
00003464                            Title_ClrPallet:
00003464 22C0                       		move.l	d0,(a1)+
00003466 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000346A                            
0000346A 7003                       		moveq	#3,d0		; load Sonic's pallet
0000346C 6100 EAB8                  		bsr.w	PalLoad1
00003470                            ;		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003470 4EB9 0000 0000             		jsr	ObjectsLoad
00003476 4EB9 0000 0000             		jsr	BuildSprites
0000347C 6100 E758                  		bsr.w	Pal_FadeTo
00003480 46FC 2700                  		move	#$2700,sr
00003484 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000348E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003494 6100 DDC2                  		bsr.w	NemDec
00003498 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000034A2 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000034A8 6100 DDAE                  		bsr.w	NemDec
000034AC 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000034B6 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000034BC 6100 DD9A                  		bsr.w	NemDec
000034C0 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C6 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000034CE 4BF9 0000 0534             		lea	(Art_Text).l,a5
000034D4 323C 028F                  		move.w	#$28F,d1
000034D8                            
000034D8                            Title_LoadText:
000034D8 3C9D                       		move.w	(a5)+,(a6)
000034DA 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000034DE                            
000034DE 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000034E4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000034EA 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000034F0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000034F6 31FC 0001 FE10             		move.w	#$001,($FFFFFE10).w ; set level	to 0001 (GHZ2)
000034FC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003502 6100 0000                  		bsr.w	LevelSizeLoad
00003506 6100 0000                  		bsr.w	DeformBgLayer
0000350A 43F8 B000                  		lea	($FFFFB000).w,a1
0000350E 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003514 303C 0000                  		move.w	#0,d0
00003518 6100 E03A                  		bsr.w	EniDec
0000351C 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003522 43F9 00FF 0000             		lea	($FF0000).l,a1
00003528 6100 E1A8                  		bsr.w	KosDec
0000352C 6100 0000                  		bsr.w	LevelLayoutLoad
00003530 6100 E74A                  		bsr.w	Pal_FadeFrom
00003534 46FC 2700                  		move	#$2700,sr
00003538 6100 DB7E                  		bsr.w	ClearScreen
0000353C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003542 4DF9 00C0 0000             		lea	($C00000).l,a6
00003548 47F8 F708                  		lea	($FFFFF708).w,a3
0000354C 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00003550 343C 6000                  		move.w	#$6000,d2
00003554 6100 0000                  		bsr.w	LoadTilesFromStart2
00003558 43F9 00FF 0000             		lea	($FF0000).l,a1
0000355E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003564 303C 0000                  		move.w	#0,d0
00003568 6100 DFEA                  		bsr.w	EniDec
0000356C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003572 203C 4206 0003             		move.l	#$42060003,d0
00003578 7221                       		moveq	#$21,d1
0000357A 7415                       		moveq	#$15,d2
0000357C 6100 DCBA                  		bsr.w	ShowVDPGraphics
00003580 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000358A 41F9 0000 0000             		lea	(Nem_TIT_1st).l,a0 ; load GHZ patterns
00003590 6100 DCC6                  		bsr.w	NemDec
00003594 7001                       		moveq	#1,d0		; load title screen pallet
00003596 6100 E98E                  		bsr.w	PalLoad1
0000359A 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000359E 6100 DC14                  		bsr.w	PlaySound_Special
000035A2 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000035A8 31FC 0210 F614             		move.w	#$210,($FFFFF614).w ; run title	screen for $178	frames
000035AE 43F8 D080                  		lea	($FFFFD080).w,a1
000035B2 7000                       		moveq	#0,d0
000035B4 323C 0007                  		move.w	#7,d1
000035B8                            
000035B8                            Title_ClrObjRam2:
000035B8 22C0                       		move.l	d0,(a1)+
000035BA 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000035BE                            
000035BE                            ;		move.b	#$E,($FFFFD040).w ; load big Sonic object
000035BE                            ;		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000035BE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000035C4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000035CA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000035D0 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000035D6 4EB9 0000 0000             		jsr	ObjectsLoad
000035DC                            ;		bsr.w	DeformBgLayer
000035DC 4EB9 0000 0000             		jsr	BuildSprites
000035E2 7000                       		moveq	#0,d0
000035E4 6100 DE02                  		bsr.w	LoadPLC2
000035E8 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035EE 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000035F4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000035F8 0000 0040                  		ori.b	#$40,d0
000035FC 33C0 00C0 0004             		move.w	d0,($C00004).l
00003602 6100 E5D2                  		bsr.w	Pal_FadeTo
00003606                            
00003606                            loc_317C:
00003606 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000360C 6100 F724                  		bsr.w	DelayProgram
00003610 4EB9 0000 0000             		jsr	ObjectsLoad
00003616                            ;		bsr.w	DeformBgLayer
00003616 4EB9 0000 0000             		jsr	BuildSprites
0000361C 6100 E178                  		bsr.w	PalCycle_Title
00003620 6100 DE00                  		bsr.w	RunPLC_RAM
00003624 3038 D008                  		move.w	($FFFFD008).w,d0
00003628 5440                       		addq.w	#2,d0
0000362A 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000362E 0C40 2700                  		cmpi.w	#$2700,d0	; has Sonic object passed x-position $1C00?
00003632 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003634 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000363A 4E75                       		rts	
0000363C                            ; ===========================================================================
0000363C                            
0000363C                            Title_ChkRegion:
0000363C 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003640 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003642 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003648 6000                       		bra.s	Title_EnterCheat
0000364A                            ; ===========================================================================
0000364A                            
0000364A                            Title_RegionJ:				; XREF: Title_ChkRegion
0000364A 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003650                            
00003650                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003650 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003654 D0C0                       		adda.w	d0,a0
00003656 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000365A 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000365E B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003660 6600                       		bne.s	loc_3210	; if not, branch
00003662 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003666 4A00                       		tst.b	d0
00003668 6600                       		bne.s	Title_CountC
0000366A 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
0000366E 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003672 E249                       		lsr.w	#1,d1
00003674 0241 0003                  		andi.w	#3,d1
00003678 6700                       		beq.s	Title_PlayRing
0000367A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000367E 6A00                       		bpl.s	Title_PlayRing
00003680 7201                       		moveq	#1,d1
00003682 1181 1001                  		move.b	d1,1(a0,d1.w)
00003686                            
00003686                            Title_PlayRing:
00003686 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000368C 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003690 6100 DB22                  		bsr.w	PlaySound_Special
00003694 6000                       		bra.s	Title_CountC
00003696                            ; ===========================================================================
00003696                            
00003696                            loc_3210:				; XREF: Title_EnterCheat
00003696 4A00                       		tst.b	d0
00003698 6700                       		beq.s	Title_CountC
0000369A 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000036A0 6700                       		beq.s	Title_CountC
000036A2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000036A8                            
000036A8                            Title_CountC:
000036A8 1038 F605                  		move.b	($FFFFF605).w,d0
000036AC 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000036B0 6700                       		beq.s	loc_3230	; if not, branch
000036B2 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000036B6                            
000036B6                            loc_3230:
000036B6 4A78 F614                  		tst.w	($FFFFF614).w
000036BA                            ;		beq.w	Demo
000036BA                            Title_CheckForB:					; That gay "Add new characters" guide, replace this part with actual character select screen on final
000036BA 0C38 0010 F605             		cmpi.b	#$10, ($FFFFF605).w	; has B been pressed?
000036C0 6600                       		bne.s	StartCheck		; if not, branch
000036C2                            
000036C2                            Title_SecondCharacter:
000036C2 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
000036C8 6600                       		bne.s Title_Pepsi                       ; if not, branch
000036CA 11FC 0003 FFF9             		move.b	#$03, ($FFFFFFF9).w	; set the multiple character flag to $03 (indicating Pepsiman)
000036D0 103C 00B5                  		move.b	#$B5,d0			; put value of ring sound into d0
000036D4 6100 DADE                  		bsr.w	PlaySound_Special	; jump to the subroutine that plays the sound currently in d0 ($B5, at the moment)
000036D8 4EF9 0000 0000             		jmp WhatamIdoing
000036DE                            		
000036DE                            Title_Pepsi:
000036DE 11FC 0001 FFF9             		move.b	#$01, ($FFFFFFF9).w	; set the multiple character flag to $01 (indicating Pepsi)
000036E4 103C 00B5                  		move.b	#$B5,d0			; put value of ring sound into d0
000036E8 6100 DACA                  		bsr.w	PlaySound_Special	; jump to the subroutine that plays the sound currently in d0 ($B5, at the moment)
000036EC                            
000036EC                            WhatamIdoing:
000036EC                            		
000036EC                            StartCheck:
000036EC 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000036F2 6700 FF12                  		beq.w	loc_317C	; if not, branch
000036F6                            
000036F6                            Title_ChkLevSel:
000036F6 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000036FA 6700 0000                  		beq.w	PlayLevel	; if not, play level
000036FE 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003704 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003708 7002                       		moveq	#2,d0
0000370A 6100 E846                  		bsr.w	PalLoad2	; load level select pallet
0000370E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003712 7000                       		moveq	#0,d0
00003714 323C 00DF                  		move.w	#$DF,d1
00003718                            
00003718                            Title_ClrScroll:
00003718 22C0                       		move.l	d0,(a1)+
0000371A 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000371E                            
0000371E 21C0 F616                  		move.l	d0,($FFFFF616).w
00003722 46FC 2700                  		move	#$2700,sr
00003726 4DF9 00C0 0000             		lea	($C00000).l,a6
0000372C 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003736 323C 03FF                  		move.w	#$3FF,d1
0000373A                            
0000373A                            Title_ClrVram:
0000373A 2C80                       		move.l	d0,(a6)
0000373C 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003740                            
00003740 6100 0000                  		bsr.w	LevSelTextLoad
00003744                            
00003744                            ; ---------------------------------------------------------------------------
00003744                            ; Level	Select
00003744                            ; ---------------------------------------------------------------------------
00003744                            
00003744                            LevelSelect:
00003744 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000374A 6100 F5E6                  		bsr.w	DelayProgram
0000374E 6100 0000                  		bsr.w	LevSelControls
00003752 6100 DCCE                  		bsr.w	RunPLC_RAM
00003756 4AB8 F680                  		tst.l	($FFFFF680).w
0000375A 66E8                       		bne.s	LevelSelect
0000375C 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003762 67E0                       		beq.s	LevelSelect	; if not, branch
00003764 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003768 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000376C 6600 0000                  		bne.w	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003770 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003774 0640 0080                  		addi.w	#$80,d0
00003778 2238 C60C                  		move.l ($FFFFC60C).w,d1	; move the last 4 songs played into d1
0000377C E199                       		rol.l #8,d1	; rotate d1 by 8 bits
0000377E 21C1 C60C                  		move.l d1,($FFFFC60C).w	; put the rotated d1 back there
00003782 11C0 C60F                  		move.b d0,($FFFFC60F).w	; overwrite the right-most song
00003786 0CB8 8182 8080 C60C        		cmpi.l #$81828080,($FFFFC60C).w	; did you play 91, 99, 98, 94?
0000378E 6600 0000                  		bne.w LevSel_PlaySnd	; if not, proceed normally
00003792 4EF9 0000 0000             		jmp	LevSel_SecretMusic
00003798                            		
00003798                            LevSel_SecretMusic:
00003798 11FC 0001 FE2A             		move.b #1, ($FFFFFE2A).w	; set Encore Mode on
0000379E 11FC 0005 FE57             		move.b	#5,($FFFFFE57).w	; give 5 emeralds
000037A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
000037AA 4E75                       		rts
000037AC                            
000037AC                            LevSel_NoCheat:
000037AC                            ;		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000037AC                            ;		bcs.s	LevSel_PlaySnd	; if yes, branch
000037AC                            ;		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000037AC                            ;		bcs.s	LevelSelect	; if yes, branch
000037AC                            
000037AC                            LevSel_PlaySnd:
000037AC 6100 DA06                  		bsr.w	PlaySound_Special
000037B0 4EF8 3744                  		jmp	LevelSelect
000037B4                            ; ===========================================================================
000037B4                            
000037B4                            LevSel_Ending:				; XREF: LevelSelect
000037B4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000037BA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000037C0 4E75                       		rts	
000037C2                            ; ===========================================================================
000037C2                            
000037C2                            LevSel_Credits:				; XREF: LevelSelect
000037C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000037C8 103C 0091                  		move.b	#$91,d0
000037CC 6100 D9E6                  		bsr.w	PlaySound_Special ; play credits music
000037D0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000037D6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000037DC 6600                       		bne.s	NobodyCame	; if no, branch				
000037DE 11FC 0002 FFF9             		move.b	#$02, ($FFFFFFF9).w	; set the multiple character flag to $02 (indicating Knuckles)
000037E4                            		
000037E4                            NobodyCame:
000037E4 4E75                       		rts	
000037E6                            ; ===========================================================================
000037E6                            
000037E6                            LevSel_Level_SS:			; XREF: LevelSelect
000037E6 D040                       		add.w	d0,d0
000037E8 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000037EC 6B00 FF56                  		bmi.w	LevelSelect
000037F0 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000037F4 6000                       		bra.s	LevSel_Level	; branch
000037F6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000037FC 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003800 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003806 7000                       		moveq	#0,d0
00003808 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000380C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003810 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003814 4E75                       		rts	
00003816                            ; ===========================================================================
00003816                            
00003816                            LevSel_Level:				; XREF: LevSel_Level_SS
00003816 0240 3FFF                  		andi.w	#$3FFF,d0
0000381A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000381E                            
0000381E                            PlayLevel:				; XREF: ROM:00003246j ...
0000381E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003824 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000382A 7000                       		moveq	#0,d0
0000382C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003830 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003834 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003838 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000383C                            ;		move.b	d0,($FFFFFE57).w ; clear emeralds
0000383C                            ;		move.l	d0,($FFFFFE58).w ; clear emeralds
0000383C                            ;		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000383C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003840 103C 00E0                  		move.b	#$E0,d0
00003844 6100 D96E                  		bsr.w	PlaySound_Special ; fade out music
00003848 0C38 0002 FFF9             		cmpi.b	#$02, ($FFFFFFF9).w	; is the multiple character flag set to $02 (Knuckles)?
0000384E 6600                       		bne.s PL_End ; if not, branch
00003850 709E                       		moveq   #$FFFFFF9E,d0
00003852 6100 D938                  		bsr.w	PlaySample ; play "what"
00003856                            
00003856                            PL_End:
00003856 4E75                       		rts	
00003858                            ; ===========================================================================
00003858                            ; ---------------------------------------------------------------------------
00003858                            ; Level	select - level pointers
00003858                            ; ---------------------------------------------------------------------------
00003858                            LSelectPointers:
00003858                            		incbin	misc\ls_point.bin
00003882                            		even
00003882                            ; ---------------------------------------------------------------------------
00003882                            ; Level	select codes
00003882                            ; ---------------------------------------------------------------------------
00003882                            LevelSelectCode_J:
00003882                            		incbin	misc\ls_jcode.bin
00003888                            		even
00003888                            
00003888                            LevelSelectCode_US:
00003888                            		incbin	misc\ls_ucode.bin
0000388E                            		even
0000388E                            ; ===========================================================================
0000388E                            
0000388E                            ; ---------------------------------------------------------------------------
0000388E                            ; Demo mode
0000388E                            ; ---------------------------------------------------------------------------
0000388E                            
0000388E                            Demo:					; XREF: TitleScreen
0000388E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003894                            
00003894                            loc_33B6:				; XREF: loc_33E4
00003894 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000389A 6100 F496                  		bsr.w	DelayProgram
0000389E                            ;		bsr.w	DeformBgLayer
0000389E 6100 DED2                  		bsr.w	PalCycle_Load
000038A2 6100 DB7E                  		bsr.w	RunPLC_RAM
000038A6 3038 D008                  		move.w	($FFFFD008).w,d0
000038AA 5440                       		addq.w	#2,d0
000038AC 31C0 D008                  		move.w	d0,($FFFFD008).w
000038B0 0C40 1C00                  		cmpi.w	#$1C00,d0
000038B4 6500                       		bcs.s	loc_33E4
000038B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000038BC 4E75                       		rts	
000038BE                            ; ===========================================================================
000038BE                            
000038BE                            loc_33E4:				; XREF: Demo
000038BE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000038C4 6600 FE30                  		bne.w	Title_ChkLevSel	; if yes, branch
000038C8 4A78 F614                  		tst.w	($FFFFF614).w
000038CC 6600 FFC6                  		bne.w	loc_33B6
000038D0 103C 00E0                  		move.b	#$E0,d0
000038D4 6100 D8DE                  		bsr.w	PlaySound_Special ; fade out music
000038D8 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000038DC 0240 0007                  		andi.w	#7,d0
000038E0 D040                       		add.w	d0,d0
000038E2 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000038E6 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000038EA 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000038EE 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000038F4 6500                       		bcs.s	loc_3422	; if yes, branch
000038F6 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000038FC                            
000038FC                            loc_3422:
000038FC 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003902 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003908 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000390C 6600                       		bne.s	Demo_Level	; if not, branch
0000390E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003914 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003918 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000391C                            
0000391C                            Demo_Level:
0000391C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003922 7000                       		moveq	#0,d0
00003924 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003928 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000392C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003930 4E75                       		rts	
00003932                            ; ===========================================================================
00003932                            ; ---------------------------------------------------------------------------
00003932                            ; Levels used in demos
00003932                            ; ---------------------------------------------------------------------------
00003932                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000393A                            		even
0000393A                            
0000393A                            ; ---------------------------------------------------------------------------
0000393A                            ; Subroutine to	change what you're selecting in the level select
0000393A                            ; ---------------------------------------------------------------------------
0000393A                            
0000393A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000393A                            
0000393A                            
0000393A                            LevSelControls:				; XREF: LevelSelect
0000393A 1238 F605                  		move.b	($FFFFF605).w,d1
0000393E 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003942 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003944 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003948 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000394A                            
0000394A                            LevSel_UpDown:
0000394A 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003950 1238 F604                  		move.b	($FFFFF604).w,d1
00003954 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003958 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000395A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000395E 0801 0000                  		btst	#0,d1		; is up	pressed?
00003962 6700                       		beq.s	LevSel_Down	; if not, branch
00003964 5340                       		subq.w	#1,d0		; move up 1 selection
00003966 6400                       		bcc.s	LevSel_Down
00003968 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000396A                            
0000396A                            LevSel_Down:
0000396A 0801 0001                  		btst	#1,d1		; is down pressed?
0000396E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003970 5240                       		addq.w	#1,d0		; move down 1 selection
00003972 0C40 0015                  		cmpi.w	#$15,d0
00003976 6500                       		bcs.s	LevSel_Refresh
00003978 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000397A                            
0000397A                            LevSel_Refresh:
0000397A 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
0000397E 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003982 4E75                       		rts	
00003984                            ; ===========================================================================
00003984                            
00003984                            LevSel_SndTest:				; XREF: LevSelControls
00003984 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
0000398A 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000398C 1238 F605                  		move.b	($FFFFF605).w,d1
00003990 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003994 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003996 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000399A 0801 0002                  		btst	#2,d1		; is left pressed?
0000399E 6700                       		beq.s	LevSel_Right	; if not, branch
000039A0 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000039A2 6400                       		bcc.s	LevSel_Right
000039A4 707F                       		moveq	#$7F,d0		; if sound test	moves below 0, set to $7F
000039A6                            
000039A6                            LevSel_Right:
000039A6 0801 0003                  		btst	#3,d1		; is right pressed?
000039AA 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000039AC 5240                       		addq.w	#1,d0		; add 1	to sound test
000039AE 0C40 0080                  		cmpi.w	#$80,d0
000039B2 6500                       		bcs.s	LevSel_Refresh2
000039B4 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000039B6                            
000039B6                            LevSel_Refresh2:
000039B6 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000039BA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000039BE                            
000039BE                            LevSel_NoMove:
000039BE 4E75                       		rts	
000039C0                            ; End of function LevSelControls
000039C0                            
000039C0                            ; ---------------------------------------------------------------------------
000039C0                            ; Subroutine to load level select text
000039C0                            ; ---------------------------------------------------------------------------
000039C0                            
000039C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039C0                            
000039C0                            
000039C0                            LevSelTextLoad:				; XREF: TitleScreen
000039C0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039C6 4DF9 00C0 0000             		lea	($C00000).l,a6
000039CC 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000039D2 363C E680                  		move.w	#$E680,d3	; VRAM setting
000039D6 7214                       		moveq	#$14,d1		; number of lines of text
000039D8                            
000039D8                            loc_34FE:				; XREF: LevSelTextLoad+26j
000039D8 2D44 0004                  		move.l	d4,4(a6)
000039DC 6100 0000                  		bsr.w	LevSel_ChgLine
000039E0 0684 0080 0000             		addi.l	#$800000,d4
000039E6 51C9 FFF0                  		dbf	d1,loc_34FE
000039EA 7000                       		moveq	#0,d0
000039EC 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039F0 3200                       		move.w	d0,d1
000039F2 283C 6210 0003             		move.l	#$62100003,d4
000039F8 EF48                       		lsl.w	#7,d0
000039FA 4840                       		swap	d0
000039FC D880                       		add.l	d0,d4
000039FE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A04 E749                       		lsl.w	#3,d1
00003A06 3001                       		move.w	d1,d0
00003A08 D241                       		add.w	d1,d1
00003A0A D240                       		add.w	d0,d1
00003A0C D2C1                       		adda.w	d1,a1
00003A0E 363C C680                  		move.w	#$C680,d3
00003A12 2D44 0004                  		move.l	d4,4(a6)
00003A16 6100 0000                  		bsr.w	LevSel_ChgLine
00003A1A 363C E680                  		move.w	#$E680,d3
00003A1E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003A24 6600                       		bne.s	loc_3550
00003A26 363C C680                  		move.w	#$C680,d3
00003A2A                            
00003A2A                            loc_3550:
00003A2A 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003A34 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003A38 0640 0080                  		addi.w	#$80,d0
00003A3C 1400                       		move.b	d0,d2
00003A3E E808                       		lsr.b	#4,d0
00003A40 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A44 1002                       		move.b	d2,d0
00003A46 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A4A 4E75                       		rts	
00003A4C                            ; End of function LevSelTextLoad
00003A4C                            
00003A4C                            
00003A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A4C                            
00003A4C                            
00003A4C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A4C 0240 000F                  		andi.w	#$F,d0
00003A50 0C00 000A                  		cmpi.b	#$A,d0
00003A54 6500                       		bcs.s	loc_3580
00003A56 5E00                       		addi.b	#7,d0
00003A58                            
00003A58                            loc_3580:
00003A58 D043                       		add.w	d3,d0
00003A5A 3C80                       		move.w	d0,(a6)
00003A5C 4E75                       		rts	
00003A5E                            ; End of function LevSel_ChgSnd
00003A5E                            
00003A5E                            
00003A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5E                            
00003A5E                            
00003A5E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A5E 7417                       		moveq	#$17,d2		; number of characters per line
00003A60                            
00003A60                            loc_3588:
00003A60 7000                       		moveq	#0,d0
00003A62 1019                       		move.b	(a1)+,d0
00003A64 6A00                       		bpl.s	loc_3598
00003A66 3CBC 0000                  		move.w	#0,(a6)
00003A6A 51CA FFF4                  		dbf	d2,loc_3588
00003A6E 4E75                       		rts	
00003A70                            ; ===========================================================================
00003A70                            
00003A70                            loc_3598:				; XREF: LevSel_ChgLine
00003A70 D043                       		add.w	d3,d0
00003A72 3C80                       		move.w	d0,(a6)
00003A74 51CA FFEA                  		dbf	d2,loc_3588
00003A78 4E75                       		rts	
00003A7A                            ; End of function LevSel_ChgLine
00003A7A                            
00003A7A                            ; ===========================================================================
00003A7A                            ; ---------------------------------------------------------------------------
00003A7A                            ; Level	select menu text
00003A7A                            ; ---------------------------------------------------------------------------
00003A7A                            LevelMenuText:	incbin	misc\menutext.bin
00003C72                            		even
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            ; Music	playlist
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            MusicList:	incbin	misc\muslist1.bin
00003C7C 00                         		even
00003C7C                            ; ===========================================================================
00003C7C                            
00003C7C                            ; ---------------------------------------------------------------------------
00003C7C                            ; Level
00003C7C                            ; ---------------------------------------------------------------------------
00003C7C                            
00003C7C                            Level:					; XREF: GameModeArray
00003C7C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C82 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C86 6B00                       		bmi.s	loc_37B6
00003C88 103C 00E0                  		move.b	#$E0,d0
00003C8C 6100 D526                  		bsr.w	PlaySound_Special ; fade out music
00003C90                            
00003C90                            loc_37B6:
00003C90 6100 D782                  		bsr.w	ClearPLC
00003C94 6100 DFE6                  		bsr.w	Pal_FadeFrom
00003C98 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C9C 6B00                       		bmi.s	Level_ClrRam
00003C9E 46FC 2700                  		move	#$2700,sr
00003CA2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003CAC                            ;		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003CAC                            ;		bsr.w	NemDec
00003CAC 46FC 2300                  		move	#$2300,sr
00003CB0 7000                       		moveq	#0,d0
00003CB2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CB6 E948                       		lsl.w	#4,d0
00003CB8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CBE 45F2 0000                  		lea	(a2,d0.w),a2
00003CC2 7000                       		moveq	#0,d0
00003CC4 1012                       		move.b	(a2),d0
00003CC6 6700                       		beq.s	loc_37FC
00003CC8 6100 D6EC                  		bsr.w	LoadPLC		; load level patterns
00003CCC                            
00003CCC                            loc_37FC:
00003CCC 7001                       		moveq	#1,d0
00003CCE 6100 D6E6                  		bsr.w	LoadPLC		; load standard	patterns
00003CD2                            
00003CD2                            Level_ClrRam:
00003CD2 43F8 D000                  		lea	($FFFFD000).w,a1
00003CD6 7000                       		moveq	#0,d0
00003CD8 323C 07FF                  		move.w	#$7FF,d1
00003CDC                            
00003CDC                            Level_ClrObjRam:
00003CDC 22C0                       		move.l	d0,(a1)+
00003CDE 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003CE2                            
00003CE2 43F8 F628                  		lea	($FFFFF628).w,a1
00003CE6 7000                       		moveq	#0,d0
00003CE8 323C 0015                  		move.w	#$15,d1
00003CEC                            
00003CEC                            Level_ClrVars:
00003CEC 22C0                       		move.l	d0,(a1)+
00003CEE 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003CF2                            
00003CF2 43F8 F700                  		lea	($FFFFF700).w,a1
00003CF6 7000                       		moveq	#0,d0
00003CF8 323C 003F                  		move.w	#$3F,d1
00003CFC                            
00003CFC                            Level_ClrVars2:
00003CFC 22C0                       		move.l	d0,(a1)+
00003CFE 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D02                            
00003D02 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D06 7000                       		moveq	#0,d0
00003D08 323C 0047                  		move.w	#$47,d1
00003D0C                            
00003D0C                            Level_ClrVars3:
00003D0C 22C0                       		move.l	d0,(a1)+
00003D0E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D12                            
00003D12 46FC 2700                  		move	#$2700,sr
00003D16 6100 D3A0                  		bsr.w	ClearScreen
00003D1A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D20 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D24 3CBC 8230                  		move.w	#$8230,(a6)
00003D28 3CBC 8407                  		move.w	#$8407,(a6)
00003D2C 3CBC 857C                  		move.w	#$857C,(a6)
00003D30 3CBC 9001                  		move.w	#$9001,(a6)
00003D34 3CBC 8004                  		move.w	#$8004,(a6)
00003D38 3CBC 8720                  		move.w	#$8720,(a6)
00003D3C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D42 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D46 4278 C800                  		clr.w   ($FFFFC800).w
00003D4A 21FC FFFF C800 C8FC                move.l  #$FFFFC800,($FFFFC8FC).w
00003D52 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D58 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D5A 3CBC 8014                  		move.w	#$8014,(a6)
00003D5E 7000                       		moveq	#0,d0
00003D60 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D64 D040                       		add.w	d0,d0
00003D66 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D6C 3031 0000                  		move.w	(a1,d0.w),d0
00003D70 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D74 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D78 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D7C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D80 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D84 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D8A                            
00003D8A                            Level_LoadPal:
00003D8A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D90 46FC 2300                  		move	#$2300,sr
00003D94 7003                       		moveq	#3,d0
00003D96 6100 E1BA                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DA0 6600                       		bne.s	Level_GetBgm	; if not, branch
00003DA2 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003DA4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DAA 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DAC 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003DAE                            
00003DAE                            Level_WaterPal:
00003DAE 6100 E1CA                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003DB2 4A38 FE30                  		tst.b	($FFFFFE30).w
00003DB6 6700                       		beq.s	Level_GetBgm
00003DB8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003DBE                            
00003DBE                            Level_GetBgm:
00003DBE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DC2 6B00                       		bmi.s	loc_3946
00003DC4 7000                       		moveq	#0,d0
00003DC6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DCA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
00003DD0 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00003DD2 7005                       		moveq	#5,d0		; move 5 to d0
00003DD4                            
00003DD4                            Level_BgmNotLZ4:
00003DD4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00003DDA 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003DDC 7006                       		moveq	#6,d0		; move 6 to d0
00003DDE                            
00003DDE                            Level_PlayBgm:
00003DDE 43F9 0000 3C72             		lea    (MusicList).l,a1     ; load standard music playlist
00003DE4 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
00003DEA 6600                       		bne.s @loaderoni                        ; if not, branch
00003DEC 43F9 0000 0000             		lea    (MusicList2).l,a1    ; otherwise, load alternate music playlist
00003DF2                            @loaderoni:
00003DF2 1031 0000                  		move.b    (a1,d0.w),d0                ; get the index
00003DF6 6100 D3B6                  		bsr.w	PlaySound	; play music
00003DFA 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E00                            
00003E00                            Level_TtlCard:
00003E00 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E06 6100 EF2A                  		bsr.w	DelayProgram
00003E0A 4EB9 0000 0000             		jsr	ObjectsLoad
00003E10 4EB9 0000 0000             		jsr	BuildSprites
00003E16 6100 D60A                  		bsr.w	RunPLC_RAM
00003E1A 3038 D108                  		move.w	($FFFFD108).w,d0
00003E1E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E22 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E24 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E28 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E2A                            ;		jsr	Hud_Base
00003E2A                            
00003E2A                            loc_3946:
00003E2A 7003                       		moveq	#3,d0
00003E2C 6100 E0F8                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E30 6100 0000                  		bsr.w	LevelSizeLoad
00003E34 6100 0000                  		bsr.w	DeformBgLayer
00003E38 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E3E 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E42 6100 0000                  		bsr.w	LoadTilesFromStart
00003E46 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E4C 6100 0000                  		bsr.w	ColIndexLoad
00003E50 6100 0000                  		bsr.w	LZWaterEffects
00003E54 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E5E 6B00 0000                  		bmi.w	Level_ChkDebug
00003E62                            ;		move.b	#$21,($FFFFD040).w ; load HUD object
00003E62                            
00003E62                            Level_ChkDebug:
00003E62 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E66 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E68 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E6E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E70 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E76                            
00003E76                            Level_ChkWater:
00003E76 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E7C 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E82 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E88 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E8A 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E90 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E96 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E9C 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003EA2                            
00003EA2                            Level_LoadObj:
00003EA2 4EB9 0000 0000             		jsr	ObjPosLoad
00003EA8 4EB9 0000 0000             		jsr	ObjectsLoad
00003EAE 4EB9 0000 0000             		jsr	BuildSprites
00003EB4 7000                       		moveq	#0,d0
00003EB6 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003EBA 6600                       		bne.s	loc_39E8	; if yes, branch
00003EBC                            ;		move.w	d0,($FFFFFE20).w ; clear rings
00003EBC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003EC0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003EC4                            
00003EC4                            loc_39E8:
00003EC4 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003EC8 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003ECC 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003ED0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003ED4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003ED8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003EDC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003EE0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003EE4 6100 0000                  		bsr.w	OscillateNumInit
00003EE8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003EEE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003EF4 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003EFA 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F00 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F06 7000                       		moveq	#0,d0
00003F08 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F0C E548                       		lsl.w	#2,d0
00003F0E 2271 0000                  		movea.l	(a1,d0.w),a1
00003F12 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F16 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F18 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F1E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F22 5340                       		subq.w	#1,d0
00003F24 E548                       		lsl.w	#2,d0
00003F26 2271 0000                  		movea.l	(a1,d0.w),a1
00003F2A                            
00003F2A                            Level_Demo:
00003F2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F30 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F34 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F3A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F3E 6A00                       		bpl.s	Level_ChkWaterPal
00003F40 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F46 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F4C 6600                       		bne.s	Level_ChkWaterPal
00003F4E 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F54                            
00003F54                            Level_ChkWaterPal:
00003F54 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F5A 6600                       		bne.s	Level_Delay	; if not, branch
00003F5C 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F5E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F64 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F66 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F68                            
00003F68                            Level_WaterPal2:
00003F68 6100 E03C                  		bsr.w	PalLoad4_Water
00003F6C                            
00003F6C                            Level_Delay:
00003F6C 323C 0003                  		move.w	#3,d1
00003F70                            
00003F70                            Level_DelayLoop:
00003F70 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F76 6100 EDBA                  		bsr.w	DelayProgram
00003F7A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F7E                            
00003F7E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F84 6100 DC56                  		bsr.w	Pal_FadeTo2
00003F88 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F8C 6B00                       		bmi.s	Level_ClrCardArt
00003F8E 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F92 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F96 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F9A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F9E 6000                       		bra.s	Level_StartGame
00003FA0                            ; ===========================================================================
00003FA0                            
00003FA0                            Level_ClrCardArt:
00003FA0 7002                       		moveq	#2,d0
00003FA2 4EB9 0000 13B6             		jsr	(LoadPLC).l	; load explosion patterns
00003FA8 4EB9 0000 1398             		jsr	(LoadAnimalPLC).l ; load animal patterns
00003FAE                            
00003FAE                            Level_StartGame:
00003FAE 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003FB4                            
00003FB4                            ; ---------------------------------------------------------------------------
00003FB4                            ; Main level loop (when	all title card and loading sequences are finished)
00003FB4                            ; ---------------------------------------------------------------------------
00003FB4                            
00003FB4                            Level_MainLoop:
00003FB4 6100 D20A                  		bsr.w	PauseGame
00003FB8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FBE 6100 ED72                  		bsr.w	DelayProgram
00003FC2 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003FC6 6100 0000                  		bsr.w	MoveSonicInDemo
00003FCA 6100 0000                  		bsr.w	LZWaterEffects
00003FCE 4EB9 0000 0000             		jsr	ObjectsLoad
00003FD4 4A78 FE08                  		tst.w	($FFFFFE08).w
00003FD8 6600                       		bne.s	loc_3B10
00003FDA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FE0 6400                       		bcc.s	loc_3B14
00003FE2                            
00003FE2                            loc_3B10:
00003FE2 6100 0000                  		bsr.w	DeformBgLayer
00003FE6                            
00003FE6                            loc_3B14:
00003FE6 4EB9 0000 0000             		jsr	BuildSprites
00003FEC 4EB9 0000 0000             		jsr	ObjPosLoad
00003FF2 6100 D77E                  		bsr.w	PalCycle_Load
00003FF6 6100 D42A                  		bsr.w	RunPLC_RAM
00003FFA 6100 0000                  		bsr.w	OscillateNumDo
00003FFE 6100 0000                  		bsr.w	ChangeRingFrame
00004002 6100 0000                  		bsr.w	SignpostArtLoad
00004006 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000400C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000400E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004012 6600 FC68                  		bne.w	Level		; if yes, branch
00004016 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000401C 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004020 4E75                       		rts	
00004022                            ; ===========================================================================
00004022                            
00004022                            Level_ChkDemo:				; XREF: Level_MainLoop
00004022 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004026 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004028 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000402C 6700                       		beq.s	Level_EndDemo	; if not, branch
0000402E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004034 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004038 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000403E 4E75                       		rts	
00004040                            ; ===========================================================================
00004040                            
00004040                            Level_EndDemo:				; XREF: Level_ChkDemo
00004040 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004046 6600                       		bne.s	loc_3B88	; if not, branch
00004048 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000404E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004052 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004054 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000405A                            
0000405A                            loc_3B88:
0000405A 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004060 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004066 4278 F794                  		clr.w	($FFFFF794).w
0000406A                            
0000406A                            loc_3B98:
0000406A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004070 6100 ECC0                  		bsr.w	DelayProgram
00004074 6100 0000                  		bsr.w	MoveSonicInDemo
00004078 4EB9 0000 0000             		jsr	ObjectsLoad
0000407E 4EB9 0000 0000             		jsr	BuildSprites
00004084 4EB9 0000 0000             		jsr	ObjPosLoad
0000408A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000408E 6A00                       		bpl.s	loc_3BC8
00004090 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004096 6100 DC04                  		bsr.w	Pal_FadeOut
0000409A                            
0000409A                            loc_3BC8:
0000409A 4A78 F614                  		tst.w	($FFFFF614).w
0000409E 66CA                       		bne.s	loc_3B98
000040A0 4E75                       		rts	
000040A2                            ; ===========================================================================
000040A2                            ; ---------------------------------------------------------------------------
000040A2                            ; Subroutine to	do special water effects in Labyrinth Zone
000040A2                            ; ---------------------------------------------------------------------------
000040A2                            
000040A2                            LZWaterEffects:				; XREF: Level
000040A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000040A8 6600                       		bne.s	locret_3C28	; if not, branch
000040AA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000040B0 6400                       		bcc.s	LZMoveWater
000040B2 6100 0000                  		bsr.w	LZWindTunnels
000040B6 6100 0000                  		bsr.w	LZWaterSlides
000040BA 6100 0000                  		bsr.w	LZDynamicWater
000040BE                            
000040BE                            LZMoveWater:
000040BE 4238 F64E                  		clr.b	($FFFFF64E).w
000040C2 7000                       		moveq	#0,d0
000040C4 1038 FE60                  		move.b	($FFFFFE60).w,d0
000040C8 E248                       		lsr.w	#1,d0
000040CA D078 F648                  		add.w	($FFFFF648).w,d0
000040CE 31C0 F646                  		move.w	d0,($FFFFF646).w
000040D2 3038 F646                  		move.w	($FFFFF646).w,d0
000040D6 9078 F704                  		sub.w	($FFFFF704).w,d0
000040DA 6400                       		bcc.s	loc_3C1A
000040DC 4A40                       		tst.w	d0
000040DE 6A00                       		bpl.s	loc_3C1A
000040E0 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000040E6 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000040EC                            
000040EC                            loc_3C1A:
000040EC 0C40 00DF                  		cmpi.w	#$DF,d0
000040F0 6500                       		bcs.s	loc_3C24
000040F2 303C 00DF                  		move.w	#$DF,d0
000040F6                            
000040F6                            loc_3C24:
000040F6 11C0 F625                  		move.b	d0,($FFFFF625).w
000040FA                            
000040FA                            locret_3C28:
000040FA 4E75                       		rts	
000040FC                            ; ===========================================================================
000040FC                            ; ---------------------------------------------------------------------------
000040FC                            ; Labyrinth default water heights
000040FC                            ; ---------------------------------------------------------------------------
000040FC                            WaterHeight:	incbin	misc\lz_heigh.bin
00004104                            		even
00004104                            ; ===========================================================================
00004104                            
00004104                            ; ---------------------------------------------------------------------------
00004104                            ; Labyrinth dynamic water routines
00004104                            ; ---------------------------------------------------------------------------
00004104                            
00004104                            LZDynamicWater:				; XREF: LZWaterEffects
00004104 7000                       		moveq	#0,d0
00004106 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000410A D040                       		add.w	d0,d0
0000410C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004110 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004114 7200                       		moveq	#0,d1
00004116 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000411A 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000411E 9078 F648                  		sub.w	($FFFFF648).w,d0
00004122 6700                       		beq.s	locret_3C5A
00004124 6400                       		bcc.s	loc_3C56
00004126 4441                       		neg.w	d1
00004128                            
00004128                            loc_3C56:
00004128 D378 F648                  		add.w	d1,($FFFFF648).w
0000412C                            
0000412C                            locret_3C5A:
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004130 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004132 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004134 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004136                            ; ===========================================================================
00004136                            
00004136                            DynWater_LZ1:				; XREF: DynWater_Index
00004136 3038 F700                  		move.w	($FFFFF700).w,d0
0000413A 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000413E 6600                       		bne.s	loc_3CD0
00004140 323C 0208                  		move.w	#$208,d1
00004144 0C40 0600                  		cmpi.w	#$600,d0
00004148 6500                       		bcs.s	loc_3CB4
0000414A 323C 0108                  		move.w	#$108,d1
0000414E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004154 6500                       		bcs.s	loc_3CBA
00004156 0C40 0C00                  		cmpi.w	#$C00,d0
0000415A 6500                       		bcs.s	loc_3CB4
0000415C 323C 0318                  		move.w	#$318,d1
00004160 0C40 1080                  		cmpi.w	#$1080,d0
00004164 6500                       		bcs.s	loc_3CB4
00004166 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000416C 323C 05C8                  		move.w	#$5C8,d1
00004170 0C40 1380                  		cmpi.w	#$1380,d0
00004174 6500                       		bcs.s	loc_3CB4
00004176 323C 03A8                  		move.w	#$3A8,d1
0000417A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000417E 6600                       		bne.s	loc_3CB4
00004180 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004186                            
00004186                            loc_3CB4:
00004186 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000418A 4E75                       		rts	
0000418C                            ; ===========================================================================
0000418C                            
0000418C                            loc_3CBA:				; XREF: DynWater_LZ1
0000418C 0C40 0C80                  		cmpi.w	#$C80,d0
00004190 65F4                       		bcs.s	loc_3CB4
00004192 323C 00E8                  		move.w	#$E8,d1
00004196 0C40 1500                  		cmpi.w	#$1500,d0
0000419A 65EA                       		bcs.s	loc_3CB4
0000419C 323C 0108                  		move.w	#$108,d1
000041A0 60E4                       		bra.s	loc_3CB4
000041A2                            ; ===========================================================================
000041A2                            
000041A2                            loc_3CD0:				; XREF: DynWater_LZ1
000041A2 5302                       		subq.b	#1,d2
000041A4 6600                       		bne.s	locret_3CF4
000041A6 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000041AC 6400                       		bcc.s	locret_3CF4
000041AE 323C 03A8                  		move.w	#$3A8,d1
000041B2 0C40 1300                  		cmpi.w	#$1300,d0
000041B6 6500                       		bcs.s	loc_3CF0
000041B8 323C 0108                  		move.w	#$108,d1
000041BC 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000041C2                            
000041C2                            loc_3CF0:
000041C2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041C6                            
000041C6                            locret_3CF4:
000041C6 4E75                       		rts	
000041C8                            ; ===========================================================================
000041C8                            
000041C8                            DynWater_LZ2:				; XREF: DynWater_Index
000041C8 3038 F700                  		move.w	($FFFFF700).w,d0
000041CC 323C 0328                  		move.w	#$328,d1
000041D0 0C40 0500                  		cmpi.w	#$500,d0
000041D4 6500                       		bcs.s	loc_3D12
000041D6 323C 03C8                  		move.w	#$3C8,d1
000041DA 0C40 0B00                  		cmpi.w	#$B00,d0
000041DE 6500                       		bcs.s	loc_3D12
000041E0 323C 0428                  		move.w	#$428,d1
000041E4                            
000041E4                            loc_3D12:
000041E4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041E8 4E75                       		rts	
000041EA                            ; ===========================================================================
000041EA                            
000041EA                            DynWater_LZ3:				; XREF: DynWater_Index
000041EA 3038 F700                  		move.w	($FFFFF700).w,d0
000041EE 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041F2 6600                       		bne.s	loc_3D5E
000041F4 323C 0900                  		move.w	#$900,d1
000041F8 0C40 0600                  		cmpi.w	#$600,d0
000041FC 6500                       		bcs.s	loc_3D54
000041FE 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004204 6500                       		bcs.s	loc_3D54
00004206 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000420C 6400                       		bcc.s	loc_3D54
0000420E 323C 04C8                  		move.w	#$4C8,d1
00004212 21FC 0000 0000 A400        		move.l	#Level_GHZ1,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
0000421A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004220 303C 00B7                  		move.w	#$B7,d0
00004224 6100 CF8E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00004228                            
00004228                            loc_3D54:
00004228 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000422C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004230 4E75                       		rts	
00004232                            ; ===========================================================================
00004232                            
00004232                            loc_3D5E:				; XREF: DynWater_LZ3
00004232 5302                       		subq.b	#1,d2
00004234 6600                       		bne.s	loc_3DA8
00004236 323C 04C8                  		move.w	#$4C8,d1
0000423A 0C40 0770                  		cmpi.w	#$770,d0
0000423E 6500                       		bcs.s	loc_3DA2
00004240 323C 0308                  		move.w	#$308,d1
00004244 0C40 1400                  		cmpi.w	#$1400,d0
00004248 6500                       		bcs.s	loc_3DA2
0000424A 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004250 6700                       		beq.s	loc_3D8E
00004252 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004258 6400                       		bcc.s	loc_3D8E
0000425A 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004260 6400                       		bcc.s	loc_3DA2
00004262                            
00004262                            loc_3D8E:
00004262 323C 0508                  		move.w	#$508,d1
00004266 31C1 F648                  		move.w	d1,($FFFFF648).w
0000426A 0C40 1770                  		cmpi.w	#$1770,d0
0000426E 6500                       		bcs.s	loc_3DA2
00004270 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004276                            
00004276                            loc_3DA2:
00004276 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000427A 4E75                       		rts	
0000427C                            ; ===========================================================================
0000427C                            
0000427C                            loc_3DA8:
0000427C 5302                       		subq.b	#1,d2
0000427E 6600                       		bne.s	loc_3DD2
00004280 323C 0508                  		move.w	#$508,d1
00004284 0C40 1860                  		cmpi.w	#$1860,d0
00004288 6500                       		bcs.s	loc_3DCC
0000428A 323C 0188                  		move.w	#$188,d1
0000428E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004292 6400                       		bcc.s	loc_3DC6
00004294 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004298 6600                       		bne.s	loc_3DCC
0000429A                            
0000429A                            loc_3DC6:
0000429A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000042A0                            
000042A0                            loc_3DCC:
000042A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042A4 4E75                       		rts	
000042A6                            ; ===========================================================================
000042A6                            
000042A6                            loc_3DD2:
000042A6 5302                       		subq.b	#1,d2
000042A8 6600                       		bne.s	loc_3E0E
000042AA 323C 0188                  		move.w	#$188,d1
000042AE 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042B2 6500                       		bcs.s	loc_3E04
000042B4 323C 0900                  		move.w	#$900,d1
000042B8 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000042BC 6500                       		bcs.s	loc_3E04
000042BE 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000042C4 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000042CA 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000042D0 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000042D6 4E75                       		rts	
000042D8                            ; ===========================================================================
000042D8                            
000042D8                            loc_3E04:
000042D8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042DC 31C1 F648                  		move.w	d1,($FFFFF648).w
000042E0 4E75                       		rts	
000042E2                            ; ===========================================================================
000042E2                            
000042E2                            loc_3E0E:
000042E2 0C40 1E00                  		cmpi.w	#$1E00,d0
000042E6 6500                       		bcs.s	locret_3E1A
000042E8 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000042EE                            
000042EE                            locret_3E1A:
000042EE 4E75                       		rts	
000042F0                            ; ===========================================================================
000042F0                            
000042F0                            DynWater_SBZ3:				; XREF: DynWater_Index
000042F0 323C 0228                  		move.w	#$228,d1
000042F4 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000042FA 6500                       		bcs.s	loc_3E2C
000042FC 323C 04C8                  		move.w	#$4C8,d1
00004300                            
00004300                            loc_3E2C:
00004300 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004304 4E75                       		rts
00004306                            
00004306                            ; ---------------------------------------------------------------------------
00004306                            ; Labyrinth Zone "wind tunnels"	subroutine
00004306                            ; ---------------------------------------------------------------------------
00004306                            
00004306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004306                            
00004306                            
00004306                            LZWindTunnels:				; XREF: LZWaterEffects
00004306 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000430A 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000430E 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004314 7000                       		moveq	#0,d0
00004316 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000431A E748                       		lsl.w	#3,d0
0000431C D4C0                       		adda.w	d0,a2
0000431E 7200                       		moveq	#0,d1
00004320 4A38 FE11                  		tst.b	($FFFFFE11).w
00004324 6600                       		bne.s	loc_3E56
00004326 7201                       		moveq	#1,d1
00004328 514A                       		subq.w	#8,a2
0000432A                            
0000432A                            loc_3E56:
0000432A 43F8 D000                  		lea	($FFFFD000).w,a1
0000432E                            
0000432E                            LZWind_Loop:
0000432E 3029 0008                  		move.w	8(a1),d0
00004332 B052                       		cmp.w	(a2),d0
00004334 6500 0000                  		bcs.w	loc_3EF4
00004338 B06A 0004                  		cmp.w	4(a2),d0
0000433C 6400 0000                  		bcc.w	loc_3EF4
00004340 3429 000C                  		move.w	$C(a1),d2
00004344 B46A 0002                  		cmp.w	2(a2),d2
00004348 6500                       		bcs.s	loc_3EF4
0000434A B46A 0006                  		cmp.w	6(a2),d2
0000434E 6400                       		bcc.s	loc_3EF4
00004350 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004354 0200 003F                  		andi.b	#$3F,d0
00004358 6600                       		bne.s	loc_3E90
0000435A 303C 00D0                  		move.w	#$D0,d0
0000435E 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004364                            
00004364                            loc_3E90:
00004364 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004368 6600 0000                  		bne.w	locret_3F0A
0000436C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004372 6400                       		bcc.s	loc_3F06
00004374 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000437A 0440 0080                  		subi.w	#$80,d0
0000437E B052                       		cmp.w	(a2),d0
00004380 6400                       		bcc.s	LZWind_Move
00004382 7002                       		moveq	#2,d0
00004384 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000438A 6600                       		bne.s	loc_3EBA
0000438C 4440                       		neg.w	d0
0000438E                            
0000438E                            loc_3EBA:
0000438E D169 000C                  		add.w	d0,$C(a1)
00004392                            
00004392                            LZWind_Move:
00004392 5869 0008                  		addq.w	#4,8(a1)
00004396 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000439C 337C 0000 0012             		move.w	#0,$12(a1)
000043A2 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000043A8 08E9 0001 0022             		bset	#1,$22(a1)
000043AE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000043B4 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000043B6 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000043BA                            
000043BA                            LZWind_MoveDown:
000043BA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000043C0 6700                       		beq.s	locret_3EF2	; if not, branch
000043C2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000043C6                            
000043C6                            locret_3EF2:
000043C6 4E75                       		rts	
000043C8                            ; ===========================================================================
000043C8                            
000043C8                            loc_3EF4:				; XREF: LZWindTunnels
000043C8 504A                       		addq.w	#8,a2
000043CA 51C9 FF62                  		dbf	d1,LZWind_Loop
000043CE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000043D2 6700                       		beq.s	locret_3F0A
000043D4 137C 0000 001C             		move.b	#0,$1C(a1)
000043DA                            
000043DA                            loc_3F06:
000043DA 4238 F7C7                  		clr.b	($FFFFF7C7).w
000043DE                            
000043DE                            locret_3F0A:
000043DE 4E75                       		rts	
000043E0                            ; End of function LZWindTunnels
000043E0                            
000043E0                            ; ===========================================================================
000043E0 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000043E8 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000043FA 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004408                            					; XREF: LZWindTunnels
00004408                            		even
00004408                            
00004408                            ; ---------------------------------------------------------------------------
00004408                            ; Labyrinth Zone water slide subroutine
00004408                            ; ---------------------------------------------------------------------------
00004408                            
00004408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004408                            
00004408                            
00004408                            LZWaterSlides:				; XREF: LZWaterEffects
00004408 43F8 D000                  		lea	($FFFFD000).w,a1
0000440C 0829 0001 0022             		btst	#1,$22(a1)
00004412 6600                       		bne.s	loc_3F6A
00004414 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
00004418 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
0000441C 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
00004420 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
00004422 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
00004424 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
00004428 D041                       		add.w	d1,d0					; MJ: add together
0000442A 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
0000442E 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
00004432 45FA 0000                  		lea	Slide_Chunks(pc),a2
00004436 7200                       		moveq	#$00,d1					; MJ: clear d2
00004438 6000 0000                  		bra	LZLoadChunk				; MJ: continue
0000443C                            
0000443C                            LZFindChunk:
0000443C B002                       		cmp.b	d2,d0					; MJ: does the chunk match?
0000443E 6700 0000                  		beq	LZSlide_Move				; MJ: if so, branch
00004442 5241                       		addq.w	#$01,d1					; MJ: increase counter
00004444                            
00004444                            LZLoadChunk:
00004444 141A                       		move.b	(a2)+,d2				; MJ: load chunk ID
00004446 66F4                       		bne	LZFindChunk				; MJ: if it's not null, branch
00004448                            
00004448                            loc_3F6A:
00004448 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000444C 6700                       		beq.s	locret_3F7A
0000444E 337C 0005 003E             		move.w	#5,$3E(a1)
00004454 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004458                            
00004458                            locret_3F7A:
00004458 4E75                       		rts	
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            LZSlide_Move:				; XREF: LZWaterSlides
0000445A 4E75                       		rts
0000445C 0C41 0003                  		cmpi.w	#3,d1
00004460 6400                       		bcc.s	loc_3F84
00004462 4E71                       		nop	
00004464                            
00004464                            loc_3F84:
00004464 08A9 0000 0022             		bclr	#0,$22(a1)
0000446A 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
0000446E 1340 0014                  		move.b	d0,$14(a1)
00004472 6A00                       		bpl.s	loc_3F9A
00004474 08E9 0000 0022             		bset	#0,$22(a1)
0000447A                            
0000447A                            loc_3F9A:
0000447A 4229 0015                  		clr.b	$15(a1)
0000447E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004484 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000448A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000448E 0200 001F                  		andi.b	#$1F,d0
00004492 6600                       		bne.s	locret_3FBE
00004494 303C 00D0                  		move.w	#$D0,d0
00004498 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play water sound
0000449E                            
0000449E                            locret_3FBE:
0000449E 4E75                       		rts	
000044A0                            ; End of function LZWaterSlides
000044A0                            
000044A0                            ; ===========================================================================
000044A0                            ; ---------------------------------------------------------------------------
000044A0 0506 090A                  Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
000044A4 FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
000044A8 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
000044AC 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
000044B0 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
000044B4 17                         		dc.b	$17
000044B5 00                         		dc.b	$00					; MJ: End marker
000044B6                            		even
000044B6                            ; ---------------------------------------------------------------------------
000044B6 0A0A 0A0A                  Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
000044BA F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
000044BE 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
000044C2 F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
000044C6 F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
000044CA F5                         		dc.b	$F5
000044CC 00                         		even
000044CC                            ; ---------------------------------------------------------------------------
000044CC                            ; ===========================================================================
000044CC                            ; ---------------------------------------------------------------------------
000044CC                            ; Subroutine to	move Sonic in demo mode
000044CC                            ; ---------------------------------------------------------------------------
000044CC                            
000044CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044CC                            
000044CC                            
000044CC                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000044CC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044D0 6600                       		bne.s	MoveDemo_On	; if yes, branch
000044D2 4E75                       		rts	
000044D4                            ; ===========================================================================
000044D4                            
000044D4                            ; This is an unused subroutine for recording a demo
000044D4                            
000044D4                            MoveDemo_Record:
000044D4 43F9 0008 0000             		lea	($80000).l,a1
000044DA 3038 F790                  		move.w	($FFFFF790).w,d0
000044DE D2C0                       		adda.w	d0,a1
000044E0 1038 F604                  		move.b	($FFFFF604).w,d0
000044E4 B011                       		cmp.b	(a1),d0
000044E6 6600                       		bne.s	loc_3FFA
000044E8 5229 0001                  		addq.b	#1,1(a1)
000044EC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000044F2 6700                       		beq.s	loc_3FFA
000044F4 4E75                       		rts	
000044F6                            ; ===========================================================================
000044F6                            
000044F6                            loc_3FFA:				; XREF: MoveDemo_Record
000044F6 1340 0002                  		move.b	d0,2(a1)
000044FA 137C 0000 0003             		move.b	#0,3(a1)
00004500 5478 F790                  		addq.w	#2,($FFFFF790).w
00004504 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000450A 4E75                       		rts	
0000450C                            ; ===========================================================================
0000450C                            
0000450C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000450C 4A38 F604                  		tst.b	($FFFFF604).w
00004510 6A00                       		bpl.s	loc_4022
00004512 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004516 6B00                       		bmi.s	loc_4022
00004518 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000451E                            
0000451E                            loc_4022:
0000451E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004524 7000                       		moveq	#0,d0
00004526 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000452A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004530 6600                       		bne.s	loc_4038
00004532 7006                       		moveq	#6,d0
00004534                            
00004534                            loc_4038:
00004534 E548                       		lsl.w	#2,d0
00004536 2271 0000                  		movea.l	(a1,d0.w),a1
0000453A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000453E 6A00                       		bpl.s	loc_4056
00004540 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004546 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000454A 5340                       		subq.w	#1,d0
0000454C E548                       		lsl.w	#2,d0
0000454E 2271 0000                  		movea.l	(a1,d0.w),a1
00004552                            
00004552                            loc_4056:
00004552 3038 F790                  		move.w	($FFFFF790).w,d0
00004556 D2C0                       		adda.w	d0,a1
00004558 1011                       		move.b	(a1),d0
0000455A 41F8 F604                  		lea	($FFFFF604).w,a0
0000455E 1200                       		move.b	d0,d1
00004560 1410                       		move.b	(a0),d2
00004562 B500                       		eor.b	d2,d0
00004564 10C1                       		move.b	d1,(a0)+
00004566 C001                       		and.b	d1,d0
00004568 10C0                       		move.b	d0,(a0)+
0000456A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000456E 6400                       		bcc.s	locret_407E
00004570 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004576 5478 F790                  		addq.w	#2,($FFFFF790).w
0000457A                            
0000457A                            locret_407E:
0000457A 4E75                       		rts	
0000457C                            ; End of function MoveSonicInDemo
0000457C                            
0000457C                            ; ===========================================================================
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            ; Demo sequence	pointers
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            Demo_Index:
0000457C                            	include "_inc\Demo pointers for intro.asm"
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            ; Demo sequence	pointers
0000457C                            ; ---------------------------------------------------------------------------
0000457C 0000 0000                  	dc.l Demo_GHZ
00004580 0000 0000                  	dc.l Demo_GHZ
00004584 0000 0000                  	dc.l Demo_MZ
00004588 0000 0000                  	dc.l Demo_MZ
0000458C 0000 0000                  	dc.l Demo_SYZ
00004590 0000 0000                  	dc.l Demo_SYZ
00004594 0000 0000                  	dc.l Demo_SS
00004598 0000 0000                  	dc.l Demo_SS
00004598 0000 0000                  	dc.l Demo_SS
0000459C                            
0000459C                            Demo_EndIndex:
0000459C                            	include "_inc\Demo pointers for ending.asm"
0000459C                            ; ---------------------------------------------------------------------------
0000459C                            ; Demo (ending) sequence pointers
0000459C                            ; ---------------------------------------------------------------------------
0000459C 0000 0000                  	dc.l Demo_EndGHZ1
000045A0 0000 0000                  	dc.l Demo_EndMZ
000045A4 0000 0000                  	dc.l Demo_EndSYZ
000045A8 0000 0000                  	dc.l Demo_EndLZ
000045AC 0000 0000                  	dc.l Demo_EndSLZ
000045B0 0000 0000                  	dc.l Demo_EndSBZ1
000045B4 0000 0000                  	dc.l Demo_EndSBZ2
000045B8 0000 0000                  	dc.l Demo_EndGHZ2
000045B8 0000 0000                  	dc.l Demo_EndGHZ2
000045BC                            
000045BC 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000045CC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000045DC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000045EC                            		even
000045EC                            
000045EC                            ; ---------------------------------------------------------------------------
000045EC                            ; Collision index loading subroutine
000045EC                            ; ---------------------------------------------------------------------------
000045EC                            
000045EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045EC                            
000045EC                            
000045EC                            ColIndexLoad:				; XREF: Level
000045EC 7000                       		moveq	#0,d0
000045EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000045F2 E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
000045F4 21FB 0000 FFD0             		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
000045FA 5840                       		add.w	#$04,d0					; MJ: increase to next location
000045FC 21FB 0000 FFD4             		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
00004602 4E75                       		rts	
00004604                            ; End of function ColIndexLoad
00004604                            
00004604                            ; ===========================================================================
00004604                            ; ---------------------------------------------------------------------------
00004604                            ; Collision index pointers
00004604                            ; ---------------------------------------------------------------------------
00004604                            ColPointers:
00004604                            	include "_inc\Collision index pointers.asm"
00004604                            ; ---------------------------------------------------------------------------
00004604                            ; Collision index pointers
00004604                            ; ---------------------------------------------------------------------------
00004604 0000 0000                  	dc.l Col_GHZ_1
00004608 0000 0000                  	dc.l Col_GHZ_2
0000460C 0000 0000                  	dc.l Col_LZ_1
00004610 0000 0000                  	dc.l Col_LZ_2
00004614 0000 0000                  	dc.l Col_MZ_1
00004618 0000 0000                  	dc.l Col_MZ_2
0000461C 0000 0000                  	dc.l Col_SLZ_1
00004620 0000 0000                  	dc.l Col_SLZ_2
00004624 0000 0000                  	dc.l Col_SYZ_1
00004628 0000 0000                  	dc.l Col_SYZ_2
0000462C 0000 0000                  	dc.l Col_SBZ_1
00004630 0000 0000                  	dc.l Col_SBZ_2
00004634 0000 0000                  	dc.l Col_GHZ_1	; Ending sequence
00004638 0000 0000                  	dc.l Col_GHZ_2	
0000463C 0000 0000                  	dc.l Col_EPZ_1	; Egg Plant Zone
00004640 0000 0000                  	dc.l Col_EPZ_2
00004644 0000 0000                  	dc.l Col_INZ_1	; Island Nowhere
00004648 0000 0000                  	dc.l Col_INZ_2
00004648 0000 0000                  	dc.l Col_INZ_2
0000464C                            
0000464C                            ; ---------------------------------------------------------------------------
0000464C                            ; Oscillating number subroutine
0000464C                            ; ---------------------------------------------------------------------------
0000464C                            
0000464C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000464C                            
0000464C                            
0000464C                            OscillateNumInit:			; XREF: Level
0000464C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004650 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004656 7220                       		moveq	#$20,d1
00004658                            
00004658                            Osc_Loop:
00004658 32DA                       		move.w	(a2)+,(a1)+
0000465A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000465E 4E75                       		rts	
00004660                            ; End of function OscillateNumInit
00004660                            
00004660                            ; ===========================================================================
00004660 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004664 0000 0080                  		dc.w 0,	$80
00004668 0000 0080                  		dc.w 0,	$80
0000466C 0000 0080                  		dc.w 0,	$80
00004670 0000 0080                  		dc.w 0,	$80
00004674 0000 0080                  		dc.w 0,	$80
00004678 0000 0080                  		dc.w 0,	$80
0000467C 0000 0080                  		dc.w 0,	$80
00004680 0000 0080                  		dc.w 0,	$80
00004684 0000 50F0                  		dc.w 0,	$50F0
00004688 011E 2080                  		dc.w $11E, $2080
0000468C 00B4 3080                  		dc.w $B4, $3080
00004690 010E 5080                  		dc.w $10E, $5080
00004694 01C2 7080                  		dc.w $1C2, $7080
00004698 0276 0080                  		dc.w $276, $80
0000469C 0000 0080                  		dc.w 0,	$80
000046A0 0000                       		dc.w 0
000046A2                            		even
000046A2                            
000046A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046A2                            
000046A2                            
000046A2                            OscillateNumDo:				; XREF: Level
000046A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000046A8 6400                       		bcc.s	locret_41C4
000046AA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000046AE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046B4 3619                       		move.w	(a1)+,d3
000046B6 720F                       		moveq	#$F,d1
000046B8                            
000046B8                            loc_4184:
000046B8 341A                       		move.w	(a2)+,d2
000046BA 381A                       		move.w	(a2)+,d4
000046BC 0303                       		btst	d1,d3
000046BE 6600                       		bne.s	loc_41A4
000046C0 3029 0002                  		move.w	2(a1),d0
000046C4 D042                       		add.w	d2,d0
000046C6 3340 0002                  		move.w	d0,2(a1)
000046CA D151                       		add.w	d0,0(a1)
000046CC B811                       		cmp.b	0(a1),d4
000046CE 6200                       		bhi.s	loc_41BA
000046D0 03C3                       		bset	d1,d3
000046D2 6000                       		bra.s	loc_41BA
000046D4                            ; ===========================================================================
000046D4                            
000046D4                            loc_41A4:				; XREF: OscillateNumDo
000046D4 3029 0002                  		move.w	2(a1),d0
000046D8 9042                       		sub.w	d2,d0
000046DA 3340 0002                  		move.w	d0,2(a1)
000046DE D151                       		add.w	d0,0(a1)
000046E0 B811                       		cmp.b	0(a1),d4
000046E2 6300                       		bls.s	loc_41BA
000046E4 0383                       		bclr	d1,d3
000046E6                            
000046E6                            loc_41BA:
000046E6 5849                       		addq.w	#4,a1
000046E8 51C9 FFCE                  		dbf	d1,loc_4184
000046EC 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046F0                            
000046F0                            locret_41C4:
000046F0 4E75                       		rts	
000046F2                            ; End of function OscillateNumDo
000046F2                            
000046F2                            ; ===========================================================================
000046F2 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046F6 0002 0018                  		dc.w 2,	$18
000046FA 0002 0020                  		dc.w 2,	$20
000046FE 0002 0030                  		dc.w 2,	$30
00004702 0004 0020                  		dc.w 4,	$20
00004706 0008 0008                  		dc.w 8,	8
0000470A 0008 0040                  		dc.w 8,	$40
0000470E 0004 0040                  		dc.w 4,	$40
00004712 0002 0050                  		dc.w 2,	$50
00004716 0002 0050                  		dc.w 2,	$50
0000471A 0002 0020                  		dc.w 2,	$20
0000471E 0003 0030                  		dc.w 3,	$30
00004722 0005 0050                  		dc.w 5,	$50
00004726 0007 0070                  		dc.w 7,	$70
0000472A 0002 0010                  		dc.w 2,	$10
0000472E 0002 0010                  		dc.w 2,	$10
00004732                            		even
00004732                            
00004732                            ; ---------------------------------------------------------------------------
00004732                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004732                            ; ---------------------------------------------------------------------------
00004732                            
00004732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004732                            
00004732                            
00004732                            ChangeRingFrame:			; XREF: Level
00004732 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004736 6A00                       		bpl.s	loc_421C
00004738 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000473E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004742 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004748                            
00004748                            loc_421C:
00004748 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000474C 6A00                       		bpl.s	loc_4232
0000474E 11FC 0003 FEC2             		move.b	#3,($FFFFFEC2).w
00004754 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004758 0C38 0009 FEC3             		cmpi.b  #9,($FFFFFEC3).w	; special epic thanks to novedicus for this
0000475E 6500                       		bcs.s    @NoCap
00004760 4238 FEC3                  		clr.b  ($FFFFFEC3).w
00004764                            
00004764                            @NoCap:
00004764 4E75                       		rts
00004766                            
00004766                            loc_4232:
00004766 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000476A 6A00                       		bpl.s	loc_4250
0000476C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004772 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004776 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000477C 6500                       		bcs.s	loc_4250
0000477E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004784                            
00004784                            loc_4250:
00004784 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004788 6700                       		beq.s	locret_4272
0000478A 7000                       		moveq	#0,d0
0000478C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004790 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004794 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004798 EF58                       		rol.w	#7,d0
0000479A 0C40 000A                  		cmpi.w	#10,d0
0000479E 6500 0000                  		bcs.w   sonicispoohahagotem
000047A2 7000                       		moveq #0,d0
000047A4 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000047A8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000047AC                            		
000047AC                            sonicispoohahagotem:
000047AC 4E75                       		rts				; haha get it
000047AE                            
000047AE                            locret_4272:
000047AE 4E75                       		rts	
000047B0                            ; End of function ChangeRingFrame
000047B0                            
000047B0                            ; ---------------------------------------------------------------------------
000047B0                            ; End-of-act signpost pattern loading subroutine
000047B0                            ; ---------------------------------------------------------------------------
000047B0                            
000047B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047B0                            
000047B0                            
000047B0                            SignpostArtLoad:			; XREF: Level
000047B0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000047B4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000047B8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000047BE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000047C0 3038 F700                  		move.w	($FFFFF700).w,d0
000047C4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047C8 0441 0100                  		subi.w	#$100,d1
000047CC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047CE 6D00                       		blt.s	Signpost_Exit	; if not, branch
000047D0 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000047D4 6700                       		beq.s	Signpost_Exit
000047D6 B278 F728                  		cmp.w	($FFFFF728).w,d1
000047DA 6700                       		beq.s	Signpost_Exit
000047DC 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000047E0 7012                       		moveq	#$12,d0
000047E2 6000 CC04                  		bra.w	LoadPLC2	; load signpost	patterns
000047E6                            ; ===========================================================================
000047E6                            
000047E6                            Signpost_Exit:
000047E6 4E75                       		rts	
000047E8                            ; End of function SignpostArtLoad
000047E8                            
000047E8                            ; ===========================================================================
000047E8                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004868                            Demo_MZ:	incbin	demodata\i_mz.bin
00004998                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004A18                            Demo_SS:	incbin	demodata\i_ss.bin
00004B18                            ; ===========================================================================
00004B18                            
00004B18                            ; ---------------------------------------------------------------------------
00004B18                            ; Special Stage
00004B18                            ; ---------------------------------------------------------------------------
00004B18                            
00004B18                            SpecialStage:				; XREF: GameModeArray
00004B18 303C 00CA                  		move.w	#$CA,d0
00004B1C 6100 C696                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004B20 6100 D284                  		bsr.w	Pal_MakeFlash
00004B24 46FC 2700                  		move	#$2700,sr
00004B28 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B2E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B32 3CBC 8004                  		move.w	#$8004,(a6)
00004B36 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B3C 3CBC 9011                  		move.w	#$9011,(a6)
00004B40 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B44 0200 00BF                  		andi.b	#$BF,d0
00004B48 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B4E 6100 C568                  		bsr.w	ClearScreen
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B5C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B60 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B66 3ABC 9780                  		move.w	#$9780,(a5)
00004B6A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B70 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B78                            
00004B78                            loc_463C:
00004B78 3215                       		move.w	(a5),d1
00004B7A 0801 0001                  		btst	#1,d1
00004B7E 66F8                       		bne.s	loc_463C
00004B80 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B84 6100 0000                  		bsr.w	SS_BGLoad
00004B88 7014                       		moveq	#$14,d0
00004B8A 6100 C996                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B8E 43F8 D000                  		lea	($FFFFD000).w,a1
00004B92 7000                       		moveq	#0,d0
00004B94 323C 07FF                  		move.w	#$7FF,d1
00004B98                            
00004B98                            SS_ClrObjRam:
00004B98 22C0                       		move.l	d0,(a1)+
00004B9A 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B9E                            
00004B9E 43F8 F700                  		lea	($FFFFF700).w,a1
00004BA2 7000                       		moveq	#0,d0
00004BA4 323C 003F                  		move.w	#$3F,d1
00004BA8                            
00004BA8                            SS_ClrRam:
00004BA8 22C0                       		move.l	d0,(a1)+
00004BAA 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004BAE                            
00004BAE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004BB2 7000                       		moveq	#0,d0
00004BB4 323C 0027                  		move.w	#$27,d1
00004BB8                            
00004BB8                            SS_ClrRam2:
00004BB8 22C0                       		move.l	d0,(a1)+
00004BBA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004BBE                            
00004BBE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BC2 7000                       		moveq	#0,d0
00004BC4 323C 007F                  		move.w	#$7F,d1
00004BC8                            
00004BC8                            SS_ClrNemRam:
00004BC8 22C0                       		move.l	d0,(a1)+
00004BCA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BCE                            
00004BCE 4238 F64E                  		clr.b	($FFFFF64E).w
00004BD2 4278 FE02                  		clr.w	($FFFFFE02).w
00004BD6 700A                       		moveq	#$A,d0
00004BD8 6100 D34C                  		bsr.w	PalLoad1	; load special stage pallet
00004BDC 4EB9 0000 0000             		jsr	SS_Load
00004BE2 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004BEA 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004BF2 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004BF8 6100 0000                  		bsr.w	PalCycle_SS
00004BFC 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004C00 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004C06 303C 0089                  		move.w	#$89,d0
00004C0A 6100 C5A2                  		bsr.w	PlaySound	; play special stage BG	music
00004C0E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004C14 43F9 0000 457C             		lea	(Demo_Index).l,a1
00004C1A 7006                       		moveq	#6,d0
00004C1C E548                       		lsl.w	#2,d0
00004C1E 2271 0000                  		movea.l	(a1,d0.w),a1
00004C22 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C28 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C2C 4278 FE20                  		clr.w	($FFFFFE20).w
00004C30 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C34 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C3A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C40 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C44 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C46 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C4E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C54                            
00004C54                            SS_NoDebug:
00004C54 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C58 0000 0040                  		ori.b	#$40,d0
00004C5C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C62 6100 D096                  		bsr.w	Pal_MakeWhite
00004C66                            
00004C66                            ; ---------------------------------------------------------------------------
00004C66                            ; Main Special Stage loop
00004C66                            ; ---------------------------------------------------------------------------
00004C66                            
00004C66                            SS_MainLoop:
00004C66 6100 C558                  		bsr.w	PauseGame
00004C6A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C70 6100 E0C0                  		bsr.w	DelayProgram
00004C74 6100 F856                  		bsr.w	MoveSonicInDemo
00004C78 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C7E 4EB9 0000 0000             		jsr	ObjectsLoad
00004C84 4EB9 0000 0000             		jsr	BuildSprites
00004C8A 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C90 6100 0000                  		bsr.w	SS_BGAnimate
00004C94 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C98 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C9A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C9E 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004CA2                            
00004CA2                            SS_ChkEnd:
00004CA2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004CA8 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004CAC                            
00004CAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004CB0 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004CB4 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004CBA 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004CC0 6500                       		bcs.s	SS_End		; if not, branch
00004CC2 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004CC6                            
00004CC6                            SS_End:
00004CC6 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CD2 4278 F794                  		clr.w	($FFFFF794).w
00004CD6                            
00004CD6                            SS_EndLoop:
00004CD6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004CDC 6100 E054                  		bsr.w	DelayProgram
00004CE0 6100 F7EA                  		bsr.w	MoveSonicInDemo
00004CE4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CEA 4EB9 0000 0000             		jsr	ObjectsLoad
00004CF0 4EB9 0000 0000             		jsr	BuildSprites
00004CF6 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CFC 6100 0000                  		bsr.w	SS_BGAnimate
00004D00 5378 F794                  		subq.w	#1,($FFFFF794).w
00004D04 6A00                       		bpl.s	loc_47D4
00004D06 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004D0C 6100 D0B8                  		bsr.w	Pal_ToWhite
00004D10                            
00004D10                            loc_47D4:
00004D10 4A78 F614                  		tst.w	($FFFFF614).w
00004D14 66C0                       		bne.s	SS_EndLoop
00004D16                            
00004D16 46FC 2700                  		move	#$2700,sr
00004D1A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D20 3CBC 8230                  		move.w	#$8230,(a6)
00004D24 3CBC 8407                  		move.w	#$8407,(a6)
00004D28 3CBC 9001                  		move.w	#$9001,(a6)
00004D2C 6100 C38A                  		bsr.w	ClearScreen
00004D30 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D3A                            ;		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D3A                            ;		bsr.w	NemDec
00004D3A                            ;		jsr	Hud_Base
00004D3A 4278 C800                          clr.w   ($FFFFC800).w
00004D3E 21FC FFFF C800 C8FC                move.l  #$FFFFC800,($FFFFC8FC).w 
00004D46 46FC 2300                  		move	#$2300,sr
00004D4A 7011                       		moveq	#$11,d0
00004D4C 6100 D204                  		bsr.w	PalLoad2	; load results screen pallet
00004D50 7000                       		moveq	#0,d0
00004D52 6100 C694                  		bsr.w	LoadPLC2
00004D56 701B                       		moveq	#$1B,d0
00004D58 6100 C65C                  		bsr.w	LoadPLC		; load results screen patterns
00004D5C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D62 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D68 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D6C C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D70 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D74 303C 008E                  		move.w	#$8E,d0
00004D78 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D7E 43F8 D000                  		lea	($FFFFD000).w,a1
00004D82 7000                       		moveq	#0,d0
00004D84 323C 07FF                  		move.w	#$7FF,d1
00004D88                            
00004D88                            SS_EndClrObjRam:
00004D88 22C0                       		move.l	d0,(a1)+
00004D8A 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D8E                            
00004D8E 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D94                            
00004D94                            SS_NormalExit:
00004D94 6100 C42A                  		bsr.w	PauseGame
00004D98 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D9E 6100 DF92                  		bsr.w	DelayProgram
00004DA2 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA8 4EB9 0000 0000             		jsr	BuildSprites
00004DAE 6100 C672                  		bsr.w	RunPLC_RAM
00004DB2 4A78 FE02                  		tst.w	($FFFFFE02).w
00004DB6 67DC                       		beq.s	SS_NormalExit
00004DB8 4AB8 F680                  		tst.l	($FFFFF680).w
00004DBC 66D6                       		bne.s	SS_NormalExit
00004DBE 303C 00CA                  		move.w	#$CA,d0
00004DC2 6100 C3F0                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DC6 6100 CFDE                  		bsr.w	Pal_MakeFlash
00004DCA 4E75                       		rts	
00004DCC                            ; ===========================================================================
00004DCC                            
00004DCC                            SS_ToSegaScreen:
00004DCC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004DD2 4E75                       		rts
00004DD4                            
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            ; Special stage	background loading subroutine
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            
00004DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DD4                            
00004DD4                            
00004DD4                            SS_BGLoad:				; XREF: SpecialStage
00004DD4 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DDA 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004DE0 303C 4051                  		move.w	#$4051,d0
00004DE4 6100 C76E                  		bsr.w	EniDec
00004DE8 263C 5000 0001             		move.l	#$50000001,d3
00004DEE 45F9 00FF 0080             		lea	($FF0080).l,a2
00004DF4 7E06                       		moveq	#6,d7
00004DF6                            
00004DF6                            loc_48BE:
00004DF6 2003                       		move.l	d3,d0
00004DF8 7C03                       		moveq	#3,d6
00004DFA 7800                       		moveq	#0,d4
00004DFC 0C47 0003                  		cmpi.w	#3,d7
00004E00 6400                       		bcc.s	loc_48CC
00004E02 7801                       		moveq	#1,d4
00004E04                            
00004E04                            loc_48CC:
00004E04 7A07                       		moveq	#7,d5
00004E06                            
00004E06                            loc_48CE:
00004E06 224A                       		movea.l	a2,a1
00004E08 0A04 0001                  		eori.b	#1,d4
00004E0C 6600                       		bne.s	loc_48E2
00004E0E 0C47 0006                  		cmpi.w	#6,d7
00004E12 6600                       		bne.s	loc_48F2
00004E14 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E1A                            
00004E1A                            loc_48E2:
00004E1A 48E7 F800                  		movem.l	d0-d4,-(sp)
00004E1E 7207                       		moveq	#7,d1
00004E20 7407                       		moveq	#7,d2
00004E22 6100 C414                  		bsr.w	ShowVDPGraphics
00004E26 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E2A                            
00004E2A                            loc_48F2:
00004E2A 0680 0010 0000             		addi.l	#$100000,d0
00004E30 51CD FFD4                  		dbf	d5,loc_48CE
00004E34 0680 0380 0000             		addi.l	#$3800000,d0
00004E3A 0A04 0001                  		eori.b	#1,d4
00004E3E 51CE FFC4                  		dbf	d6,loc_48CC
00004E42 0683 1000 0000             		addi.l	#$10000000,d3
00004E48 6A00                       		bpl.s	loc_491C
00004E4A 4843                       		swap	d3
00004E4C 0683 0000 C000             		addi.l	#$C000,d3
00004E52 4843                       		swap	d3
00004E54                            
00004E54                            loc_491C:
00004E54 D4FC 0080                  		adda.w	#$80,a2
00004E58 51CF FF9C                  		dbf	d7,loc_48BE
00004E5C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E62 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E68 303C 4000                  		move.w	#$4000,d0
00004E6C 6100 C6E6                  		bsr.w	EniDec
00004E70 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E76 203C 4000 0003             		move.l	#$40000003,d0
00004E7C 723F                       		moveq	#$3F,d1
00004E7E 741F                       		moveq	#$1F,d2
00004E80 6100 C3B6                  		bsr.w	ShowVDPGraphics
00004E84 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E8A 203C 5000 0003             		move.l	#$50000003,d0
00004E90 723F                       		moveq	#$3F,d1
00004E92 743F                       		moveq	#$3F,d2
00004E94 6100 C3A2                  		bsr.w	ShowVDPGraphics
00004E98 4E75                       		rts	
00004E9A                            ; End of function SS_BGLoad
00004E9A                            
00004E9A                            ; ---------------------------------------------------------------------------
00004E9A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004E9A                            ; to be issued the next time ProcessDMAQueue is called.
00004E9A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004E9A                            ; by issuing the commands (this subroutine DOES check for overflow)
00004E9A                            ; ---------------------------------------------------------------------------
00004E9A                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004E9A                            ; registers in which it expects data in:
00004E9A                            ; d1.l: Address to data (In 68k address space)
00004E9A                            ; d2.w: Destination in VRAM
00004E9A                            ; d3.w: Length of data
00004E9A                            ; ---------------------------------------------------------------------------
00004E9A                             
00004E9A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004E9A                             
00004E9A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004E9A                            QueueDMATransfer:
00004E9A 2278 C8FC                  				movea.l ($FFFFC8FC).w,a1
00004E9E B2FC C8FC                                  cmpa.w  #$C8FC,a1
00004EA2 6700                                       beq.s   QueueDMATransfer_Done ; return if there's no more room in the buffer
00004EA4                             
00004EA4                                            ; piece together some VDP commands and store them for later...
00004EA4 303C 9300                                  move.w  #$9300,d0 ; command to specify DMA transfer length & $00FF
00004EA8 1003                                       move.b  d3,d0
00004EAA 32C0                                       move.w  d0,(a1)+ ; store command
00004EAC                             
00004EAC 303C 9400                                  move.w  #$9400,d0 ; command to specify DMA transfer length & $FF00
00004EB0 E04B                                       lsr.w   #8,d3
00004EB2 1003                                       move.b  d3,d0
00004EB4 32C0                                       move.w  d0,(a1)+ ; store command
00004EB6                             
00004EB6 303C 9500                                  move.w  #$9500,d0 ; command to specify source address & $0001FE
00004EBA E289                                       lsr.l   #1,d1
00004EBC 1001                                       move.b  d1,d0
00004EBE 32C0                                       move.w  d0,(a1)+ ; store command
00004EC0                             
00004EC0 303C 9600                                  move.w  #$9600,d0 ; command to specify source address & $01FE00
00004EC4 E089                                       lsr.l   #8,d1
00004EC6 1001                                       move.b  d1,d0
00004EC8 32C0                                       move.w  d0,(a1)+ ; store command
00004ECA                             
00004ECA 303C 9700                                  move.w  #$9700,d0 ; command to specify source address & $FE0000
00004ECE E089                                       lsr.l   #8,d1
00004ED0 1001                                       move.b  d1,d0
00004ED2 32C0                                       move.w  d0,(a1)+ ; store command
00004ED4                             
00004ED4 0282 0000 FFFF                             andi.l  #$FFFF,d2 ; command to specify destination address and begin DMA
00004EDA E58A                                       lsl.l   #2,d2
00004EDC E44A                                       lsr.w   #2,d2
00004EDE 4842                                       swap    d2
00004EE0 0082 4000 0080                             ori.l   #$40000080,d2 ; set bits to specify VRAM transfer
00004EE6 22C2                                       move.l  d2,(a1)+ ; store command
00004EE8                             
00004EE8 21C9 C8FC                                  move.l  a1,($FFFFC8FC).w ; set the next free slot address
00004EEC B2FC C8FC                                  cmpa.w  #$C8FC,a1
00004EF0 6700                                       beq.s   QueueDMATransfer_Done ; return if there's no more room in the buffer
00004EF2 32BC 0000                                  move.w  #0,(a1) ; put a stop token at the end of the used part of the buffer
00004EF6                            ; return_14AA:
00004EF6                            QueueDMATransfer_Done:
00004EF6 4E75                                       rts
00004EF8                            ; End of function QueueDMATransfer
00004EF8                             
00004EF8                             
00004EF8                            ; ---------------------------------------------------------------------------
00004EF8                            ; Subroutine for issuing all VDP commands that were queued
00004EF8                            ; (by earlier calls to QueueDMATransfer)
00004EF8                            ; Resets the queue when it's done
00004EF8                            ; ---------------------------------------------------------------------------
00004EF8                             
00004EF8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004EF8                             
00004EF8                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004EF8                            ProcessDMAQueue:
00004EF8 4BF9 00C0 0004                             lea     ($C00004).l,a5	; superegg more like supergay amirite
00004EFE 43F8 C800                                  lea     ($FFFFC800).w,a1
00004F02                            ; loc_14B6:
00004F02                            ProcessDMAQueue_Loop:
00004F02 3019                                       move.w  (a1)+,d0
00004F04 6700                                       beq.s   ProcessDMAQueue_Done ; branch if we reached a stop token
00004F06                                            ; issue a set of VDP commands...
00004F06 3A80                                       move.w  d0,(a5)         ; transfer length
00004F08 3A99                                       move.w  (a1)+,(a5)      ; transfer length
00004F0A 3A99                                       move.w  (a1)+,(a5)      ; source address
00004F0C 3A99                                       move.w  (a1)+,(a5)      ; source address
00004F0E 3A99                                       move.w  (a1)+,(a5)      ; source address
00004F10 3A99                                       move.w  (a1)+,(a5)      ; destination
00004F12 3A99                                       move.w  (a1)+,(a5)      ; destination
00004F14 B2FC C8FC                                  cmpa.w  #$C8FC,a1
00004F18 66E8                                       bne.s   ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004F1A                            ; loc_14CE:
00004F1A                            ProcessDMAQueue_Done:
00004F1A 31FC 0000 C800                             move.w  #0,($FFFFC800).w
00004F20 21FC FFFF C800 C8FC                        move.l  #$FFFFC800,($FFFFC8FC).w
00004F28 4E75                                       rts
00004F2A                            ; End of function ProcessDMAQueue
00004F2A                            
00004F2A                            ; ---------------------------------------------------------------------------
00004F2A                            ; Pallet cycling routine - special stage
00004F2A                            ; ---------------------------------------------------------------------------
00004F2A                            
00004F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F2A                            
00004F2A                            
00004F2A                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004F2A 4A78 F63A                  		tst.w	($FFFFF63A).w
00004F2E 6600                       		bne.s	locret_49E6
00004F30 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004F34 6A00                       		bpl.s	locret_49E6
00004F36 4DF9 00C0 0004             		lea	($C00004).l,a6
00004F3C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004F40 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004F44 0240 001F                  		andi.w	#$1F,d0
00004F48 E548                       		lsl.w	#2,d0
00004F4A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004F50 D0C0                       		adda.w	d0,a0
00004F52 1018                       		move.b	(a0)+,d0
00004F54 6A00                       		bpl.s	loc_4992
00004F56 303C 01FF                  		move.w	#$1FF,d0
00004F5A                            
00004F5A                            loc_4992:
00004F5A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004F5E 7000                       		moveq	#0,d0
00004F60 1018                       		move.b	(a0)+,d0
00004F62 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004F66 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004F6C 43F1 0000                  		lea	(a1,d0.w),a1
00004F70 303C 8200                  		move.w	#-$7E00,d0
00004F74 1019                       		move.b	(a1)+,d0
00004F76 3C80                       		move.w	d0,(a6)
00004F78 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004F7C 303C 8400                  		move.w	#-$7C00,d0
00004F80 1018                       		move.b	(a0)+,d0
00004F82 3C80                       		move.w	d0,(a6)
00004F84 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004F8E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004F96 7000                       		moveq	#0,d0
00004F98 1018                       		move.b	(a0)+,d0
00004F9A 6B00                       		bmi.s	loc_49E8
00004F9C 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004FA2 D2C0                       		adda.w	d0,a1
00004FA4 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004FA8 24D9                       		move.l	(a1)+,(a2)+
00004FAA 24D9                       		move.l	(a1)+,(a2)+
00004FAC 24D9                       		move.l	(a1)+,(a2)+
00004FAE                            
00004FAE                            locret_49E6:
00004FAE 4E75                       		rts	
00004FB0                            ; ===========================================================================
00004FB0                            
00004FB0                            loc_49E8:				; XREF: PalCycle_SS
00004FB0 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004FB4 0C40 008A                  		cmpi.w	#$8A,d0
00004FB8 6500                       		bcs.s	loc_49F4
00004FBA 5241                       		addq.w	#1,d1
00004FBC                            
00004FBC                            loc_49F4:
00004FBC C2FC 002A                  		mulu.w	#$2A,d1
00004FC0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004FC6 D2C1                       		adda.w	d1,a1
00004FC8 0240 007F                  		andi.w	#$7F,d0
00004FCC 0880 0000                  		bclr	#0,d0
00004FD0 6700                       		beq.s	loc_4A18
00004FD2 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004FD6 24D1                       		move.l	(a1),(a2)+
00004FD8 24E9 0004                  		move.l	4(a1),(a2)+
00004FDC 24E9 0008                  		move.l	8(a1),(a2)+
00004FE0                            
00004FE0                            loc_4A18:
00004FE0 D2FC 000C                  		adda.w	#$C,a1
00004FE4 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004FE8 0C40 000A                  		cmpi.w	#$A,d0
00004FEC 6500                       		bcs.s	loc_4A2E
00004FEE 0440 000A                  		subi.w	#$A,d0
00004FF2 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004FF6                            
00004FF6                            loc_4A2E:
00004FF6 3200                       		move.w	d0,d1
00004FF8 D040                       		add.w	d0,d0
00004FFA D041                       		add.w	d1,d0
00004FFC D2C0                       		adda.w	d0,a1
00004FFE 24D9                       		move.l	(a1)+,(a2)+
00005000 34D9                       		move.w	(a1)+,(a2)+
00005002 4E75                       		rts	
00005004                            ; End of function PalCycle_SS
00005004                            
00005004                            ; ===========================================================================
00005004 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005014                            					; XREF: PalCycle_SS
00005014 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005024 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005034 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005044 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005054 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005064 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005074 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005084                            		even
00005084 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005092                            					; XREF: PalCycle_SS
00005092                            		even
00005092                            
00005092                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
000050DA                            		even
000050DA                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000051AC                            		even
000051AC                            
000051AC                            ; ---------------------------------------------------------------------------
000051AC                            ; Subroutine to	make the special stage background animated
000051AC                            ; ---------------------------------------------------------------------------
000051AC                            
000051AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051AC                            
000051AC                            
000051AC                            SS_BGAnimate:				; XREF: SpecialStage
000051AC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000051B0 6600                       		bne.s	loc_4BF6
000051B2 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000051B8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000051BE                            
000051BE                            loc_4BF6:
000051BE 0C40 0008                  		cmpi.w	#8,d0
000051C2 6400                       		bcc.s	loc_4C4E
000051C4 0C40 0006                  		cmpi.w	#6,d0
000051C8 6600                       		bne.s	loc_4C10
000051CA 5278 F718                  		addq.w	#1,($FFFFF718).w
000051CE 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000051D2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000051D8                            
000051D8                            loc_4C10:
000051D8 7000                       		moveq	#0,d0
000051DA 3038 F708                  		move.w	($FFFFF708).w,d0
000051DE 4440                       		neg.w	d0
000051E0 4840                       		swap	d0
000051E2 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000051E8 47F8 AA00                  		lea	($FFFFAA00).w,a3
000051EC 7609                       		moveq	#9,d3
000051EE                            
000051EE                            loc_4C26:
000051EE 302B 0002                  		move.w	2(a3),d0
000051F2 6100 DB70                  		bsr.w	CalcSine
000051F6 7400                       		moveq	#0,d2
000051F8 1419                       		move.b	(a1)+,d2
000051FA C1C2                       		muls.w	d2,d0
000051FC E080                       		asr.l	#8,d0
000051FE 36C0                       		move.w	d0,(a3)+
00005200 1419                       		move.b	(a1)+,d2
00005202 4882                       		ext.w	d2
00005204 D55B                       		add.w	d2,(a3)+
00005206 51CB FFE6                  		dbf	d3,loc_4C26
0000520A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000520E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005214 6000                       		bra.s	loc_4C7E
00005216                            ; ===========================================================================
00005216                            
00005216                            loc_4C4E:				; XREF: SS_BGAnimate
00005216 0C40 000C                  		cmpi.w	#$C,d0
0000521A 6600                       		bne.s	loc_4C74
0000521C 5378 F718                  		subq.w	#1,($FFFFF718).w
00005220 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005224 243C 0001 8000             		move.l	#$18000,d2
0000522A 7206                       		moveq	#6,d1
0000522C                            
0000522C                            loc_4C64:
0000522C 2013                       		move.l	(a3),d0
0000522E 9082                       		sub.l	d2,d0
00005230 26C0                       		move.l	d0,(a3)+
00005232 0482 0000 2000             		subi.l	#$2000,d2
00005238 51C9 FFF2                  		dbf	d1,loc_4C64
0000523C                            
0000523C                            loc_4C74:
0000523C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005240 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005246                            
00005246                            loc_4C7E:
00005246 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000524A 3038 F718                  		move.w	($FFFFF718).w,d0
0000524E 4440                       		neg.w	d0
00005250 4840                       		swap	d0
00005252 7600                       		moveq	#0,d3
00005254 161A                       		move.b	(a2)+,d3
00005256 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000525A 4442                       		neg.w	d2
0000525C 0242 00FF                  		andi.w	#$FF,d2
00005260 E54A                       		lsl.w	#2,d2
00005262                            
00005262                            loc_4C9A:
00005262 301B                       		move.w	(a3)+,d0
00005264 544B                       		addq.w	#2,a3
00005266 7200                       		moveq	#0,d1
00005268 121A                       		move.b	(a2)+,d1
0000526A 5341                       		subq.w	#1,d1
0000526C                            
0000526C                            loc_4CA4:
0000526C 2380 2000                  		move.l	d0,(a1,d2.w)
00005270 5842                       		addq.w	#4,d2
00005272 0242 03FC                  		andi.w	#$3FC,d2
00005276 51C9 FFF4                  		dbf	d1,loc_4CA4
0000527A 51CB FFE6                  		dbf	d3,loc_4C9A
0000527E 4E75                       		rts	
00005280                            ; End of function SS_BGAnimate
00005280                            
00005280                            ; ===========================================================================
00005280 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000528C                            		even
0000528C 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005294                            		even
00005294 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000052A8                            		even
000052A8                            					; XREF: SS_BGAnimate
000052A8                            ; ===========================================================================
000052A8                            
000052A8                            ; ---------------------------------------------------------------------------
000052A8                            ; Continue screen
000052A8                            ; ---------------------------------------------------------------------------
000052A8                            
000052A8                            ContinueScreen:				; XREF: GameModeArray
000052A8 6100 C9D2                  		bsr.w	Pal_FadeFrom
000052AC 46FC 2700                  		move	#$2700,sr
000052B0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052B4 0200 00BF                  		andi.b	#$BF,d0
000052B8 33C0 00C0 0004             		move.w	d0,($C00004).l
000052BE 4DF9 00C0 0004             		lea	($C00004).l,a6
000052C4 3CBC 8004                  		move.w	#$8004,(a6)
000052C8 3CBC 8700                  		move.w	#$8700,(a6)
000052CC 6100 BDEA                  		bsr.w	ClearScreen
000052D0 43F8 D000                  		lea	($FFFFD000).w,a1
000052D4 7000                       		moveq	#0,d0
000052D6 323C 07FF                  		move.w	#$7FF,d1
000052DA                            
000052DA                            Cont_ClrObjRam:
000052DA 22C0                       		move.l	d0,(a1)+
000052DC 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000052E0                            
000052E0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000052EA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000052F0 6100 BF66                  		bsr.w	NemDec
000052F4 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000052FE 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005304 6100 BF52                  		bsr.w	NemDec
00005308 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005312 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005318 6100 BF3E                  		bsr.w	NemDec
0000531C 720A                       		moveq	#10,d1
0000531E 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005324 7012                       		moveq	#$12,d0
00005326 6100 CBFE                  		bsr.w	PalLoad1	; load continue	screen pallet
0000532A 103C 0090                  		move.b	#$90,d0
0000532E 6100 BE7E                  		bsr.w	PlaySound	; play continue	music
00005332 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005338 42B8 F700                  		clr.l	($FFFFF700).w
0000533C 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005344 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000534A 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005350 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005356 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000535C 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005362 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005368 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000536E 4EB9 0000 0000             		jsr	ObjectsLoad
00005374 4EB9 0000 0000             		jsr	BuildSprites
0000537A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000537E 0000 0040                  		ori.b	#$40,d0
00005382 33C0 00C0 0004             		move.w	d0,($C00004).l
00005388 6100 C84C                  		bsr.w	Pal_FadeTo
0000538C                            
0000538C                            ; ---------------------------------------------------------------------------
0000538C                            ; Continue screen main loop
0000538C                            ; ---------------------------------------------------------------------------
0000538C                            
0000538C                            Cont_MainLoop:
0000538C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005392 6100 D99E                  		bsr.w	DelayProgram
00005396 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000539C 6400                       		bcc.s	loc_4DF2
0000539E 46FC 2700                  		move	#$2700,sr
000053A2 3238 F614                  		move.w	($FFFFF614).w,d1
000053A6 82FC 003C                  		divu.w	#$3C,d1
000053AA 0281 0000 000F             		andi.l	#$F,d1
000053B0 4EB9 0000 0000             		jsr	ContScrCounter
000053B6 46FC 2300                  		move	#$2300,sr
000053BA                            
000053BA                            loc_4DF2:
000053BA 4EB9 0000 0000             		jsr	ObjectsLoad
000053C0 4EB9 0000 0000             		jsr	BuildSprites
000053C6 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000053CC 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000053CE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000053D4 64B6                       		bcc.s	Cont_MainLoop
000053D6 4A78 F614                  		tst.w	($FFFFF614).w
000053DA 6600 FFB0                  		bne.w	Cont_MainLoop
000053DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000053E4 4E75                       		rts	
000053E6                            ; ===========================================================================
000053E6                            
000053E6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000053E6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000053EC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000053F2 7000                       		moveq	#0,d0
000053F4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000053F8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000053FC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005400 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005404 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005408 4E75                       		rts	
0000540A                            ; ===========================================================================
0000540A                            
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            ; Object 80 - Continue screen elements
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            
0000540A                            Obj80:					; XREF: Obj_Index
0000540A 7000                       		moveq	#0,d0
0000540C 1028 0024                  		move.b	$24(a0),d0
00005410 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005414 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005418                            ; ===========================================================================
00005418 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000541A 0000                       		dc.w Obj80_Display-Obj80_Index
0000541C 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000541E 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005420                            ; ===========================================================================
00005420                            
00005420                            Obj80_Main:				; XREF: Obj80_Index
00005420 5428 0024                  		addq.b	#2,$24(a0)
00005424 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000542C 317C 8500 0002             		move.w	#$8500,2(a0)
00005432 117C 0000 0001             		move.b	#0,1(a0)
00005438 117C 003C 0019             		move.b	#$3C,$19(a0)
0000543E 317C 0120 0008             		move.w	#$120,8(a0)
00005444 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000544A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005450                            
00005450                            Obj80_Display:				; XREF: Obj80_Index
00005450 4EF9 0000 0000             		jmp	DisplaySprite
00005456                            ; ===========================================================================
00005456                            Obj80_MiniSonicPos:
00005456 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005468 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005474                            ; ===========================================================================
00005474                            
00005474                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005474 2248                       		movea.l	a0,a1
00005476 45F9 0000 5456             		lea	(Obj80_MiniSonicPos).l,a2
0000547C 7200                       		moveq	#0,d1
0000547E 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005482 5501                       		subq.b	#2,d1
00005484 6400                       		bcc.s	loc_4EC4
00005486 4EF9 0000 0000             		jmp	DeleteObject
0000548C                            ; ===========================================================================
0000548C                            
0000548C                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000548C 7601                       		moveq	#1,d3
0000548E 0C01 000E                  		cmpi.b	#$E,d1
00005492 6500                       		bcs.s	loc_4ED0
00005494 7600                       		moveq	#0,d3
00005496 720E                       		moveq	#$E,d1
00005498                            
00005498                            loc_4ED0:
00005498 1401                       		move.b	d1,d2
0000549A 0202 0001                  		andi.b	#1,d2
0000549E                            
0000549E                            Obj80_MiniSonLoop:
0000549E 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000054A2 335A 0008                  		move.w	(a2)+,8(a1)
000054A6 4A02                       		tst.b	d2
000054A8 6700                       		beq.s	loc_4EEA
000054AA 0469 000A 0008             		subi.w	#$A,8(a1)
000054B0                            
000054B0                            loc_4EEA:
000054B0 337C 00D0 000A             		move.w	#$D0,$A(a1)
000054B6 137C 0006 001A             		move.b	#6,$1A(a1)
000054BC 137C 0006 0024             		move.b	#6,$24(a1)
000054C2 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000054CA 337C 8551 0002             		move.w	#$8551,2(a1)
000054D0 137C 0000 0001             		move.b	#0,1(a1)
000054D6 43E9 0040                  		lea	$40(a1),a1
000054DA 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000054DE 43E9 FFC0                  		lea	-$40(a1),a1
000054E2 1343 0028                  		move.b	d3,$28(a1)
000054E6                            
000054E6                            Obj80_ChkType:				; XREF: Obj80_Index
000054E6 4A28 0028                  		tst.b	$28(a0)
000054EA 6700                       		beq.s	loc_4F40
000054EC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000054F2 6500                       		bcs.s	loc_4F40
000054F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000054F8 0200 0001                  		andi.b	#1,d0
000054FC 6600                       		bne.s	loc_4F40
000054FE 4A78 D010                  		tst.w	($FFFFD010).w
00005502 6600                       		bne.s	Obj80_Delete
00005504 4E75                       		rts	
00005506                            ; ===========================================================================
00005506                            
00005506                            loc_4F40:				; XREF: Obj80_ChkType
00005506 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000550A 0200 000F                  		andi.b	#$F,d0
0000550E 6600                       		bne.s	Obj80_Display2
00005510 0868 0000 001A             		bchg	#0,$1A(a0)
00005516                            
00005516                            Obj80_Display2:
00005516 4EF9 0000 0000             		jmp	DisplaySprite
0000551C                            ; ===========================================================================
0000551C                            
0000551C                            Obj80_Delete:				; XREF: Obj80_ChkType
0000551C 4EF9 0000 0000             		jmp	DeleteObject
00005522                            ; ===========================================================================
00005522                            
00005522                            ; ---------------------------------------------------------------------------
00005522                            ; Object 81 - Sonic on the continue screen
00005522                            ; ---------------------------------------------------------------------------
00005522                            
00005522                            Obj81:					; XREF: Obj_Index
00005522 7000                       		moveq	#0,d0
00005524 1028 0024                  		move.b	$24(a0),d0
00005528 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000552C 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005530 4EF9 0000 0000             		jmp	DisplaySprite
00005536                            ; ===========================================================================
00005536 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005538 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000553A 0000                       		dc.w Obj81_Animate-Obj81_Index
0000553C 0000                       		dc.w Obj81_Run-Obj81_Index
0000553E                            ; ===========================================================================
0000553E                            
0000553E                            Obj81_Main:				; XREF: Obj81_Index
0000553E 5428 0024                  		addq.b	#2,$24(a0)
00005542 317C 00A0 0008             		move.w	#$A0,8(a0)
00005548 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000554E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005556 317C 0780 0002             		move.w	#$780,2(a0)
0000555C 117C 0004 0001             		move.b	#4,1(a0)
00005562 117C 0002 0018             		move.b	#2,$18(a0)
00005568 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000556E 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005574                            
00005574                            Obj81_ChkLand:				; XREF: Obj81_Index
00005574 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000557A 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000557C 5428 0024                  		addq.b	#2,$24(a0)
00005580 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005584 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000558C 317C 8500 0002             		move.w	#$8500,2(a0)
00005592 117C 0000 001C             		move.b	#0,$1C(a0)
00005598 6000                       		bra.s	Obj81_Animate
0000559A                            ; ===========================================================================
0000559A                            
0000559A                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000559A 4EB9 0000 0000             		jsr	SpeedToPos
000055A0 4EB9 0000 0000             		jsr	Sonic_Animate
000055A6 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000055AC                            ; ===========================================================================
000055AC                            
000055AC                            Obj81_Animate:				; XREF: Obj81_Index
000055AC 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000055B0 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000055B2 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000055B8 4EF9 0000 0000             		jmp	AnimateSprite
000055BE                            ; ===========================================================================
000055BE                            
000055BE                            Obj81_GetUp:				; XREF: Obj81_Animate
000055BE 5428 0024                  		addq.b	#2,$24(a0)
000055C2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055CA 317C 0780 0002             		move.w	#$780,2(a0)
000055D0 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000055D6 4268 0014                  		clr.w	$14(a0)
000055DA 5168 000C                  		subq.w	#8,$C(a0)
000055DE 103C 00E0                  		move.b	#$E0,d0
000055E2 6100 BBD0                  		bsr.w	PlaySound_Special ; fade out music
000055E6                            
000055E6                            Obj81_Run:				; XREF: Obj81_Index
000055E6 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000055EC 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000055EE 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000055F4 6000                       		bra.s	Obj81_ShowRun
000055F6                            ; ===========================================================================
000055F6                            
000055F6                            Obj81_AddSpeed:				; XREF: Obj81_Run
000055F6 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000055FC                            
000055FC                            Obj81_ShowRun:				; XREF: Obj81_Run
000055FC 4EB9 0000 0000             		jsr	SpeedToPos
00005602 4EB9 0000 0000             		jsr	Sonic_Animate
00005608 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000560E                            ; ===========================================================================
0000560E                            Ani_obj81:
0000560E                            	include "_anim\obj81.asm"
0000560E                            ; ---------------------------------------------------------------------------
0000560E                            ; Animation script - Sonic on the continue screen
0000560E                            ; ---------------------------------------------------------------------------
0000560E 0000                       		dc.w byte_504A-Ani_obj81
00005610 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000561C 00                         		even
0000561C 00                         		even
0000561C                            
0000561C                            ; ---------------------------------------------------------------------------
0000561C                            ; Sprite mappings - Continue screen
0000561C                            ; ---------------------------------------------------------------------------
0000561C                            Map_obj80:
0000561C                            	include "_maps\obj80.asm"
0000561C                            ; ---------------------------------------------------------------------------
0000561C                            ; Sprite mappings - Continue screen
0000561C                            ; ---------------------------------------------------------------------------
0000561C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005620 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005624 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005628 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000562C 0B                         byte_5066:	dc.b $B
0000562D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005632 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005637 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000563C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005641 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005646 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000564B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005650 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005655 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000565A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000565F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005664 03                         byte_509E:	dc.b 3
00005665 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000566A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000566F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005674 03                         byte_50AE:	dc.b 3
00005675 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000567A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000567F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005684 03                         byte_50BE:	dc.b 3
00005685 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000568A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000568F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005694 02                         byte_50CE:	dc.b 2
00005695 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000569A 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000569F 01                         byte_50D9:	dc.b 1
000056A0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000056A5 01                         byte_50DF:	dc.b 1
000056A6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000056AC 00                         		even
000056AC 00                         		even
000056AC                            
000056AC                            ; ===========================================================================
000056AC                            ; ---------------------------------------------------------------------------
000056AC                            ; Ending sequence in Green Hill	Zone
000056AC                            ; ---------------------------------------------------------------------------
000056AC                            
000056AC                            EndingSequence:				; XREF: GameModeArray
000056AC 103C 00E4                  		move.b	#$E4,d0
000056B0 6100 BB02                  		bsr.w	PlaySound_Special ; stop music
000056B4 6100 C5C6                  		bsr.w	Pal_FadeFrom
000056B8 43F8 D000                  		lea	($FFFFD000).w,a1
000056BC 7000                       		moveq	#0,d0
000056BE 323C 07FF                  		move.w	#$7FF,d1
000056C2                            
000056C2                            End_ClrObjRam:
000056C2 22C0                       		move.l	d0,(a1)+
000056C4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000056C8                            
000056C8 43F8 F628                  		lea	($FFFFF628).w,a1
000056CC 7000                       		moveq	#0,d0
000056CE 323C 0015                  		move.w	#$15,d1
000056D2                            
000056D2                            End_ClrRam:
000056D2 22C0                       		move.l	d0,(a1)+
000056D4 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000056D8                            
000056D8 43F8 F700                  		lea	($FFFFF700).w,a1
000056DC 7000                       		moveq	#0,d0
000056DE 323C 003F                  		move.w	#$3F,d1
000056E2                            
000056E2                            End_ClrRam2:
000056E2 22C0                       		move.l	d0,(a1)+
000056E4 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000056E8                            
000056E8 43F8 FE60                  		lea	($FFFFFE60).w,a1
000056EC 7000                       		moveq	#0,d0
000056EE 323C 0047                  		move.w	#$47,d1
000056F2                            
000056F2                            End_ClrRam3:
000056F2 22C0                       		move.l	d0,(a1)+
000056F4 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000056F8                            
000056F8 46FC 2700                  		move	#$2700,sr
000056FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005700 0200 00BF                  		andi.b	#$BF,d0
00005704 33C0 00C0 0004             		move.w	d0,($C00004).l
0000570A 6100 B9AC                  		bsr.w	ClearScreen
0000570E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005714 3CBC 8B03                  		move.w	#$8B03,(a6)
00005718 3CBC 8230                  		move.w	#$8230,(a6)
0000571C 3CBC 8407                  		move.w	#$8407,(a6)
00005720 3CBC 857C                  		move.w	#$857C,(a6)
00005724 3CBC 9001                  		move.w	#$9001,(a6)
00005728 3CBC 8004                  		move.w	#$8004,(a6)
0000572C 3CBC 8720                  		move.w	#$8720,(a6)
00005730 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005736 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000573A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005740 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005746 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000574C 6700                       		beq.s	End_LoadData	; if yes, branch
0000574E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005754                            
00005754                            End_LoadData:
00005754 701C                       		moveq	#$1C,d0
00005756 6100 BDCA                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000575A                            ;		jsr	Hud_Base
0000575A 6100 0000                  		bsr.w	LevelSizeLoad
0000575E 6100 0000                  		bsr.w	DeformBgLayer
00005762 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005768 6100 0000                  		bsr.w	MainLoadBlockLoad
0000576C 6100 0000                  		bsr.w	LoadTilesFromStart
00005770                            	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005770 21FC 0000 0000 FFD0        		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
00005778 21FC 0000 0000 FFD4        		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
00005780 46FC 2300                  		move	#$2300,sr
00005784 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000578A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000578E 6100 BF42                  		bsr.w	KosDec
00005792 7003                       		moveq	#3,d0
00005794 6100 C790                  		bsr.w	PalLoad1	; load Sonic's pallet
00005798 303C 008B                  		move.w	#$8B,d0
0000579C 6100 BA10                  		bsr.w	PlaySound	; play ending sequence music
000057A0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000057A6 6700                       		beq.s	End_LoadSonic	; if not, branch
000057A8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000057AE                            
000057AE                            End_LoadSonic:
000057AE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000057B4 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000057BA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000057C0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000057C6 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000057CC                            ;		move.b	#$21,($FFFFD040).w ; load HUD object
000057CC 4EB9 0000 0000             		jsr	ObjPosLoad
000057D2 4EB9 0000 0000             		jsr	ObjectsLoad
000057D8 4EB9 0000 0000             		jsr	BuildSprites
000057DE 7000                       		moveq	#0,d0
000057E0 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000057E4 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000057E8 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000057EC 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000057F0 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000057F4 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000057F8 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000057FC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005800 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005804 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005808 6100 EE42                  		bsr.w	OscillateNumInit
0000580C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005812 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005818 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000581E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005824 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000582A 6100 D506                  		bsr.w	DelayProgram
0000582E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005832 0000 0040                  		ori.b	#$40,d0
00005836 33C0 00C0 0004             		move.w	d0,($C00004).l
0000583C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005842 6100 C392                  		bsr.w	Pal_FadeTo
00005846                            
00005846                            ; ---------------------------------------------------------------------------
00005846                            ; Main ending sequence loop
00005846                            ; ---------------------------------------------------------------------------
00005846                            
00005846                            End_MainLoop:
00005846 6100 B978                  		bsr.w	PauseGame
0000584A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005850 6100 D4E0                  		bsr.w	DelayProgram
00005854 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005858 6100 0000                  		bsr.w	End_MoveSonic
0000585C 4EB9 0000 0000             		jsr	ObjectsLoad
00005862 6100 0000                  		bsr.w	DeformBgLayer
00005866 4EB9 0000 0000             		jsr	BuildSprites
0000586C 4EB9 0000 0000             		jsr	ObjPosLoad
00005872 6100 BEFE                  		bsr.w	PalCycle_Load
00005876 6100 EE2A                  		bsr.w	OscillateNumDo
0000587A 6100 EEB6                  		bsr.w	ChangeRingFrame
0000587E 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005884 6700                       		beq.s	loc_52DA	; if yes, branch
00005886 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000588C 103C 0091                  		move.b	#$91,d0
00005890 6100 B922                  		bsr.w	PlaySound_Special ; play credits music
00005894 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000589A 4E75                       		rts	
0000589C                            ; ===========================================================================
0000589C                            
0000589C                            loc_52DA:
0000589C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000058A0 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000058A4                            
000058A4 4278 FE02                  		clr.w	($FFFFFE02).w
000058A8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058AE 4278 F794                  		clr.w	($FFFFF794).w
000058B2                            
000058B2                            End_AllEmlds:				; XREF: loc_5334
000058B2 6100 B90C                  		bsr.w	PauseGame
000058B6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058BC 6100 D474                  		bsr.w	DelayProgram
000058C0 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058C4 6100 0000                  		bsr.w	End_MoveSonic
000058C8 4EB9 0000 0000             		jsr	ObjectsLoad
000058CE 6100 0000                  		bsr.w	DeformBgLayer
000058D2 4EB9 0000 0000             		jsr	BuildSprites
000058D8 4EB9 0000 0000             		jsr	ObjPosLoad
000058DE 6100 EDC2                  		bsr.w	OscillateNumDo
000058E2 6100 EE4E                  		bsr.w	ChangeRingFrame
000058E6 5378 F794                  		subq.w	#1,($FFFFF794).w
000058EA 6A00                       		bpl.s	loc_5334
000058EC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000058F2 6100 C4D2                  		bsr.w	Pal_ToWhite
000058F6                            
000058F6                            loc_5334:
000058F6 4A78 FE02                  		tst.w	($FFFFFE02).w
000058FA 6700 FFB6                  		beq.w	End_AllEmlds
000058FE 4278 FE02                  		clr.w	($FFFFFE02).w
00005902 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005908 4BF9 00C0 0004             		lea	($C00004).l,a5
0000590E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005914 47F8 F700                  		lea	($FFFFF700).w,a3
00005918 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
0000591C 343C 4000                  		move.w	#$4000,d2
00005920 6100 0000                  		bsr.w	LoadTilesFromStart2
00005924 7013                       		moveq	#$13,d0
00005926 6100 C5FE                  		bsr.w	PalLoad1	; load ending pallet
0000592A 6100 C3CE                  		bsr.w	Pal_MakeWhite
0000592E 6000 FF16                  		bra.w	End_MainLoop
00005932                            
00005932                            ; ---------------------------------------------------------------------------
00005932                            ; Subroutine controlling Sonic on the ending sequence
00005932                            ; ---------------------------------------------------------------------------
00005932                            
00005932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005932                            
00005932                            
00005932                            End_MoveSonic:				; XREF: End_MainLoop
00005932 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005936 6600                       		bne.s	End_MoveSonic2
00005938 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000593E 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005940 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005944 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000594A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005950 4E75                       		rts	
00005952                            ; ===========================================================================
00005952                            
00005952                            End_MoveSonic2:				; XREF: End_MoveSonic
00005952 5500                       		subq.b	#2,d0
00005954 6600                       		bne.s	End_MoveSonic3
00005956 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000595C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000595E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005962 7000                       		moveq	#0,d0
00005964 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005968 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000596C 31C0 D014                  		move.w	d0,($FFFFD014).w
00005970 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005976 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000597C 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005982 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005988 4E75                       		rts	
0000598A                            ; ===========================================================================
0000598A                            
0000598A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000598A 5500                       		subq.b	#2,d0
0000598C 6600                       		bne.s	End_MoveSonExit
0000598E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005992 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005998 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000599E 4278 D024                  		clr.w	($FFFFD024).w
000059A2                            
000059A2                            End_MoveSonExit:
000059A2 4E75                       		rts	
000059A4                            ; End of function End_MoveSonic
000059A4                            
000059A4                            ; ===========================================================================
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            ; Object 87 - Sonic on ending sequence
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            
000059A4                            Obj87:					; XREF: Obj_Index
000059A4 7000                       		moveq	#0,d0
000059A6 1028 0025                  		move.b	$25(a0),d0
000059AA 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000059AE 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000059B2 4EF9 0000 0000             		jmp	DisplaySprite
000059B8                            ; ===========================================================================
000059B8 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000059BC 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000059C0 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000059C4 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000059C8 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000059CC                            ; ===========================================================================
000059CC                            
000059CC                            Obj87_Main:				; XREF: Obj87_Index
000059CC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000059D2 6700                       		beq.s	Obj87_Main2	; if yes, branch
000059D4 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000059DA 317C 00D8 0030             		move.w	#$D8,$30(a0)
000059E0 4E75                       		rts	
000059E2                            ; ===========================================================================
000059E2                            
000059E2                            Obj87_Main2:				; XREF: Obj87_Main
000059E2 5428 0025                  		addq.b	#2,$25(a0)
000059E6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000059EE 317C 03E1 0002             		move.w	#$3E1,2(a0)
000059F4 117C 0004 0001             		move.b	#4,1(a0)
000059FA 4228 0022                  		clr.b	$22(a0)
000059FE 117C 0002 0018             		move.b	#2,$18(a0)
00005A04 117C 0000 001A             		move.b	#0,$1A(a0)
00005A0A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A10                            
00005A10                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A10 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A14 6600                       		bne.s	Obj87_Wait
00005A16 5428 0025                  		addq.b	#2,$25(a0)
00005A1A 317C 0001 001C             		move.w	#1,$1C(a0)
00005A20 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005A26                            
00005A26                            Obj87_Wait:
00005A26 4E75                       		rts	
00005A28                            ; ===========================================================================
00005A28                            
00005A28                            Obj87_LookUp:				; XREF: Obj87_Index
00005A28 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005A30 6600                       		bne.s	locret_5480
00005A32 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005A38 317C 005A 0030             		move.w	#$5A,$30(a0)
00005A3E 5428 0025                  		addq.b	#2,$25(a0)
00005A42                            
00005A42                            locret_5480:
00005A42 4E75                       		rts	
00005A44                            ; ===========================================================================
00005A44                            
00005A44                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005A44 5368 0030                  		subq.w	#1,$30(a0)
00005A48 6600                       		bne.s	Obj87_Wait2
00005A4A 43F8 D400                  		lea	($FFFFD400).w,a1
00005A4E 323C 00FF                  		move.w	#$FF,d1
00005A52                            
00005A52                            Obj87_ClrLoop:
00005A52 4299                       		clr.l	(a1)+
00005A54 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005A58 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005A5E 5428 0025                  		addq.b	#2,$25(a0)
00005A62 117C 0001 001C             		move.b	#1,$1C(a0)
00005A68 317C 003C 0030             		move.w	#$3C,$30(a0)
00005A6E                            
00005A6E                            Obj87_Wait2:
00005A6E 4E75                       		rts	
00005A70                            ; ===========================================================================
00005A70                            
00005A70                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005A70 5368 0030                  		subq.w	#1,$30(a0)
00005A74 6600                       		bne.s	Obj87_Wait3
00005A76 5428 0025                  		addq.b	#2,$25(a0)
00005A7A 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005A80 117C 0002 001C             		move.b	#2,$1C(a0)
00005A86 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A8C                            
00005A8C                            Obj87_Wait3:
00005A8C 4E75                       		rts	
00005A8E                            ; ===========================================================================
00005A8E                            
00005A8E                            Obj87_Animate:				; XREF: Obj87_Index
00005A8E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005A94 4EF9 0000 0000             		jmp	AnimateSprite
00005A9A                            ; ===========================================================================
00005A9A                            
00005A9A                            Obj87_Leap:				; XREF: Obj87_Index
00005A9A 5368 0030                  		subq.w	#1,$30(a0)
00005A9E 6600                       		bne.s	Obj87_Wait4
00005AA0 5428 0025                  		addq.b	#2,$25(a0)
00005AA4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005AAC 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005AB2 117C 0004 0001             		move.b	#4,1(a0)
00005AB8 4228 0022                  		clr.b	$22(a0)
00005ABC 117C 0002 0018             		move.b	#2,$18(a0)
00005AC2 117C 0005 001A             		move.b	#5,$1A(a0)
00005AC8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005ACE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005AD4 60B8                       		bra.s	Obj87_Animate
00005AD6                            ; ===========================================================================
00005AD6                            
00005AD6                            Obj87_Wait4:				; XREF: Obj87_Leap
00005AD6 4E75                       		rts	
00005AD8                            ; ===========================================================================
00005AD8                            Ani_obj87:
00005AD8                            	include "_anim\obj87.asm"
00005AD8                            ; ---------------------------------------------------------------------------
00005AD8                            ; Animation script - Sonic on the ending sequence
00005AD8                            ; ---------------------------------------------------------------------------
00005AD8 0000                       		dc.w byte_551C-Ani_obj87
00005ADA 0000                       		dc.w byte_552A-Ani_obj87
00005ADC 0000                       		dc.w byte_5534-Ani_obj87
00005ADE 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005AEC 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005AF6 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005AFE                            		even
00005AFE                            		even
00005AFE                            
00005AFE                            ; ===========================================================================
00005AFE                            ; ---------------------------------------------------------------------------
00005AFE                            ; Object 88 - chaos emeralds on	the ending sequence
00005AFE                            ; ---------------------------------------------------------------------------
00005AFE                            
00005AFE                            Obj88:					; XREF: Obj_Index
00005AFE 7000                       		moveq	#0,d0
00005B00 1028 0024                  		move.b	$24(a0),d0
00005B04 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B08 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B0C 4EF9 0000 0000             		jmp	DisplaySprite
00005B12                            ; ===========================================================================
00005B12 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B14 0000                       		dc.w Obj88_Move-Obj88_Index
00005B16                            ; ===========================================================================
00005B16                            
00005B16                            Obj88_Main:				; XREF: Obj88_Index
00005B16 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B1C 6700                       		beq.s	Obj88_Main2
00005B1E 588F                       		addq.l	#4,sp
00005B20 4E75                       		rts	
00005B22                            ; ===========================================================================
00005B22                            
00005B22                            Obj88_Main2:				; XREF: Obj88_Main
00005B22 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005B28 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005B2E 2248                       		movea.l	a0,a1
00005B30 7600                       		moveq	#0,d3
00005B32 7401                       		moveq	#1,d2
00005B34 7205                       		moveq	#5,d1
00005B36                            
00005B36                            Obj88_MainLoop:
00005B36 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005B3A 5429 0024                  		addq.b	#2,$24(a1)
00005B3E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005B46 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005B4C 137C 0004 0001             		move.b	#4,1(a1)
00005B52 137C 0001 0018             		move.b	#1,$18(a1)
00005B58 3368 0008 0038             		move.w	8(a0),$38(a1)
00005B5E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005B64 1342 001C                  		move.b	d2,$1C(a1)
00005B68 1342 001A                  		move.b	d2,$1A(a1)
00005B6C 5202                       		addq.b	#1,d2
00005B6E 1343 0026                  		move.b	d3,$26(a1)
00005B72 0603 002A                  		addi.b	#$2A,d3
00005B76 43E9 0040                  		lea	$40(a1),a1
00005B7A 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005B7E                            
00005B7E                            Obj88_Move:				; XREF: Obj88_Index
00005B7E 3028 003E                  		move.w	$3E(a0),d0
00005B82 D168 0026                  		add.w	d0,$26(a0)
00005B86 1028 0026                  		move.b	$26(a0),d0
00005B8A 4EB9 0000 2D64             		jsr	(CalcSine).l
00005B90 7800                       		moveq	#0,d4
00005B92 1828 003C                  		move.b	$3C(a0),d4
00005B96 C3C4                       		muls.w	d4,d1
00005B98 E081                       		asr.l	#8,d1
00005B9A C1C4                       		muls.w	d4,d0
00005B9C E080                       		asr.l	#8,d0
00005B9E D268 0038                  		add.w	$38(a0),d1
00005BA2 D068 003A                  		add.w	$3A(a0),d0
00005BA6 3141 0008                  		move.w	d1,8(a0)
00005BAA 3140 000C                  		move.w	d0,$C(a0)
00005BAE 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005BB4 6700                       		beq.s	loc_55FA
00005BB6 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005BBC                            
00005BBC                            loc_55FA:
00005BBC 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005BC2 6700                       		beq.s	loc_5608
00005BC4 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005BCA                            
00005BCA                            loc_5608:
00005BCA 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005BD0 6700                       		beq.s	locret_5614
00005BD2 5368 003A                  		subq.w	#1,$3A(a0)
00005BD6                            
00005BD6                            locret_5614:
00005BD6 4E75                       		rts	
00005BD8                            ; ===========================================================================
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            
00005BD8                            Obj89:					; XREF: Obj_Index
00005BD8 7000                       		moveq	#0,d0
00005BDA 1028 0024                  		move.b	$24(a0),d0
00005BDE 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005BE2 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005BE6                            ; ===========================================================================
00005BE6 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005BE8 0000                       		dc.w Obj89_Move-Obj89_Index
00005BEA 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005BEC                            ; ===========================================================================
00005BEC                            
00005BEC                            Obj89_Main:				; XREF: Obj89_Index
00005BEC 5428 0024                  		addq.b	#2,$24(a0)
00005BF0 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005BF6 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005BFC 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C04 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C0A 117C 0000 0001             		move.b	#0,1(a0)
00005C10 117C 0000 0018             		move.b	#0,$18(a0)
00005C16                            
00005C16                            Obj89_Move:				; XREF: Obj89_Index
00005C16 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C1C 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005C1E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005C24 4EF9 0000 0000             		jmp	DisplaySprite
00005C2A                            ; ===========================================================================
00005C2A                            
00005C2A                            Obj89_Delay:				; XREF: Obj89_Move
00005C2A 5428 0024                  		addq.b	#2,$24(a0)
00005C2E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005C34                            
00005C34                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005C34 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005C38 6A00                       		bpl.s	Obj89_Display
00005C3A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005C40                            
00005C40                            Obj89_Display:
00005C40 4EF9 0000 0000             		jmp	DisplaySprite
00005C46                            ; ===========================================================================
00005C46                            ; ---------------------------------------------------------------------------
00005C46                            ; Sprite mappings - Sonic on the ending	sequence
00005C46                            ; ---------------------------------------------------------------------------
00005C46                            Map_obj87:
00005C46                            	include "_maps\obj87.asm"
00005C46                            ; ---------------------------------------------------------------------------
00005C46                            ; Sprite mappings - Sonic on the ending	sequence
00005C46                            ; ---------------------------------------------------------------------------
00005C46 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005C4A 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005C4E 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005C52 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005C56 02                         byte_5690:	dc.b 2
00005C57 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005C5C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005C61 03                         byte_569B:	dc.b 3
00005C62 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005C67 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005C6C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005C71 02                         byte_56AB:	dc.b 2
00005C72 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005C77 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005C7C 02                         byte_56B6:	dc.b 2
00005C7D EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005C82 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005C87 02                         byte_56C1:	dc.b 2
00005C88 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005C8D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005C92 03                         byte_56CC:	dc.b 3
00005C93 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005C98 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005C9D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005CA2 07                         byte_56DC:	dc.b 7
00005CA3 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005CA8 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005CAD BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005CB2 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005CB7 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005CBC E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005CC1 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005CC6 18                         byte_5700:	dc.b $18
00005CC7 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005CCC 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005CD1 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005CD6 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005CDB A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005CE0 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005CE5 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005CEA A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005CEF B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005CF4 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005CF9 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005CFE C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D03 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D08 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D0D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D12 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D17 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D1C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005D21 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005D26 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005D2B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005D30 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005D35 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005D3A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005D40 00                         		even
00005D40 00                         		even
00005D40                            
00005D40                            ; ---------------------------------------------------------------------------
00005D40                            ; Sprite mappings - chaos emeralds on the ending sequence
00005D40                            ; ---------------------------------------------------------------------------
00005D40                            Map_obj88:
00005D40                            	include "_maps\obj88.asm"
00005D40                            ; ---------------------------------------------------------------------------
00005D40                            ; Sprite mappings - chaos emeralds on the ending sequence
00005D40                            ; ---------------------------------------------------------------------------
00005D40 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005D44 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005D48 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005D4C 0000                       		dc.w byte_57AC-Map_obj88
00005D4E 01                         byte_5788:	dc.b 1
00005D4F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005D54 01                         byte_578E:	dc.b 1
00005D55 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005D5A 01                         byte_5794:	dc.b 1
00005D5B F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005D60 01                         byte_579A:	dc.b 1
00005D61 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005D66 01                         byte_57A0:	dc.b 1
00005D67 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005D6C 01                         byte_57A6:	dc.b 1
00005D6D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005D72 01                         byte_57AC:	dc.b 1
00005D73 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005D78                            		even
00005D78                            		even
00005D78                            
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            Map_obj89:
00005D78                            	include "_maps\obj89.asm"
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005D78                            ; ---------------------------------------------------------------------------
00005D78 0000                       		dc.w byte_57B4-Map_obj89
00005D7A 03                         byte_57B4:	dc.b 3
00005D7B F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005D80 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005D85 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005D8A                            		even
00005D8A                            		even
00005D8A                            
00005D8A                            ; ===========================================================================
00005D8A                            ; ---------------------------------------------------------------------------
00005D8A                            ; Credits ending sequence
00005D8A                            ; ---------------------------------------------------------------------------
00005D8A                            
00005D8A                            Credits:				; XREF: GameModeArray
00005D8A 6100 B688                  		bsr.w	ClearPLC
00005D8E 6100 BEEC                  		bsr.w	Pal_FadeFrom
00005D92 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D98 3CBC 8004                  		move.w	#$8004,(a6)
00005D9C 3CBC 8230                  		move.w	#$8230,(a6)
00005DA0 3CBC 8407                  		move.w	#$8407,(a6)
00005DA4 3CBC 9001                  		move.w	#$9001,(a6)
00005DA8 3CBC 9200                  		move.w	#$9200,(a6)
00005DAC 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DB0 3CBC 8720                  		move.w	#$8720,(a6)
00005DB4 4238 F64E                  		clr.b	($FFFFF64E).w
00005DB8 6100 B2FE                  		bsr.w	ClearScreen
00005DBC 43F8 D000                  		lea	($FFFFD000).w,a1
00005DC0 7000                       		moveq	#0,d0
00005DC2 323C 07FF                  		move.w	#$7FF,d1
00005DC6                            
00005DC6                            Cred_ClrObjRam:
00005DC6 22C0                       		move.l	d0,(a1)+
00005DC8 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005DCC                            
00005DCC 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005DD6 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005DDC 6100 B47A                  		bsr.w	NemDec
00005DE0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005DE4 7000                       		moveq	#0,d0
00005DE6 323C 001F                  		move.w	#$1F,d1
00005DEA                            
00005DEA                            Cred_ClrPallet:
00005DEA 22C0                       		move.l	d0,(a1)+
00005DEC 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005DF0                            
00005DF0 7003                       		moveq	#3,d0
00005DF2 6100 C132                  		bsr.w	PalLoad1	; load Sonic's pallet
00005DF6 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005DFC 4EB9 0000 0000             		jsr	ObjectsLoad
00005E02 4EB9 0000 0000             		jsr	BuildSprites
00005E08 6100 0000                  		bsr.w	EndingDemoLoad
00005E0C 7000                       		moveq	#0,d0
00005E0E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E12 E948                       		lsl.w	#4,d0
00005E14 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E1A 45F2 0000                  		lea	(a2,d0.w),a2
00005E1E 7000                       		moveq	#0,d0
00005E20 1012                       		move.b	(a2),d0
00005E22 6700                       		beq.s	loc_5862
00005E24 6100 B590                  		bsr.w	LoadPLC		; load level patterns
00005E28                            
00005E28                            loc_5862:
00005E28 7001                       		moveq	#1,d0
00005E2A 6100 B58A                  		bsr.w	LoadPLC		; load standard	level patterns
00005E2E 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005E34 6100 BDA0                  		bsr.w	Pal_FadeTo
00005E38                            
00005E38                            Cred_WaitLoop:
00005E38 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E3E 6100 CEF2                  		bsr.w	DelayProgram
00005E42 6100 B5DE                  		bsr.w	RunPLC_RAM
00005E46 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005E4A 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005E4C 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005E50 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005E52 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005E58 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005E5C 4E75                       		rts	
00005E5E                            
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            ; Ending sequence demo loading subroutine
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            
00005E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E5E                            
00005E5E                            
00005E5E                            EndingDemoLoad:				; XREF: Credits
00005E5E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005E62 0240 000F                  		andi.w	#$F,d0
00005E66 D040                       		add.w	d0,d0
00005E68 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005E6C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005E70 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005E74 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005E7A 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005E7C 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005E82 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005E88 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005E8E 7000                       		moveq	#0,d0
00005E90 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005E94 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005E98 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005E9C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005EA0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005EA6 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005EA8 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005EAE 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005EB2 303C 0008                  		move.w	#8,d0
00005EB6                            
00005EB6                            EndDemo_LampLoad:
00005EB6 24D9                       		move.l	(a1)+,(a2)+
00005EB8 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005EBC                            
00005EBC                            EndDemo_Exit:
00005EBC 4E75                       		rts	
00005EBE                            ; End of function EndingDemoLoad
00005EBE                            
00005EBE                            ; ===========================================================================
00005EBE                            ; ---------------------------------------------------------------------------
00005EBE                            ; Levels used in the end sequence demos
00005EBE                            ; ---------------------------------------------------------------------------
00005EBE                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005ECE                            
00005ECE                            ; ---------------------------------------------------------------------------
00005ECE                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005ECE                            ; ---------------------------------------------------------------------------
00005ECE                            EndDemo_LampVar:
00005ECE 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005ED0 0A00 062C 000D             		dc.w $A00, $62C, $D
00005ED6 0000 0000                  		dc.l 0
00005EDA 0000                       		dc.b 0,	0
00005EDC 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005EF0 0101                       		dc.b 1,	1
00005EF2                            ; ===========================================================================
00005EF2                            ; ---------------------------------------------------------------------------
00005EF2                            ; "TRY AGAIN" and "END"	screens
00005EF2                            ; ---------------------------------------------------------------------------
00005EF2                            
00005EF2                            TryAgainEnd:				; XREF: Credits
00005EF2 6100 B520                  		bsr.w	ClearPLC
00005EF6 6100 BD84                  		bsr.w	Pal_FadeFrom
00005EFA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F00 3CBC 8004                  		move.w	#$8004,(a6)
00005F04 3CBC 8230                  		move.w	#$8230,(a6)
00005F08 3CBC 8407                  		move.w	#$8407,(a6)
00005F0C 3CBC 9001                  		move.w	#$9001,(a6)
00005F10 3CBC 9200                  		move.w	#$9200,(a6)
00005F14 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F18 3CBC 8720                  		move.w	#$8720,(a6)
00005F1C 4238 F64E                  		clr.b	($FFFFF64E).w
00005F20 6100 B196                  		bsr.w	ClearScreen
00005F24 43F8 D000                  		lea	($FFFFD000).w,a1
00005F28 7000                       		moveq	#0,d0
00005F2A 323C 07FF                  		move.w	#$7FF,d1
00005F2E                            
00005F2E                            TryAg_ClrObjRam:
00005F2E 22C0                       		move.l	d0,(a1)+
00005F30 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005F34                            
00005F34 701D                       		moveq	#$1D,d0
00005F36 6100 B5EA                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005F3A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005F3E 7000                       		moveq	#0,d0
00005F40 323C 001F                  		move.w	#$1F,d1
00005F44                            
00005F44                            TryAg_ClrPallet:
00005F44 22C0                       		move.l	d0,(a1)+
00005F46 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005F4A                            
00005F4A 7013                       		moveq	#$13,d0
00005F4C 6100 BFD8                  		bsr.w	PalLoad1	; load ending pallet
00005F50 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005F54 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005F5A 4EB9 0000 0000             		jsr	ObjectsLoad
00005F60 4EB9 0000 0000             		jsr	BuildSprites
00005F66 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005F6C 6100 BC68                  		bsr.w	Pal_FadeTo
00005F70                            
00005F70                            ; ---------------------------------------------------------------------------
00005F70                            ; "TRY AGAIN" and "END"	screen main loop
00005F70                            ; ---------------------------------------------------------------------------
00005F70                            TryAg_MainLoop:
00005F70 6100 B24E                  		bsr.w	PauseGame
00005F74 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005F7A 6100 CDB6                  		bsr.w	DelayProgram
00005F7E 4EB9 0000 0000             		jsr	ObjectsLoad
00005F84 4EB9 0000 0000             		jsr	BuildSprites
00005F8A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005F90 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005F92 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005F96 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005F98 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005F9E 67D0                       		beq.s	TryAg_MainLoop
00005FA0                            
00005FA0                            TryAg_Exit:
00005FA0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005FA6 4E75                       		rts	
00005FA8                            
00005FA8                            ; ===========================================================================
00005FA8                            ; ---------------------------------------------------------------------------
00005FA8                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005FA8                            ; ---------------------------------------------------------------------------
00005FA8                            
00005FA8                            Obj8B:					; XREF: Obj_Index
00005FA8 7000                       		moveq	#0,d0
00005FAA 1028 0024                  		move.b	$24(a0),d0
00005FAE 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005FB2 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005FB6 4EF9 0000 0000             		jmp	DisplaySprite
00005FBC                            ; ===========================================================================
00005FBC 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005FBE 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005FC0 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005FC2 0000                       		dc.w loc_5A8E-Obj8B_Index
00005FC4                            ; ===========================================================================
00005FC4                            
00005FC4                            Obj8B_Main:				; XREF: Obj8B_Index
00005FC4 5428 0024                  		addq.b	#2,$24(a0)
00005FC8 317C 0120 0008             		move.w	#$120,8(a0)
00005FCE 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005FD4 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005FDC 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005FE2 117C 0000 0001             		move.b	#0,1(a0)
00005FE8 117C 0002 0018             		move.b	#2,$18(a0)
00005FEE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005FF4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005FFA 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005FFC 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006002 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006008 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000600E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006014                            
00006014                            Obj8B_Animate:				; XREF: Obj8B_Index
00006014 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000601A 4EF9 0000 0000             		jmp	AnimateSprite
00006020                            ; ===========================================================================
00006020                            
00006020                            Obj8B_Juggle:				; XREF: Obj8B_Index
00006020 5428 0024                  		addq.b	#2,$24(a0)
00006024 7002                       		moveq	#2,d0
00006026 0828 0000 001C             		btst	#0,$1C(a0)
0000602C 6700                       		beq.s	loc_5A6A
0000602E 4440                       		neg.w	d0
00006030                            
00006030                            loc_5A6A:
00006030 43F8 D800                  		lea	($FFFFD800).w,a1
00006034 7205                       		moveq	#5,d1
00006036                            
00006036                            loc_5A70:
00006036 1340 003E                  		move.b	d0,$3E(a1)
0000603A 3400                       		move.w	d0,d2
0000603C E742                       		asl.w	#3,d2
0000603E D529 0026                  		add.b	d2,$26(a1)
00006042 43E9 0040                  		lea	$40(a1),a1
00006046 51C9 FFEE                  		dbf	d1,loc_5A70
0000604A 5228 001A                  		addq.b	#1,$1A(a0)
0000604E 317C 0070 0030             		move.w	#112,$30(a0)
00006054                            
00006054                            loc_5A8E:				; XREF: Obj8B_Index
00006054 5368 0030                  		subq.w	#1,$30(a0)
00006058 6A00                       		bpl.s	locret_5AA0
0000605A 0868 0000 001C             		bchg	#0,$1C(a0)
00006060 117C 0002 0024             		move.b	#2,$24(a0)
00006066                            
00006066                            locret_5AA0:
00006066 4E75                       		rts	
00006068                            ; ===========================================================================
00006068                            Ani_obj8B:
00006068                            	include "_anim\obj8B.asm"
00006068                            ; ---------------------------------------------------------------------------
00006068                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006068                            ; ---------------------------------------------------------------------------
00006068 0000                       		dc.w byte_5AA8-Ani_obj8B
0000606A 0000                       		dc.w byte_5AAC-Ani_obj8B
0000606C 0000                       		dc.w byte_5AB0-Ani_obj8B
0000606E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006072 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006076 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006088                            		even
00006088                            		even
00006088                            
00006088                            ; ===========================================================================
00006088                            ; ---------------------------------------------------------------------------
00006088                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006088                            ; ---------------------------------------------------------------------------
00006088                            
00006088                            Obj8C:					; XREF: Obj_Index
00006088 7000                       		moveq	#0,d0
0000608A 1028 0024                  		move.b	$24(a0),d0
0000608E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006092 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006096 4EF9 0000 0000             		jmp	DisplaySprite
0000609C                            ; ===========================================================================
0000609C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000609E 0000                       		dc.w Obj8C_Move-Obj8C_Index
000060A0                            ; ===========================================================================
000060A0                            
000060A0                            Obj8C_Main:				; XREF: Obj8C_Index
000060A0 2248                       		movea.l	a0,a1
000060A2 7400                       		moveq	#0,d2
000060A4 7600                       		moveq	#0,d3
000060A6 7205                       		moveq	#5,d1
000060A8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000060AC                            
000060AC                            Obj8C_MakeEms:				; XREF: loc_5B42
000060AC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000060B0 5429 0024                  		addq.b	#2,$24(a1)
000060B4 237C 0000 5D40 0004        		move.l	#Map_obj88,4(a1)
000060BC 337C 03C5 0002             		move.w	#$3C5,2(a1)
000060C2 137C 0000 0001             		move.b	#0,1(a1)
000060C8 137C 0001 0018             		move.b	#1,$18(a1)
000060CE 337C 0104 0008             		move.w	#$104,8(a1)
000060D4 337C 0120 0038             		move.w	#$120,$38(a1)
000060DA 337C 00EC 000A             		move.w	#$EC,$A(a1)
000060E0 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000060E6 137C 001C 003C             		move.b	#$1C,$3C(a1)
000060EC 47F8 FE58                  		lea	($FFFFFE58).w,a3
000060F0                            
000060F0                            Obj8C_ChkEms:
000060F0 7000                       		moveq	#0,d0
000060F2 1038 FE57                  		move.b	($FFFFFE57).w,d0
000060F6 5340                       		subq.w	#1,d0
000060F8 6500                       		bcs.s	loc_5B42
000060FA                            
000060FA                            Obj8C_ChkEmLoop:
000060FA B433 0000                  		cmp.b	(a3,d0.w),d2
000060FE 6600                       		bne.s	loc_5B3E
00006100 5202                       		addq.b	#1,d2
00006102 60EC                       		bra.s	Obj8C_ChkEms
00006104                            ; ===========================================================================
00006104                            
00006104                            loc_5B3E:
00006104 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006108                            
00006108                            loc_5B42:
00006108 1342 001A                  		move.b	d2,$1A(a1)
0000610C 5229 001A                  		addq.b	#1,$1A(a1)
00006110 5202                       		addq.b	#1,d2
00006112 137C 0080 0026             		move.b	#$80,$26(a1)
00006118 1343 001E                  		move.b	d3,$1E(a1)
0000611C 1343 001F                  		move.b	d3,$1F(a1)
00006120 0643 000A                  		addi.w	#$A,d3
00006124 43E9 0040                  		lea	$40(a1),a1
00006128 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000612C                            
0000612C                            Obj8C_Move:				; XREF: Obj8C_Index
0000612C 4A68 003E                  		tst.w	$3E(a0)
00006130 6700                       		beq.s	locret_5BBA
00006132 4A28 001E                  		tst.b	$1E(a0)
00006136 6700                       		beq.s	loc_5B78
00006138 5328 001E                  		subq.b	#1,$1E(a0)
0000613C 6600                       		bne.s	loc_5B80
0000613E                            
0000613E                            loc_5B78:
0000613E 3028 003E                  		move.w	$3E(a0),d0
00006142 D168 0026                  		add.w	d0,$26(a0)
00006146                            
00006146                            loc_5B80:
00006146 1028 0026                  		move.b	$26(a0),d0
0000614A 6700                       		beq.s	loc_5B8C
0000614C 0C00 0080                  		cmpi.b	#$80,d0
00006150 6600                       		bne.s	loc_5B96
00006152                            
00006152                            loc_5B8C:
00006152 4268 003E                  		clr.w	$3E(a0)
00006156 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000615C                            
0000615C                            loc_5B96:
0000615C 4EB9 0000 2D64             		jsr	(CalcSine).l
00006162 7800                       		moveq	#0,d4
00006164 1828 003C                  		move.b	$3C(a0),d4
00006168 C3C4                       		muls.w	d4,d1
0000616A E081                       		asr.l	#8,d1
0000616C C1C4                       		muls.w	d4,d0
0000616E E080                       		asr.l	#8,d0
00006170 D268 0038                  		add.w	$38(a0),d1
00006174 D068 003A                  		add.w	$3A(a0),d0
00006178 3141 0008                  		move.w	d1,8(a0)
0000617C 3140 000A                  		move.w	d0,$A(a0)
00006180                            
00006180                            locret_5BBA:
00006180 4E75                       		rts	
00006182                            ; ===========================================================================
00006182                            ; ---------------------------------------------------------------------------
00006182                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006182                            ; ---------------------------------------------------------------------------
00006182                            Map_obj8B:
00006182                            	include "_maps\obj8B.asm"
00006182                            ; ---------------------------------------------------------------------------
00006182                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006182                            ; ---------------------------------------------------------------------------
00006182 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006186 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000618A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000618E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006192 08                         byte_5BCC:	dc.b 8
00006193 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006198 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000619D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000061A2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000061A7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000061AC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000061B1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000061B6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000061BB 08                         byte_5BF5:	dc.b 8
000061BC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000061C1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000061C6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000061CB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000061D0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000061D5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000061DA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000061DF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000061E4 08                         byte_5C1E:	dc.b 8
000061E5 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000061EA F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000061EF E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000061F4 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000061F9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000061FE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006203 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006208 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000620D 08                         byte_5C47:	dc.b 8
0000620E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006213 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006218 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000621D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006222 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006227 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000622C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006231 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006236 0C                         byte_5C70:	dc.b $C
00006237 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000623C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006241 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006246 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000624B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006250 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006255 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000625A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000625F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006264 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006269 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000626E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006273 0A                         byte_5CAD:	dc.b $A
00006274 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006279 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000627E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006283 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006288 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000628D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006292 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006297 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000629C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000062A1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000062A6 0A                         byte_5CE0:	dc.b $A
000062A7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000062AC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000062B1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000062B6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000062BB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000062C0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000062C5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000062CA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000062CF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000062D4 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000062D9 0C                         byte_5D13:	dc.b $C
000062DA F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000062DF FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000062E4 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000062E9 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000062EE F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000062F3 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000062F8 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000062FD 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006302 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006307 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000630C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006311 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006316                            		even
00006316                            		even
00006316                            
00006316                            ; ---------------------------------------------------------------------------
00006316                            ; Ending sequence demos
00006316                            ; ---------------------------------------------------------------------------
00006316                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006344                            		even
00006344                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006384                            		even
00006384                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000063B4                            		even
000063B4                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000063E4                            		even
000063E4                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006404                            		even
00006404                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006424                            		even
00006424                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006454                            		even
00006454                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006484                            		even
00006484                            
00006484                            ; ---------------------------------------------------------------------------
00006484                            ; Subroutine to	load level boundaries and start	locations
00006484                            ; ---------------------------------------------------------------------------
00006484                            
00006484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006484                            
00006484                            
00006484                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006484 7000                       		moveq	#0,d0
00006486 11C0 F740                  		move.b	d0,($FFFFF740).w
0000648A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000648E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006492 11C0 F748                  		move.b	d0,($FFFFF748).w
00006496 11C0 F742                  		move.b	d0,($FFFFF742).w
0000649A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000649E ED08                       		lsl.b	#6,d0
000064A0 E848                       		lsr.w	#4,d0
000064A2 3200                       		move.w	d0,d1
000064A4 D040                       		add.w	d0,d0
000064A6 D041                       		add.w	d1,d0
000064A8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000064AC 3018                       		move.w	(a0)+,d0
000064AE 31C0 F730                  		move.w	d0,($FFFFF730).w
000064B2 2018                       		move.l	(a0)+,d0
000064B4 21C0 F728                  		move.l	d0,($FFFFF728).w
000064B8 21C0 F720                  		move.l	d0,($FFFFF720).w
000064BC 2018                       		move.l	(a0)+,d0
000064BE 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000064C2 21C0 F724                  		move.l	d0,($FFFFF724).w
000064C6 3038 F728                  		move.w	($FFFFF728).w,d0
000064CA 0640 0240                  		addi.w	#$240,d0
000064CE 31C0 F732                  		move.w	d0,($FFFFF732).w
000064D2 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000064D8 3018                       		move.w	(a0)+,d0
000064DA 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000064DE 6000 0000                  		bra.w	LevSz_ChkLamp
000064E2                            ; ===========================================================================
000064E2                            ; ---------------------------------------------------------------------------
000064E2                            ; Level size array and ending start location array
000064E2                            ; ---------------------------------------------------------------------------
000064E2                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006686                            		even
00006686                            
00006686                            EndingStLocArray:
00006686                            		incbin	misc\sloc_end.bin
000066A6                            		even
000066A6                            
000066A6                            ; ===========================================================================
000066A6                            
000066A6                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066A6 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066AA 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066AC 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066B2 3238 D008                  		move.w	($FFFFD008).w,d1
000066B6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066BA 6000                       		bra.s	loc_60D0
000066BC                            ; ===========================================================================
000066BC                            
000066BC                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066BC 3038 FE10                  		move.w	($FFFFFE10).w,d0
000066C0 ED08                       		lsl.b	#6,d0
000066C2 E848                       		lsr.w	#4,d0
000066C4 43F9 0000 0000             		lea	(StartLocArray).l,a1			; MJ: load location array
000066CA 43F1 0000                  		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
000066CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000066D2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000066D4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000066D8 5340                       		subq.w	#1,d0
000066DA E548                       		lsl.w	#2,d0
000066DC 43FB 00A8                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000066E0                            
000066E0                            LevSz_SonicPos:
000066E0 7200                       		moveq	#0,d1
000066E2 3219                       		move.w	(a1)+,d1
000066E4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000066E8 7000                       		moveq	#0,d0
000066EA 3011                       		move.w	(a1),d0
000066EC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000066F0 1438 F600                  		move.b	($FFFFF600).w,d2			; MJ: load game mode
000066F4 0242 00FC                  		andi.w	#$00FC,d2				; MJ: keep in range
000066F8 0C02 0004                  		cmpi.b	#$04,d2					; MJ: is screen mode at title?
000066FC 6600 0000                  		bne	loc_60D0				; MJ: if not, branch
00006700 323C 0050                  		move.w	#$0050,d1				; MJ: set positions for title screen
00006704 303C 03B0                  		move.w	#$03B0,d0				; MJ: ''
00006708 31C1 D008                  		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
0000670C 31C0 D00C                  		move.w	d0,($FFFFD00C).w			; MJ: ''
00006710                            
00006710                            loc_60D0:				; XREF: LevSz_ChkLamp
00006710 0441 00A0                  		subi.w	#$A0,d1
00006714 6400                       		bcc.s	loc_60D8
00006716 7200                       		moveq	#0,d1
00006718                            
00006718                            loc_60D8:
00006718 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000671C B242                       		cmp.w	d2,d1
0000671E 6500                       		bcs.s	loc_60E2
00006720 3202                       		move.w	d2,d1
00006722                            
00006722                            loc_60E2:
00006722 31C1 F700                  		move.w	d1,($FFFFF700).w
00006726 0440 0060                  		subi.w	#$60,d0
0000672A 6400                       		bcc.s	loc_60EE
0000672C 7000                       		moveq	#0,d0
0000672E                            
0000672E                            loc_60EE:
0000672E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006732 6D00                       		blt.s	loc_60F8
00006734 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006738                            
00006738                            loc_60F8:
00006738 31C0 F704                  		move.w	d0,($FFFFF704).w
0000673C 6100 0000                  		bsr.w	BgScrollSpeed
00006740                            ;		moveq	#0,d0
00006740                            ;		move.b	($FFFFFE10).w,d0
00006740                            	;	lsl.b	#2,d0
00006740                            	;	move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006740 6000 0000                  		bra.w	LevSz_Unk
00006744                            
00006744                            ; ===========================================================================
00006744                            ; ---------------------------------------------------------------------------
00006744                            ; MJ: Sonic start location array
00006744                            ; ---------------------------------------------------------------------------
00006744                            
00006744                            StartLocArray:	incbin	startpos\ghz1.bin
00006748                            		incbin	startpos\ghz2.bin
0000674C                            		incbin	startpos\ghz3.bin
00006750                            		incbin	startpos\ghz4.bin
00006754                            		incbin	startpos\lz1.bin
00006758                            		incbin	startpos\lz2.bin
0000675C                            		incbin	startpos\lz3.bin
00006760                            		incbin	startpos\lz4.bin
00006764                            		incbin	startpos\mz1.bin
00006768                            		incbin	startpos\mz2.bin
0000676C                            		incbin	startpos\mz3.bin
00006770                            		incbin	startpos\mz4.bin
00006774                            		incbin	startpos\slz1.bin
00006778                            		incbin	startpos\slz2.bin
0000677C                            		incbin	startpos\slz3.bin
00006780                            		incbin	startpos\slz4.bin
00006784                            		incbin	startpos\syz1.bin
00006788                            		incbin	startpos\syz2.bin
0000678C                            		incbin	startpos\syz3.bin
00006790                            		incbin	startpos\syz4.bin
00006794                            		incbin	startpos\sbz1.bin
00006798                            		incbin	startpos\sbz2.bin
0000679C                            		incbin	startpos\sbz3.bin
000067A0                            		incbin	startpos\sbz4.bin
000067A4                            		incbin	startpos\end1.bin
000067A8                            		incbin	startpos\end2.bin
000067AC                            		incbin	startpos\end3.bin
000067B0                            		incbin	startpos\end4.bin
000067B4                            		incbin	startpos\epz1.bin
000067B8                            		incbin	startpos\epz2.bin
000067BC                            		incbin	startpos\epz3.bin
000067C0                            		incbin	startpos\epz4.bin
000067C4                            		incbin	startpos\inz1.bin
000067C8                            		incbin	startpos\inz2.bin
000067CC                            		incbin	startpos\inz3.bin
000067D0                            		incbin	startpos\inz4.bin
000067D4                            		even
000067D4                            
000067D4                            ; ===========================================================================
000067D4                            ; ---------------------------------------------------------------------------
000067D4                            ; Which	256x256	tiles contain loops or roll-tunnels
000067D4                            ; ---------------------------------------------------------------------------
000067D4                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000067D4                            ; loop,	loop, tunnel, tunnel
000067D4                            ; ---------------------------------------------------------------------------
000067D4                            LoopTileNums:	incbin	misc\loopnums.bin
000067F0                            		even
000067F0                            
000067F0                            ; ===========================================================================
000067F0                            
000067F0                            LevSz_Unk:				; XREF: LevelSizeLoad
000067F0 7000                       		moveq	#0,d0
000067F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067F6 E508                       		lsl.b	#2,d0
000067F8 21FB 00DA F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000067FE 7000                       		moveq	#0,d0
00006800 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006804 E748                       		lsl.w	#3,d0
00006806 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000680A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000680E 24D9                       		move.l	(a1)+,(a2)+
00006810 24D9                       		move.l	(a1)+,(a2)+
00006812 4E75                       		rts	
00006814                            ; End of function LevelSizeLoad
00006814                            
00006814                            ; ===========================================================================
00006814 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000681C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006824 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000682C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006834 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000683C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006844 0070 0100 0100 0100        		dc.l $700100, $1000100
0000684C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006854 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000685C                            
0000685C                            ; ---------------------------------------------------------------------------
0000685C                            ; Subroutine to	set scroll speed of some backgrounds
0000685C                            ; ---------------------------------------------------------------------------
0000685C                            
0000685C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000685C                            
0000685C                            
0000685C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000685C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006860 6600                       		bne.s	loc_6206
00006862 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006866 31C0 F714                  		move.w	d0,($FFFFF714).w
0000686A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000686E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006872 31C1 F718                  		move.w	d1,($FFFFF718).w
00006876                            
00006876                            loc_6206:
00006876 7400                       		moveq	#0,d2
00006878 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000687C D442                       		add.w	d2,d2
0000687E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006882 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006886                            ; End of function BgScrollSpeed
00006886                            
00006886                            ; ===========================================================================
00006886 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000688A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000688E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006892 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_EPZ-BgScroll_Index
00006896 0000                       		dc.w BgScroll_INZ-BgScroll_Index
00006898                            ; ===========================================================================
00006898                            
00006898                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006898 E280                       		asr.l	#1,d0		; this is just BgScroll_LZ lol
0000689A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000689E 4E75                       		rts	
000068A0                            ; ===========================================================================
000068A0                            
000068A0                            BgScroll_LZ:				; XREF: BgScroll_Index
000068A0 E280                       		asr.l	#1,d0
000068A2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068A6 4E75                       		rts	
000068A8                            ; ===========================================================================
000068A8                            
000068A8                            BgScroll_MZ:				; XREF: BgScroll_Index
000068A8 4E75                       		rts	
000068AA                            ; ===========================================================================
000068AA                            
000068AA                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068AA 42B8 F708                  		clr.l    $FFFFF708.w
000068AE 42B8 F70C                          clr.l    $FFFFF70C.w
000068B2 4E75                               rts	
000068B4                            ; ===========================================================================
000068B4                            
000068B4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068B4                            ;		asl.l	#4,d0
000068B4                            ;		move.l	d0,d2
000068B4                            ;		asl.l	#1,d0
000068B4                            ;		add.l	d2,d0
000068B4                            ;		asr.l	#8,d0
000068B4                            ;		move.w	d0,($FFFFF70C).w
000068B4                            ;		move.w	d0,($FFFFF714).w
000068B4                            ;		rts	
000068B4 E280                       		asr.l	#1,d0		; this is just BgScroll_LZ lol
000068B6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068BA 4E75                       		rts	
000068BC                            ; ===========================================================================
000068BC                            
000068BC                            BgScroll_SBZ:                ; XREF: BgScroll_Index
000068BC 42B8 F708                          clr.l    $FFFFF708.w
000068C0 42B8 F70C                          clr.l    $FFFFF70C.w
000068C4 4E75                               rts
000068C6                            ; ===========================================================================
000068C6                            
000068C6                            BgScroll_End:				; XREF: BgScroll_Index
000068C6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068CC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000068D2 4E75                       		rts	
000068D4                            ; ===========================================================================
000068D4 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000068DA 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068E0 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000068E6 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000068EC 4E75                       		rts
000068EE                            ; ===========================================================================
000068EE                            
000068EE                            BgScroll_EPZ:				; XREF: BgScroll_Index
000068EE 4EF9 0000 0000             		jmp	Deform_EPZ
000068F4                            		
000068F4                            ; ===========================================================================
000068F4                            
000068F4                            BgScroll_INZ:				; XREF: BgScroll_Index
000068F4 E280                       		asr.l	#1,d0		; this is just BgScroll_LZ lol
000068F6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068FA 4E75                       		rts	
000068FC                            
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            ; Background layer deformation subroutines
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            
000068FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068FC                            
000068FC                            
000068FC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000068FC 4A38 F744                  		tst.b	($FFFFF744).w
00006900 6700                       		beq.s	loc_628E
00006902 4E75                       		rts	
00006904                            ; ===========================================================================
00006904                            
00006904                            loc_628E:
00006904 4278 F754                  		clr.w	($FFFFF754).w
00006908 4278 F756                  		clr.w	($FFFFF756).w
0000690C 4278 F758                  		clr.w	($FFFFF758).w
00006910 4278 F75A                  		clr.w	($FFFFF75A).w
00006914 6100 0000                  		bsr.w	ScrollHoriz
00006918 6100 0000                  		bsr.w	ScrollVertical
0000691C 6100 0000                  		bsr.w	DynScrResizeLoad
00006920 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006926 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000692C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006932 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006938 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000693E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006944 7000                       		moveq	#0,d0
00006946 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000694A D040                       		add.w	d0,d0
0000694C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006950 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006954                            ; End of function DeformBgLayer
00006954                            
00006954                            ; ===========================================================================
00006954                            ; ---------------------------------------------------------------------------
00006954                            ; Offset index for background layer deformation	code
00006954                            ; ---------------------------------------------------------------------------
00006954 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006958 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000695C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006960 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_EPZ-Deform_Index
00006964 0000                       		dc.w Deform_INZ-Deform_Index
00006966                            ; ---------------------------------------------------------------------------
00006966                            ; Green	Hill Zone background layer deformation code
00006966                            ; ---------------------------------------------------------------------------
00006966                            
00006966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006966                            
00006966                            
00006966                            Deform_GHZ:				; XREF: Deform_Index
00006966 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000696A 48C4                       		ext.l	d4
0000696C ED84                       		asl.l	#6,d4
0000696E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006972 48C5                       		ext.l	d5
00006974 E985                       		asl.l	#4,d5
00006976 2205                       		move.l	d5,d1
00006978 E385                       		asl.l	#1,d5
0000697A DA81                       		add.l	d1,d5
0000697C 6100 0000                  		bsr.w	ScrollBlock1
00006980 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006986 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000698A 323C 00DF                  		move.w	#$DF,d1
0000698E 3038 F700                  		move.w	($FFFFF700).w,d0
00006992 4440                       		neg.w	d0
00006994 4840                       		swap	d0
00006996 3038 F708                  		move.w	($FFFFF708).w,d0
0000699A 4440                       		neg.w	d0
0000699C                            loc_633C:
0000699C 22C0                       		move.l	d0,(a1)+
0000699E 51C9 FFFC                  		dbf	d1,loc_633C
000069A2 4E75                       		rts	
000069A4                            ; End of function Deform_GHZ
000069A4                            
000069A4                            ; ---------------------------------------------------------------------------
000069A4                            ; Labyrinth Zone background layer deformation code
000069A4                            ; ---------------------------------------------------------------------------
000069A4                            
000069A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A4                            
000069A4                            
000069A4                            Deform_LZ:				; XREF: Deform_Index
000069A4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A8 48C4                       		ext.l	d4
000069AA EF84                       		asl.l	#7,d4
000069AC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069B0 48C5                       		ext.l	d5
000069B2 EF85                       		asl.l	#7,d5
000069B4 6100 0000                  		bsr.w	ScrollBlock1
000069B8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C2 323C 00DF                  		move.w	#$DF,d1
000069C6 3038 F700                  		move.w	($FFFFF700).w,d0
000069CA 4440                       		neg.w	d0
000069CC 4840                       		swap	d0
000069CE 3038 F708                  		move.w	($FFFFF708).w,d0
000069D2 4440                       		neg.w	d0
000069D4                            
000069D4                            loc_63C6:
000069D4 22C0                       		move.l	d0,(a1)+
000069D6 51C9 FFFC                  		dbf	d1,loc_63C6
000069DA 3038 F646                  		move.w	($FFFFF646).w,d0
000069DE 9078 F704                  		sub.w	($FFFFF704).w,d0
000069E2 4E75                       		rts	
000069E4                            ; End of function Deform_LZ
000069E4                            
000069E4                            ; ---------------------------------------------------------------------------
000069E4                            ; Marble Zone background layer deformation code
000069E4                            ; ---------------------------------------------------------------------------
000069E4                            
000069E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069E4                            
000069E4                            
000069E4                            Deform_MZ:				; XREF: Deform_Index
000069E4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069E8 48C4                       		ext.l	d4
000069EA ED84                       		asl.l	#6,d4
000069EC 2204                       		move.l	d4,d1
000069EE E384                       		asl.l	#1,d4
000069F0 D881                       		add.l	d1,d4
000069F2 7A00                       		moveq	#0,d5
000069F4 6100 0000                  		bsr.w	ScrollBlock1
000069F8 303C 0200                  		move.w	#$200,d0
000069FC 3238 F704                  		move.w	($FFFFF704).w,d1
00006A00 0441 01C8                  		subi.w	#$1C8,d1
00006A04 6500                       		bcs.s	loc_6402
00006A06 3401                       		move.w	d1,d2
00006A08 D241                       		add.w	d1,d1
00006A0A D242                       		add.w	d2,d1
00006A0C E441                       		asr.w	#2,d1
00006A0E D041                       		add.w	d1,d0
00006A10                            
00006A10                            loc_6402:
00006A10 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A14 6100 0000                  		bsr.w	ScrollBlock3
00006A18 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A1E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A22 323C 00DF                  		move.w	#$DF,d1
00006A26 3038 F700                  		move.w	($FFFFF700).w,d0
00006A2A 4440                       		neg.w	d0
00006A2C 4840                       		swap	d0
00006A2E 3038 F708                  		move.w	($FFFFF708).w,d0
00006A32 4440                       		neg.w	d0
00006A34                            
00006A34                            loc_6426:
00006A34 22C0                       		move.l	d0,(a1)+
00006A36 51C9 FFFC                  		dbf	d1,loc_6426
00006A3A 4E75                       		rts	
00006A3C                            ; End of function Deform_MZ
00006A3C                            
00006A3C                            ; ---------------------------------------------------------------------------
00006A3C                            ; Star Light Zone background layer deformation code
00006A3C                            ; ---------------------------------------------------------------------------
00006A3C                            
00006A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A3C                            
00006A3C                            
00006A3C                            Deform_SLZ:				; XREF: Deform_Index
00006A3C 31F8 F70C F618             		move.w    ($FFFFF70C).w,($FFFFF618).w	; Code done by Novedicus. This was originally for Among the Others but I copy+pasted it cus im lazy lol
00006A42 43F8 CC00                          lea    ($FFFFCC00).w,a1
00006A46 323C 00DF                          move.w    #$DF,d1
00006A4A 3038 F700                          move.w    ($FFFFF700).w,d0
00006A4E 4440                               neg.w    d0
00006A50 4840                               swap    d0
00006A52 3038 F708                          move.w    ($FFFFF708).w,d0
00006A56 4440                               neg.w    d0
00006A58                            
00006A58                            peeultra:
00006A58 22C0                               move.l    d0,(a1)+
00006A5A 51C9 FFFC                          dbf    d1,peeultra
00006A5E 4E75                               rts
00006A60                            ; End of function Deform_SLZ_2
00006A60                            
00006A60                            ; ---------------------------------------------------------------------------
00006A60                            ; Spring Yard Zone background layer deformation	code
00006A60                            ; ---------------------------------------------------------------------------
00006A60                            
00006A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A60                            
00006A60                            
00006A60                            Deform_SYZ:				; XREF: Deform_Index
00006A60 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A64 48C4                       		ext.l	d4
00006A66 ED84                       		asl.l	#6,d4
00006A68 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A6C 48C5                       		ext.l	d5
00006A6E E985                       		asl.l	#4,d5
00006A70 2205                       		move.l	d5,d1
00006A72 E385                       		asl.l	#1,d5
00006A74 DA81                       		add.l	d1,d5
00006A76 6100 0000                  		bsr.w	ScrollBlock1
00006A7A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A80 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A84 323C 00DF                  		move.w	#$DF,d1
00006A88 3038 F700                  		move.w	($FFFFF700).w,d0
00006A8C 4440                       		neg.w	d0
00006A8E 4840                       		swap	d0
00006A90 3038 F708                  		move.w	($FFFFF708).w,d0
00006A94 4440                       		neg.w	d0
00006A96                            
00006A96                            loc_653C:
00006A96 22C0                       		move.l	d0,(a1)+
00006A98 51C9 FFFC                  		dbf	d1,loc_653C
00006A9C 4E75                       		rts	
00006A9E                            ; End of function Deform_SYZ
00006A9E                            
00006A9E                            ; ---------------------------------------------------------------------------
00006A9E                            ; Scrap	Brain Zone background layer deformation	code
00006A9E                            ; ---------------------------------------------------------------------------
00006A9E                            
00006A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A9E                            
00006A9E                            
00006A9E                            Deform_SBZ:                ; XREF: Deform_Index
00006A9E 31F8 F70C F618                     move.w    ($FFFFF70C).w,($FFFFF618).w
00006AA4 43F8 CC00                          lea    ($FFFFCC00).w,a1
00006AA8 323C 00DF                          move.w    #$DF,d1
00006AAC 3038 F700                          move.w    ($FFFFF700).w,d0
00006AB0 4440                               neg.w    d0
00006AB2 4840                               swap    d0
00006AB4 3038 F708                          move.w    ($FFFFF708).w,d0
00006AB8 4440                               neg.w    d0
00006ABA                            
00006ABA                            loc_6576:
00006ABA 22C0                               move.l    d0,(a1)+
00006ABC 51C9 FFFC                          dbf    d1,loc_6576
00006AC0 4E75                               rts    
00006AC2                            ; End of function Deform_SBZ
00006AC2                            
00006AC2                            ; ---------------------------------------------------------------------------
00006AC2                            ; Egg Plant Zone background layer deformation code
00006AC2                            ; ---------------------------------------------------------------------------
00006AC2                            
00006AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AC2                            
00006AC2                            
00006AC2                            Deform_EPZ:				; XREF: Deform_Index
00006AC2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AC6 48C4                       		ext.l	d4
00006AC8 EB84                       		asl.l	#5,d4
00006ACA 2204                       		move.l	d4,d1
00006ACC E384                       		asl.l	#1,d4
00006ACE D881                       		add.l	d1,d4
00006AD0 7A00                       		moveq	#0,d5
00006AD2 6100 0000                  		bsr.w	ScrollBlock1
00006AD6 6100 0000                  		bsr.w	ScrollBlock4
00006ADA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006ADE 3038 F704                  		move.w	($FFFFF704).w,d0
00006AE2 0240 07FF                  		andi.w	#$7FF,d0
00006AE6 EA48                       		lsr.w	#5,d0
00006AE8 4440                       		neg.w	d0
00006AEA 0640 0026                  		addi.w	#$26,d0
00006AEE 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AF2 3800                       		move.w	d0,d4
00006AF4 6100 0000                  		bsr.w	ScrollBlock3
00006AF8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AFE 323C 006F                  		move.w	#$6F,d1
00006B02 9244                       		sub.w	d4,d1
00006B04 3038 F700                  		move.w	($FFFFF700).w,d0
00006B08 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006B0E 6600                       		bne.s	EPZpee1
00006B10 7000                       		moveq	#0,d0
00006B12                            
00006B12                            EPZpee1:
00006B12 4440                       		neg.w	d0
00006B14 4840                       		swap	d0
00006B16 3038 F708                  		move.w	($FFFFF708).w,d0
00006B1A 4440                       		neg.w	d0
00006B1C                            
00006B1C                            EPZpee2:
00006B1C 22C0                       		move.l	d0,(a1)+
00006B1E 51C9 FFFC                  		dbf	d1,EPZpee2
00006B22 323C 0027                  		move.w	#$27,d1
00006B26 3038 F710                  		move.w	($FFFFF710).w,d0
00006B2A 4440                       		neg.w	d0
00006B2C                            
00006B2C                            EPZpee3:
00006B2C 22C0                       		move.l	d0,(a1)+
00006B2E 51C9 FFFC                  		dbf	d1,EPZpee3
00006B32 3038 F710                  		move.w	($FFFFF710).w,d0
00006B36 0640 0000                  		addi.w	#0,d0
00006B3A 3438 F700                  		move.w	($FFFFF700).w,d2
00006B3E 0642 FE00                  		addi.w	#-$200,d2
00006B42 9440                       		sub.w	d0,d2
00006B44 48C2                       		ext.l	d2
00006B46 E182                       		asl.l	#8,d2
00006B48 85FC 0068                  		divs.w	#$68,d2
00006B4C 48C2                       		ext.l	d2
00006B4E E182                       		asl.l	#8,d2
00006B50 7600                       		moveq	#0,d3
00006B52 3600                       		move.w	d0,d3
00006B54 323C 0047                  		move.w	#$47,d1
00006B58 D244                       		add.w	d4,d1
00006B5A                            
00006B5A                            EPZpee4:
00006B5A 3003                       		move.w	d3,d0
00006B5C 4440                       		neg.w	d0
00006B5E 22C0                       		move.l	d0,(a1)+
00006B60 4843                       		swap	d3
00006B62 D682                       		add.l	d2,d3
00006B64 4843                       		swap	d3
00006B66 51C9 FFF2                  		dbf	d1,EPZpee4
00006B6A 4E75                       		rts	
00006B6C                            ; End of function Deform_GHZ
00006B6C                            
00006B6C                            ; ---------------------------------------------------------------------------
00006B6C                            ; Island Nowhere background layer deformation code
00006B6C                            ; ---------------------------------------------------------------------------
00006B6C                            
00006B6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B6C                            
00006B6C                            
00006B6C                            Deform_INZ:				; XREF: Deform_Index
00006B6C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B70 48C4                       		ext.l	d4
00006B72 ED84                       		asl.l	#6,d4
00006B74 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B78 48C5                       		ext.l	d5
00006B7A E985                       		asl.l	#4,d5
00006B7C 2205                       		move.l	d5,d1
00006B7E E385                       		asl.l	#1,d5
00006B80 DA81                       		add.l	d1,d5
00006B82 6100 0000                  		bsr.w	ScrollBlock1
00006B86 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B8C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B90 323C 00DF                  		move.w	#$DF,d1
00006B94 3038 F700                  		move.w	($FFFFF700).w,d0
00006B98 4440                       		neg.w	d0
00006B9A 4840                       		swap	d0
00006B9C 3038 F708                  		move.w	($FFFFF708).w,d0
00006BA0 4440                       		neg.w	d0
00006BA2                            
00006BA2                            yoinkINZ:
00006BA2 22C0                       		move.l	d0,(a1)+
00006BA4 51C9 FFFC                  		dbf	d1,yoinkINZ
00006BA8 4E75                       		rts		
00006BAA                            ; End of function Deform_GHZ
00006BAA                            
00006BAA                            ; ---------------------------------------------------------------------------
00006BAA                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BAA                            ; ---------------------------------------------------------------------------
00006BAA                            
00006BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BAA                            
00006BAA                            
00006BAA                            ScrollHoriz:				; XREF: DeformBgLayer
00006BAA 3838 F700                  		move.w	($FFFFF700).w,d4
00006BAE 6100                       		bsr.s	ScrollHoriz2
00006BB0 3038 F700                  		move.w	($FFFFF700).w,d0
00006BB4 0240 0010                  		andi.w	#$10,d0
00006BB8 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BBC B300                       		eor.b	d1,d0
00006BBE 6600                       		bne.s	locret_65B0
00006BC0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BC6 3038 F700                  		move.w	($FFFFF700).w,d0
00006BCA 9044                       		sub.w	d4,d0
00006BCC 6A00                       		bpl.s	loc_65AA
00006BCE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BD4 4E75                       		rts	
00006BD6                            ; ===========================================================================
00006BD6                            
00006BD6                            loc_65AA:
00006BD6 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BDC                            
00006BDC                            locret_65B0:
00006BDC 4E75                       		rts	
00006BDE                            ; End of function ScrollHoriz
00006BDE                            
00006BDE                            
00006BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BDE                            
00006BDE                            
00006BDE                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BDE 3038 D008                  		move.w	($FFFFD008).w,d0
00006BE2 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BE6 0440 0090                  		subi.w	#$90,d0
00006BEA 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00006BEC 0440 0010                  		subi.w	#$10,d0
00006BF0 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
00006BF2 4278 F73A                  		clr.w	($FFFFF73A).w
00006BF6 4E75                       		rts
00006BF8                            ; ===========================================================================
00006BF8                            
00006BF8                            loc_65CC:
00006BF8 0C40 0010                  		cmpi.w	#$10,d0
00006BFC 6500                       		bcs.s	loc_65D6
00006BFE 303C 0010                  		move.w	#$10,d0
00006C02                            
00006C02                            loc_65D6:
00006C02 D078 F700                  		add.w	($FFFFF700).w,d0
00006C06 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C0A 6D00                       		blt.s	loc_65E4
00006C0C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C10                            
00006C10                            loc_65E4:
00006C10 3200                       		move.w	d0,d1
00006C12 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C16 E141                       		asl.w	#8,d1
00006C18 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C1C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C20 4E75                       		rts	
00006C22                            ; ===========================================================================
00006C22                            
00006C22                            loc_65F6:
00006C22 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
00006C26 6400                       		bcc.s	Left_NoMax				; if not, branch
00006C28 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
00006C2C                            
00006C2C                            Left_NoMax:
00006C2C D078 F700                  		add.w	($FFFFF700).w,d0
00006C30 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C34 6EDA                       		bgt.s	loc_65E4
00006C36 3038 F728                  		move.w	($FFFFF728).w,d0
00006C3A 60D4                       		bra.s	loc_65E4
00006C3C                            ; End of function ScrollHoriz2
00006C3C                            
00006C3C                            ; ===========================================================================
00006C3C 4A40                       		tst.w	d0
00006C3E 6A00                       		bpl.s	loc_6610
00006C40 303C FFFE                  		move.w	#-2,d0
00006C44 60DC                       		bra.s	loc_65F6
00006C46                            ; ===========================================================================
00006C46                            
00006C46                            loc_6610:
00006C46 303C 0002                  		move.w	#2,d0
00006C4A 60AC                       		bra.s	loc_65CC
00006C4C                            
00006C4C                            ; ---------------------------------------------------------------------------
00006C4C                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C4C                            ; ---------------------------------------------------------------------------
00006C4C                            
00006C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C4C                            
00006C4C                            
00006C4C                            ScrollVertical:				; XREF: DeformBgLayer
00006C4C 7200                       		moveq	#0,d1
00006C4E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C52 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C56 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C5C 6700                       		beq.s	loc_662A
00006C5E 5B40                       		subq.w	#5,d0
00006C60                            
00006C60                            loc_662A:
00006C60 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C66 6700                       		beq.s	loc_664A
00006C68 0640 0020                  		addi.w	#$20,d0
00006C6C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C70 6500                       		bcs.s	loc_6696
00006C72 0440 0040                  		subi.w	#$40,d0
00006C76 6400                       		bcc.s	loc_6696
00006C78 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C7C 6600                       		bne.s	loc_66A8
00006C7E 6000                       		bra.s	loc_6656
00006C80                            ; ===========================================================================
00006C80                            
00006C80                            loc_664A:
00006C80 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C84 6600                       		bne.s	loc_665C
00006C86 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C8A 6600                       		bne.s	loc_66A8
00006C8C                            
00006C8C                            loc_6656:
00006C8C 4278 F73C                  		clr.w	($FFFFF73C).w
00006C90 4E75                       		rts	
00006C92                            ; ===========================================================================
00006C92                            
00006C92                            loc_665C:
00006C92 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C98 6600                       		bne.s	loc_6684
00006C9A 3238 D014                  		move.w	($FFFFD014).w,d1
00006C9E 6A00                       		bpl.s	loc_666C
00006CA0 4441                       		neg.w	d1
00006CA2                            
00006CA2                            loc_666C:
00006CA2 0C41 0800                  		cmpi.w	#$800,d1
00006CA6 6400                       		bcc.s	loc_6696
00006CA8 323C 0600                  		move.w	#$600,d1
00006CAC 0C40 0006                  		cmpi.w	#6,d0
00006CB0 6E00                       		bgt.s	loc_66F6
00006CB2 0C40 FFFA                  		cmpi.w	#-6,d0
00006CB6 6D00                       		blt.s	loc_66C0
00006CB8 6000                       		bra.s	loc_66AE
00006CBA                            ; ===========================================================================
00006CBA                            
00006CBA                            loc_6684:
00006CBA 323C 0200                  		move.w	#$200,d1
00006CBE 0C40 0002                  		cmpi.w	#2,d0
00006CC2 6E00                       		bgt.s	loc_66F6
00006CC4 0C40 FFFE                  		cmpi.w	#-2,d0
00006CC8 6D00                       		blt.s	loc_66C0
00006CCA 6000                       		bra.s	loc_66AE
00006CCC                            ; ===========================================================================
00006CCC                            
00006CCC                            loc_6696:
00006CCC 323C 1000                  		move.w	#$1000,d1
00006CD0 0C40 0010                  		cmpi.w	#$10,d0
00006CD4 6E00                       		bgt.s	loc_66F6
00006CD6 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CDA 6D00                       		blt.s	loc_66C0
00006CDC 6000                       		bra.s	loc_66AE
00006CDE                            ; ===========================================================================
00006CDE                            
00006CDE                            loc_66A8:
00006CDE 7000                       		moveq	#0,d0
00006CE0 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CE4                            
00006CE4                            loc_66AE:
00006CE4 7200                       		moveq	#0,d1
00006CE6 3200                       		move.w	d0,d1
00006CE8 D278 F704                  		add.w	($FFFFF704).w,d1
00006CEC 4A40                       		tst.w	d0
00006CEE 6A00 0000                  		bpl.w	loc_6700
00006CF2 6000 0000                  		bra.w	loc_66CC
00006CF6                            ; ===========================================================================
00006CF6                            
00006CF6                            loc_66C0:
00006CF6 4441                       		neg.w	d1
00006CF8 48C1                       		ext.l	d1
00006CFA E181                       		asl.l	#8,d1
00006CFC D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D00 4841                       		swap	d1
00006D02                            
00006D02                            loc_66CC:
00006D02 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006D06 6E00                       		bgt.s	loc_6724
00006D08 0C41 FF00                  		cmpi.w	#-$100,d1
00006D0C 6E00                       		bgt.s	loc_66F0
00006D0E 0241 07FF                  		andi.w	#$7FF,d1
00006D12 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D18 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D1E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D24 6000                       		bra.s	loc_6724
00006D26                            ; ===========================================================================
00006D26                            
00006D26                            loc_66F0:
00006D26 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D2A 6000                       		bra.s	loc_6724
00006D2C                            ; ===========================================================================
00006D2C                            
00006D2C                            loc_66F6:
00006D2C 48C1                       		ext.l	d1
00006D2E E181                       		asl.l	#8,d1
00006D30 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D34 4841                       		swap	d1
00006D36                            
00006D36                            loc_6700:
00006D36 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D3A 6D00                       		blt.s	loc_6724
00006D3C 0441 0800                  		subi.w	#$800,d1
00006D40 6500                       		bcs.s	loc_6720
00006D42 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D48 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D4E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D54 6000                       		bra.s	loc_6724
00006D56                            ; ===========================================================================
00006D56                            
00006D56                            loc_6720:
00006D56 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D5A                            
00006D5A                            loc_6724:
00006D5A 3838 F704                  		move.w	($FFFFF704).w,d4
00006D5E 4841                       		swap	d1
00006D60 2601                       		move.l	d1,d3
00006D62 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D66 E09B                       		ror.l	#8,d3
00006D68 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D6C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D70 3038 F704                  		move.w	($FFFFF704).w,d0
00006D74 0240 0010                  		andi.w	#$10,d0
00006D78 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D7C B300                       		eor.b	d1,d0
00006D7E 6600                       		bne.s	locret_6766
00006D80 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D86 3038 F704                  		move.w	($FFFFF704).w,d0
00006D8A 9044                       		sub.w	d4,d0
00006D8C 6A00                       		bpl.s	loc_6760
00006D8E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D94 4E75                       		rts	
00006D96                            ; ===========================================================================
00006D96                            
00006D96                            loc_6760:
00006D96 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D9C                            
00006D9C                            locret_6766:
00006D9C 4E75                       		rts	
00006D9E                            ; End of function ScrollVertical
00006D9E                            
00006D9E                            
00006D9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D9E                            
00006D9E                            
00006D9E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D9E 2438 F708                  		move.l	($FFFFF708).w,d2
00006DA2 2002                       		move.l	d2,d0
00006DA4 D084                       		add.l	d4,d0
00006DA6 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DAA 2200                       		move.l	d0,d1
00006DAC 4841                       		swap	d1
00006DAE 0241 0010                  		andi.w	#$10,d1
00006DB2 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DB6 B701                       		eor.b	d3,d1
00006DB8 6600                       		bne.s	loc_679C
00006DBA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DC0 9082                       		sub.l	d2,d0
00006DC2 6A00                       		bpl.s	loc_6796
00006DC4 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DCA 6000                       		bra.s	loc_679C
00006DCC                            ; ===========================================================================
00006DCC                            
00006DCC                            loc_6796:
00006DCC 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DD2                            
00006DD2                            loc_679C:
00006DD2 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DD6 2003                       		move.l	d3,d0
00006DD8 D085                       		add.l	d5,d0
00006DDA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DDE 2200                       		move.l	d0,d1
00006DE0 4841                       		swap	d1
00006DE2 0241 0010                  		andi.w	#$10,d1
00006DE6 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DEA B501                       		eor.b	d2,d1
00006DEC 6600                       		bne.s	locret_67D0
00006DEE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DF4 9083                       		sub.l	d3,d0
00006DF6 6A00                       		bpl.s	loc_67CA
00006DF8 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DFE 4E75                       		rts	
00006E00                            ; ===========================================================================
00006E00                            
00006E00                            loc_67CA:
00006E00 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E06                            
00006E06                            locret_67D0:
00006E06 4E75                       		rts	
00006E08                            ; End of function ScrollBlock1
00006E08                            
00006E08                            
00006E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E08                            
00006E08                            
00006E08                            ScrollBlock2:				; XREF: Deform_SLZ
00006E08 2438 F708                  		move.l	($FFFFF708).w,d2
00006E0C 2002                       		move.l	d2,d0
00006E0E D084                       		add.l	d4,d0
00006E10 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E14 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E18 2003                       		move.l	d3,d0
00006E1A D085                       		add.l	d5,d0
00006E1C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E20 2200                       		move.l	d0,d1
00006E22 4841                       		swap	d1
00006E24 0241 0010                  		andi.w	#$10,d1
00006E28 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E2C B501                       		eor.b	d2,d1
00006E2E 6600                       		bne.s	locret_6812
00006E30 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E36 9083                       		sub.l	d3,d0
00006E38 6A00                       		bpl.s	loc_680C
00006E3A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E40 4E75                       		rts	
00006E42                            ; ===========================================================================
00006E42                            
00006E42                            loc_680C:
00006E42 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E48                            
00006E48                            locret_6812:
00006E48 4E75                       		rts	
00006E4A                            ; End of function ScrollBlock2
00006E4A                            
00006E4A                            
00006E4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E4A                            
00006E4A                            
00006E4A                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E4A 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E4E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E52 3200                       		move.w	d0,d1
00006E54 0241 0010                  		andi.w	#$10,d1
00006E58 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E5C B501                       		eor.b	d2,d1
00006E5E 6600                       		bne.s	locret_6842
00006E60 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E66 9043                       		sub.w	d3,d0
00006E68 6A00                       		bpl.s	loc_683C
00006E6A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E70 4E75                       		rts	
00006E72                            ; ===========================================================================
00006E72                            
00006E72                            loc_683C:
00006E72 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E78                            
00006E78                            locret_6842:
00006E78 4E75                       		rts	
00006E7A                            ; End of function ScrollBlock3
00006E7A                            
00006E7A                            
00006E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7A                            
00006E7A                            
00006E7A                            ScrollBlock4:				; XREF: Deform_GHZ
00006E7A 3438 F710                  		move.w	($FFFFF710).w,d2
00006E7E 3638 F714                  		move.w	($FFFFF714).w,d3
00006E82 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E86 48C0                       		ext.l	d0
00006E88 EF80                       		asl.l	#7,d0
00006E8A D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E8E 3038 F710                  		move.w	($FFFFF710).w,d0
00006E92 0240 0010                  		andi.w	#$10,d0
00006E96 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E9A B300                       		eor.b	d1,d0
00006E9C 6600                       		bne.s	locret_6884
00006E9E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006EA4 3038 F710                  		move.w	($FFFFF710).w,d0
00006EA8 9042                       		sub.w	d2,d0
00006EAA 6A00                       		bpl.s	loc_687E
00006EAC 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EB2 6000                       		bra.s	locret_6884
00006EB4                            ; ===========================================================================
00006EB4                            
00006EB4                            loc_687E:
00006EB4 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006EBA                            
00006EBA                            locret_6884:
00006EBA 4E75                       		rts	
00006EBC                            ; End of function ScrollBlock4
00006EBC                            
00006EBC                            
00006EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EBC                            
00006EBC                            
00006EBC                            sub_6886:				; XREF: loc_C44
00006EBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EC2 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EC8 45F8 F756                  		lea	($FFFFF756).w,a2
00006ECC 47F8 F708                  		lea	($FFFFF708).w,a3
00006ED0 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00006ED4 343C 6000                  		move.w	#$6000,d2
00006ED8 6100 0000                  		bsr.w	sub_6954
00006EDC 45F8 F758                  		lea	($FFFFF758).w,a2
00006EE0 47F8 F710                  		lea	($FFFFF710).w,a3
00006EE4 6000 0000                  		bra.w	sub_69F4
00006EE8                            ; End of function sub_6886
00006EE8                            
00006EE8                            ; ---------------------------------------------------------------------------
00006EE8                            ; Subroutine to	display	correct	tiles as you move
00006EE8                            ; ---------------------------------------------------------------------------
00006EE8                            
00006EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EE8                            
00006EE8                            
00006EE8                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EE8 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EEE 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EF4 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EF8 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EFC 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00006F00 343C 6000                  		move.w	#$6000,d2
00006F04 6100 0000                  		bsr.w	sub_6954
00006F08 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F0C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F10 6100 0000                  		bsr.w	sub_69F4
00006F14 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F18 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F1C 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00006F20 343C 4000                  		move.w	#$4000,d2
00006F24 4A12                       		tst.b	(a2)
00006F26 6700                       		beq.s	locret_6952
00006F28 0892 0000                  		bclr	#0,(a2)
00006F2C 6700                       		beq.s	loc_6908
00006F2E 78F0                       		moveq	#-$10,d4
00006F30 7AF0                       		moveq	#-$10,d5
00006F32 6100 0000                  		bsr.w	sub_6C20
00006F36 78F0                       		moveq	#-$10,d4
00006F38 7AF0                       		moveq	#-$10,d5
00006F3A 6100 0000                  		bsr.w	sub_6AD8
00006F3E                            
00006F3E                            loc_6908:
00006F3E 0892 0001                  		bclr	#1,(a2)
00006F42 6700                       		beq.s	loc_6922
00006F44 383C 00E0                  		move.w	#$E0,d4
00006F48 7AF0                       		moveq	#-$10,d5
00006F4A 6100 0000                  		bsr.w	sub_6C20
00006F4E 383C 00E0                  		move.w	#$E0,d4
00006F52 7AF0                       		moveq	#-$10,d5
00006F54 6100 0000                  		bsr.w	sub_6AD8
00006F58                            
00006F58                            loc_6922:
00006F58 0892 0002                  		bclr	#2,(a2)
00006F5C 6700                       		beq.s	loc_6938
00006F5E 78F0                       		moveq	#-$10,d4
00006F60 7AF0                       		moveq	#-$10,d5
00006F62 6100 0000                  		bsr.w	sub_6C20
00006F66 78F0                       		moveq	#-$10,d4
00006F68 7AF0                       		moveq	#-$10,d5
00006F6A 6100 0000                  		bsr.w	sub_6B04
00006F6E                            
00006F6E                            loc_6938:
00006F6E 0892 0003                  		bclr	#3,(a2)
00006F72 6700                       		beq.s	locret_6952
00006F74 78F0                       		moveq	#-$10,d4
00006F76 3A3C 0140                  		move.w	#$140,d5
00006F7A 6100 0000                  		bsr.w	sub_6C20
00006F7E 78F0                       		moveq	#-$10,d4
00006F80 3A3C 0140                  		move.w	#$140,d5
00006F84 6100 0000                  		bsr.w	sub_6B04
00006F88                            
00006F88                            locret_6952:
00006F88 4E75                       		rts	
00006F8A                            ; End of function LoadTilesAsYouMove
00006F8A                            
00006F8A                            
00006F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8A                            
00006F8A                            
00006F8A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F8A 4A12                       		tst.b	(a2)
00006F8C 6700 0000                  		beq.w	locret_69F2
00006F90 0892 0000                  		bclr	#0,(a2)
00006F94 6700                       		beq.s	loc_6972
00006F96 78F0                       		moveq	#-$10,d4
00006F98 7AF0                       		moveq	#-$10,d5
00006F9A 6100 0000                  		bsr.w	sub_6C20
00006F9E 78F0                       		moveq	#-$10,d4
00006FA0 7AF0                       		moveq	#-$10,d5
00006FA2 7C1F                       		moveq	#$1F,d6
00006FA4 6100 0000                  		bsr.w	sub_6ADA
00006FA8                            
00006FA8                            loc_6972:
00006FA8 0892 0001                  		bclr	#1,(a2)
00006FAC 6700                       		beq.s	loc_698E
00006FAE 383C 00E0                  		move.w	#$E0,d4
00006FB2 7AF0                       		moveq	#-$10,d5
00006FB4 6100 0000                  		bsr.w	sub_6C20
00006FB8 383C 00E0                  		move.w	#$E0,d4
00006FBC 7AF0                       		moveq	#-$10,d5
00006FBE 7C1F                       		moveq	#$1F,d6
00006FC0 6100 0000                  		bsr.w	sub_6ADA
00006FC4                            
00006FC4                            loc_698E:
00006FC4 0892 0002                  		bclr	#2,(a2)
00006FC8 6700                       		beq.s	loc_69BE
00006FCA 78F0                       		moveq	#-$10,d4
00006FCC 7AF0                       		moveq	#-$10,d5
00006FCE 6100 0000                  		bsr.w	sub_6C20
00006FD2 78F0                       		moveq	#-$10,d4
00006FD4 7AF0                       		moveq	#-$10,d5
00006FD6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FDA 322B 0004                  		move.w	4(a3),d1
00006FDE 0241 FFF0                  		andi.w	#-$10,d1
00006FE2 9C41                       		sub.w	d1,d6
00006FE4 6D00                       		blt.s	loc_69BE
00006FE6 E84E                       		lsr.w	#4,d6
00006FE8 0C46 000F                  		cmpi.w	#$F,d6
00006FEC 6500                       		bcs.s	loc_69BA
00006FEE 7C0F                       		moveq	#$F,d6
00006FF0                            
00006FF0                            loc_69BA:
00006FF0 6100 0000                  		bsr.w	sub_6B06
00006FF4                            
00006FF4                            loc_69BE:
00006FF4 0892 0003                  		bclr	#3,(a2)
00006FF8 6700                       		beq.s	locret_69F2
00006FFA 78F0                       		moveq	#-$10,d4
00006FFC 3A3C 0140                  		move.w	#$140,d5
00007000 6100 0000                  		bsr.w	sub_6C20
00007004 78F0                       		moveq	#-$10,d4
00007006 3A3C 0140                  		move.w	#$140,d5
0000700A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000700E 322B 0004                  		move.w	4(a3),d1
00007012 0241 FFF0                  		andi.w	#-$10,d1
00007016 9C41                       		sub.w	d1,d6
00007018 6D00                       		blt.s	locret_69F2
0000701A E84E                       		lsr.w	#4,d6
0000701C 0C46 000F                  		cmpi.w	#$F,d6
00007020 6500                       		bcs.s	loc_69EE
00007022 7C0F                       		moveq	#$F,d6
00007024                            
00007024                            loc_69EE:
00007024 6100 0000                  		bsr.w	sub_6B06
00007028                            
00007028                            locret_69F2:
00007028 4E75                       		rts	
0000702A                            ; End of function sub_6954
0000702A                            
0000702A                            
0000702A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000702A                            
0000702A                            
0000702A                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000702A 4A12                       		tst.b	(a2)
0000702C 6700 0000                  		beq.w	locret_6A80
00007030 0892 0002                  		bclr	#2,(a2)
00007034 6700                       		beq.s	loc_6A3E
00007036 0C53 0010                  		cmpi.w	#$10,(a3)
0000703A 6500                       		bcs.s	loc_6A3E
0000703C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007040 322B 0004                  		move.w	4(a3),d1
00007044 0241 FFF0                  		andi.w	#-$10,d1
00007048 9841                       		sub.w	d1,d4
0000704A 3F04                       		move.w	d4,-(sp)
0000704C 7AF0                       		moveq	#-$10,d5
0000704E 6100 0000                  		bsr.w	sub_6C20
00007052 381F                       		move.w	(sp)+,d4
00007054 7AF0                       		moveq	#-$10,d5
00007056 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000705A 322B 0004                  		move.w	4(a3),d1
0000705E 0241 FFF0                  		andi.w	#-$10,d1
00007062 9C41                       		sub.w	d1,d6
00007064 6D00                       		blt.s	loc_6A3E
00007066 E84E                       		lsr.w	#4,d6
00007068 0446 000E                  		subi.w	#$E,d6
0000706C 6400                       		bcc.s	loc_6A3E
0000706E 4446                       		neg.w	d6
00007070 6100 0000                  		bsr.w	sub_6B06
00007074                            
00007074                            loc_6A3E:
00007074 0892 0003                  		bclr	#3,(a2)
00007078 6700                       		beq.s	locret_6A80
0000707A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000707E 322B 0004                  		move.w	4(a3),d1
00007082 0241 FFF0                  		andi.w	#-$10,d1
00007086 9841                       		sub.w	d1,d4
00007088 3F04                       		move.w	d4,-(sp)
0000708A 3A3C 0140                  		move.w	#$140,d5
0000708E 6100 0000                  		bsr.w	sub_6C20
00007092 381F                       		move.w	(sp)+,d4
00007094 3A3C 0140                  		move.w	#$140,d5
00007098 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000709C 322B 0004                  		move.w	4(a3),d1
000070A0 0241 FFF0                  		andi.w	#-$10,d1
000070A4 9C41                       		sub.w	d1,d6
000070A6 6D00                       		blt.s	locret_6A80
000070A8 E84E                       		lsr.w	#4,d6
000070AA 0446 000E                  		subi.w	#$E,d6
000070AE 6400                       		bcc.s	locret_6A80
000070B0 4446                       		neg.w	d6
000070B2 6100 0000                  		bsr.w	sub_6B06
000070B6                            
000070B6                            locret_6A80:
000070B6 4E75                       		rts	
000070B8                            ; End of function sub_69F4
000070B8                            
000070B8                            ; ===========================================================================
000070B8 4A12                       		tst.b	(a2)
000070BA 6700                       		beq.s	locret_6AD6
000070BC 0892 0002                  		bclr	#2,(a2)
000070C0 6700                       		beq.s	loc_6AAC
000070C2 383C 00D0                  		move.w	#$D0,d4
000070C6 322B 0004                  		move.w	4(a3),d1
000070CA 0241 FFF0                  		andi.w	#-$10,d1
000070CE 9841                       		sub.w	d1,d4
000070D0 3F04                       		move.w	d4,-(sp)
000070D2 7AF0                       		moveq	#-$10,d5
000070D4 6100 0000                  		bsr.w	sub_6C3C
000070D8 381F                       		move.w	(sp)+,d4
000070DA 7AF0                       		moveq	#-$10,d5
000070DC 7C02                       		moveq	#2,d6
000070DE 6100 0000                  		bsr.w	sub_6B06
000070E2                            
000070E2                            loc_6AAC:
000070E2 0892 0003                  		bclr	#3,(a2)
000070E6 6700                       		beq.s	locret_6AD6
000070E8 383C 00D0                  		move.w	#$D0,d4
000070EC 322B 0004                  		move.w	4(a3),d1
000070F0 0241 FFF0                  		andi.w	#-$10,d1
000070F4 9841                       		sub.w	d1,d4
000070F6 3F04                       		move.w	d4,-(sp)
000070F8 3A3C 0140                  		move.w	#$140,d5
000070FC 6100 0000                  		bsr.w	sub_6C3C
00007100 381F                       		move.w	(sp)+,d4
00007102 3A3C 0140                  		move.w	#$140,d5
00007106 7C02                       		moveq	#2,d6
00007108 6100 0000                  		bsr.w	sub_6B06
0000710C                            
0000710C                            locret_6AD6:
0000710C 4E75                       		rts	
0000710E                            
0000710E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710E                            
0000710E                            
0000710E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000710E 7C15                       		moveq	#$15,d6
00007110                            ; End of function sub_6AD8
00007110                            
00007110                            
00007110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007110                            
00007110                            
00007110                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007110 2E3C 0080 0000             		move.l	#$800000,d7
00007116 2200                       		move.l	d0,d1
00007118                            
00007118                            loc_6AE2:
00007118 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000711C 6100 0000                  		bsr.w	sub_6BD6
00007120 2001                       		move.l	d1,d0
00007122 6100 0000                  		bsr.w	sub_6B32
00007126 5801                       		addq.b	#4,d1
00007128 0201 007F                  		andi.b	#$7F,d1
0000712C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007130 0645 0010                  		addi.w	#$10,d5
00007134 51CE FFE2                  		dbf	d6,loc_6AE2
00007138 4E75                       		rts	
0000713A                            ; End of function sub_6ADA
0000713A                            
0000713A                            
0000713A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000713A                            
0000713A                            
0000713A                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000713A 7C0F                       		moveq	#$F,d6
0000713C                            ; End of function sub_6B04
0000713C                            
0000713C                            
0000713C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000713C                            ; main draw section
0000713C                            
0000713C                            sub_6B06:
0000713C 2E3C 0080 0000             		move.l	#$800000,d7
00007142 2200                       		move.l	d0,d1
00007144                            
00007144                            loc_6B0E:
00007144 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007148 6100 0000                  		bsr.w	sub_6BD6
0000714C 2001                       		move.l	d1,d0
0000714E 6100 0000                  		bsr.w	sub_6B32
00007152 0641 0100                  		addi.w	#$100,d1
00007156 0241 0FFF                  		andi.w	#$FFF,d1
0000715A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000715E 0644 0010                  		addi.w	#$10,d4
00007162 51CE FFE0                  		dbf	d6,loc_6B0E
00007166 4E75                       		rts	
00007168                            ; End of function sub_6B06
00007168                            
00007168                            
00007168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007168                            
00007168                            
00007168                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007168 8042                       		or.w	d2,d0
0000716A 4840                       		swap	d0
0000716C 0810 0003                  		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
00007170 6600                       		bne.s	loc_6B6E
00007172 0810 0002                  		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
00007176 6600                       		bne.s	loc_6B4E
00007178 2A80                       		move.l	d0,(a5)
0000717A 2C99                       		move.l	(a1)+,(a6)
0000717C D087                       		add.l	d7,d0
0000717E 2A80                       		move.l	d0,(a5)
00007180 2C99                       		move.l	(a1)+,(a6)
00007182 4E75                       		rts	
00007184                            ; ===========================================================================
00007184                            
00007184                            loc_6B4E:
00007184 2A80                       		move.l	d0,(a5)
00007186 2819                       		move.l	(a1)+,d4
00007188 0A84 0800 0800             		eori.l	#$8000800,d4
0000718E 4844                       		swap	d4
00007190 2C84                       		move.l	d4,(a6)
00007192 D087                       		add.l	d7,d0
00007194 2A80                       		move.l	d0,(a5)
00007196 2819                       		move.l	(a1)+,d4
00007198 0A84 0800 0800             		eori.l	#$8000800,d4
0000719E 4844                       		swap	d4
000071A0 2C84                       		move.l	d4,(a6)
000071A2 4E75                       		rts	
000071A4                            ; ===========================================================================
000071A4                            
000071A4                            loc_6B6E:
000071A4 0810 0002                  		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
000071A8 6600                       		bne.s	loc_6B90
000071AA 2A80                       		move.l	d0,(a5)
000071AC 2A19                       		move.l	(a1)+,d5
000071AE 2819                       		move.l	(a1)+,d4
000071B0 0A84 1000 1000             		eori.l	#$10001000,d4
000071B6 2C84                       		move.l	d4,(a6)
000071B8 D087                       		add.l	d7,d0
000071BA 2A80                       		move.l	d0,(a5)
000071BC 0A85 1000 1000             		eori.l	#$10001000,d5
000071C2 2C85                       		move.l	d5,(a6)
000071C4 4E75                       		rts	
000071C6                            ; ===========================================================================
000071C6                            
000071C6                            loc_6B90:
000071C6 2A80                       		move.l	d0,(a5)
000071C8 2A19                       		move.l	(a1)+,d5
000071CA 2819                       		move.l	(a1)+,d4
000071CC 0A84 1800 1800             		eori.l	#$18001800,d4
000071D2 4844                       		swap	d4
000071D4 2C84                       		move.l	d4,(a6)
000071D6 D087                       		add.l	d7,d0
000071D8 2A80                       		move.l	d0,(a5)
000071DA 0A85 1800 1800             		eori.l	#$18001800,d5
000071E0 4845                       		swap	d5
000071E2 2C85                       		move.l	d5,(a6)
000071E4 4E75                       		rts	
000071E6                            ; End of function sub_6B32
000071E6                            
000071E6                            ; ===========================================================================
000071E6 4E75                       		rts	
000071E8                            ; ===========================================================================
000071E8 2A80                       		move.l	d0,(a5)
000071EA 3A3C 2000                  		move.w	#$2000,d5
000071EE 3819                       		move.w	(a1)+,d4
000071F0 D845                       		add.w	d5,d4
000071F2 3C84                       		move.w	d4,(a6)
000071F4 3819                       		move.w	(a1)+,d4
000071F6 D845                       		add.w	d5,d4
000071F8 3C84                       		move.w	d4,(a6)
000071FA D087                       		add.l	d7,d0
000071FC 2A80                       		move.l	d0,(a5)
000071FE 3819                       		move.w	(a1)+,d4
00007200 D845                       		add.w	d5,d4
00007202 3C84                       		move.w	d4,(a6)
00007204 3819                       		move.w	(a1)+,d4
00007206 D845                       		add.w	d5,d4
00007208 3C84                       		move.w	d4,(a6)
0000720A 4E75                       		rts	
0000720C                            
0000720C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000720C                            ; Reading from layout
0000720C                            
0000720C                            sub_6BD6:
0000720C 43F8 B000                  		lea	($FFFFB000).w,a1			; MJ: load Block's location
00007210 D86B 0004                  		add.w	4(a3),d4				; MJ: load Y position to d4
00007214 DA53                       		add.w	(a3),d5					; MJ: load X position to d5
00007216 3604                       		move.w	d4,d3					; MJ: copy Y position to d3
00007218 0243 0780                  		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
0000721C E64D                       		lsr.w	#3,d5					; MJ: divide X position by 8
0000721E 3005                       		move.w	d5,d0					; MJ: copy to d0
00007220 E848                       		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
00007222 0240 007F                  		andi.w	#$7F,d0					; MJ: get within 7F
00007226 E34B                       		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
00007228 D043                       		add.w	d3,d0					; MJ: add calc'd Y pos
0000722A 76FF                       		moveq	#-1,d3					; MJ: prepare FFFF in d3
0000722C 1634 0000                  		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
00007230 0243 00FF                  		andi.w	#$FF,d3					; MJ: keep within 7F
00007234 EF4B                       		lsl.w	#$07,d3					; MJ: multiply by 80
00007236 0244 0070                  		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
0000723A 0245 000E                  		andi.w	#$000E,d5				; MJ: keep X pos within 10
0000723E D644                       		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
00007240 D645                       		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
00007242 2043                       		movea.l	d3,a0					; MJ: set address (Chunk to read)
00007244 3610                       		move.w	(a0),d3
00007246 0243 03FF                  		andi.w	#$3FF,d3
0000724A E74B                       		lsl.w	#3,d3
0000724C D2C3                       		adda.w	d3,a1
0000724E                            
0000724E                            locret_6C1E:
0000724E 4E75                       		rts	
00007250                            ; End of function sub_6BD6
00007250                            
00007250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007250                            ; getting VRam location
00007250                            
00007250                            sub_6C20:
00007250 D86B 0004                  		add.w	4(a3),d4
00007254 DA53                       		add.w	(a3),d5
00007256 0244 00F0                  		andi.w	#$F0,d4
0000725A 0245 01F0                  		andi.w	#$1F0,d5
0000725E E94C                       		lsl.w	#4,d4
00007260 E44D                       		lsr.w	#2,d5
00007262 D845                       		add.w	d5,d4
00007264 7003                       		moveq	#3,d0
00007266 4840                       		swap	d0
00007268 3004                       		move.w	d4,d0
0000726A 4E75                       		rts	
0000726C                            ; End of function sub_6C20
0000726C                            
0000726C                            
0000726C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000726C                            ; not used
0000726C                            
0000726C                            
0000726C                            sub_6C3C:
0000726C D86B 0004                  		add.w	4(a3),d4
00007270 DA53                       		add.w	(a3),d5
00007272 0244 00F0                  		andi.w	#$F0,d4
00007276 0245 01F0                  		andi.w	#$1F0,d5
0000727A E94C                       		lsl.w	#4,d4
0000727C E44D                       		lsr.w	#2,d5
0000727E D845                       		add.w	d5,d4
00007280 7002                       		moveq	#2,d0
00007282 4840                       		swap	d0
00007284 3004                       		move.w	d4,d0
00007286 4E75                       		rts	
00007288                            ; End of function sub_6C3C
00007288                            
00007288                            ; ---------------------------------------------------------------------------
00007288                            ; Subroutine to	load tiles as soon as the level	appears
00007288                            ; ---------------------------------------------------------------------------
00007288                            
00007288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007288                            
00007288                            
00007288                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007288 4BF9 00C0 0004             		lea	($C00004).l,a5
0000728E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007294 47F8 F700                  		lea	($FFFFF700).w,a3
00007298 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
0000729C 343C 4000                  		move.w	#$4000,d2
000072A0 6100                       		bsr.s	LoadTilesFromStart2
000072A2 47F8 F708                  		lea	($FFFFF708).w,a3
000072A6 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000072AA 343C 6000                  		move.w	#$6000,d2
000072AE                            ; End of function LoadTilesFromStart
000072AE                            
000072AE                            
000072AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072AE                            
000072AE                            
000072AE                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072AE 78F0                       		moveq	#-$10,d4
000072B0 7C0F                       		moveq	#$F,d6
000072B2                            
000072B2                            loc_6C82:
000072B2 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072B6 7A00                       		moveq	#0,d5
000072B8 3204                       		move.w	d4,d1
000072BA 6100 FF94                  		bsr.w	sub_6C20
000072BE 3801                       		move.w	d1,d4
000072C0 7A00                       		moveq	#0,d5
000072C2 7C1F                       		moveq	#$1F,d6
000072C4 6100 FE4A                  		bsr.w	sub_6ADA
000072C8 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072CC 0644 0010                  		addi.w	#$10,d4
000072D0 51CE FFE0                  		dbf	d6,loc_6C82
000072D4 4E75                       		rts	
000072D6                            ; End of function LoadTilesFromStart2
000072D6                            
000072D6                            ; ---------------------------------------------------------------------------
000072D6                            ; Main Load Block loading subroutine
000072D6                            ; ---------------------------------------------------------------------------
000072D6                            
000072D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D6                            
000072D6                            
000072D6                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072D6 7000                       		moveq	#0,d0
000072D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072DC E948                       		lsl.w	#4,d0
000072DE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072E4 45F2 0000                  		lea	(a2,d0.w),a2
000072E8 2F0A                       		move.l	a2,-(sp)
000072EA 588A                       		addq.l	#4,a2
000072EC 205A                       		movea.l	(a2)+,a0
000072EE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072F2 303C 0000                  		move.w	#0,d0
000072F6 6100 A25C                  		bsr.w	EniDec
000072FA 205A                       		movea.l	(a2)+,a0
000072FC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007302 6100 A3CE                  		bsr.w	KosDec
00007306 6100 0000                  		bsr.w	LevelLayoutLoad
0000730A 301A                       		move.w	(a2)+,d0
0000730C 3012                       		move.w	(a2),d0
0000730E 0240 00FF                  		andi.w	#$FF,d0
00007312 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007318 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000731A 700C                       		moveq	#$C,d0		; use SB3 pallet
0000731C                            
0000731C                            MLB_ChkSBZPal:
0000731C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007322 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007324 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000732A 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000732C                            
0000732C                            MLB_UsePal0E:
0000732C 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000732E                            
0000732E                            MLB_NormalPal:
0000732E 6100 ABF6                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007332 245F                       		movea.l	(sp)+,a2
00007334 584A                       		addq.w	#4,a2
00007336 7000                       		moveq	#0,d0
00007338 1012                       		move.b	(a2),d0
0000733A 6700                       		beq.s	locret_6D10
0000733C 6100 A078                  		bsr.w	LoadPLC		; load pattern load cues
00007340                            
00007340                            locret_6D10:
00007340 4E75                       		rts	
00007342                            ; End of function MainLoadBlockLoad
00007342                            
00007342                            ; ---------------------------------------------------------------------------
00007342                            ; Level	layout loading subroutine
00007342                            ; ---------------------------------------------------------------------------
00007342                            
00007342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007342                            ; This method now releases free ram space from A408 - A7FF
00007342                            
00007342                            LevelLayoutLoad:
00007342 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007346 ED08                       		lsl.b	#6,d0
00007348 E848                       		lsr.w	#4,d0
0000734A 3400                       		move.w	d0,d2
0000734C D040                       		add.w	d0,d0
0000734E D042                       		add.w	d2,d0
00007350 43F9 0000 0000             		lea	(Level_Index).l,a1
00007356 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
0000735A 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
0000735E D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
00007362 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
00007366 4E75                       		rts						; MJ: Return
00007368                            
00007368                            ; End of function LevelLayoutLoad2
00007368                            
00007368                            ; ---------------------------------------------------------------------------
00007368                            ; Dynamic screen resize	loading	subroutine
00007368                            ; ---------------------------------------------------------------------------
00007368                            
00007368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007368                            
00007368                            
00007368                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007368 7000                       		moveq	#0,d0
0000736A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000736E D040                       		add.w	d0,d0
00007370 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007374 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007378 7202                       		moveq	#2,d1
0000737A 3038 F726                  		move.w	($FFFFF726).w,d0
0000737E 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007382 6700                       		beq.s	locret_6DAA
00007384 6400                       		bcc.s	loc_6DAC
00007386 4441                       		neg.w	d1
00007388 3038 F704                  		move.w	($FFFFF704).w,d0
0000738C B078 F726                  		cmp.w	($FFFFF726).w,d0
00007390 6300                       		bls.s	loc_6DA0
00007392 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007396 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000739C                            
0000739C                            loc_6DA0:
0000739C D378 F72E                  		add.w	d1,($FFFFF72E).w
000073A0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073A6                            
000073A6                            locret_6DAA:
000073A6 4E75                       		rts	
000073A8                            ; ===========================================================================
000073A8                            
000073A8                            loc_6DAC:				; XREF: DynScrResizeLoad
000073A8 3038 F704                  		move.w	($FFFFF704).w,d0
000073AC 5040                       		addq.w	#8,d0
000073AE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073B2 6500                       		bcs.s	loc_6DC4
000073B4 0838 0001 D022             		btst	#1,($FFFFD022).w
000073BA 6700                       		beq.s	loc_6DC4
000073BC D241                       		add.w	d1,d1
000073BE D241                       		add.w	d1,d1
000073C0                            
000073C0                            loc_6DC4:
000073C0 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073C4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073CA 4E75                       		rts	
000073CC                            ; End of function DynScrResizeLoad
000073CC                            
000073CC                            ; ===========================================================================
000073CC                            ; ---------------------------------------------------------------------------
000073CC                            ; Offset index for dynamic screen resizing
000073CC                            ; ---------------------------------------------------------------------------
000073CC 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000073D0 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000073D4 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000073D8 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_EPZ-Resize_Index
000073DC 0000                       		dc.w Resize_INZ-Resize_Index
000073DE                            ; ===========================================================================
000073DE                            ; ---------------------------------------------------------------------------
000073DE                            ; Green	Hill Zone dynamic screen resizing
000073DE                            ; ---------------------------------------------------------------------------
000073DE                            
000073DE                            Resize_GHZ:				; XREF: Resize_Index
000073DE 7000                       		moveq	#0,d0
000073E0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073E4 D040                       		add.w	d0,d0
000073E6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000073EA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000073EE                            ; ===========================================================================
000073EE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000073F0 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000073F2 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000073F4                            ; ===========================================================================
000073F4                            
000073F4                            Resize_GHZ1:
000073F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000073FA 0C78 0950 F700             		cmpi.w	#$950,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007400 6500                       		bcs.s	locret_6E08	; if not, branch
00007402 31FC 0720 F726             		move.w	#$720,($FFFFF726).w ; set lower	y-boundary
00007408                            
00007408                            locret_6E08:
00007408 4E75                       		rts	
0000740A                            ; ===========================================================================
0000740A                            
0000740A                            Resize_GHZ2:
0000740A 4E75                       		rts
0000740C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007412 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007418 6500                       		bcs.s	locret_6E3A
0000741A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007420 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007426 6500                       		bcs.s	locret_6E3A
00007428 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000742E 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007434 6500                       		bcs.s	locret_6E3A
00007436 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000743C                            
0000743C                            locret_6E3A:
0000743C 4E75                       		rts	
0000743E                            ; ===========================================================================
0000743E                            
0000743E                            Resize_GHZ3:
0000743E 7000                       		moveq	#0,d0
00007440 1038 F742                  		move.b	($FFFFF742).w,d0
00007444 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007448 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000744C                            ; ===========================================================================
0000744C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000744E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007450 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007452                            ; ===========================================================================
00007452                            
00007452                            Resize_GHZ3main:
00007452 31FC 06D0 F726             		move.w	#$6D0,($FFFFF726).w ; set lower	y-boundary
00007458 4E75                       		rts
0000745A                            
0000745A                            locret_6E96:
0000745A 4E75                       		rts	
0000745C                            ; ===========================================================================
0000745C                            
0000745C                            loc_6E98:
0000745C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007462 5438 F742                  		addq.b	#2,($FFFFF742).w
00007466 4E75                       		rts	
00007468                            ; ===========================================================================
00007468                            
00007468                            Resize_GHZ3boss:
00007468 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000746E 6400                       		bcc.s	loc_6EB0
00007470 5538 F742                  		subq.b	#2,($FFFFF742).w
00007474                            
00007474                            loc_6EB0:
00007474 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000747A 6500                       		bcs.s	locret_6EE8
0000747C 6100 0000                  		bsr.w	SingleObjLoad
00007480 6600                       		bne.s	loc_6ED0
00007482 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007486 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000748C 337C 0280 000C             		move.w	#$280,$C(a1)
00007492                            
00007492                            loc_6ED0:
00007492 303C 008C                  		move.w	#$8C,d0
00007496 6100 9D16                  		bsr.w	PlaySound	; play boss music
0000749A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074A0 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A4 7011                       		moveq	#$11,d0
000074A6 6000 9F0E                  		bra.w	LoadPLC		; load boss patterns
000074AA                            ; ===========================================================================
000074AA                            
000074AA                            locret_6EE8:
000074AA 4E75                       		rts	
000074AC                            ; ===========================================================================
000074AC                            
000074AC                            Resize_GHZ3end:
000074AC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000074B2 4E75                       		rts	
000074B4                            ; ===========================================================================
000074B4                            ; ---------------------------------------------------------------------------
000074B4                            ; Labyrinth Zone dynamic screen	resizing
000074B4                            ; ---------------------------------------------------------------------------
000074B4                            
000074B4                            Resize_LZ:				; XREF: Resize_Index
000074B4 7000                       		moveq	#0,d0
000074B6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000074BA D040                       		add.w	d0,d0
000074BC 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000074C0 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000074C4                            ; ===========================================================================
000074C4 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000074C6 0000                       		dc.w Resize_LZ12-Resize_LZx
000074C8 0000                       		dc.w Resize_LZ3-Resize_LZx
000074CA 0000                       		dc.w Resize_SBZ3-Resize_LZx
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_LZ12:
000074CC 31FC 0020 F726             		move.w	#$020,($FFFFF726).w ; set lower	y-boundary
000074D2 4E75                       		rts	
000074D4                            ; ===========================================================================
000074D4                            
000074D4                            Resize_LZ3:
000074D4 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
000074D8 6700                       		beq.s	loc_6F28				; if not, branch
000074DA 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
000074DE 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
000074E4 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
000074E6 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
000074EE 303C 00B7                  		move.w	#$B7,d0
000074F2 6100 9CC0                  		bsr.w	PlaySound_Special ; play rumbling sound
000074F6                            
000074F6                            loc_6F28:
000074F6 4A38 F742                  		tst.b	($FFFFF742).w
000074FA 6600                       		bne.s	locret_6F64
000074FC 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007502 6500                       		bcs.s	locret_6F62
00007504 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000750A 6400                       		bcc.s	locret_6F62
0000750C 6100 0000                  		bsr.w	SingleObjLoad
00007510 6600                       		bne.s	loc_6F4A
00007512 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007516                            
00007516                            loc_6F4A:
00007516 303C 008C                  		move.w	#$8C,d0
0000751A 6100 9C92                  		bsr.w	PlaySound	; play boss music
0000751E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007524 5438 F742                  		addq.b	#2,($FFFFF742).w
00007528 7011                       		moveq	#$11,d0
0000752A 6000 9E8A                  		bra.w	LoadPLC		; load boss patterns
0000752E                            ; ===========================================================================
0000752E                            
0000752E                            locret_6F62:
0000752E 4E75                       		rts	
00007530                            ; ===========================================================================
00007530                            
00007530                            locret_6F64:
00007530 4E75                       		rts	
00007532                            ; ===========================================================================
00007532                            
00007532                            Resize_SBZ3:
00007532 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007538 6500                       		bcs.s	locret_6F8C
0000753A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007540 6400                       		bcc.s	locret_6F8C	; if not, branch
00007542 4238 FE30                  		clr.b	($FFFFFE30).w
00007546 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000754C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007552 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007558                            
00007558                            locret_6F8C:
00007558 4E75                       		rts	
0000755A                            ; ===========================================================================
0000755A                            ; ---------------------------------------------------------------------------
0000755A                            ; Marble Zone dynamic screen resizing
0000755A                            ; ---------------------------------------------------------------------------
0000755A                            
0000755A                            Resize_MZ:				; XREF: Resize_Index
0000755A 7000                       		moveq	#0,d0
0000755C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007560 D040                       		add.w	d0,d0
00007562 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007566 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000756A                            ; ===========================================================================
0000756A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000756C 0000                       		dc.w Resize_MZ2-Resize_MZx
0000756E 0000                       		dc.w Resize_MZ3-Resize_MZx
00007570                            ; ===========================================================================
00007570                            
00007570                            Resize_MZ1:
00007570 4E75                       		rts
00007572 7000                       		moveq	#0,d0
00007574 1038 F742                  		move.b	($FFFFF742).w,d0
00007578 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000757C 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007580                            ; ===========================================================================
00007580 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007582 0000                       		dc.w loc_6FEA-off_6FB2
00007584 0000                       		dc.w loc_702E-off_6FB2
00007586 0000                       		dc.w loc_7050-off_6FB2
00007588                            ; ===========================================================================
00007588                            
00007588                            loc_6FBA:
00007588 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000758E 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007594 6500                       		bcs.s	locret_6FE8
00007596 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000759C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075A2 6500                       		bcs.s	locret_6FE8
000075A4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075AA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000075B0 6500                       		bcs.s	locret_6FE8
000075B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075B6                            
000075B6                            locret_6FE8:
000075B6 4E75                       		rts	
000075B8                            ; ===========================================================================
000075B8                            
000075B8                            loc_6FEA:
000075B8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000075BE 6400                       		bcc.s	loc_6FF8
000075C0 5538 F742                  		subq.b	#2,($FFFFF742).w
000075C4 4E75                       		rts	
000075C6                            ; ===========================================================================
000075C6                            
000075C6                            loc_6FF8:
000075C6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075CC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000075D2 6400                       		bcc.s	locret_702C
000075D4 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000075DA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075E0 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000075E6 6400                       		bcc.s	locret_702C
000075E8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075EE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075F4 6500                       		bcs.s	locret_702C
000075F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000075FA                            
000075FA                            locret_702C:
000075FA 4E75                       		rts	
000075FC                            ; ===========================================================================
000075FC                            
000075FC                            loc_702E:
000075FC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007602 6400                       		bcc.s	loc_703C
00007604 5538 F742                  		subq.b	#2,($FFFFF742).w
00007608 4E75                       		rts	
0000760A                            ; ===========================================================================
0000760A                            
0000760A                            loc_703C:
0000760A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007610 6500                       		bcs.s	locret_704E
00007612 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007618 5438 F742                  		addq.b	#2,($FFFFF742).w
0000761C                            
0000761C                            locret_704E:
0000761C 4E75                       		rts	
0000761E                            ; ===========================================================================
0000761E                            
0000761E                            loc_7050:
0000761E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007624 6500                       		bcs.s	locret_7072
00007626 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000762C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007632 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007638 6500                       		bcs.s	locret_7072
0000763A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007640                            
00007640                            locret_7072:
00007640 4E75                       		rts	
00007642                            ; ===========================================================================
00007642                            
00007642                            Resize_MZ2:
00007642 4E75                       		rts
00007644 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000764A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007650 6500                       		bcs.s	locret_7088
00007652 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007658                            
00007658                            locret_7088:
00007658 4E75                       		rts	
0000765A                            ; ===========================================================================
0000765A                            
0000765A                            Resize_MZ3:
0000765A 7000                       		moveq	#0,d0
0000765C 1038 F742                  		move.b	($FFFFF742).w,d0
00007660 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007664 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007668                            ; ===========================================================================
00007668 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000766A 0000                       		dc.w Resize_MZ3end-off_7098
0000766C                            ; ===========================================================================
0000766C                            
0000766C                            Resize_MZ3boss:
0000766C 4E75                       		rts
0000766E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007674 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000767A 6500                       		bcs.s	locret_70E8
0000767C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007682 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007688 6500                       		bcs.s	locret_70E8
0000768A 6100 0000                  		bsr.w	SingleObjLoad
0000768E 6600                       		bne.s	loc_70D0
00007690 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007694 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000769A 337C 022C 000C             		move.w	#$22C,$C(a1)
000076A0                            
000076A0                            loc_70D0:
000076A0 303C 008C                  		move.w	#$8C,d0
000076A4 6100 9B08                  		bsr.w	PlaySound	; play boss music
000076A8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000076B2 7011                       		moveq	#$11,d0
000076B4 6000 9D00                  		bra.w	LoadPLC		; load boss patterns
000076B8                            ; ===========================================================================
000076B8                            
000076B8                            locret_70E8:
000076B8 4E75                       		rts	
000076BA                            ; ===========================================================================
000076BA                            
000076BA                            Resize_MZ3end:
000076BA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076C0 4E75                       		rts	
000076C2                            ; ===========================================================================
000076C2                            ; ---------------------------------------------------------------------------
000076C2                            ; Star Light Zone dynamic screen resizing
000076C2                            ; ---------------------------------------------------------------------------
000076C2                            
000076C2                            Resize_SLZ:				; XREF: Resize_Index
000076C2 7000                       		moveq	#0,d0
000076C4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076C8 D040                       		add.w	d0,d0
000076CA 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000076CE 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000076D2                            ; ===========================================================================
000076D2 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000076D4 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000076D6 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000076D8                            ; ===========================================================================
000076D8                            
000076D8                            Resize_SLZ12:
000076D8 31FC 0480 F726             		move.w	#$480,($FFFFF726).w ; set lower	y-boundary
000076DE 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000076E4 6500                       		bcs.s	peepeepee	; if not, branch
000076E6 31FC 0480 F726             		move.w	#$480,($FFFFF726).w ; set lower	y-boundary
000076EC                            
000076EC                            peepeepee:
000076EC 4E75                       		rts	
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            Resize_SLZ3:
000076EE 7000                       		moveq	#0,d0
000076F0 1038 F742                  		move.b	($FFFFF742).w,d0
000076F4 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000076F8 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000076FC                            ; ===========================================================================
000076FC 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000076FE 0000                       		dc.w Resize_SLZ3boss-off_7118
00007700 0000                       		dc.w Resize_SLZ3end-off_7118
00007702                            ; ===========================================================================
00007702                            
00007702                            Resize_SLZ3main:
00007702 4E75                       		rts
00007704 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000770A 6500                       		bcs.s	locret_7130
0000770C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007712 5438 F742                  		addq.b	#2,($FFFFF742).w
00007716                            
00007716                            locret_7130:
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            Resize_SLZ3boss:
00007718 4E75                       		rts
0000771A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007720 6500                       		bcs.s	locret_715C
00007722 6100 0000                  		bsr.w	SingleObjLoad
00007726 6600                       		bne.s	loc_7144
00007728 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000772C                            
0000772C                            loc_7144:
0000772C 303C 008C                  		move.w	#$8C,d0
00007730 6100 9A7C                  		bsr.w	PlaySound	; play boss music
00007734 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000773A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000773E 7011                       		moveq	#$11,d0
00007740 6000 9C74                  		bra.w	LoadPLC		; load boss patterns
00007744                            ; ===========================================================================
00007744                            
00007744                            locret_715C:
00007744 4E75                       		rts	
00007746                            ; ===========================================================================
00007746                            
00007746                            Resize_SLZ3end:
00007746 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000774C 4E75                       		rts
0000774E 4E75                       		rts
00007750                            ; ===========================================================================
00007750                            ; ---------------------------------------------------------------------------
00007750                            ; Spring Yard Zone dynamic screen resizing
00007750                            ; ---------------------------------------------------------------------------
00007750                            
00007750                            Resize_SYZ:				; XREF: Resize_Index
00007750 4E75                       		rts
00007752 7000                       		moveq	#0,d0
00007754 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007758 D040                       		add.w	d0,d0
0000775A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000775E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007762                            ; ===========================================================================
00007762 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007764 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007766 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007768                            ; ===========================================================================
00007768                            
00007768                            Resize_SYZ1:
00007768 4E75                       		rts	
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_SYZ2:
0000776A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007770 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007776 6500                       		bcs.s	locret_71A2
00007778 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000777E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007784 6500                       		bcs.s	locret_71A2
00007786 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000778C                            
0000778C                            locret_71A2:
0000778C 4E75                       		rts	
0000778E                            ; ===========================================================================
0000778E                            
0000778E                            Resize_SYZ3:
0000778E 7000                       		moveq	#0,d0
00007790 1038 F742                  		move.b	($FFFFF742).w,d0
00007794 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007798 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000779C                            ; ===========================================================================
0000779C 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000779E 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077A0 0000                       		dc.w Resize_SYZ3end-off_71B2
000077A2                            ; ===========================================================================
000077A2                            
000077A2                            Resize_SYZ3main:
000077A2 4E75                       		rts
000077A4 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077AA 6500                       		bcs.s	locret_71CE
000077AC 6100 0000                  		bsr.w	SingleObjLoad
000077B0 6600                       		bne.s	locret_71CE
000077B2 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000077B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000077BA                            
000077BA                            locret_71CE:
000077BA 4E75                       		rts	
000077BC                            ; ===========================================================================
000077BC                            
000077BC                            Resize_SYZ3boss:
000077BC 4E75                       		rts
000077BE 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000077C4 6500                       		bcs.s	locret_7200
000077C6 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000077CC 6100 0000                  		bsr.w	SingleObjLoad
000077D0 6600                       		bne.s	loc_71EC
000077D2 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000077D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000077DA                            
000077DA                            loc_71EC:
000077DA 303C 008C                  		move.w	#$8C,d0
000077DE 6100 99CE                  		bsr.w	PlaySound	; play boss music
000077E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077E8 7011                       		moveq	#$11,d0
000077EA 6000 9BCA                  		bra.w	LoadPLC		; load boss patterns
000077EE                            ; ===========================================================================
000077EE                            
000077EE                            locret_7200:
000077EE 4E75                       		rts	
000077F0                            ; ===========================================================================
000077F0                            
000077F0                            Resize_SYZ3end:
000077F0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077F6 4E75                       		rts	
000077F8                            ; ===========================================================================
000077F8                            ; ---------------------------------------------------------------------------
000077F8                            ; Scrap	Brain Zone dynamic screen resizing
000077F8                            ; ---------------------------------------------------------------------------
000077F8                            
000077F8                            Resize_SBZ:				; XREF: Resize_Index
000077F8 7000                       		moveq	#0,d0
000077FA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077FE D040                       		add.w	d0,d0
00007800 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007804 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007808                            ; ===========================================================================
00007808 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000780A 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000780C 0000                       		dc.w Resize_FZ-Resize_SBZx
0000780E                            ; ===========================================================================
0000780E                            
0000780E                            Resize_SBZ1:
0000780E 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007814 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000781A 6500                       		bcs.s	locret_7242
0000781C 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007822 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007828 6500                       		bcs.s	locret_7242
0000782A 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007830                            
00007830                            locret_7242:
00007830 4E75                       		rts	
00007832                            ; ===========================================================================
00007832                            
00007832                            Resize_SBZ2:
00007832 7000                       		moveq	#0,d0
00007834 1038 F742                  		move.b	($FFFFF742).w,d0
00007838 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000783C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007840                            ; ===========================================================================
00007840 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007842 0000                       		dc.w Resize_SBZ2boss-off_7252
00007844 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007846 0000                       		dc.w Resize_SBZ2end-off_7252
00007848                            ; ===========================================================================
00007848                            
00007848                            Resize_SBZ2main:
00007848 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000784E 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007854 6500                       		bcs.s	locret_727A
00007856 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000785C 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007862 6500                       		bcs.s	locret_727A
00007864 5438 F742                  		addq.b	#2,($FFFFF742).w
00007868                            
00007868                            locret_727A:
00007868 4E75                       		rts	
0000786A                            ; ===========================================================================
0000786A                            
0000786A                            Resize_SBZ2boss:
0000786A 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007870 6500                       		bcs.s	locret_7298
00007872 6100 0000                  		bsr.w	SingleObjLoad
00007876 6600                       		bne.s	locret_7298
00007878 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000787C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007880 701E                       		moveq	#$1E,d0
00007882 6000 9B32                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007886                            ; ===========================================================================
00007886                            
00007886                            locret_7298:
00007886 4E75                       		rts	
00007888                            ; ===========================================================================
00007888                            
00007888                            Resize_SBZ2boss2:
00007888 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000788E 6500                       		bcs.s	loc_72B6
00007890 6100 0000                  		bsr.w	SingleObjLoad
00007894 6600                       		bne.s	loc_72B0
00007896 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000789A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000789E                            
0000789E                            loc_72B0:
0000789E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078A4                            
000078A4                            loc_72B6:
000078A4 6000                       		bra.s	loc_72C2
000078A6                            ; ===========================================================================
000078A6                            
000078A6                            Resize_SBZ2end:
000078A6 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078AC 6500                       		bcs.s	loc_72C2
000078AE 4E75                       		rts	
000078B0                            ; ===========================================================================
000078B0                            
000078B0                            loc_72C2:
000078B0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078B6 4E75                       		rts	
000078B8                            ; ===========================================================================
000078B8                            
000078B8                            Resize_FZ:
000078B8 7000                       		moveq	#0,d0
000078BA 1038 F742                  		move.b	($FFFFF742).w,d0
000078BE 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000078C2 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000078C6                            ; ===========================================================================
000078C6 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000078CA 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000078CE 0000                       		dc.w Resize_FZend2-off_72D8
000078D0                            ; ===========================================================================
000078D0                            
000078D0                            Resize_FZmain:
000078D0 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000078D6 6500                       		bcs.s	loc_72F4
000078D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000078DC 701F                       		moveq	#$1F,d0
000078DE 6100 9AD6                  		bsr.w	LoadPLC		; load FZ boss patterns
000078E2                            
000078E2                            loc_72F4:
000078E2 60CC                       		bra.s	loc_72C2
000078E4                            ; ===========================================================================
000078E4                            
000078E4                            Resize_FZboss:
000078E4 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000078EA 6500                       		bcs.s	loc_7312
000078EC 6100 0000                  		bsr.w	SingleObjLoad
000078F0 6600                       		bne.s	loc_7312
000078F2 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000078F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000078FA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007900                            
00007900                            loc_7312:
00007900 60AE                       		bra.s	loc_72C2
00007902                            ; ===========================================================================
00007902                            
00007902                            Resize_FZend:
00007902 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007908 6500                       		bcs.s	loc_7320
0000790A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000790E                            
0000790E                            loc_7320:
0000790E 60A0                       		bra.s	loc_72C2
00007910                            ; ===========================================================================
00007910                            
00007910                            locret_7322:
00007910 4E75                       		rts	
00007912                            ; ===========================================================================
00007912                            
00007912                            Resize_FZend2:
00007912 609C                       		bra.s	loc_72C2
00007914                            ; ===========================================================================
00007914                            ; ---------------------------------------------------------------------------
00007914                            ; Ending sequence dynamic screen resizing (empty)
00007914                            ; ---------------------------------------------------------------------------
00007914                            
00007914                            Resize_Ending:				; XREF: Resize_Index
00007914 4E75                       		rts	
00007916                            ; ---------------------------------------------------------------------------
00007916                            ; Egg Plant Zone sequence dynamic screen resizing (empty)
00007916                            ; ---------------------------------------------------------------------------
00007916                            
00007916                            Resize_EPZ:				; XREF: Resize_Index
00007916 7000                       		moveq	#0,d0
00007918 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000791C D040                       		add.w	d0,d0
0000791E 303B 0000                  		move.w	Resize_EPZx(pc,d0.w),d0
00007922 4EFB 0000                  		jmp	Resize_EPZx(pc,d0.w)
00007926                            ; ===========================================================================
00007926 0000                       Resize_EPZx:	dc.w Resize_EPZ1-Resize_EPZx
00007928 0000                       		dc.w Resize_EPZ2-Resize_EPZx
0000792A 0000                       		dc.w Resize_EPZ3-Resize_EPZx
0000792C                            ; ===========================================================================
0000792C                            
0000792C                            Resize_EPZ1:
0000792C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007932 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007938 6500                       		bcs.s	EPZpeepee1	; if not, branch
0000793A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007940                            
00007940                            EPZpeepee1:
00007940 4E75                       		rts	
00007942                            ; ===========================================================================
00007942                            
00007942                            Resize_EPZ2:
00007942 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007948 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000794E 6500                       		bcs.s	EPZpeepee2
00007950 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007956 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000795C 6500                       		bcs.s	EPZpeepee2
0000795E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007964 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000796A 6500                       		bcs.s	EPZpeepee2
0000796C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007972                            
00007972                            EPZpeepee2:
00007972 4E75                       		rts	
00007974                            ; ===========================================================================
00007974                            
00007974                            Resize_EPZ3:
00007974 7000                       		moveq	#0,d0
00007976 1038 F742                  		move.b	($FFFFF742).w,d0
0000797A 303B 0000                  		move.w	EPZpeepee3(pc,d0.w),d0
0000797E 4EFB 0000                  		jmp	EPZpeepee3(pc,d0.w)
00007982                            ; ===========================================================================
00007982 0000                       EPZpeepee3:	dc.w Resize_EPZ3main-EPZpeepee3
00007984 0000                       		dc.w Resize_EPZ3boss-EPZpeepee3
00007986 0000                       		dc.w Resize_EPZ3end-EPZpeepee3
00007988                            ; ===========================================================================
00007988                            
00007988                            Resize_EPZ3main:
00007988 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000798E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007994 6500                       		bcs.s	nohablopee
00007996 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000799C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000079A2 6500                       		bcs.s	nohablopee
000079A4 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000079AA 6500                       		bcs.s	epicmeme
000079AC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000079B2 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000079B8 6400                       		bcc.s	superpeepee
000079BA 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000079C0 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000079C6                            
000079C6                            superpeepee:
000079C6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000079CC 6400                       		bcc.s	epicmeme
000079CE                            
000079CE                            nohablopee:
000079CE 4E75                       		rts	
000079D0                            ; ===========================================================================
000079D0                            
000079D0                            epicmeme:
000079D0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000079D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000079DA 4E75                       		rts	
000079DC                            ; ===========================================================================
000079DC                            
000079DC                            Resize_EPZ3boss:
000079DC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000079E2 6400                       		bcc.s	loaddaboss
000079E4 5538 F742                  		subq.b	#2,($FFFFF742).w
000079E8                            
000079E8                            loaddaboss:
000079E8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000079EE 6500                       		bcs.s	woahwacky
000079F0 6100 0000                  		bsr.w	SingleObjLoad
000079F4 6600                       		bne.s	imnotgoodatlabelnames
000079F6 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000079FA 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007A00 337C 0280 000C             		move.w	#$280,$C(a1)
00007A06                            
00007A06                            imnotgoodatlabelnames:
00007A06 303C 0099                  		move.w	#$99,d0
00007A0A 6100 97A2                  		bsr.w	PlaySound	; play boss music
00007A0E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A14 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A18 7011                       		moveq	#$11,d0
00007A1A 6000 999A                  		bra.w	LoadPLC		; load boss patterns
00007A1E                            ; ===========================================================================
00007A1E                            
00007A1E                            woahwacky:
00007A1E 4E75                       		rts	
00007A20                            ; ===========================================================================
00007A20                            
00007A20                            Resize_EPZ3end:
00007A20 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A26 4E75                       		rts		
00007A28                            ; ===========================================================================
00007A28                            ; ---------------------------------------------------------------------------
00007A28                            ; Island Nowhere dynamic screen resizing
00007A28                            ; ---------------------------------------------------------------------------
00007A28                            
00007A28                            Resize_INZ:				; XREF: Resize_Index
00007A28 7000                       		moveq	#0,d0
00007A2A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A2E D040                       		add.w	d0,d0
00007A30 303B 0000                  		move.w	Resize_INZx(pc,d0.w),d0
00007A34 4EFB 0000                  		jmp	Resize_INZx(pc,d0.w)
00007A38                            ; ===========================================================================
00007A38 0000                       Resize_INZx:	dc.w Resize_INZ1-Resize_INZx
00007A3A 0000                       		dc.w Resize_INZ2-Resize_INZx
00007A3C 0000                       		dc.w Resize_INZ3-Resize_INZx
00007A3E                            ; ===========================================================================
00007A3E                            
00007A3E                            Resize_INZ1:
00007A3E 31FC 06A0 F726             		move.w	#$6A0,($FFFFF726).w ; set lower	y-boundary 
00007A44 4E75                       		rts ; UT: This is pretty basic and is the most it can be set to, but you can lower the y-boundary if you want
00007A46                            
00007A46                            locret_6E08INZ:
00007A46 4E75                       		rts	
00007A48                            ; ===========================================================================
00007A48                            
00007A48                            Resize_INZ2:
00007A48 31FC 0700 F726             		move.w	#$700,($FFFFF726).w ; set lower	y-boundary 
00007A4E 4E75                       		rts
00007A50                            
00007A50                            locret_6E3AINZ:
00007A50 4E75                       		rts	
00007A52                            ; ===========================================================================
00007A52                            
00007A52                            Resize_INZ3:
00007A52 7000                       		moveq	#0,d0
00007A54 1038 F742                  		move.b	($FFFFF742).w,d0
00007A58 303B 0000                  		move.w	off_6E4AINZ(pc,d0.w),d0
00007A5C 4EFB 0000                  		jmp	off_6E4AINZ(pc,d0.w)
00007A60                            ; ===========================================================================
00007A60 0000                       off_6E4AINZ:	dc.w Resize_INZ3main-off_6E4AINZ
00007A62 0000                       		dc.w Resize_INZ3boss-off_6E4AINZ
00007A64 0000                       		dc.w Resize_INZ3end-off_6E4AINZ
00007A66                            ; ===========================================================================
00007A66                            
00007A66                            Resize_INZ3main:
00007A66 31FC 0700 F726             		move.w	#$700,($FFFFF726).w ; set lower	y-boundary 
00007A6C 4E75                       		rts
00007A6E                            
00007A6E                            loc_6E8EINZ:
00007A6E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007A74 6400                       		bcc.s	loc_6E98INZ
00007A76                            
00007A76                            locret_6E96INZ:
00007A76 4E75                       		rts	
00007A78                            ; ===========================================================================
00007A78                            
00007A78                            loc_6E98INZ:
00007A78 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007A7E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A82 4E75                       		rts	
00007A84                            ; ===========================================================================
00007A84                            
00007A84                            Resize_INZ3boss:
00007A84 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007A8A 6400                       		bcc.s	loc_6EB0INZ
00007A8C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A90                            
00007A90                            loc_6EB0INZ:
00007A90 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007A96 6500                       		bcs.s	locret_6EE8INZ
00007A98 6100 0000                  		bsr.w	SingleObjLoad
00007A9C 6600                       		bne.s	loc_6ED0INZ
00007A9E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007AA2 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007AA8 337C 0280 000C             		move.w	#$280,$C(a1)
00007AAE                            
00007AAE                            loc_6ED0INZ:
00007AAE 303C 008C                  		move.w	#$8C,d0
00007AB2 6100 96FA                  		bsr.w	PlaySound	; play boss music
00007AB6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007ABC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AC0 7011                       		moveq	#$11,d0
00007AC2 6000 98F2                  		bra.w	LoadPLC		; load boss patterns
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            locret_6EE8INZ:
00007AC6 4E75                       		rts	
00007AC8                            ; ===========================================================================
00007AC8                            
00007AC8                            Resize_INZ3end:
00007AC8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007ACE 4E75                       		rts	
00007AD0                            ; ===========================================================================
00007AD0                            ; ---------------------------------------------------------------------------
00007AD0                            ; Object 11 - GHZ bridge
00007AD0                            ; ---------------------------------------------------------------------------
00007AD0                            
00007AD0                            Obj11:					; XREF: Obj_Index
00007AD0 7000                       		moveq	#0,d0
00007AD2 1028 0024                  		move.b	$24(a0),d0
00007AD6 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007ADA 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007ADE                            ; ===========================================================================
00007ADE 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007AE2 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007AE6 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007AEA                            ; ===========================================================================
00007AEA                            
00007AEA                            Obj11_Main:				; XREF: Obj11_Index
00007AEA 5428 0024                  		addq.b	#2,$24(a0)
00007AEE 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007AF6 317C 438E 0002             		move.w	#$438E,2(a0)
00007AFC 117C 0004 0001             		move.b	#4,1(a0)
00007B02 117C 0003 0018             		move.b	#3,$18(a0)
00007B08 117C 0080 0019             		move.b	#$80,$19(a0)
00007B0E 3428 000C                  		move.w	$C(a0),d2
00007B12 3628 0008                  		move.w	8(a0),d3
00007B16 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B18 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B1C 7200                       		moveq	#0,d1
00007B1E 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B20 14FC 0000                  		move.b	#0,(a2)+
00007B24 3001                       		move.w	d1,d0
00007B26 E248                       		lsr.w	#1,d0
00007B28 E948                       		lsl.w	#4,d0
00007B2A 9640                       		sub.w	d0,d3
00007B2C 5501                       		subq.b	#2,d1
00007B2E 6500                       		bcs.s	Obj11_Action
00007B30                            
00007B30                            Obj11_MakeBdg:
00007B30 6100 0000                  		bsr.w	SingleObjLoad
00007B34 6600                       		bne.s	Obj11_Action
00007B36 5228 0028                  		addq.b	#1,$28(a0)
00007B3A B668 0008                  		cmp.w	8(a0),d3
00007B3E 6600                       		bne.s	loc_73B8
00007B40 0643 0010                  		addi.w	#$10,d3
00007B44 3142 000C                  		move.w	d2,$C(a0)
00007B48 3142 003C                  		move.w	d2,$3C(a0)
00007B4C 3A08                       		move.w	a0,d5
00007B4E 0445 D000                  		subi.w	#-$3000,d5
00007B52 EC4D                       		lsr.w	#6,d5
00007B54 0245 007F                  		andi.w	#$7F,d5
00007B58 14C5                       		move.b	d5,(a2)+
00007B5A 5228 0028                  		addq.b	#1,$28(a0)
00007B5E                            
00007B5E                            loc_73B8:				; XREF: ROM:00007398j
00007B5E 3A09                       		move.w	a1,d5
00007B60 0445 D000                  		subi.w	#-$3000,d5
00007B64 EC4D                       		lsr.w	#6,d5
00007B66 0245 007F                  		andi.w	#$7F,d5
00007B6A 14C5                       		move.b	d5,(a2)+
00007B6C 137C 000A 0024             		move.b	#$A,$24(a1)
00007B72 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007B74 3342 000C                  		move.w	d2,$C(a1)
00007B78 3342 003C                  		move.w	d2,$3C(a1)
00007B7C 3343 0008                  		move.w	d3,8(a1)
00007B80 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007B88 337C 438E 0002             		move.w	#$438E,2(a1)
00007B8E 137C 0004 0001             		move.b	#4,1(a1)
00007B94 137C 0003 0018             		move.b	#3,$18(a1)
00007B9A 137C 0008 0019             		move.b	#8,$19(a1)
00007BA0 0643 0010                  		addi.w	#$10,d3
00007BA4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007BA8                            
00007BA8                            Obj11_Action:				; XREF: Obj11_Index
00007BA8 6100                       		bsr.s	Obj11_Solid
00007BAA 4A28 003E                  		tst.b	$3E(a0)
00007BAE 6700                       		beq.s	Obj11_Display
00007BB0 5928 003E                  		subq.b	#4,$3E(a0)
00007BB4 6100 0000                  		bsr.w	Obj11_Bend
00007BB8                            
00007BB8                            Obj11_Display:
00007BB8 6100 0000                  		bsr.w	DisplaySprite
00007BBC 6000 0000                  		bra.w	Obj11_ChkDel
00007BC0                            
00007BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC0                            
00007BC0                            
00007BC0                            Obj11_Solid:				; XREF: Obj11_Action
00007BC0 7200                       		moveq	#0,d1
00007BC2 1228 0028                  		move.b	$28(a0),d1
00007BC6 E749                       		lsl.w	#3,d1
00007BC8 3401                       		move.w	d1,d2
00007BCA 5041                       		addq.w	#8,d1
00007BCC D442                       		add.w	d2,d2
00007BCE 43F8 D000                  		lea	($FFFFD000).w,a1
00007BD2 4A69 0012                  		tst.w	$12(a1)
00007BD6 6B00 0000                  		bmi.w	locret_751E
00007BDA 3029 0008                  		move.w	8(a1),d0
00007BDE 9068 0008                  		sub.w	8(a0),d0
00007BE2 D041                       		add.w	d1,d0
00007BE4 6B00 0000                  		bmi.w	locret_751E
00007BE8 B042                       		cmp.w	d2,d0
00007BEA 6400 0000                  		bcc.w	locret_751E
00007BEE 6000                       		bra.s	Platform2
00007BF0                            ; End of function Obj11_Solid
00007BF0                            
00007BF0                            ; ---------------------------------------------------------------------------
00007BF0                            ; Platform subroutine
00007BF0                            ; ---------------------------------------------------------------------------
00007BF0                            
00007BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF0                            
00007BF0                            
00007BF0                            PlatformObject:
00007BF0 43F8 D000                  		lea	($FFFFD000).w,a1
00007BF4 4A69 0012                  		tst.w	$12(a1)
00007BF8 6B00 0000                  		bmi.w	locret_751E
00007BFC 3029 0008                  		move.w	8(a1),d0
00007C00 9068 0008                  		sub.w	8(a0),d0
00007C04 D041                       		add.w	d1,d0
00007C06 6B00 0000                  		bmi.w	locret_751E
00007C0A D241                       		add.w	d1,d1
00007C0C B041                       		cmp.w	d1,d0
00007C0E 6400 0000                  		bcc.w	locret_751E
00007C12                            
00007C12                            Platform2:
00007C12 3028 000C                  		move.w	$C(a0),d0
00007C16 5140                       		subq.w	#8,d0
00007C18                            
00007C18                            Platform3:
00007C18 3429 000C                  		move.w	$C(a1),d2
00007C1C 1229 0016                  		move.b	$16(a1),d1
00007C20 4881                       		ext.w	d1
00007C22 D242                       		add.w	d2,d1
00007C24 5841                       		addq.w	#4,d1
00007C26 9041                       		sub.w	d1,d0
00007C28 6200 0000                  		bhi.w	locret_751E
00007C2C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C30 6500 0000                  		bcs.w	locret_751E
00007C34 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C38 6B00 0000                  		bmi.w	locret_751E
00007C3C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007C42 6400 0000                  		bcc.w	locret_751E
00007C46 D440                       		add.w	d0,d2
00007C48 5642                       		addq.w	#3,d2
00007C4A 3342 000C                  		move.w	d2,$C(a1)
00007C4E 5428 0024                  		addq.b	#2,$24(a0)
00007C52                            
00007C52                            loc_74AE:
00007C52 0829 0003 0022             		btst	#3,$22(a1)
00007C58 6700                       		beq.s	loc_74DC
00007C5A 7000                       		moveq	#0,d0
00007C5C 1029 003D                  		move.b	$3D(a1),d0
00007C60 ED48                       		lsl.w	#6,d0
00007C62 0680 00FF D000             		addi.l	#$FFD000,d0
00007C68 2440                       		movea.l	d0,a2
00007C6A 08AA 0003 0022             		bclr	#3,$22(a2)
00007C70 422A 0025                  		clr.b	$25(a2)
00007C74 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007C7A 6600                       		bne.s	loc_74DC
00007C7C 552A 0024                  		subq.b	#2,$24(a2)
00007C80                            
00007C80                            loc_74DC:
00007C80 3008                       		move.w	a0,d0
00007C82 0440 D000                  		subi.w	#-$3000,d0
00007C86 EC48                       		lsr.w	#6,d0
00007C88 0240 007F                  		andi.w	#$7F,d0
00007C8C 1340 003D                  		move.b	d0,$3D(a1)
00007C90 137C 0000 0026             		move.b	#0,$26(a1)
00007C96 337C 0000 0012             		move.w	#0,$12(a1)
00007C9C 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007CA2 0829 0001 0022             		btst	#1,$22(a1)
00007CA8 6700                       		beq.s	loc_7512
00007CAA 2F08                       		move.l	a0,-(sp)
00007CAC 2049                       		movea.l	a1,a0
00007CAE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007CB4 205F                       		movea.l	(sp)+,a0
00007CB6                            
00007CB6                            loc_7512:
00007CB6 08E9 0003 0022             		bset	#3,$22(a1)
00007CBC 08E8 0003 0022             		bset	#3,$22(a0)
00007CC2                            
00007CC2                            locret_751E:
00007CC2 4E75                       		rts	
00007CC4                            ; End of function PlatformObject
00007CC4                            
00007CC4                            ; ---------------------------------------------------------------------------
00007CC4                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007CC4                            ; ---------------------------------------------------------------------------
00007CC4                            
00007CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CC4                            
00007CC4                            
00007CC4                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007CC4 43F8 D000                  		lea	($FFFFD000).w,a1
00007CC8 4A69 0012                  		tst.w	$12(a1)
00007CCC 6B00 FFF4                  		bmi.w	locret_751E
00007CD0 3029 0008                  		move.w	8(a1),d0
00007CD4 9068 0008                  		sub.w	8(a0),d0
00007CD8 D041                       		add.w	d1,d0
00007CDA 6BE6                       		bmi.s	locret_751E
00007CDC D241                       		add.w	d1,d1
00007CDE B041                       		cmp.w	d1,d0
00007CE0 64E0                       		bcc.s	locret_751E
00007CE2 0828 0000 0001             		btst	#0,1(a0)
00007CE8 6700                       		beq.s	loc_754A
00007CEA 4640                       		not.w	d0
00007CEC D041                       		add.w	d1,d0
00007CEE                            
00007CEE                            loc_754A:
00007CEE E248                       		lsr.w	#1,d0
00007CF0 7600                       		moveq	#0,d3
00007CF2 1632 0000                  		move.b	(a2,d0.w),d3
00007CF6 3028 000C                  		move.w	$C(a0),d0
00007CFA 9043                       		sub.w	d3,d0
00007CFC 6000 FF1A                  		bra.w	Platform3
00007D00                            ; End of function SlopeObject
00007D00                            
00007D00                            
00007D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D00                            
00007D00                            
00007D00                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D00 43F8 D000                  		lea	($FFFFD000).w,a1
00007D04 4A69 0012                  		tst.w	$12(a1)
00007D08 6B00 FFB8                  		bmi.w	locret_751E
00007D0C 3029 0008                  		move.w	8(a1),d0
00007D10 9068 0008                  		sub.w	8(a0),d0
00007D14 D041                       		add.w	d1,d0
00007D16 6B00 FFAA                  		bmi.w	locret_751E
00007D1A D241                       		add.w	d1,d1
00007D1C B041                       		cmp.w	d1,d0
00007D1E 6400 FFA2                  		bcc.w	locret_751E
00007D22 3028 000C                  		move.w	$C(a0),d0
00007D26 9043                       		sub.w	d3,d0
00007D28 6000 FEEE                  		bra.w	Platform3
00007D2C                            ; End of function Obj15_Solid
00007D2C                            
00007D2C                            ; ===========================================================================
00007D2C                            
00007D2C                            Obj11_Action2:				; XREF: Obj11_Index
00007D2C 6100                       		bsr.s	Obj11_WalkOff
00007D2E 6100 0000                  		bsr.w	DisplaySprite
00007D32 6000 0000                  		bra.w	Obj11_ChkDel
00007D36                            
00007D36                            ; ---------------------------------------------------------------------------
00007D36                            ; Subroutine allowing Sonic to walk off a bridge
00007D36                            ; ---------------------------------------------------------------------------
00007D36                            
00007D36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D36                            
00007D36                            
00007D36                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D36 7200                       		moveq	#0,d1
00007D38 1228 0028                  		move.b	$28(a0),d1
00007D3C E749                       		lsl.w	#3,d1
00007D3E 3401                       		move.w	d1,d2
00007D40 5041                       		addq.w	#8,d1
00007D42 6100                       		bsr.s	ExitPlatform2
00007D44 6400                       		bcc.s	locret_75BE
00007D46 E848                       		lsr.w	#4,d0
00007D48 1140 003F                  		move.b	d0,$3F(a0)
00007D4C 1028 003E                  		move.b	$3E(a0),d0
00007D50 0C00 0040                  		cmpi.b	#$40,d0
00007D54 6700                       		beq.s	loc_75B6
00007D56 5828 003E                  		addq.b	#4,$3E(a0)
00007D5A                            
00007D5A                            loc_75B6:
00007D5A 6100 0000                  		bsr.w	Obj11_Bend
00007D5E 6100 0000                  		bsr.w	Obj11_MoveSonic
00007D62                            
00007D62                            locret_75BE:
00007D62 4E75                       		rts	
00007D64                            ; End of function Obj11_WalkOff
00007D64                            
00007D64                            ; ---------------------------------------------------------------------------
00007D64                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007D64                            ; ---------------------------------------------------------------------------
00007D64                            
00007D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D64                            
00007D64                            
00007D64                            ExitPlatform:
00007D64 3401                       		move.w	d1,d2
00007D66                            
00007D66                            ExitPlatform2:
00007D66 D442                       		add.w	d2,d2
00007D68 43F8 D000                  		lea	($FFFFD000).w,a1
00007D6C 0829 0001 0022             		btst	#1,$22(a1)
00007D72 6600                       		bne.s	loc_75E0
00007D74 3029 0008                  		move.w	8(a1),d0
00007D78 9068 0008                  		sub.w	8(a0),d0
00007D7C D041                       		add.w	d1,d0
00007D7E 6B00                       		bmi.s	loc_75E0
00007D80 B042                       		cmp.w	d2,d0
00007D82 6500                       		bcs.s	locret_75F2
00007D84                            
00007D84                            loc_75E0:
00007D84 08A9 0003 0022             		bclr	#3,$22(a1)
00007D8A 117C 0002 0024             		move.b	#2,$24(a0)
00007D90 08A8 0003 0022             		bclr	#3,$22(a0)
00007D96                            
00007D96                            locret_75F2:
00007D96 4E75                       		rts	
00007D98                            ; End of function ExitPlatform
00007D98                            
00007D98                            
00007D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D98                            
00007D98                            
00007D98                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007D98 7000                       		moveq	#0,d0
00007D9A 1028 003F                  		move.b	$3F(a0),d0
00007D9E 1030 0029                  		move.b	$29(a0,d0.w),d0
00007DA2 ED48                       		lsl.w	#6,d0
00007DA4 0680 00FF D000             		addi.l	#$FFD000,d0
00007DAA 2440                       		movea.l	d0,a2
00007DAC 43F8 D000                  		lea	($FFFFD000).w,a1
00007DB0 302A 000C                  		move.w	$C(a2),d0
00007DB4 5140                       		subq.w	#8,d0
00007DB6 7200                       		moveq	#0,d1
00007DB8 1229 0016                  		move.b	$16(a1),d1
00007DBC 9041                       		sub.w	d1,d0
00007DBE 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007DC2 4E75                       		rts	
00007DC4                            ; End of function Obj11_MoveSonic
00007DC4                            
00007DC4                            
00007DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DC4                            
00007DC4                            
00007DC4                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007DC4 1028 003E                  		move.b	$3E(a0),d0
00007DC8 6100 AF9A                  		bsr.w	CalcSine
00007DCC 3800                       		move.w	d0,d4
00007DCE 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007DD4 7000                       		moveq	#0,d0
00007DD6 1028 0028                  		move.b	$28(a0),d0
00007DDA E948                       		lsl.w	#4,d0
00007DDC 7600                       		moveq	#0,d3
00007DDE 1628 003F                  		move.b	$3F(a0),d3
00007DE2 3403                       		move.w	d3,d2
00007DE4 D640                       		add.w	d0,d3
00007DE6 7A00                       		moveq	#0,d5
00007DE8 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007DEE 1A35 3000                  		move.b	(a5,d3.w),d5
00007DF2 0243 000F                  		andi.w	#$F,d3
00007DF6 E94B                       		lsl.w	#4,d3
00007DF8 47F4 3000                  		lea	(a4,d3.w),a3
00007DFC 45E8 0029                  		lea	$29(a0),a2
00007E00                            
00007E00                            loc_765C:
00007E00 7000                       		moveq	#0,d0
00007E02 101A                       		move.b	(a2)+,d0
00007E04 ED48                       		lsl.w	#6,d0
00007E06 0680 00FF D000             		addi.l	#$FFD000,d0
00007E0C 2240                       		movea.l	d0,a1
00007E0E 7000                       		moveq	#0,d0
00007E10 101B                       		move.b	(a3)+,d0
00007E12 5240                       		addq.w	#1,d0
00007E14 C0C5                       		mulu.w	d5,d0
00007E16 C0C4                       		mulu.w	d4,d0
00007E18 4840                       		swap	d0
00007E1A D069 003C                  		add.w	$3C(a1),d0
00007E1E 3340 000C                  		move.w	d0,$C(a1)
00007E22 51CA FFDC                  		dbf	d2,loc_765C
00007E26 7000                       		moveq	#0,d0
00007E28 1028 0028                  		move.b	$28(a0),d0
00007E2C 7600                       		moveq	#0,d3
00007E2E 1628 003F                  		move.b	$3F(a0),d3
00007E32 5203                       		addq.b	#1,d3
00007E34 9600                       		sub.b	d0,d3
00007E36 4403                       		neg.b	d3
00007E38 6B00                       		bmi.s	locret_76CA
00007E3A 3403                       		move.w	d3,d2
00007E3C E94B                       		lsl.w	#4,d3
00007E3E 47F4 3000                  		lea	(a4,d3.w),a3
00007E42 D6C2                       		adda.w	d2,a3
00007E44 5342                       		subq.w	#1,d2
00007E46 6500                       		bcs.s	locret_76CA
00007E48                            
00007E48                            loc_76A4:
00007E48 7000                       		moveq	#0,d0
00007E4A 101A                       		move.b	(a2)+,d0
00007E4C ED48                       		lsl.w	#6,d0
00007E4E 0680 00FF D000             		addi.l	#$FFD000,d0
00007E54 2240                       		movea.l	d0,a1
00007E56 7000                       		moveq	#0,d0
00007E58 1023                       		move.b	-(a3),d0
00007E5A 5240                       		addq.w	#1,d0
00007E5C C0C5                       		mulu.w	d5,d0
00007E5E C0C4                       		mulu.w	d4,d0
00007E60 4840                       		swap	d0
00007E62 D069 003C                  		add.w	$3C(a1),d0
00007E66 3340 000C                  		move.w	d0,$C(a1)
00007E6A 51CA FFDC                  		dbf	d2,loc_76A4
00007E6E                            
00007E6E                            locret_76CA:
00007E6E 4E75                       		rts	
00007E70                            ; End of function Obj11_Bend
00007E70                            
00007E70                            ; ===========================================================================
00007E70                            ; ---------------------------------------------------------------------------
00007E70                            ; GHZ bridge-bending data
00007E70                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007E70                            ; ---------------------------------------------------------------------------
00007E70                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007F80                            		even
00007F80                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008080                            		even
00008080                            
00008080                            ; ===========================================================================
00008080                            
00008080                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008080 3028 0008                  		move.w	8(a0),d0
00008084 0240 FF80                  		andi.w	#$FF80,d0
00008088 3238 F700                  		move.w	($FFFFF700).w,d1
0000808C 0441 0080                  		subi.w	#$80,d1
00008090 0241 FF80                  		andi.w	#$FF80,d1
00008094 9041                       		sub.w	d1,d0
00008096 0C40 0280                  		cmpi.w	#$280,d0
0000809A 6200 0000                  		bhi.w	Obj11_DelAll
0000809E 4E75                       		rts	
000080A0                            ; ===========================================================================
000080A0                            
000080A0                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000080A0 7400                       		moveq	#0,d2
000080A2 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000080A6 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000080A8 5302                       		subq.b	#1,d2		; subtract 1
000080AA 6500                       		bcs.s	Obj11_Delete
000080AC                            
000080AC                            Obj11_DelLoop:
000080AC 7000                       		moveq	#0,d0
000080AE 101A                       		move.b	(a2)+,d0
000080B0 ED48                       		lsl.w	#6,d0
000080B2 0680 00FF D000             		addi.l	#$FFD000,d0
000080B8 2240                       		movea.l	d0,a1
000080BA B048                       		cmp.w	a0,d0
000080BC 6700                       		beq.s	loc_791E
000080BE 6100 0000                  		bsr.w	DeleteObject2
000080C2                            
000080C2                            loc_791E:
000080C2 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000080C6                            
000080C6                            Obj11_Delete:
000080C6 6100 0000                  		bsr.w	DeleteObject
000080CA 4E75                       		rts	
000080CC                            ; ===========================================================================
000080CC                            
000080CC                            Obj11_Delete2:				; XREF: Obj11_Index
000080CC 6100 0000                  		bsr.w	DeleteObject
000080D0 4E75                       		rts	
000080D2                            ; ===========================================================================
000080D2                            
000080D2                            Obj11_Display2:				; XREF: Obj11_Index
000080D2 6100 0000                  		bsr.w	DisplaySprite
000080D6 4E75                       		rts	
000080D8                            ; ===========================================================================
000080D8                            ; ---------------------------------------------------------------------------
000080D8                            ; Sprite mappings - GHZ	bridge
000080D8                            ; ---------------------------------------------------------------------------
000080D8                            Map_obj11:
000080D8                            	include "_maps\obj11.asm"
000080D8                            ; ---------------------------------------------------------------------------
000080D8                            ; Sprite mappings - GHZ	bridge
000080D8                            ; ---------------------------------------------------------------------------
000080D8 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000080DC 0000                       		dc.w byte_794B-Map_obj11
000080DE 01                         byte_793A:	dc.b 1
000080DF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080E4 02                         byte_7940:	dc.b 2
000080E5 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000080EA 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000080EF 01                         byte_794B:	dc.b 1
000080F0 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000080F6 00                         		even
000080F6 00                         		even
000080F6                            
000080F6                            ; ===========================================================================
000080F6                            ; ---------------------------------------------------------------------------
000080F6                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000080F6                            ;	    - spiked ball on a chain (SBZ)
000080F6                            ; ---------------------------------------------------------------------------
000080F6                            
000080F6                            Obj15:					; XREF: Obj_Index
000080F6 7000                       		moveq	#0,d0
000080F8 1028 0024                  		move.b	$24(a0),d0
000080FC 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008100 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008104                            ; ===========================================================================
00008104 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008108 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000810C 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008110 0000                       		dc.w Obj15_Action-Obj15_Index
00008112                            ; ===========================================================================
00008112                            
00008112                            Obj15_Main:				; XREF: Obj15_Index
00008112 5428 0024                  		addq.b	#2,$24(a0)
00008116 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000811E 317C 0380 0002             		move.w	#$380,2(a0)
00008124 117C 0004 0001             		move.b	#4,1(a0)
0000812A 117C 0003 0018             		move.b	#3,$18(a0)
00008130 117C 0018 0019             		move.b	#$18,$19(a0)
00008136 117C 0008 0016             		move.b	#8,$16(a0)
0000813C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008142 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008148 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000814E 6600                       		bne.s	Obj15_NotSLZ
00008150 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008158 317C 03DC 0002             		move.w	#$3DC,2(a0)
0000815E 117C 0020 0019             		move.b	#$20,$19(a0)
00008164 117C 0010 0016             		move.b	#$10,$16(a0)
0000816A 117C 0099 0020             		move.b	#$99,$20(a0)
00008170                            
00008170                            Obj15_NotSLZ:
00008170 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008176 6600                       		bne.s	Obj15_SetLength
00008178 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008180 317C 0391 0002             		move.w	#$391,2(a0)
00008186 117C 0018 0019             		move.b	#$18,$19(a0)
0000818C 117C 0018 0016             		move.b	#$18,$16(a0)
00008192 117C 0086 0020             		move.b	#$86,$20(a0)
00008198 117C 000C 0024             		move.b	#$C,$24(a0)
0000819E                            
0000819E                            Obj15_SetLength:
0000819E 1810                       		move.b	0(a0),d4
000081A0 7200                       		moveq	#0,d1
000081A2 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000081A6 1212                       		move.b	(a2),d1		; move a2 to d1
000081A8 3F01                       		move.w	d1,-(sp)
000081AA 0241 000F                  		andi.w	#$F,d1
000081AE 14FC 0000                  		move.b	#0,(a2)+
000081B2 3601                       		move.w	d1,d3
000081B4 E94B                       		lsl.w	#4,d3
000081B6 5003                       		addq.b	#8,d3
000081B8 1143 003C                  		move.b	d3,$3C(a0)
000081BC 5103                       		subq.b	#8,d3
000081BE 4A28 001A                  		tst.b	$1A(a0)
000081C2 6700                       		beq.s	Obj15_MakeChain
000081C4 5003                       		addq.b	#8,d3
000081C6 5341                       		subq.w	#1,d1
000081C8                            
000081C8                            Obj15_MakeChain:
000081C8 6100 0000                  		bsr.w	SingleObjLoad
000081CC 6600                       		bne.s	loc_7A92
000081CE 5228 0028                  		addq.b	#1,$28(a0)
000081D2 3A09                       		move.w	a1,d5
000081D4 0445 D000                  		subi.w	#-$3000,d5
000081D8 EC4D                       		lsr.w	#6,d5
000081DA 0245 007F                  		andi.w	#$7F,d5
000081DE 14C5                       		move.b	d5,(a2)+
000081E0 137C 000A 0024             		move.b	#$A,$24(a1)
000081E6 1284                       		move.b	d4,0(a1)	; load swinging	object
000081E8 2368 0004 0004             		move.l	4(a0),4(a1)
000081EE 3368 0002 0002             		move.w	2(a0),2(a1)
000081F4 08A9 0006 0002             		bclr	#6,2(a1)
000081FA 137C 0004 0001             		move.b	#4,1(a1)
00008200 137C 0004 0018             		move.b	#4,$18(a1)
00008206 137C 0008 0019             		move.b	#8,$19(a1)
0000820C 137C 0001 001A             		move.b	#1,$1A(a1)
00008212 1343 003C                  		move.b	d3,$3C(a1)
00008216 0403 0010                  		subi.b	#$10,d3
0000821A 6400                       		bcc.s	loc_7A8E
0000821C 137C 0002 001A             		move.b	#2,$1A(a1)
00008222 137C 0003 0018             		move.b	#3,$18(a1)
00008228 08E9 0006 0002             		bset	#6,2(a1)
0000822E                            
0000822E                            loc_7A8E:
0000822E 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008232                            
00008232                            loc_7A92:
00008232 3A08                       		move.w	a0,d5
00008234 0445 D000                  		subi.w	#-$3000,d5
00008238 EC4D                       		lsr.w	#6,d5
0000823A 0245 007F                  		andi.w	#$7F,d5
0000823E 14C5                       		move.b	d5,(a2)+
00008240 317C 4080 0026             		move.w	#$4080,$26(a0)
00008246 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000824C 321F                       		move.w	(sp)+,d1
0000824E 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008252 6700                       		beq.s	loc_7AD4	; if not, branch
00008254 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000825C 317C 03AA 0002             		move.w	#$3AA,2(a0)
00008262 117C 0001 001A             		move.b	#1,$1A(a0)
00008268 117C 0002 0018             		move.b	#2,$18(a0)
0000826E 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008274                            
00008274                            loc_7AD4:
00008274 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000827A 6700                       		beq.s	Obj15_Action	; if yes, branch
0000827C                            
0000827C                            Obj15_SetSolid:				; XREF: Obj15_Index
0000827C 7200                       		moveq	#0,d1
0000827E 1228 0019                  		move.b	$19(a0),d1
00008282 7600                       		moveq	#0,d3
00008284 1628 0016                  		move.b	$16(a0),d3
00008288 6100 FA76                  		bsr.w	Obj15_Solid
0000828C                            
0000828C                            Obj15_Action:				; XREF: Obj15_Index
0000828C 6100 0000                  		bsr.w	Obj15_Move
00008290 6100 0000                  		bsr.w	DisplaySprite
00008294 6000 0000                  		bra.w	Obj15_ChkDel
00008298                            ; ===========================================================================
00008298                            
00008298                            Obj15_Action2:				; XREF: Obj15_Index
00008298 7200                       		moveq	#0,d1
0000829A 1228 0019                  		move.b	$19(a0),d1
0000829E 6100 FAC4                  		bsr.w	ExitPlatform
000082A2 3F28 0008                  		move.w	8(a0),-(sp)
000082A6 6100 0000                  		bsr.w	Obj15_Move
000082AA 341F                       		move.w	(sp)+,d2
000082AC 7600                       		moveq	#0,d3
000082AE 1628 0016                  		move.b	$16(a0),d3
000082B2 5203                       		addq.b	#1,d3
000082B4 6100 0000                  		bsr.w	MvSonicOnPtfm
000082B8 6100 0000                  		bsr.w	DisplaySprite
000082BC 6000 0000                  		bra.w	Obj15_ChkDel
000082C0                            
000082C0 4E75                       		rts
000082C2                            
000082C2                            ; ---------------------------------------------------------------------------
000082C2                            ; Subroutine to	change Sonic's position with a platform
000082C2                            ; ---------------------------------------------------------------------------
000082C2                            
000082C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C2                            
000082C2                            
000082C2                            MvSonicOnPtfm:
000082C2 43F8 D000                  		lea	($FFFFD000).w,a1
000082C6 3028 000C                  		move.w	$C(a0),d0
000082CA 9043                       		sub.w	d3,d0
000082CC 6000                       		bra.s	MvSonic2
000082CE                            ; End of function MvSonicOnPtfm
000082CE                            
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            ; Subroutine to	change Sonic's position with a platform
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            
000082CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082CE                            
000082CE                            
000082CE                            MvSonicOnPtfm2:
000082CE 43F8 D000                  		lea	($FFFFD000).w,a1
000082D2 3028 000C                  		move.w	$C(a0),d0
000082D6 0440 0009                  		subi.w	#9,d0
000082DA                            
000082DA                            MvSonic2:
000082DA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000082DE 6B00                       		bmi.s	locret_7B62
000082E0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000082E6 6400                       		bcc.s	locret_7B62
000082E8 4A78 FE08                  		tst.w	($FFFFFE08).w
000082EC 6600                       		bne.s	locret_7B62
000082EE 7200                       		moveq	#0,d1
000082F0 1229 0016                  		move.b	$16(a1),d1
000082F4 9041                       		sub.w	d1,d0
000082F6 3340 000C                  		move.w	d0,$C(a1)
000082FA 9468 0008                  		sub.w	8(a0),d2
000082FE 9569 0008                  		sub.w	d2,8(a1)
00008302                            
00008302                            locret_7B62:
00008302 4E75                       		rts	
00008304                            ; End of function MvSonicOnPtfm2
00008304                            
00008304                            
00008304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008304                            
00008304                            
00008304                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008304 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008308 323C 0080                  		move.w	#$80,d1
0000830C 0828 0000 0022             		btst	#0,$22(a0)
00008312 6700                       		beq.s	loc_7B78
00008314 4440                       		neg.w	d0
00008316 D041                       		add.w	d1,d0
00008318                            
00008318                            loc_7B78:
00008318 6000                       		bra.s	Obj15_Move2
0000831A                            ; End of function Obj15_Move
0000831A                            
0000831A                            
0000831A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000831A                            
0000831A                            
0000831A                            Obj48_Move:				; XREF: Obj48_Display2
0000831A 4A28 003D                  		tst.b	$3D(a0)
0000831E 6600                       		bne.s	loc_7B9C
00008320 3028 003E                  		move.w	$3E(a0),d0
00008324 5040                       		addq.w	#8,d0
00008326 3140 003E                  		move.w	d0,$3E(a0)
0000832A D168 0026                  		add.w	d0,$26(a0)
0000832E 0C40 0200                  		cmpi.w	#$200,d0
00008332 6600                       		bne.s	loc_7BB6
00008334 117C 0001 003D             		move.b	#1,$3D(a0)
0000833A 6000                       		bra.s	loc_7BB6
0000833C                            ; ===========================================================================
0000833C                            
0000833C                            loc_7B9C:
0000833C 3028 003E                  		move.w	$3E(a0),d0
00008340 5140                       		subq.w	#8,d0
00008342 3140 003E                  		move.w	d0,$3E(a0)
00008346 D168 0026                  		add.w	d0,$26(a0)
0000834A 0C40 FE00                  		cmpi.w	#-$200,d0
0000834E 6600                       		bne.s	loc_7BB6
00008350 117C 0000 003D             		move.b	#0,$3D(a0)
00008356                            
00008356                            loc_7BB6:
00008356 1028 0026                  		move.b	$26(a0),d0
0000835A                            ; End of function Obj48_Move
0000835A                            
0000835A                            
0000835A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000835A                            
0000835A                            
0000835A                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000835A 6100 AA08                  		bsr.w	CalcSine
0000835E 3428 0038                  		move.w	$38(a0),d2
00008362 3628 003A                  		move.w	$3A(a0),d3
00008366 45E8 0028                  		lea	$28(a0),a2
0000836A 7C00                       		moveq	#0,d6
0000836C 1C1A                       		move.b	(a2)+,d6
0000836E                            
0000836E                            loc_7BCE:
0000836E 7800                       		moveq	#0,d4
00008370 181A                       		move.b	(a2)+,d4
00008372 ED4C                       		lsl.w	#6,d4
00008374 0684 00FF D000             		addi.l	#$FFD000,d4
0000837A 2244                       		movea.l	d4,a1
0000837C 7800                       		moveq	#0,d4
0000837E 1829 003C                  		move.b	$3C(a1),d4
00008382 2A04                       		move.l	d4,d5
00008384 C9C0                       		muls.w	d0,d4
00008386 E084                       		asr.l	#8,d4
00008388 CBC1                       		muls.w	d1,d5
0000838A E085                       		asr.l	#8,d5
0000838C D842                       		add.w	d2,d4
0000838E DA43                       		add.w	d3,d5
00008390 3344 000C                  		move.w	d4,$C(a1)
00008394 3345 0008                  		move.w	d5,8(a1)
00008398 51CE FFD4                  		dbf	d6,loc_7BCE
0000839C 4E75                       		rts	
0000839E                            ; End of function Obj15_Move2
0000839E                            
0000839E                            ; ===========================================================================
0000839E                            
0000839E                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000839E 3028 003A                  		move.w	$3A(a0),d0
000083A2 0240 FF80                  		andi.w	#$FF80,d0
000083A6 3238 F700                  		move.w	($FFFFF700).w,d1
000083AA 0441 0080                  		subi.w	#$80,d1
000083AE 0241 FF80                  		andi.w	#$FF80,d1
000083B2 9041                       		sub.w	d1,d0
000083B4 0C40 0280                  		cmpi.w	#$280,d0
000083B8 6200 0000                  		bhi.w	Obj15_DelAll
000083BC 4E75                       		rts	
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000083BE 7400                       		moveq	#0,d2
000083C0 45E8 0028                  		lea	$28(a0),a2
000083C4 141A                       		move.b	(a2)+,d2
000083C6                            
000083C6                            Obj15_DelLoop:
000083C6 7000                       		moveq	#0,d0
000083C8 101A                       		move.b	(a2)+,d0
000083CA ED48                       		lsl.w	#6,d0
000083CC 0680 00FF D000             		addi.l	#$FFD000,d0
000083D2 2240                       		movea.l	d0,a1
000083D4 6100 0000                  		bsr.w	DeleteObject2
000083D8 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000083DC 4E75                       		rts	
000083DE                            ; ===========================================================================
000083DE                            
000083DE                            Obj15_Delete:				; XREF: Obj15_Index
000083DE 6100 0000                  		bsr.w	DeleteObject
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            Obj15_Display:				; XREF: Obj15_Index
000083E4 6000 0000                  		bra.w	DisplaySprite
000083E8                            ; ===========================================================================
000083E8                            ; ---------------------------------------------------------------------------
000083E8                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000083E8                            ; ---------------------------------------------------------------------------
000083E8                            Map_obj15:
000083E8                            	include "_maps\obj15ghz.asm"
000083E8                            ; ================================================================================
000083E8                            ; Sprite Mappings - generated by Flex 2 Sat Sep 01 2018 07:42:12 GMT-0700 (Pacific Daylight Time)
000083E8                            ; ================================================================================
000083E8                            
000083E8                            DATA4ZWA3RPDLRR:
000083E8 0000 0000                  	dc.w DATA4ZWA3RPDLRR_0-DATA4ZWA3RPDLRR, DATA4ZWA3RPDLRR_1-DATA4ZWA3RPDLRR
000083EC 0000                       	dc.w DATA4ZWA3RPDLRR_2-DATA4ZWA3RPDLRR
000083EE 02                         DATA4ZWA3RPDLRR_0: dc.b $2
000083EF F809 0004 E8               	dc.b $F8, $9, $0, $4, $E8
000083F4 F809 0804 00               	dc.b $F8, $9, $8, $4, $0
000083F9 01                         DATA4ZWA3RPDLRR_1: dc.b $1
000083FA F805 0000 F8               	dc.b $F8, $5, $0, $0, $F8
000083FF 01                         DATA4ZWA3RPDLRR_2: dc.b $1
00008400 F805 000A F8               	dc.b $F8, $5, $0, $A, $F8
00008406 00                         	even
00008406 00                         	even
00008406                            
00008406                            ; ---------------------------------------------------------------------------
00008406                            ; Sprite mappings - SLZ	swinging platforms
00008406                            ; ---------------------------------------------------------------------------
00008406                            Map_obj15a:
00008406                            	include "_maps\obj15slz.asm"
00008406                            ; ---------------------------------------------------------------------------
00008406                            ; Sprite mappings - SLZ	swinging platforms
00008406                            ; ---------------------------------------------------------------------------
00008406 0000                       		dc.w byte_7C6C-Map_obj15a
00008408 0000                       		dc.w byte_7C95-Map_obj15a
0000840A 0000                       		dc.w byte_7C9B-Map_obj15a
0000840C 08                         byte_7C6C:	dc.b 8
0000840D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008412 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008417 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000841C F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008421 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008426 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000842B 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008430 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008435 01                         byte_7C95:	dc.b 1
00008436 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000843B 01                         byte_7C9B:	dc.b 1
0000843C F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008442 00                         		even
00008442 00                         		even
00008442                            
00008442                            ; ===========================================================================
00008442                            ; ---------------------------------------------------------------------------
00008442                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008442                            ; ---------------------------------------------------------------------------
00008442                            
00008442                            Obj17:					; XREF: Obj_Index
00008442 7000                       		moveq	#0,d0
00008444 1028 0024                  		move.b	$24(a0),d0
00008448 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000844C 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008450                            ; ===========================================================================
00008450 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008452 0000                       		dc.w Obj17_Action-Obj17_Index
00008454 0000                       		dc.w Obj17_Action-Obj17_Index
00008456 0000                       		dc.w Obj17_Delete-Obj17_Index
00008458 0000                       		dc.w Obj17_Display-Obj17_Index
0000845A                            ; ===========================================================================
0000845A                            
0000845A                            Obj17_Main:				; XREF: Obj17_Index
0000845A 5428 0024                  		addq.b	#2,$24(a0)
0000845E 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008466 317C 4398 0002             		move.w	#$4398,2(a0)
0000846C 117C 0007 0022             		move.b	#7,$22(a0)
00008472 117C 0004 0001             		move.b	#4,1(a0)
00008478 117C 0003 0018             		move.b	#3,$18(a0)
0000847E 117C 0008 0019             		move.b	#8,$19(a0)
00008484 3428 000C                  		move.w	$C(a0),d2
00008488 3628 0008                  		move.w	8(a0),d3
0000848C 1810                       		move.b	0(a0),d4
0000848E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008492 7200                       		moveq	#0,d1
00008494 1212                       		move.b	(a2),d1		; move a2 to d1
00008496 14FC 0000                  		move.b	#0,(a2)+
0000849A 3001                       		move.w	d1,d0
0000849C E248                       		lsr.w	#1,d0
0000849E E948                       		lsl.w	#4,d0
000084A0 9640                       		sub.w	d0,d3
000084A2 5501                       		subq.b	#2,d1
000084A4 6500                       		bcs.s	Obj17_Action
000084A6 7C00                       		moveq	#0,d6
000084A8                            
000084A8                            Obj17_MakeHelix:
000084A8 6100 0000                  		bsr.w	SingleObjLoad
000084AC 6600                       		bne.s	Obj17_Action
000084AE 5228 0028                  		addq.b	#1,$28(a0)
000084B2 3A09                       		move.w	a1,d5
000084B4 0445 D000                  		subi.w	#$D000,d5
000084B8 EC4D                       		lsr.w	#6,d5
000084BA 0245 007F                  		andi.w	#$7F,d5
000084BE 14C5                       		move.b	d5,(a2)+
000084C0 137C 0008 0024             		move.b	#8,$24(a1)
000084C6 1284                       		move.b	d4,0(a1)
000084C8 3342 000C                  		move.w	d2,$C(a1)
000084CC 3343 0008                  		move.w	d3,8(a1)
000084D0 2368 0004 0004             		move.l	4(a0),4(a1)
000084D6 337C 4398 0002             		move.w	#$4398,2(a1)
000084DC 137C 0004 0001             		move.b	#4,1(a1)
000084E2 137C 0003 0018             		move.b	#3,$18(a1)
000084E8 137C 0008 0019             		move.b	#8,$19(a1)
000084EE 1346 003E                  		move.b	d6,$3E(a1)
000084F2 5206                       		addq.b	#1,d6
000084F4 0206 0007                  		andi.b	#7,d6
000084F8 0643 0010                  		addi.w	#$10,d3
000084FC B668 0008                  		cmp.w	8(a0),d3
00008500 6600                       		bne.s	loc_7D78
00008502 1146 003E                  		move.b	d6,$3E(a0)
00008506 5206                       		addq.b	#1,d6
00008508 0206 0007                  		andi.b	#7,d6
0000850C 0643 0010                  		addi.w	#$10,d3
00008510 5228 0028                  		addq.b	#1,$28(a0)
00008514                            
00008514                            loc_7D78:
00008514 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008518                            
00008518                            Obj17_Action:				; XREF: Obj17_Index
00008518 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000851C 6100 0000                  		bsr.w	DisplaySprite
00008520 6000 0000                  		bra.w	Obj17_ChkDel
00008524                            
00008524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008524                            
00008524                            
00008524                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008524 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008528 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000852E D028 003E                  		add.b	$3E(a0),d0
00008532 0200 0007                  		andi.b	#7,d0
00008536 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000853A 6600                       		bne.s	locret_7DA6
0000853C 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008542                            
00008542                            locret_7DA6:
00008542 4E75                       		rts	
00008544                            ; End of function Obj17_RotateSpikes
00008544                            
00008544                            ; ===========================================================================
00008544                            
00008544                            Obj17_ChkDel:				; XREF: Obj17_Action
00008544 3028 0008                  		move.w	8(a0),d0
00008548 0240 FF80                  		andi.w	#$FF80,d0
0000854C 3238 F700                  		move.w	($FFFFF700).w,d1
00008550 0441 0080                  		subi.w	#$80,d1
00008554 0241 FF80                  		andi.w	#$FF80,d1
00008558 9041                       		sub.w	d1,d0
0000855A 0C40 0280                  		cmpi.w	#$280,d0
0000855E 6200 0000                  		bhi.w	Obj17_DelAll
00008562 4E75                       		rts	
00008564                            ; ===========================================================================
00008564                            
00008564                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008564 7400                       		moveq	#0,d2
00008566 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000856A 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000856C 5502                       		subq.b	#2,d2
0000856E 6500                       		bcs.s	Obj17_Delete
00008570                            
00008570                            Obj17_DelLoop:
00008570 7000                       		moveq	#0,d0
00008572 101A                       		move.b	(a2)+,d0
00008574 ED48                       		lsl.w	#6,d0
00008576 0680 00FF D000             		addi.l	#$FFD000,d0
0000857C 2240                       		movea.l	d0,a1
0000857E 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008582 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008586                            
00008586                            Obj17_Delete:				; XREF: Obj17_Index
00008586 6100 0000                  		bsr.w	DeleteObject
0000858A 4E75                       		rts	
0000858C                            ; ===========================================================================
0000858C                            
0000858C                            Obj17_Display:				; XREF: Obj17_Index
0000858C 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008590 6000 0000                  		bra.w	DisplaySprite
00008594                            ; ===========================================================================
00008594                            ; ---------------------------------------------------------------------------
00008594                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008594                            ; ---------------------------------------------------------------------------
00008594                            Map_obj17:
00008594                            	include "_maps\obj17.asm"
00008594                            ; ---------------------------------------------------------------------------
00008594                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008594                            ; ---------------------------------------------------------------------------
00008594 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008598 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000859C 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000085A0 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000085A4 01                         byte_7E08:	dc.b 1
000085A5 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000085AA 01                         byte_7E0E:	dc.b 1
000085AB F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000085B0 01                         byte_7E14:	dc.b 1
000085B1 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000085B6 01                         byte_7E1A:	dc.b 1
000085B7 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000085BC 01                         byte_7E20:	dc.b 1
000085BD 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000085C2 01                         byte_7E26:	dc.b 1
000085C3 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000085C8 01                         byte_7E2C:	dc.b 1
000085C9 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000085CE                            		even
000085CE                            		even
000085CE                            
000085CE                            ; ===========================================================================
000085CE                            ; ---------------------------------------------------------------------------
000085CE                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000085CE                            ; ---------------------------------------------------------------------------
000085CE                            
000085CE                            Obj18:					; XREF: Obj_Index
000085CE 7000                       		moveq	#0,d0
000085D0 1028 0024                  		move.b	$24(a0),d0
000085D4 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000085D8 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000085DC                            ; ===========================================================================
000085DC 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000085DE 0000                       		dc.w Obj18_Solid-Obj18_Index
000085E0 0000                       		dc.w Obj18_Action2-Obj18_Index
000085E2 0000                       		dc.w Obj18_Delete-Obj18_Index
000085E4 0000                       		dc.w Obj18_Action-Obj18_Index
000085E6                            ; ===========================================================================
000085E6                            
000085E6                            Obj18_Main:				; XREF: Obj18_Index
000085E6 5428 0024                  		addq.b	#2,$24(a0)
000085EA 317C 0000 0002             		move.w	#$0000,2(a0)
000085F0 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000085F8 117C 0020 0019             		move.b	#$20,$19(a0)
000085FE 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is EPZ
00008604 6600                       		bne.s	Obj18_NotEPZ
00008606 217C 0000 0000 0004        		move.l	#Map_obj18c,4(a0) ; SYZ	specific code
0000860E 117C 0020 0019             		move.b	#$20,$19(a0)
00008614                            		
00008614                            Obj18_NotEPZ:
00008614 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000861A 6600                       		bne.s	Obj18_NotSYZ
0000861C 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008624 117C 0020 0019             		move.b	#$20,$19(a0)
0000862A                            
0000862A                            Obj18_NotSYZ:
0000862A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008630 6600                       		bne.s	Obj18_NotSLZ
00008632 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000863A 117C 0020 0019             		move.b	#$20,$19(a0)
00008640 317C 4000 0002             		move.w	#$4000,2(a0)
00008646 117C 0003 0028             		move.b	#3,$28(a0)
0000864C                            
0000864C                            Obj18_NotSLZ:
0000864C 117C 0004 0001             		move.b	#4,1(a0)
00008652 117C 0004 0018             		move.b	#4,$18(a0)
00008658 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000865E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008664 3168 0008 0032             		move.w	8(a0),$32(a0)
0000866A 317C 0080 0026             		move.w	#$80,$26(a0)
00008670 7200                       		moveq	#0,d1
00008672 1028 0028                  		move.b	$28(a0),d0
00008676 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000867A 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000867C 5201                       		addq.b	#1,d1		; use frame #1
0000867E 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008684                            
00008684                            Obj18_SetFrame:
00008684 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008688                            
00008688                            Obj18_Solid:				; XREF: Obj18_Index
00008688 4A28 0038                  		tst.b	$38(a0)
0000868C 6700                       		beq.s	loc_7EE0
0000868E 5928 0038                  		subq.b	#4,$38(a0)
00008692                            
00008692                            loc_7EE0:
00008692 7200                       		moveq	#0,d1
00008694 1228 0019                  		move.b	$19(a0),d1
00008698 6100 F556                  		bsr.w	PlatformObject
0000869C                            
0000869C                            Obj18_Action:				; XREF: Obj18_Index
0000869C 6100 0000                  		bsr.w	Obj18_Move
000086A0 6100 0000                  		bsr.w	Obj18_Nudge
000086A4 6100 0000                  		bsr.w	DisplaySprite
000086A8 6000 0000                  		bra.w	Obj18_ChkDel
000086AC                            ; ===========================================================================
000086AC                            
000086AC                            Obj18_Action2:				; XREF: Obj18_Index
000086AC 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000086B2 6700                       		beq.s	loc_7F06
000086B4 5828 0038                  		addq.b	#4,$38(a0)
000086B8                            
000086B8                            loc_7F06:
000086B8 7200                       		moveq	#0,d1
000086BA 1228 0019                  		move.b	$19(a0),d1
000086BE 6100 F6A4                  		bsr.w	ExitPlatform
000086C2 3F28 0008                  		move.w	8(a0),-(sp)
000086C6 6100 0000                  		bsr.w	Obj18_Move
000086CA 6100 0000                  		bsr.w	Obj18_Nudge
000086CE 341F                       		move.w	(sp)+,d2
000086D0 6100 FBFC                  		bsr.w	MvSonicOnPtfm2
000086D4 6100 0000                  		bsr.w	DisplaySprite
000086D8 6000 0000                  		bra.w	Obj18_ChkDel
000086DC                            
000086DC 4E75                       		rts
000086DE                            
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Subroutine to	move platform slightly when you	stand on it
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            
000086DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DE                            
000086DE                            
000086DE                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000086DE 1028 0038                  		move.b	$38(a0),d0
000086E2 6100 A680                  		bsr.w	CalcSine
000086E6 323C 0400                  		move.w	#$400,d1
000086EA C1C1                       		muls.w	d1,d0
000086EC 4840                       		swap	d0
000086EE D068 002C                  		add.w	$2C(a0),d0
000086F2 3140 000C                  		move.w	d0,$C(a0)
000086F6 4E75                       		rts	
000086F8                            ; End of function Obj18_Nudge
000086F8                            
000086F8                            ; ---------------------------------------------------------------------------
000086F8                            ; Subroutine to	move platforms
000086F8                            ; ---------------------------------------------------------------------------
000086F8                            
000086F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086F8                            
000086F8                            
000086F8                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000086F8 7000                       		moveq	#0,d0
000086FA 1028 0028                  		move.b	$28(a0),d0
000086FE 0240 000F                  		andi.w	#$F,d0
00008702 D040                       		add.w	d0,d0
00008704 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008708 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000870C                            ; End of function Obj18_Move
0000870C                            
0000870C                            ; ===========================================================================
0000870C 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008710 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008714 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008718 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000871C 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008720 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008724 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008726                            ; ===========================================================================
00008726                            
00008726                            Obj18_Type00:
00008726 4E75                       		rts			; platform 00 doesn't move
00008728                            ; ===========================================================================
00008728                            
00008728                            Obj18_Type05:
00008728 3028 0032                  		move.w	$32(a0),d0
0000872C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008730 4401                       		neg.b	d1		; reverse platform-motion
00008732 0601 0040                  		addi.b	#$40,d1
00008736 6000                       		bra.s	Obj18_01_Move
00008738                            ; ===========================================================================
00008738                            
00008738                            Obj18_Type01:
00008738 3028 0032                  		move.w	$32(a0),d0
0000873C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008740 0401 0040                  		subi.b	#$40,d1
00008744                            
00008744                            Obj18_01_Move:
00008744 4881                       		ext.w	d1
00008746 D041                       		add.w	d1,d0
00008748 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000874C 6000 0000                  		bra.w	Obj18_ChgMotion
00008750                            ; ===========================================================================
00008750                            
00008750                            Obj18_Type0C:
00008750 3028 0034                  		move.w	$34(a0),d0
00008754 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008758 4401                       		neg.b	d1		; reverse platform-motion
0000875A 0601 0030                  		addi.b	#$30,d1
0000875E 6000                       		bra.s	Obj18_02_Move
00008760                            ; ===========================================================================
00008760                            
00008760                            Obj18_Type0B:
00008760 3028 0034                  		move.w	$34(a0),d0
00008764 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008768 0401 0030                  		subi.b	#$30,d1
0000876C 6000                       		bra.s	Obj18_02_Move
0000876E                            ; ===========================================================================
0000876E                            
0000876E                            Obj18_Type06:
0000876E 3028 0034                  		move.w	$34(a0),d0
00008772 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008776 4401                       		neg.b	d1		; reverse platform-motion
00008778 0601 0040                  		addi.b	#$40,d1
0000877C 6000                       		bra.s	Obj18_02_Move
0000877E                            ; ===========================================================================
0000877E                            
0000877E                            Obj18_Type02:
0000877E 3028 0034                  		move.w	$34(a0),d0
00008782 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008786 0401 0040                  		subi.b	#$40,d1
0000878A                            
0000878A                            Obj18_02_Move:
0000878A 4881                       		ext.w	d1
0000878C D041                       		add.w	d1,d0
0000878E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008792 6000 0000                  		bra.w	Obj18_ChgMotion
00008796                            ; ===========================================================================
00008796                            
00008796                            Obj18_Type03:
00008796 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000879A 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000879C 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087A2 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087A4 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087AA                            
000087AA                            Obj18_03_NoMove:
000087AA 4E75                       		rts	
000087AC                            ; ===========================================================================
000087AC                            
000087AC                            Obj18_03_Wait:
000087AC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000087B0 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000087B2 317C 0020 003A             		move.w	#32,$3A(a0)
000087B8 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000087BC 4E75                       		rts	
000087BE                            ; ===========================================================================
000087BE                            
000087BE                            Obj18_Type04:
000087BE 4A68 003A                  		tst.w	$3A(a0)
000087C2 6700                       		beq.s	loc_8048
000087C4 5368 003A                  		subq.w	#1,$3A(a0)
000087C8 6600                       		bne.s	loc_8048
000087CA 0828 0003 0022             		btst	#3,$22(a0)
000087D0 6700                       		beq.s	loc_8042
000087D2 08E9 0001 0022             		bset	#1,$22(a1)
000087D8 08A9 0003 0022             		bclr	#3,$22(a1)
000087DE 137C 0002 0024             		move.b	#2,$24(a1)
000087E4 08A8 0003 0022             		bclr	#3,$22(a0)
000087EA 4228 0025                  		clr.b	$25(a0)
000087EE 3368 0012 0012             		move.w	$12(a0),$12(a1)
000087F4                            
000087F4                            loc_8042:
000087F4 117C 0008 0024             		move.b	#8,$24(a0)
000087FA                            
000087FA                            loc_8048:
000087FA 2628 002C                  		move.l	$2C(a0),d3
000087FE 3028 0012                  		move.w	$12(a0),d0
00008802 48C0                       		ext.l	d0
00008804 E180                       		asl.l	#8,d0
00008806 D680                       		add.l	d0,d3
00008808 2143 002C                  		move.l	d3,$2C(a0)
0000880C 0668 0038 0012             		addi.w	#$38,$12(a0)
00008812 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008816 0640 00E0                  		addi.w	#$E0,d0
0000881A B068 002C                  		cmp.w	$2C(a0),d0
0000881E 6400                       		bcc.s	locret_8074
00008820 117C 0006 0024             		move.b	#6,$24(a0)
00008826                            
00008826                            locret_8074:
00008826 4E75                       		rts	
00008828                            ; ===========================================================================
00008828                            
00008828                            Obj18_Type07:
00008828 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000882C 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000882E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008832 7000                       		moveq	#0,d0
00008834 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008838 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000883A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000883E 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008840 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008846                            
00008846                            Obj18_07_NoMove:
00008846 4E75                       		rts	
00008848                            ; ===========================================================================
00008848                            
00008848                            Obj18_07_Wait:
00008848 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000884C 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000884E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008852 4E75                       		rts	
00008854                            ; ===========================================================================
00008854                            
00008854                            Obj18_Type08:
00008854 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008858 3028 0034                  		move.w	$34(a0),d0
0000885C 0440 0200                  		subi.w	#$200,d0
00008860 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008864 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008866 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000886A                            
0000886A                            Obj18_08_NoStop:
0000886A 4E75                       		rts	
0000886C                            ; ===========================================================================
0000886C                            
0000886C                            Obj18_Type0A:
0000886C 3028 0034                  		move.w	$34(a0),d0
00008870 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008874 0401 0040                  		subi.b	#$40,d1
00008878 4881                       		ext.w	d1
0000887A E241                       		asr.w	#1,d1
0000887C D041                       		add.w	d1,d0
0000887E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008882                            
00008882                            Obj18_ChgMotion:
00008882 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008888 4E75                       		rts	
0000888A                            ; ===========================================================================
0000888A                            
0000888A                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000888A 3028 0032                  		move.w	$32(a0),d0
0000888E 0240 FF80                  		andi.w	#$FF80,d0
00008892 3238 F700                  		move.w	($FFFFF700).w,d1
00008896 0441 0080                  		subi.w	#$80,d1
0000889A 0241 FF80                  		andi.w	#$FF80,d1
0000889E 9041                       		sub.w	d1,d0
000088A0 0C40 0280                  		cmpi.w	#$280,d0
000088A4 6200                       		bhi.s	Obj18_Delete
000088A6 4E75                       		rts	
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            Obj18_Delete:				; XREF: Obj18_Index
000088A8 6000 0000                  		bra.w	DeleteObject
000088AC                            ; ===========================================================================
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            ; Sprite mappings - unused
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            Map_obj18x:
000088AC                            	include "_maps\obj18x.asm"
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            ; Sprite mappings - unused
000088AC                            ; ---------------------------------------------------------------------------
000088AC 0000                       		dc.w byte_80FE-Map_obj18x
000088AE 0000                       		dc.w byte_8109-Map_obj18x
000088B0 02                         byte_80FE:	dc.b 2
000088B1 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000088B6 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000088BB 0A                         byte_8109:	dc.b $A
000088BC F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000088C1 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000088C6 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000088CB 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000088D0 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000088D5 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000088DA 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000088DF 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000088E4 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000088E9 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000088EE                            		even
000088EE                            		even
000088EE                            
000088EE                            ; ---------------------------------------------------------------------------
000088EE                            ; Sprite mappings - GHZ	platforms
000088EE                            ; ---------------------------------------------------------------------------
000088EE                            Map_obj18:
000088EE                            	include "_maps\obj18ghz.asm"
000088EE                            ; ================================================================================
000088EE                            ; Sprite Mappings - generated by Flex 2 Sat Jun 23 2018 11:38:25 GMT-0700 (Pacific Daylight Time)
000088EE                            ; ================================================================================
000088EE                            
000088EE                            DATASCN4DM1JX6L:
000088EE 0000 0000                  	dc.w DATASCN4DM1JX6L_0-DATASCN4DM1JX6L, DATASCN4DM1JX6L_1-DATASCN4DM1JX6L
000088F2 10                         DATASCN4DM1JX6L_0: dc.b $10
000088F3 F404 01C9 E0               	dc.b $F4, $4, $1, $C9, $E0
000088F8 F404 09C9 10               	dc.b $F4, $4, $9, $C9, $10
000088FD F400 01CA F0               	dc.b $F4, $0, $1, $CA, $F0
00008902 F400 01CA F8               	dc.b $F4, $0, $1, $CA, $F8
00008907 F400 01CA 00               	dc.b $F4, $0, $1, $CA, $0
0000890C F400 01CA 08               	dc.b $F4, $0, $1, $CA, $8
00008911 FC0C 01CB E0               	dc.b $FC, $C, $1, $CB, $E0
00008916 FC0C 01CB 00               	dc.b $FC, $C, $1, $CB, $0
0000891B 040C 11CB E0               	dc.b $4, $C, $11, $CB, $E0
00008920 040C 11CB 00               	dc.b $4, $C, $11, $CB, $0
00008925 0C04 01C9 E0               	dc.b $C, $4, $1, $C9, $E0
0000892A 0C04 09C9 10               	dc.b $C, $4, $9, $C9, $10
0000892F 0C00 01CA F0               	dc.b $C, $0, $1, $CA, $F0
00008934 0C00 01CA F8               	dc.b $C, $0, $1, $CA, $F8
00008939 0C00 01CA 00               	dc.b $C, $0, $1, $CA, $0
0000893E 0C00 01CA 08               	dc.b $C, $0, $1, $CA, $8
00008943 0A                         DATASCN4DM1JX6L_1: dc.b $A
00008944 F40F 00C5 E0               	dc.b $F4, $F, $0, $C5, $E0
00008949 040F 00D5 E0               	dc.b $4, $F, $0, $D5, $E0
0000894E 240F 00D5 E0               	dc.b $24, $F, $0, $D5, $E0
00008953 440F 00D5 E0               	dc.b $44, $F, $0, $D5, $E0
00008958 640F 00D5 E0               	dc.b $64, $F, $0, $D5, $E0
0000895D F40F 08C5 00               	dc.b $F4, $F, $8, $C5, $0
00008962 040F 08D5 00               	dc.b $4, $F, $8, $D5, $0
00008967 240F 08D5 00               	dc.b $24, $F, $8, $D5, $0
0000896C 440F 08D5 00               	dc.b $44, $F, $8, $D5, $0
00008971 640F 08D5 00               	dc.b $64, $F, $8, $D5, $0
00008976                            	even
00008976                            	even
00008976                            
00008976                            ; ---------------------------------------------------------------------------
00008976                            ; Sprite mappings - SYZ	platforms
00008976                            ; ---------------------------------------------------------------------------
00008976                            Map_obj18a:
00008976                            	include "_maps\obj18syz.asm"
00008976                            ; ---------------------------------------------------------------------------
00008976                            ; Sprite mappings - SYZ	platforms
00008976                            ; ---------------------------------------------------------------------------
00008976 0000                       		dc.w byte_818A-Map_obj18a
00008978 03                         byte_818A:	dc.b 3
00008979 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000897E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008983 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008988                            		even
00008988                            		even
00008988                            
00008988                            ; ---------------------------------------------------------------------------
00008988                            ; Sprite mappings - SLZ	platforms
00008988                            ; ---------------------------------------------------------------------------
00008988                            Map_obj18b:
00008988                            	include "_maps\obj18slz.asm"
00008988                            ; ---------------------------------------------------------------------------
00008988                            ; Sprite mappings - SLZ	platforms
00008988                            ; ---------------------------------------------------------------------------
00008988 0000                       		dc.w byte_819C-Map_obj18b
0000898A 02                         byte_819C:	dc.b 2
0000898B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008990 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008996 00                         		even
00008996 00                         		even
00008996                            	
00008996                            ; ---------------------------------------------------------------------------
00008996                            ; Sprite mappings - GHZ	platforms
00008996                            ; ---------------------------------------------------------------------------
00008996                            Map_obj18c:
00008996                            	include "_maps\obj18epz.asm"
00008996                            ; ================================================================================
00008996                            ; Sprite Mappings - generated by Flex 2 Sun Oct 21 2018 10:24:17 GMT-0700 (Pacific Daylight Time)
00008996                            ; ================================================================================
00008996                            
00008996                            DATAG2L5RZ4HYT:
00008996 0000 0000                  	dc.w DATAG2L5RZ4HYT_0-DATAG2L5RZ4HYT, DATAG2L5RZ4HYT_1-DATAG2L5RZ4HYT
0000899A 10                         DATAG2L5RZ4HYT_0: dc.b $10
0000899B F404 409B E0               	dc.b $F4, $4, $40, $9B, $E0
000089A0 F404 409D F0               	dc.b $F4, $4, $40, $9D, $F0
000089A5 F404 409D 00               	dc.b $F4, $4, $40, $9D, $0
000089AA F404 409F 10               	dc.b $F4, $4, $40, $9F, $10
000089AF FC04 4085 E0               	dc.b $FC, $4, $40, $85, $E0
000089B4 FC04 4087 F0               	dc.b $FC, $4, $40, $87, $F0
000089B9 FC04 4087 00               	dc.b $FC, $4, $40, $87, $0
000089BE FC04 4089 10               	dc.b $FC, $4, $40, $89, $10
000089C3 0404 408D E0               	dc.b $4, $4, $40, $8D, $E0
000089C8 0404 408D 10               	dc.b $4, $4, $40, $8D, $10
000089CD 0C04 4037 E0               	dc.b $C, $4, $40, $37, $E0
000089D2 0C04 4037 10               	dc.b $C, $4, $40, $37, $10
000089D7 0404 408D F0               	dc.b $4, $4, $40, $8D, $F0
000089DC 0404 408D 00               	dc.b $4, $4, $40, $8D, $0
000089E1 0C04 4037 F0               	dc.b $C, $4, $40, $37, $F0
000089E6 0C04 4037 00               	dc.b $C, $4, $40, $37, $0
000089EB 0A                         DATAG2L5RZ4HYT_1: dc.b $A
000089EC F40F 00C5 E0               	dc.b $F4, $F, $0, $C5, $E0
000089F1 040F 00D5 E0               	dc.b $4, $F, $0, $D5, $E0
000089F6 240F 00D5 E0               	dc.b $24, $F, $0, $D5, $E0
000089FB 440F 00D5 E0               	dc.b $44, $F, $0, $D5, $E0
00008A00 640F 00D5 E0               	dc.b $64, $F, $0, $D5, $E0
00008A05 F40F 08C5 00               	dc.b $F4, $F, $8, $C5, $0
00008A0A 040F 08D5 00               	dc.b $4, $F, $8, $D5, $0
00008A0F 240F 08D5 00               	dc.b $24, $F, $8, $D5, $0
00008A14 440F 08D5 00               	dc.b $44, $F, $8, $D5, $0
00008A19 640F 08D5 00               	dc.b $64, $F, $8, $D5, $0
00008A1E                            	even
00008A1E                            	even
00008A1E                            
00008A1E                            ; ===========================================================================
00008A1E                            ; ---------------------------------------------------------------------------
00008A1E                            ; Object 19 - blank
00008A1E                            ; ---------------------------------------------------------------------------
00008A1E                            
00008A1E                            Obj19:					; XREF: Obj_Index
00008A1E 4E75                       		rts	
00008A20                            ; ===========================================================================
00008A20                            ; ---------------------------------------------------------------------------
00008A20                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A20                            ; ---------------------------------------------------------------------------
00008A20                            Map_obj48:
00008A20                            	include "_maps\obj48.asm"
00008A20                            ; ================================================================================
00008A20                            ; Sprite Mappings - generated by Flex 2 Sat Sep 01 2018 07:24:39 GMT-0700 (Pacific Daylight Time)
00008A20                            ; ================================================================================
00008A20                            
00008A20                            DATALLU3VB9WH7:
00008A20 0000 0000                  	dc.w DATALLU3VB9WH7_0-DATALLU3VB9WH7, DATALLU3VB9WH7_1-DATALLU3VB9WH7
00008A24 0000 0000                  	dc.w DATALLU3VB9WH7_2-DATALLU3VB9WH7, DATALLU3VB9WH7_3-DATALLU3VB9WH7
00008A28 04                         DATALLU3VB9WH7_0: dc.b $4
00008A29 E80A 0000 E8               	dc.b $E8, $A, $0, $0, $E8
00008A2E E80A 0009 00               	dc.b $E8, $A, $0, $9, $0
00008A33 000A 0012 E8               	dc.b $0, $A, $0, $12, $E8
00008A38 000A 001B 00               	dc.b $0, $A, $0, $1B, $0
00008A3D 04                         DATALLU3VB9WH7_1: dc.b $4
00008A3E E80A 0000 E8               	dc.b $E8, $A, $0, $0, $E8
00008A43 E80A 0009 00               	dc.b $E8, $A, $0, $9, $0
00008A48 000A 0012 E8               	dc.b $0, $A, $0, $12, $E8
00008A4D 000A 001B 00               	dc.b $0, $A, $0, $1B, $0
00008A52 00                         DATALLU3VB9WH7_2: dc.b $0
00008A53 00                         DATALLU3VB9WH7_3: dc.b $0
00008A54                            	even
00008A54                            	even
00008A54                            
00008A54                            ; ===========================================================================
00008A54                            ; ---------------------------------------------------------------------------
00008A54                            ; Object 1A - GHZ collapsing ledge
00008A54                            ; ---------------------------------------------------------------------------
00008A54                            
00008A54                            Obj1A:					; XREF: Obj_Index
00008A54 7000                       		moveq	#0,d0
00008A56 1028 0024                  		move.b	$24(a0),d0
00008A5A 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008A5E 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008A62                            ; ===========================================================================
00008A62 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008A66 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008A6A 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008A6E                            ; ===========================================================================
00008A6E                            
00008A6E                            Obj1A_Main:				; XREF: Obj1A_Index
00008A6E 5428 0024                  		addq.b	#2,$24(a0)
00008A72 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008A7A 317C 4000 0002             		move.w	#$4000,2(a0)
00008A80 0028 0004 0001             		ori.b	#4,1(a0)
00008A86 117C 0004 0018             		move.b	#4,$18(a0)
00008A8C 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008A92 117C 0064 0019             		move.b	#$64,$19(a0)
00008A98 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008A9E 117C 0038 0016             		move.b	#$38,$16(a0)
00008AA4 08E8 0004 0001             		bset	#4,1(a0)
00008AAA                            
00008AAA                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AAA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008AAE 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008AB0 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008AB4 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008AB8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008ABC                            
00008ABC                            Obj1A_Slope:
00008ABC 323C 0030                  		move.w	#$30,d1
00008AC0 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AC6 6100 F1FC                  		bsr.w	SlopeObject
00008ACA 6000 0000                  		bra.w	MarkObjGone
00008ACE                            ; ===========================================================================
00008ACE                            
00008ACE                            Obj1A_Touch:				; XREF: Obj1A_Index
00008ACE 4A28 0038                  		tst.b	$38(a0)
00008AD2 6700 0000                  		beq.w	loc_847A
00008AD6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008ADC 5328 0038                  		subq.b	#1,$38(a0)
00008AE0                            
00008AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AE0                            
00008AE0                            
00008AE0                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008AE0 323C 0030                  		move.w	#$30,d1
00008AE4 6100 F27E                  		bsr.w	ExitPlatform
00008AE8 323C 0030                  		move.w	#$30,d1
00008AEC 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AF2 3428 0008                  		move.w	8(a0),d2
00008AF6 6100 0000                  		bsr.w	SlopeObject2
00008AFA 6000 0000                  		bra.w	MarkObjGone
00008AFE                            ; End of function Obj1A_WalkOff
00008AFE                            
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            Obj1A_Display:				; XREF: Obj1A_Index
00008AFE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B02 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B04 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B08 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B0C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B10 6000 0000                  		bra.w	DisplaySprite
00008B14                            ; ===========================================================================
00008B14                            
00008B14                            loc_82D0:				; XREF: Obj1A_Display
00008B14 5328 0038                  		subq.b	#1,$38(a0)
00008B18 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B1C 43F8 D000                  		lea	($FFFFD000).w,a1
00008B20 0829 0003 0022             		btst	#3,$22(a1)
00008B26 6700                       		beq.s	loc_82FC
00008B28 4A28 0038                  		tst.b	$38(a0)
00008B2C 6600                       		bne.s	locret_8308
00008B2E 08A9 0003 0022             		bclr	#3,$22(a1)
00008B34 08A9 0005 0022             		bclr	#5,$22(a1)
00008B3A 137C 0001 001D             		move.b	#1,$1D(a1)
00008B40                            
00008B40                            loc_82FC:
00008B40 117C 0000 003A             		move.b	#0,$3A(a0)
00008B46 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B4C                            
00008B4C                            locret_8308:
00008B4C 4E75                       		rts	
00008B4E                            ; ===========================================================================
00008B4E                            
00008B4E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B4E 6100 0000                  		bsr.w	ObjectFall
00008B52 6100 0000                  		bsr.w	DisplaySprite
00008B56 4A28 0001                  		tst.b	1(a0)
00008B5A 6A00                       		bpl.s	Obj1A_Delete
00008B5C 4E75                       		rts	
00008B5E                            ; ===========================================================================
00008B5E                            
00008B5E                            Obj1A_Delete:				; XREF: Obj1A_Index
00008B5E 6100 0000                  		bsr.w	DeleteObject
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            ; ---------------------------------------------------------------------------
00008B64                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008B64                            ; ---------------------------------------------------------------------------
00008B64                            
00008B64                            Obj53:					; XREF: Obj_Index
00008B64 7000                       		moveq	#0,d0
00008B66 1028 0024                  		move.b	$24(a0),d0
00008B6A 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008B6E 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008B72                            ; ===========================================================================
00008B72 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008B76 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008B7A 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008B7E                            ; ===========================================================================
00008B7E                            
00008B7E                            Obj53_Main:				; XREF: Obj53_Index
00008B7E 5428 0024                  		addq.b	#2,$24(a0)
00008B82 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008B8A 317C 02B8 0002             		move.w	#$2B8,2(a0)
00008B90 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008B96 6600                       		bne.s	Obj53_NotSLZ
00008B98 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008B9E 5428 001A                  		addq.b	#2,$1A(a0)
00008BA2                            
00008BA2                            Obj53_NotSLZ:
00008BA2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BA8 6600                       		bne.s	Obj53_NotSBZ
00008BAA 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008BB0                            
00008BB0                            Obj53_NotSBZ:
00008BB0 0028 0004 0001             		ori.b	#4,1(a0)
00008BB6 117C 0004 0018             		move.b	#4,$18(a0)
00008BBC 117C 0007 0038             		move.b	#7,$38(a0)
00008BC2 117C 0044 0019             		move.b	#$44,$19(a0)
00008BC8                            
00008BC8                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008BC8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008BCC 6700                       		beq.s	Obj53_Solid	; if not, branch
00008BCE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008BD2 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008BD6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008BDA                            
00008BDA                            Obj53_Solid:
00008BDA 323C 0020                  		move.w	#$20,d1
00008BDE 6100 F010                  		bsr.w	PlatformObject
00008BE2 4A28 0028                  		tst.b	$28(a0)
00008BE6 6A00                       		bpl.s	Obj53_MarkAsGone
00008BE8 0829 0003 0022             		btst	#3,$22(a1)
00008BEE 6700                       		beq.s	Obj53_MarkAsGone
00008BF0 08A8 0000 0001             		bclr	#0,1(a0)
00008BF6 3029 0008                  		move.w	8(a1),d0
00008BFA 9068 0008                  		sub.w	8(a0),d0
00008BFE 6400                       		bcc.s	Obj53_MarkAsGone
00008C00 08E8 0000 0001             		bset	#0,1(a0)
00008C06                            
00008C06                            Obj53_MarkAsGone:
00008C06 6000 0000                  		bra.w	MarkObjGone
00008C0A                            ; ===========================================================================
00008C0A                            
00008C0A                            Obj53_Touch:				; XREF: Obj53_Index
00008C0A 4A28 0038                  		tst.b	$38(a0)
00008C0E 6700 0000                  		beq.w	loc_8458
00008C12 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C18 5328 0038                  		subq.b	#1,$38(a0)
00008C1C                            
00008C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C1C                            
00008C1C                            
00008C1C                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C1C 323C 0020                  		move.w	#$20,d1
00008C20 6100 F142                  		bsr.w	ExitPlatform
00008C24 3428 0008                  		move.w	8(a0),d2
00008C28 6100 F6A4                  		bsr.w	MvSonicOnPtfm2
00008C2C 6000 0000                  		bra.w	MarkObjGone
00008C30                            ; End of function Obj53_WalkOff
00008C30                            
00008C30                            ; ===========================================================================
00008C30                            
00008C30                            Obj53_Display:				; XREF: Obj53_Index
00008C30 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C34 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C36 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C3A 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C3E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C42 6000 0000                  		bra.w	DisplaySprite
00008C46                            ; ===========================================================================
00008C46                            
00008C46                            loc_8402:
00008C46 5328 0038                  		subq.b	#1,$38(a0)
00008C4A 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C4E 43F8 D000                  		lea	($FFFFD000).w,a1
00008C52 0829 0003 0022             		btst	#3,$22(a1)
00008C58 6700                       		beq.s	loc_842E
00008C5A 4A28 0038                  		tst.b	$38(a0)
00008C5E 6600                       		bne.s	locret_843A
00008C60 08A9 0003 0022             		bclr	#3,$22(a1)
00008C66 08A9 0005 0022             		bclr	#5,$22(a1)
00008C6C 137C 0001 001D             		move.b	#1,$1D(a1)
00008C72                            
00008C72                            loc_842E:
00008C72 117C 0000 003A             		move.b	#0,$3A(a0)
00008C78 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008C7E                            
00008C7E                            locret_843A:
00008C7E 4E75                       		rts	
00008C80                            ; ===========================================================================
00008C80                            
00008C80                            Obj53_TimeZero:				; XREF: Obj53_Display
00008C80 6100 0000                  		bsr.w	ObjectFall
00008C84 6100 0000                  		bsr.w	DisplaySprite
00008C88 4A28 0001                  		tst.b	1(a0)
00008C8C 6A00                       		bpl.s	Obj53_Delete
00008C8E 4E75                       		rts	
00008C90                            ; ===========================================================================
00008C90                            
00008C90                            Obj53_Delete:				; XREF: Obj53_Index
00008C90 6100 0000                  		bsr.w	DeleteObject
00008C94 4E75                       		rts	
00008C96                            ; ===========================================================================
00008C96                            
00008C96                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008C96 117C 0000 003A             		move.b	#0,$3A(a0)
00008C9C                            
00008C9C                            loc_8458:				; XREF: Obj53_Touch
00008C9C 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CA2 0828 0000 0028             		btst	#0,$28(a0)
00008CA8 6700                       		beq.s	loc_846C
00008CAA 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008CB0                            
00008CB0                            loc_846C:
00008CB0 7207                       		moveq	#7,d1
00008CB2 5228 001A                  		addq.b	#1,$1A(a0)
00008CB6 6000                       		bra.s	loc_8486
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008CB8 117C 0000 003A             		move.b	#0,$3A(a0)
00008CBE                            
00008CBE                            loc_847A:				; XREF: Obj1A_Touch
00008CBE 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008CC4 7218                       		moveq	#$18,d1
00008CC6 5428 001A                  		addq.b	#2,$1A(a0)
00008CCA                            
00008CCA                            loc_8486:				; XREF: Obj53_Collapse
00008CCA 7000                       		moveq	#0,d0
00008CCC 1028 001A                  		move.b	$1A(a0),d0
00008CD0 D040                       		add.w	d0,d0
00008CD2 2668 0004                  		movea.l	4(a0),a3
00008CD6 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008CDA 524B                       		addq.w	#1,a3
00008CDC 08E8 0005 0001             		bset	#5,1(a0)
00008CE2 1810                       		move.b	0(a0),d4
00008CE4 1A28 0001                  		move.b	1(a0),d5
00008CE8 2248                       		movea.l	a0,a1
00008CEA 6000                       		bra.s	loc_84B2
00008CEC                            ; ===========================================================================
00008CEC                            
00008CEC                            loc_84AA:
00008CEC 6100 0000                  		bsr.w	SingleObjLoad
00008CF0 6600                       		bne.s	loc_84F2
00008CF2 5A4B                       		addq.w	#5,a3
00008CF4                            
00008CF4                            loc_84B2:
00008CF4 137C 0006 0024             		move.b	#6,$24(a1)
00008CFA 1284                       		move.b	d4,0(a1)
00008CFC 234B 0004                  		move.l	a3,4(a1)
00008D00 1345 0001                  		move.b	d5,1(a1)
00008D04 3368 0008 0008             		move.w	8(a0),8(a1)
00008D0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D10 3368 0002 0002             		move.w	2(a0),2(a1)
00008D16 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D1C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D22 135C 0038                  		move.b	(a4)+,$38(a1)
00008D26 B3C8                       		cmpa.l	a0,a1
00008D28 6400                       		bcc.s	loc_84EE
00008D2A 6100 0000                  		bsr.w	DisplaySprite2
00008D2E                            
00008D2E                            loc_84EE:
00008D2E 51C9 FFBC                  		dbf	d1,loc_84AA
00008D32                            
00008D32                            loc_84F2:
00008D32 6100 0000                  		bsr.w	DisplaySprite
00008D36 303C 00B9                  		move.w	#$B9,d0
00008D3A 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D40                            ; ===========================================================================
00008D40                            ; ---------------------------------------------------------------------------
00008D40                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D40                            ; ---------------------------------------------------------------------------
00008D40 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008D50 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008D5A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008D62 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008D6A                            
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            
00008D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D6A                            
00008D6A                            
00008D6A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008D6A 43F8 D000                  		lea	($FFFFD000).w,a1
00008D6E 0829 0003 0022             		btst	#3,$22(a1)
00008D74 6700                       		beq.s	locret_856E
00008D76 3029 0008                  		move.w	8(a1),d0
00008D7A 9068 0008                  		sub.w	8(a0),d0
00008D7E D041                       		add.w	d1,d0
00008D80 E248                       		lsr.w	#1,d0
00008D82 0828 0000 0001             		btst	#0,1(a0)
00008D88 6700                       		beq.s	loc_854E
00008D8A 4640                       		not.w	d0
00008D8C D041                       		add.w	d1,d0
00008D8E                            
00008D8E                            loc_854E:
00008D8E 7200                       		moveq	#0,d1
00008D90 1232 0000                  		move.b	(a2,d0.w),d1
00008D94 3028 000C                  		move.w	$C(a0),d0
00008D98 9041                       		sub.w	d1,d0
00008D9A 7200                       		moveq	#0,d1
00008D9C 1229 0016                  		move.b	$16(a1),d1
00008DA0 9041                       		sub.w	d1,d0
00008DA2 3340 000C                  		move.w	d0,$C(a1)
00008DA6 9468 0008                  		sub.w	8(a0),d2
00008DAA 9569 0008                  		sub.w	d2,8(a1)
00008DAE                            
00008DAE                            locret_856E:
00008DAE 4E75                       		rts	
00008DB0                            ; End of function SlopeObject2
00008DB0                            
00008DB0                            ; ===========================================================================
00008DB0                            ; ---------------------------------------------------------------------------
00008DB0                            ; Collision data for GHZ collapsing ledge
00008DB0                            ; ---------------------------------------------------------------------------
00008DB0                            Obj1A_SlopeData:
00008DB0                            		incbin	misc\ghzledge.bin
00008DE0                            		even
00008DE0                            
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            ; Sprite mappings - GHZ	collapsing ledge
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            Map_obj1A:
00008DE0                            	include "_maps\obj1A.asm"
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            ; Sprite mappings - GHZ	collapsing ledge
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008DE4 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008DE8 10                         byte_85A8:	dc.b $10
00008DE9 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008DEE D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008DF3 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008DF8 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008DFD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E02 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E07 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E0C F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E11 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E16 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E1B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E20 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E25 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E2A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E2F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E34 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E39 10                         byte_85F9:	dc.b $10
00008E3A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E3F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E44 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E49 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E4E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E53 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E58 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E5D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E62 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E67 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E6C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E71 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E76 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E7B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E80 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E85 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E8A 19                         byte_864A:	dc.b $19
00008E8B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008E90 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008E95 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008E9A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008E9F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EA4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EA9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EAE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008EB3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EB8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008EBD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008EC2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008EC7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008ECC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008ED1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ED6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008EDB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008EE0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008EE5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EEA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008EEF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008EF4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008EF9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008EFE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F03 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F08 19                         byte_86C8:	dc.b $19
00008F09 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F0E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F13 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F18 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F1D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F22 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F27 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F2C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F31 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F36 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F3B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F40 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F45 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F4A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F4F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F54 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008F59 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F5E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F63 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F68 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F6D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F72 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008F77 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F7C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F81 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F86                            		even
00008F86                            		even
00008F86                            
00008F86                            ; ---------------------------------------------------------------------------
00008F86                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F86                            ; ---------------------------------------------------------------------------
00008F86                            Map_obj53:
00008F86                            	include "_maps\obj53.asm"
00008F86                            ; ---------------------------------------------------------------------------
00008F86                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F86                            ; ---------------------------------------------------------------------------
00008F86 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008F8A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008F8E 04                         byte_874E:	dc.b 4
00008F8F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008F94 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008F99 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008F9E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FA3 08                         byte_8763:	dc.b 8
00008FA4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FA9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FAE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FB3 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008FB8 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008FBD 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008FC2 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008FC7 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008FCC 04                         byte_878C:	dc.b 4
00008FCD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008FD2 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008FD7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FDC 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008FE1 08                         byte_87A1:	dc.b 8
00008FE2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FE7 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008FEC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FF1 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008FF6 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008FFB 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009000 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009005 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000900A                            		even
0000900A                            		even
0000900A                            
0000900A                            ; ===========================================================================
0000900A                            ; ---------------------------------------------------------------------------
0000900A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000900A                            ; ---------------------------------------------------------------------------
0000900A                            
0000900A                            Obj1C:					; XREF: Obj_Index
0000900A 7000                       		moveq	#0,d0
0000900C 1028 0024                  		move.b	$24(a0),d0
00009010 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009014 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009018                            ; ===========================================================================
00009018 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000901A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000901C                            ; ===========================================================================
0000901C                            
0000901C                            Obj1C_Main:				; XREF: Obj1C_Index
0000901C 5428 0024                  		addq.b	#2,$24(a0)
00009020 7000                       		moveq	#0,d0
00009022 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009026 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000902A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000902E 2159 0004                  		move.l	(a1)+,4(a0)
00009032 3159 0002                  		move.w	(a1)+,2(a0)
00009036 0028 0004 0001             		ori.b	#4,1(a0)
0000903C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009040 1159 0019                  		move.b	(a1)+,$19(a0)
00009044 1159 0018                  		move.b	(a1)+,$18(a0)
00009048 1159 0020                  		move.b	(a1)+,$20(a0)
0000904C                            
0000904C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000904C 3028 0008                  		move.w	8(a0),d0
00009050 0240 FF80                  		andi.w	#$FF80,d0
00009054 3238 F700                  		move.w	($FFFFF700).w,d1
00009058 0441 0080                  		subi.w	#$80,d1
0000905C 0241 FF80                  		andi.w	#$FF80,d1
00009060 9041                       		sub.w	d1,d0
00009062 0C40 0280                  		cmpi.w	#$280,d0
00009066 6200 0000                  		bhi.w	DeleteObject
0000906A 6000 0000                  		bra.w	DisplaySprite
0000906E                            ; ===========================================================================
0000906E                            ; ---------------------------------------------------------------------------
0000906E                            ; Variables for	object $1C are stored in an array
0000906E                            ; ---------------------------------------------------------------------------
0000906E 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009072 44D8                       		dc.w $44D8		; VRAM setting
00009074 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009078 0000 0000                  		dc.l Map_obj1C
0000907C 44D8                       		dc.w $44D8
0000907E 0008 0200                  		dc.b 0,	8, 2, 0
00009082 0000 0000                  		dc.l Map_obj1C
00009086 44D8                       		dc.w $44D8
00009088 0008 0200                  		dc.b 0,	8, 2, 0
0000908C 0000 80D8                  		dc.l Map_obj11
00009090 438E                       		dc.w $438E
00009092 0110 0100                  		dc.b 1,	$10, 1,	0
00009096                            ; ---------------------------------------------------------------------------
00009096                            ; Sprite mappings - SLZ	lava thrower
00009096                            ; ---------------------------------------------------------------------------
00009096                            Map_obj1C:
00009096                            	include "_maps\obj1C.asm"
00009096                            ; ---------------------------------------------------------------------------
00009096                            ; Sprite mappings - SLZ	lava thrower
00009096                            ; ---------------------------------------------------------------------------
00009096 0000                       		dc.w byte_8858-Map_obj1C
00009098 01                         byte_8858:	dc.b 1
00009099 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000909E                            		even
0000909E                            		even
0000909E                            
0000909E                            ; ===========================================================================
0000909E                            ; ---------------------------------------------------------------------------
0000909E                            ; Object 1D - switch that activates when Sonic touches it
0000909E                            ; (this	is not used anywhere in	the game)
0000909E                            ; ---------------------------------------------------------------------------
0000909E                            
0000909E                            Obj1D:					; XREF: Obj_Index
0000909E 7000                       		moveq	#0,d0
000090A0 1028 0024                  		move.b	$24(a0),d0
000090A4 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090A8 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090AC                            ; ===========================================================================
000090AC 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090AE 0000                       		dc.w Obj1D_Action-Obj1D_Index
000090B0 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000090B2                            ; ===========================================================================
000090B2                            
000090B2                            Obj1D_Main:				; XREF: Obj1D_Index
000090B2 5428 0024                  		addq.b	#2,$24(a0)
000090B6 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000090BE 317C 4000 0002             		move.w	#$4000,2(a0)
000090C4 117C 0004 0001             		move.b	#4,1(a0)
000090CA 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000090D0 117C 0010 0019             		move.b	#$10,$19(a0)
000090D6 117C 0005 0018             		move.b	#5,$18(a0)
000090DC                            
000090DC                            Obj1D_Action:				; XREF: Obj1D_Index
000090DC 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000090E2 323C 0010                  		move.w	#$10,d1
000090E6 6100 0000                  		bsr.w	Obj1D_ChkTouch
000090EA 6700                       		beq.s	Obj1D_ChkDel
000090EC 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000090F0 7001                       		moveq	#1,d0
000090F2 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000090F6                            
000090F6                            Obj1D_ChkDel:
000090F6 6100 0000                  		bsr.w	DisplaySprite
000090FA 3028 0008                  		move.w	8(a0),d0
000090FE 0240 FF80                  		andi.w	#$FF80,d0
00009102 3238 F700                  		move.w	($FFFFF700).w,d1
00009106 0441 0080                  		subi.w	#$80,d1
0000910A 0241 FF80                  		andi.w	#$FF80,d1
0000910E 9041                       		sub.w	d1,d0
00009110 0C40 0280                  		cmpi.w	#$280,d0
00009114 6200 0000                  		bhi.w	Obj1D_Delete
00009118 4E75                       		rts	
0000911A                            ; ===========================================================================
0000911A                            
0000911A                            Obj1D_Delete:				; XREF: Obj1D_Index
0000911A 6100 0000                  		bsr.w	DeleteObject
0000911E 4E75                       		rts	
00009120                            ; ---------------------------------------------------------------------------
00009120                            ; Subroutine to	check if Sonic touches the object
00009120                            ; ---------------------------------------------------------------------------
00009120                            
00009120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009120                            
00009120                            
00009120                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009120 43F8 D000                  		lea	($FFFFD000).w,a1
00009124 3029 0008                  		move.w	8(a1),d0
00009128 9068 0008                  		sub.w	8(a0),d0
0000912C D041                       		add.w	d1,d0
0000912E 6B00                       		bmi.s	loc_8918
00009130 D241                       		add.w	d1,d1
00009132 B041                       		cmp.w	d1,d0
00009134 6400                       		bcc.s	loc_8918
00009136 3429 000C                  		move.w	$C(a1),d2
0000913A 1229 0016                  		move.b	$16(a1),d1
0000913E 4881                       		ext.w	d1
00009140 D242                       		add.w	d2,d1
00009142 3028 000C                  		move.w	$C(a0),d0
00009146 0440 0010                  		subi.w	#$10,d0
0000914A 9041                       		sub.w	d1,d0
0000914C 6200                       		bhi.s	loc_8918
0000914E 0C40 FFF0                  		cmpi.w	#-$10,d0
00009152 6500                       		bcs.s	loc_8918
00009154 70FF                       		moveq	#-1,d0
00009156 4E75                       		rts	
00009158                            ; ===========================================================================
00009158                            
00009158                            loc_8918:
00009158 7000                       		moveq	#0,d0
0000915A 4E75                       		rts	
0000915C                            ; End of function Obj1D_ChkTouch
0000915C                            
0000915C                            ; ===========================================================================
0000915C                            ; ---------------------------------------------------------------------------
0000915C                            ; Sprite mappings - object 1D
0000915C                            ; ---------------------------------------------------------------------------
0000915C                            Map_obj1D:
0000915C                            	include "_maps\obj1D.asm"
0000915C                            ; ---------------------------------------------------------------------------
0000915C                            ; Sprite mappings - object 1D
0000915C                            ; ---------------------------------------------------------------------------
0000915C 0000                       		dc.w byte_891E-Map_obj1D
0000915E 04                         byte_891E:	dc.b 4
0000915F E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009164 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009169 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000916E 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009174 00                         		even
00009174 00                         		even
00009174                            
00009174                            ; ===========================================================================
00009174                            ; ---------------------------------------------------------------------------
00009174                            ; Object 2A - doors (SBZ)
00009174                            ; ---------------------------------------------------------------------------
00009174                            
00009174                            Obj2A:					; XREF: Obj_Index
00009174 7000                       		moveq	#0,d0
00009176 1028 0024                  		move.b	$24(a0),d0
0000917A 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000917E 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009182                            ; ===========================================================================
00009182 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009184 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009186                            ; ===========================================================================
00009186                            
00009186                            Obj2A_Main:				; XREF: Obj2A_Index
00009186 5428 0024                  		addq.b	#2,$24(a0)
0000918A 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009192 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009198 0028 0004 0001             		ori.b	#4,1(a0)
0000919E 117C 0008 0019             		move.b	#8,$19(a0)
000091A4 117C 0004 0018             		move.b	#4,$18(a0)
000091AA                            
000091AA                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091AA 323C 0040                  		move.w	#$40,d1
000091AE 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000091B2 3038 D008                  		move.w	($FFFFD008).w,d0
000091B6 D041                       		add.w	d1,d0
000091B8 B068 0008                  		cmp.w	8(a0),d0
000091BC 6500                       		bcs.s	Obj2A_Animate
000091BE 9041                       		sub.w	d1,d0
000091C0 9041                       		sub.w	d1,d0
000091C2 B068 0008                  		cmp.w	8(a0),d0
000091C6 6400                       		bcc.s	Obj2A_Animate
000091C8 D041                       		add.w	d1,d0
000091CA B068 0008                  		cmp.w	8(a0),d0
000091CE 6400                       		bcc.s	loc_899A
000091D0 0828 0000 0022             		btst	#0,$22(a0)
000091D6 6600                       		bne.s	Obj2A_Animate
000091D8 6000                       		bra.s	Obj2A_Open
000091DA                            ; ===========================================================================
000091DA                            
000091DA                            loc_899A:				; XREF: Obj2A_OpenShut
000091DA 0828 0000 0022             		btst	#0,$22(a0)
000091E0 6700                       		beq.s	Obj2A_Animate
000091E2                            
000091E2                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000091E2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000091E8                            
000091E8                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000091E8 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000091EE 6100 0000                  		bsr.w	AnimateSprite
000091F2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000091F6 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000091F8 323C 0011                  		move.w	#$11,d1
000091FC 343C 0020                  		move.w	#$20,d2
00009200 3602                       		move.w	d2,d3
00009202 5243                       		addq.w	#1,d3
00009204 3828 0008                  		move.w	8(a0),d4
00009208 6100 0000                  		bsr.w	SolidObject
0000920C                            
0000920C                            Obj2A_MarkAsUsed:
0000920C 6000 0000                  		bra.w	MarkObjGone
00009210                            ; ===========================================================================
00009210                            Ani_obj2A:
00009210                            	include "_anim\obj2A.asm"
00009210                            ; ---------------------------------------------------------------------------
00009210                            ; Animation script - doors (SBZ)
00009210                            ; ---------------------------------------------------------------------------
00009210 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009212 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009214 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009220 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000922C                            		even
0000922C                            		even
0000922C                            
0000922C                            ; ---------------------------------------------------------------------------
0000922C                            ; Sprite mappings - doors (SBZ)
0000922C                            ; ---------------------------------------------------------------------------
0000922C                            Map_obj2A:
0000922C                            	include "_maps\obj2A.asm"
0000922C                            ; ---------------------------------------------------------------------------
0000922C                            ; Sprite mappings - doors (SBZ)
0000922C                            ; ---------------------------------------------------------------------------
0000922C 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009230 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009234 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009238 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000923C 0000                       		dc.w byte_8A56-Map_obj2A
0000923E 02                         byte_89FE:	dc.b 2
0000923F E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009244 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009249 02                         byte_8A09:	dc.b 2
0000924A DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000924F 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009254 02                         byte_8A14:	dc.b 2
00009255 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000925A 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000925F 02                         byte_8A1F:	dc.b 2
00009260 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009265 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000926A 02                         byte_8A2A:	dc.b 2
0000926B D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009270 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009275 02                         byte_8A35:	dc.b 2
00009276 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000927B 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009280 02                         byte_8A40:	dc.b 2
00009281 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009286 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000928B 02                         byte_8A4B:	dc.b 2
0000928C C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009291 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009296 02                         byte_8A56:	dc.b 2
00009297 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000929C 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092A2 00                         		even
000092A2 00                         		even
000092A2                            
000092A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092A2                            
000092A2                            
000092A2                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092A2 6100 0000                  		bsr.w	Obj44_SolidWall2
000092A6 6700                       		beq.s	loc_8AA8
000092A8 6B00 0000                  		bmi.w	loc_8AC4
000092AC 4A40                       		tst.w	d0
000092AE 6700 0000                  		beq.w	loc_8A92
000092B2 6B00                       		bmi.s	loc_8A7C
000092B4 4A69 0010                  		tst.w	$10(a1)
000092B8 6B00                       		bmi.s	loc_8A92
000092BA 6000                       		bra.s	loc_8A82
000092BC                            ; ===========================================================================
000092BC                            
000092BC                            loc_8A7C:
000092BC 4A69 0010                  		tst.w	$10(a1)
000092C0 6A00                       		bpl.s	loc_8A92
000092C2                            
000092C2                            loc_8A82:
000092C2 9169 0008                  		sub.w	d0,8(a1)
000092C6 337C 0000 0014             		move.w	#0,$14(a1)
000092CC 337C 0000 0010             		move.w	#0,$10(a1)
000092D2                            
000092D2                            loc_8A92:
000092D2 0829 0001 0022             		btst	#1,$22(a1)
000092D8 6600                       		bne.s	loc_8AB6
000092DA 08E9 0005 0022             		bset	#5,$22(a1)
000092E0 08E8 0005 0022             		bset	#5,$22(a0)
000092E6 4E75                       		rts	
000092E8                            ; ===========================================================================
000092E8                            
000092E8                            loc_8AA8:
000092E8 0828 0005 0022             		btst	#5,$22(a0)
000092EE 6700                       		beq.s	locret_8AC2
000092F0 337C 0001 001C             		move.w	#1,$1C(a1)
000092F6                            
000092F6                            loc_8AB6:
000092F6 08A8 0005 0022             		bclr	#5,$22(a0)
000092FC 08A9 0005 0022             		bclr	#5,$22(a1)
00009302                            
00009302                            locret_8AC2:
00009302 4E75                       		rts	
00009304                            ; ===========================================================================
00009304                            
00009304                            loc_8AC4:
00009304 4A69 0012                  		tst.w	$12(a1)
00009308 6A00                       		bpl.s	locret_8AD8
0000930A 4A43                       		tst.w	d3
0000930C 6A00                       		bpl.s	locret_8AD8
0000930E 9769 000C                  		sub.w	d3,$C(a1)
00009312 337C 0000 0012             		move.w	#0,$12(a1)
00009318                            
00009318                            locret_8AD8:
00009318 4E75                       		rts	
0000931A                            ; End of function Obj44_SolidWall
0000931A                            
0000931A                            
0000931A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000931A                            
0000931A                            
0000931A                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000931A 43F8 D000                  		lea	($FFFFD000).w,a1
0000931E 3029 0008                  		move.w	8(a1),d0
00009322 9068 0008                  		sub.w	8(a0),d0
00009326 D041                       		add.w	d1,d0
00009328 6B00                       		bmi.s	loc_8B48
0000932A 3601                       		move.w	d1,d3
0000932C D643                       		add.w	d3,d3
0000932E B043                       		cmp.w	d3,d0
00009330 6200                       		bhi.s	loc_8B48
00009332 1629 0016                  		move.b	$16(a1),d3
00009336 4883                       		ext.w	d3
00009338 D443                       		add.w	d3,d2
0000933A 3629 000C                  		move.w	$C(a1),d3
0000933E 9668 000C                  		sub.w	$C(a0),d3
00009342 D642                       		add.w	d2,d3
00009344 6B00                       		bmi.s	loc_8B48
00009346 3802                       		move.w	d2,d4
00009348 D844                       		add.w	d4,d4
0000934A B644                       		cmp.w	d4,d3
0000934C 6400                       		bcc.s	loc_8B48
0000934E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009352 6B00                       		bmi.s	loc_8B48
00009354 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000935A 6400                       		bcc.s	loc_8B48
0000935C 4A78 FE08                  		tst.w	($FFFFFE08).w
00009360 6600                       		bne.s	loc_8B48
00009362 3A00                       		move.w	d0,d5
00009364 B240                       		cmp.w	d0,d1
00009366 6400                       		bcc.s	loc_8B30
00009368 D241                       		add.w	d1,d1
0000936A 9041                       		sub.w	d1,d0
0000936C 3A00                       		move.w	d0,d5
0000936E 4445                       		neg.w	d5
00009370                            
00009370                            loc_8B30:
00009370 3203                       		move.w	d3,d1
00009372 B443                       		cmp.w	d3,d2
00009374 6400                       		bcc.s	loc_8B3C
00009376 9644                       		sub.w	d4,d3
00009378 3203                       		move.w	d3,d1
0000937A 4441                       		neg.w	d1
0000937C                            
0000937C                            loc_8B3C:
0000937C BA41                       		cmp.w	d1,d5
0000937E 6200                       		bhi.s	loc_8B44
00009380 7801                       		moveq	#1,d4
00009382 4E75                       		rts	
00009384                            ; ===========================================================================
00009384                            
00009384                            loc_8B44:
00009384 78FF                       		moveq	#-1,d4
00009386 4E75                       		rts	
00009388                            ; ===========================================================================
00009388                            
00009388                            loc_8B48:
00009388 7800                       		moveq	#0,d4
0000938A 4E75                       		rts	
0000938C                            ; End of function Obj44_SolidWall2
0000938C                            
0000938C                            ; ===========================================================================
0000938C                            ; ---------------------------------------------------------------------------
0000938C                            ; Object 1E - Ball Hog enemy (SBZ)
0000938C                            ; ---------------------------------------------------------------------------
0000938C                            
0000938C                            Obj1E:					; XREF: Obj_Index
0000938C 7000                       		moveq	#0,d0
0000938E 1028 0024                  		move.b	$24(a0),d0
00009392 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009396 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000939A                            ; ===========================================================================
0000939A 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000939C 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000939E                            ; ===========================================================================
0000939E                            
0000939E                            Obj1E_Main:				; XREF: Obj1E_Index
0000939E 117C 0013 0016             		move.b	#$13,$16(a0)
000093A4 117C 0008 0017             		move.b	#8,$17(a0)
000093AA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000093B2 317C 2302 0002             		move.w	#$2302,2(a0)
000093B8 117C 0004 0001             		move.b	#4,1(a0)
000093BE 117C 0004 0018             		move.b	#4,$18(a0)
000093C4 117C 0005 0020             		move.b	#5,$20(a0)
000093CA 117C 000C 0019             		move.b	#$C,$19(a0)
000093D0 6100 0000                  		bsr.w	ObjectFall
000093D4 4EB9 0000 0000             		jsr	ObjHitFloor
000093DA 4A41                       		tst.w	d1
000093DC 6A00                       		bpl.s	locret_8BAC
000093DE D368 000C                  		add.w	d1,$C(a0)
000093E2 317C 0000 0012             		move.w	#0,$12(a0)
000093E8 5428 0024                  		addq.b	#2,$24(a0)
000093EC                            
000093EC                            locret_8BAC:
000093EC 4E75                       		rts	
000093EE                            ; ===========================================================================
000093EE                            
000093EE                            Obj1E_Action:				; XREF: Obj1E_Index
000093EE 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000093F4 6100 0000                  		bsr.w	AnimateSprite
000093F8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000093FE 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009400 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009404 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009406 6000                       		bra.s	Obj1E_MarkAsGone
00009408                            ; ===========================================================================
00009408                            
00009408                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009408 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000940C                            
0000940C                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000940C 6000 0000                  		bra.w	MarkObjGone
00009410                            ; ===========================================================================
00009410                            
00009410                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009410 117C 0001 0032             		move.b	#1,$32(a0)
00009416 6100 0000                  		bsr.w	SingleObjLoad
0000941A 6600                       		bne.s	loc_8C1A
0000941C 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009420 3368 0008 0008             		move.w	8(a0),8(a1)
00009426 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000942C 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009432 337C 0000 0012             		move.w	#0,$12(a1)
00009438 70FC                       		moveq	#-4,d0
0000943A 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009440 6700                       		beq.s	loc_8C0A	; if not, branch
00009442 4440                       		neg.w	d0
00009444 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009448                            
00009448                            loc_8C0A:
00009448 D169 0008                  		add.w	d0,8(a1)
0000944C 0669 000C 000C             		addi.w	#$C,$C(a1)
00009452 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009458                            
00009458                            loc_8C1A:
00009458 60B2                       		bra.s	Obj1E_MarkAsGone
0000945A                            ; ===========================================================================
0000945A                            ; ---------------------------------------------------------------------------
0000945A                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000945A                            ; ---------------------------------------------------------------------------
0000945A                            
0000945A                            Obj20:					; XREF: Obj_Index
0000945A 7000                       		moveq	#0,d0
0000945C 1028 0024                  		move.b	$24(a0),d0
00009460 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009464 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009468                            ; ===========================================================================
00009468 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000946A 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000946C                            ; ===========================================================================
0000946C                            
0000946C                            Obj20_Main:				; XREF: Obj20_Index
0000946C 5428 0024                  		addq.b	#2,$24(a0)
00009470 117C 0007 0016             		move.b	#7,$16(a0)
00009476 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000947E 317C 2302 0002             		move.w	#$2302,2(a0)
00009484 117C 0004 0001             		move.b	#4,1(a0)
0000948A 117C 0003 0018             		move.b	#3,$18(a0)
00009490 117C 0087 0020             		move.b	#$87,$20(a0)
00009496 117C 0008 0019             		move.b	#8,$19(a0)
0000949C 7000                       		moveq	#0,d0
0000949E 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094A6 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094AA 117C 0004 001A             		move.b	#4,$1A(a0)
000094B0                            
000094B0                            Obj20_Bounce:				; XREF: Obj20_Index
000094B0 4EB9 0000 0000             		jsr	ObjectFall
000094B6 4A68 0012                  		tst.w	$12(a0)
000094BA 6B00                       		bmi.s	Obj20_ChkExplode
000094BC 4EB9 0000 0000             		jsr	ObjHitFloor
000094C2 4A41                       		tst.w	d1
000094C4 6A00                       		bpl.s	Obj20_ChkExplode
000094C6 D368 000C                  		add.w	d1,$C(a0)
000094CA 317C FD00 0012             		move.w	#-$300,$12(a0)
000094D0 4A03                       		tst.b	d3
000094D2 6700                       		beq.s	Obj20_ChkExplode
000094D4 6B00                       		bmi.s	loc_8CA4
000094D6 4A68 0010                  		tst.w	$10(a0)
000094DA 6A00                       		bpl.s	Obj20_ChkExplode
000094DC 4468 0010                  		neg.w	$10(a0)
000094E0 6000                       		bra.s	Obj20_ChkExplode
000094E2                            ; ===========================================================================
000094E2                            
000094E2                            loc_8CA4:				; XREF: Obj20_Bounce
000094E2 4A68 0010                  		tst.w	$10(a0)
000094E6 6B00                       		bmi.s	Obj20_ChkExplode
000094E8 4468 0010                  		neg.w	$10(a0)
000094EC                            
000094EC                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000094EC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000094F0 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000094F2 10BC 0024                  		move.b	#$24,0(a0)
000094F6 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000094FA 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009500 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009504 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009508 6A00                       		bpl.s	Obj20_Display
0000950A 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009510 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009516                            
00009516                            Obj20_Display:
00009516 6100 0000                  		bsr.w	DisplaySprite
0000951A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000951E 0640 00E0                  		addi.w	#$E0,d0
00009522 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009526 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000952A 4E75                       		rts	
0000952C                            ; ===========================================================================
0000952C                            ; ---------------------------------------------------------------------------
0000952C                            ; Object 24 - explosion	from a destroyed monitor
0000952C                            ; ---------------------------------------------------------------------------
0000952C                            
0000952C                            Obj24:					; XREF: Obj_Index
0000952C 7000                       		moveq	#0,d0
0000952E 1028 0024                  		move.b	$24(a0),d0
00009532 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009536 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000953A                            ; ===========================================================================
0000953A 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000953C 0000                       		dc.w Obj24_Animate-Obj24_Index
0000953E                            ; ===========================================================================
0000953E                            
0000953E                            Obj24_Main:				; XREF: Obj24_Index
0000953E 5428 0024                  		addq.b	#2,$24(a0)
00009542 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000954A 317C 041C 0002             		move.w	#$41C,2(a0)
00009550 117C 0004 0001             		move.b	#4,1(a0)
00009556 117C 0001 0018             		move.b	#1,$18(a0)
0000955C 117C 0000 0020             		move.b	#0,$20(a0)
00009562 117C 000C 0019             		move.b	#$C,$19(a0)
00009568 117C 0009 001E             		move.b	#9,$1E(a0)
0000956E 117C 0000 001A             		move.b	#0,$1A(a0)
00009574 303C 00A5                  		move.w	#$A5,d0
00009578 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play explosion sound
0000957E                            
0000957E                            Obj24_Animate:				; XREF: Obj24_Index
0000957E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009582 6A00                       		bpl.s	Obj24_Display
00009584 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000958A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000958E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009594 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009598                            
00009598                            Obj24_Display:
00009598 6000 0000                  		bra.w	DisplaySprite
0000959C                            ; ===========================================================================
0000959C                            ; ---------------------------------------------------------------------------
0000959C                            ; Object 27 - explosion	from a destroyed enemy
0000959C                            ; ---------------------------------------------------------------------------
0000959C                            
0000959C                            Obj27:					; XREF: Obj_Index
0000959C 7000                       		moveq	#0,d0
0000959E 1028 0024                  		move.b	$24(a0),d0
000095A2 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095A6 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095AA                            ; ===========================================================================
000095AA 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095AC 0000                       		dc.w Obj27_Main-Obj27_Index
000095AE 0000                       		dc.w Obj27_Animate-Obj27_Index
000095B0                            ; ===========================================================================
000095B0                            
000095B0                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000095B0 5428 0024                  		addq.b	#2,$24(a0)
000095B4 6100 0000                  		bsr.w	SingleObjLoad
000095B8 6600                       		bne.s	Obj27_Main
000095BA                            ;		move.b	#$28,0(a1)	; load animal object
000095BA 3368 0008 0008             		move.w	8(a0),8(a1)
000095C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095C6 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000095CC                            
000095CC                            Obj27_Main:				; XREF: Obj27_Index
000095CC 5428 0024                  		addq.b	#2,$24(a0)
000095D0 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000095D8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000095DE 117C 0004 0001             		move.b	#4,1(a0)
000095E4 117C 0001 0018             		move.b	#1,$18(a0)
000095EA 117C 0000 0020             		move.b	#0,$20(a0)
000095F0 117C 000C 0019             		move.b	#$C,$19(a0)
000095F6 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
000095FC 117C 0000 001A             		move.b	#0,$1A(a0)
00009602 303C 00C1                  		move.w	#$C1,d0
00009606 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000960C                            
0000960C                            Obj27_Animate:				; XREF: Obj27_Index
0000960C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009610 6A00                       		bpl.s	Obj27_Display
00009612 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009618 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000961C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009622 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009626                            
00009626                            Obj27_Display:
00009626 6000 0000                  		bra.w	DisplaySprite
0000962A                            ; ===========================================================================
0000962A                            ; ---------------------------------------------------------------------------
0000962A                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000962A                            ; ---------------------------------------------------------------------------
0000962A                            
0000962A                            Obj3F:					; XREF: Obj_Index
0000962A 7000                       		moveq	#0,d0
0000962C 1028 0024                  		move.b	$24(a0),d0
00009630 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009634 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009638                            ; ===========================================================================
00009638 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000963A FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000963C                            ; ===========================================================================
0000963C                            
0000963C                            Obj3F_Main:				; XREF: Obj3F_Index
0000963C 5428 0024                  		addq.b	#2,$24(a0)
00009640 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009648 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000964E 117C 0004 0001             		move.b	#4,1(a0)
00009654 117C 0001 0018             		move.b	#1,$18(a0)
0000965A 117C 0000 0020             		move.b	#0,$20(a0)
00009660 117C 000C 0019             		move.b	#$C,$19(a0)
00009666 117C 0007 001E             		move.b	#7,$1E(a0)
0000966C 117C 0000 001A             		move.b	#0,$1A(a0)
00009672 303C 00C4                  		move.w	#$C4,d0
00009676 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000967C                            ; ===========================================================================
0000967C                            Ani_obj1E:
0000967C                            	include "_anim\obj1E.asm"
0000967C                            ; ---------------------------------------------------------------------------
0000967C                            ; Animation script - doors (SBZ)
0000967C                            ; ---------------------------------------------------------------------------
0000967C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000967E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009696 00                         		even
00009696 00                         		even
00009696                            
00009696                            ; ---------------------------------------------------------------------------
00009696                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009696                            ; ---------------------------------------------------------------------------
00009696                            Map_obj1E:
00009696                            	include "_maps\obj1E.asm"
00009696                            ; ---------------------------------------------------------------------------
00009696                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009696                            ; ---------------------------------------------------------------------------
00009696 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000969A 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000969E 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000096A2 02                         byte_8E6E:	dc.b 2
000096A3 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000096A8 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000096AD 02                         byte_8E79:	dc.b 2
000096AE EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000096B3 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000096B8 02                         byte_8E84:	dc.b 2
000096B9 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000096BE 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000096C3 02                         byte_8E8F:	dc.b 2
000096C4 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000096C9 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000096CE 01                         byte_8E9A:	dc.b 1
000096CF F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000096D4 01                         byte_8EA0:	dc.b 1
000096D5 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000096DA                            		even
000096DA                            		even
000096DA                            
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            ; Sprite mappings - explosion
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            Map_obj24:
000096DA                            	include "_maps\obj24.asm"
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            ; Sprite mappings - explosion
000096DA                            ; ---------------------------------------------------------------------------
000096DA 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000096DE 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000096E2 01                         byte_8EAE:	dc.b 1
000096E3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000096E8 01                         byte_8EB4:	dc.b 1
000096E9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000096EE 01                         byte_8EBA:	dc.b 1
000096EF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000096F4 01                         byte_8EC0:	dc.b 1
000096F5 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000096FA                            		even
000096FA                            		even
000096FA                            
000096FA                            ; ---------------------------------------------------------------------------
000096FA                            ; Sprite mappings - explosion
000096FA                            ; ---------------------------------------------------------------------------
000096FA 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000096FE 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009702 0000                       		dc.w byte_8EF7-Map_obj27
00009704 01                         byte_8ED0:	dc.b 1
00009705 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000970A 01                         byte_8ED6:	dc.b 1
0000970B F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009710 01                         byte_8EDC:	dc.b 1
00009711 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009716 04                         byte_8EE2:	dc.b 4
00009717 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000971C EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009721 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009726 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000972B 04                         byte_8EF7:	dc.b 4
0000972C EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009731 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009736 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000973B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009740                            		even
00009740                            ; ---------------------------------------------------------------------------
00009740                            ; Sprite mappings - explosion from when	a boss is destroyed
00009740                            ; ---------------------------------------------------------------------------
00009740 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009742 0000                       		dc.w byte_8F16-Map_obj3F
00009744 0000                       		dc.w byte_8F1C-Map_obj3F
00009746 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009748 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000974A 01                         byte_8F16:	dc.b 1
0000974B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009750 01                         byte_8F1C:	dc.b 1
00009751 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009756                            		even
00009756                            ; ===========================================================================
00009756                            ; ---------------------------------------------------------------------------
00009756                            ; Object 28 - animals
00009756                            ; ---------------------------------------------------------------------------
00009756                            
00009756                            Obj28:					; XREF: Obj_Index
00009756 7000                       		moveq	#0,d0
00009758 1028 0024                  		move.b	$24(a0),d0
0000975C 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009760 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009764                            ; ===========================================================================
00009764 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009768 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000976C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009770 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009774 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009778 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000977C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009780 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009784 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009788 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000978C 0000                       		dc.w loc_92D6-Obj28_Index
0000978E                            
0000978E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000979A                            
0000979A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000979E 0000 0000                  		dc.l Map_obj28
000097A2 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000097A6 0000 0000                  		dc.l Map_obj28a		; mappings address
000097AA FE80 FD00                  		dc.w $FE80, $FD00
000097AE 0000 0000                  		dc.l Map_obj28
000097B2 FEC0 FE80                  		dc.w $FEC0, $FE80
000097B6 0000 0000                  		dc.l Map_obj28a
000097BA FE40 FD00                  		dc.w $FE40, $FD00
000097BE 0000 0000                  		dc.l Map_obj28b
000097C2 FD00 FC00                  		dc.w $FD00, $FC00
000097C6 0000 0000                  		dc.l Map_obj28a
000097CA FD80 FC80                  		dc.w $FD80, $FC80
000097CE 0000 0000                  		dc.l Map_obj28b
000097D2                            
000097D2 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000097E2 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000097F2 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000097FE                            
000097FE 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009812 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009826 0000 0000                  		dc.l Map_obj28b
0000982A                            
0000982A 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000983C 0565 05B3                  		dc.w $565, $5B3
00009840                            ; ===========================================================================
00009840                            
00009840                            Obj28_Ending:				; XREF: Obj28_Index
00009840 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009844 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009848 7000                       		moveq	#0,d0
0000984A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000984E D040                       		add.w	d0,d0		; multiply d0 by 2
00009850 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009854 0440 0014                  		subi.w	#$14,d0
00009858 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000985E D040                       		add.w	d0,d0
00009860 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009866 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000986A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009870 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009876 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000987C 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009882 117C 000C 0016             		move.b	#$C,$16(a0)
00009888 117C 0004 0001             		move.b	#4,1(a0)
0000988E 08E8 0000 0001             		bset	#0,1(a0)
00009894 117C 0006 0018             		move.b	#6,$18(a0)
0000989A 117C 0008 0019             		move.b	#8,$19(a0)
000098A0 117C 0007 001E             		move.b	#7,$1E(a0)
000098A6 6000 0000                  		bra.w	DisplaySprite
000098AA                            ; ===========================================================================
000098AA                            
000098AA                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000098AA 5428 0024                  		addq.b	#2,$24(a0)
000098AE 6100 948E                  		bsr.w	RandomNumber
000098B2 0240 0001                  		andi.w	#1,d0
000098B6 7200                       		moveq	#0,d1
000098B8 1238 FE10                  		move.b	($FFFFFE10).w,d1
000098BC D241                       		add.w	d1,d1
000098BE D240                       		add.w	d0,d1
000098C0 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000098C4 1031 1000                  		move.b	(a1,d1.w),d0
000098C8 1140 0030                  		move.b	d0,$30(a0)
000098CC E748                       		lsl.w	#3,d0
000098CE 43FA FECA                  		lea	Obj28_Variables(pc),a1
000098D2 D2C0                       		adda.w	d0,a1
000098D4 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000098D8 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000098DC 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000098E0 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000098E6 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000098EC 6700                       		beq.s	loc_90C0	; if yes, branch
000098EE 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000098F4                            
000098F4                            loc_90C0:
000098F4 117C 000C 0016             		move.b	#$C,$16(a0)
000098FA 117C 0004 0001             		move.b	#4,1(a0)
00009900 08E8 0000 0001             		bset	#0,1(a0)
00009906 117C 0006 0018             		move.b	#6,$18(a0)
0000990C 117C 0008 0019             		move.b	#8,$19(a0)
00009912 117C 0007 001E             		move.b	#7,$1E(a0)
00009918 117C 0002 001A             		move.b	#2,$1A(a0)
0000991E 317C FC00 0012             		move.w	#-$400,$12(a0)
00009924 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009928 6600                       		bne.s	loc_911C
0000992A 6100 0000                  		bsr.w	SingleObjLoad
0000992E 6600                       		bne.s	Obj28_Display
00009930 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009934 3368 0008 0008             		move.w	8(a0),8(a1)
0000993A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009940 3028 003E                  		move.w	$3E(a0),d0
00009944 E248                       		lsr.w	#1,d0
00009946 1340 001A                  		move.b	d0,$1A(a1)
0000994A                            
0000994A                            Obj28_Display:
0000994A 6000 0000                  		bra.w	DisplaySprite
0000994E                            ; ===========================================================================
0000994E                            
0000994E                            loc_911C:
0000994E 117C 0012 0024             		move.b	#$12,$24(a0)
00009954 4268 0010                  		clr.w	$10(a0)
00009958 6000 0000                  		bra.w	DisplaySprite
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            loc_912A:				; XREF: Obj28_Index
0000995C 4A28 0001                  		tst.b	1(a0)
00009960 6A00 0000                  		bpl.w	DeleteObject
00009964 6100 0000                  		bsr.w	ObjectFall
00009968 4A68 0012                  		tst.w	$12(a0)
0000996C 6B00                       		bmi.s	loc_9180
0000996E 4EB9 0000 0000             		jsr	ObjHitFloor
00009974 4A41                       		tst.w	d1
00009976 6A00                       		bpl.s	loc_9180
00009978 D368 000C                  		add.w	d1,$C(a0)
0000997C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009982 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009988 117C 0001 001A             		move.b	#1,$1A(a0)
0000998E 1028 0030                  		move.b	$30(a0),d0
00009992 D000                       		add.b	d0,d0
00009994 5800                       		addq.b	#4,d0
00009996 1140 0024                  		move.b	d0,$24(a0)
0000999A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000999E 6700                       		beq.s	loc_9180
000099A0 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000099A6 6700                       		beq.s	loc_9180
000099A8 4468 0010                  		neg.w	$10(a0)
000099AC 0868 0000 0001             		bchg	#0,1(a0)
000099B2                            
000099B2                            loc_9180:
000099B2 6000 0000                  		bra.w	DisplaySprite
000099B6                            ; ===========================================================================
000099B6                            
000099B6                            loc_9184:				; XREF: Obj28_Index
000099B6 6100 0000                  		bsr.w	ObjectFall
000099BA 117C 0001 001A             		move.b	#1,$1A(a0)
000099C0 4A68 0012                  		tst.w	$12(a0)
000099C4 6B00                       		bmi.s	loc_91AE
000099C6 117C 0000 001A             		move.b	#0,$1A(a0)
000099CC 4EB9 0000 0000             		jsr	ObjHitFloor
000099D2 4A41                       		tst.w	d1
000099D4 6A00                       		bpl.s	loc_91AE
000099D6 D368 000C                  		add.w	d1,$C(a0)
000099DA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099E0                            
000099E0                            loc_91AE:
000099E0 4A28 0028                  		tst.b	$28(a0)
000099E4 6600                       		bne.s	loc_9224
000099E6 4A28 0001                  		tst.b	1(a0)
000099EA 6A00 0000                  		bpl.w	DeleteObject
000099EE 6000 0000                  		bra.w	DisplaySprite
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            loc_91C0:				; XREF: Obj28_Index
000099F2 6100 0000                  		bsr.w	SpeedToPos
000099F6 0668 0018 0012             		addi.w	#$18,$12(a0)
000099FC 4A68 0012                  		tst.w	$12(a0)
00009A00 6B00                       		bmi.s	loc_91FC
00009A02 4EB9 0000 0000             		jsr	ObjHitFloor
00009A08 4A41                       		tst.w	d1
00009A0A 6A00                       		bpl.s	loc_91FC
00009A0C D368 000C                  		add.w	d1,$C(a0)
00009A10 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A16 4A28 0028                  		tst.b	$28(a0)
00009A1A 6700                       		beq.s	loc_91FC
00009A1C 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009A22 6700                       		beq.s	loc_91FC
00009A24 4468 0010                  		neg.w	$10(a0)
00009A28 0868 0000 0001             		bchg	#0,1(a0)
00009A2E                            
00009A2E                            loc_91FC:
00009A2E 5328 001E                  		subq.b	#1,$1E(a0)
00009A32 6A00                       		bpl.s	loc_9212
00009A34 117C 0001 001E             		move.b	#1,$1E(a0)
00009A3A 5228 001A                  		addq.b	#1,$1A(a0)
00009A3E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A44                            
00009A44                            loc_9212:
00009A44 4A28 0028                  		tst.b	$28(a0)
00009A48 6600                       		bne.s	loc_9224
00009A4A 4A28 0001                  		tst.b	1(a0)
00009A4E 6A00 0000                  		bpl.w	DeleteObject
00009A52 6000 0000                  		bra.w	DisplaySprite
00009A56                            ; ===========================================================================
00009A56                            
00009A56                            loc_9224:				; XREF: Obj28_Index
00009A56 3028 0008                  		move.w	8(a0),d0
00009A5A 9078 D008                  		sub.w	($FFFFD008).w,d0
00009A5E 6500                       		bcs.s	loc_923C
00009A60 0440 0180                  		subi.w	#$180,d0
00009A64 6A00                       		bpl.s	loc_923C
00009A66 4A28 0001                  		tst.b	1(a0)
00009A6A 6A00 0000                  		bpl.w	DeleteObject
00009A6E                            
00009A6E                            loc_923C:
00009A6E 6000 0000                  		bra.w	DisplaySprite
00009A72                            ; ===========================================================================
00009A72                            
00009A72                            loc_9240:				; XREF: Obj28_Index
00009A72 4A28 0001                  		tst.b	1(a0)
00009A76 6A00 0000                  		bpl.w	DeleteObject
00009A7A 5368 0036                  		subq.w	#1,$36(a0)
00009A7E 6600 0000                  		bne.w	loc_925C
00009A82 117C 0002 0024             		move.b	#2,$24(a0)
00009A88 117C 0003 0018             		move.b	#3,$18(a0)
00009A8E                            
00009A8E                            loc_925C:
00009A8E 6000 0000                  		bra.w	DisplaySprite
00009A92                            ; ===========================================================================
00009A92                            
00009A92                            loc_9260:				; XREF: Obj28_Index
00009A92 6100 0000                  		bsr.w	sub_9404
00009A96 6400                       		bcc.s	loc_927C
00009A98 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A9E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AA4 117C 000E 0024             		move.b	#$E,$24(a0)
00009AAA 6000 FF46                  		bra.w	loc_91C0
00009AAE                            ; ===========================================================================
00009AAE                            
00009AAE                            loc_927C:
00009AAE 6000 FFA6                  		bra.w	loc_9224
00009AB2                            ; ===========================================================================
00009AB2                            
00009AB2                            loc_9280:				; XREF: Obj28_Index
00009AB2 6100 0000                  		bsr.w	sub_9404
00009AB6 6A00                       		bpl.s	loc_92B6
00009AB8 4268 0010                  		clr.w	$10(a0)
00009ABC 4268 0032                  		clr.w	$32(a0)
00009AC0 6100 0000                  		bsr.w	SpeedToPos
00009AC4 0668 0018 0012             		addi.w	#$18,$12(a0)
00009ACA 6100 0000                  		bsr.w	loc_93C4
00009ACE 6100 0000                  		bsr.w	loc_93EC
00009AD2 5328 001E                  		subq.b	#1,$1E(a0)
00009AD6 6A00                       		bpl.s	loc_92B6
00009AD8 117C 0001 001E             		move.b	#1,$1E(a0)
00009ADE 5228 001A                  		addq.b	#1,$1A(a0)
00009AE2 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AE8                            
00009AE8                            loc_92B6:
00009AE8 6000 FF6C                  		bra.w	loc_9224
00009AEC                            ; ===========================================================================
00009AEC                            
00009AEC                            loc_92BA:				; XREF: Obj28_Index
00009AEC 6100 0000                  		bsr.w	sub_9404
00009AF0 6A00                       		bpl.s	loc_9310
00009AF2 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009AF8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AFE 117C 0004 0024             		move.b	#4,$24(a0)
00009B04 6000 FEB0                  		bra.w	loc_9184
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            loc_92D6:				; XREF: Obj28_Index
00009B08 6100 0000                  		bsr.w	ObjectFall
00009B0C 117C 0001 001A             		move.b	#1,$1A(a0)
00009B12 4A68 0012                  		tst.w	$12(a0)
00009B16 6B00                       		bmi.s	loc_9310
00009B18 117C 0000 001A             		move.b	#0,$1A(a0)
00009B1E 4EB9 0000 0000             		jsr	ObjHitFloor
00009B24 4A41                       		tst.w	d1
00009B26 6A00                       		bpl.s	loc_9310
00009B28 4628 0029                  		not.b	$29(a0)
00009B2C 6600                       		bne.s	loc_9306
00009B2E 4468 0010                  		neg.w	$10(a0)
00009B32 0868 0000 0001             		bchg	#0,1(a0)
00009B38                            
00009B38                            loc_9306:
00009B38 D368 000C                  		add.w	d1,$C(a0)
00009B3C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B42                            
00009B42                            loc_9310:
00009B42 6000 FF12                  		bra.w	loc_9224
00009B46                            ; ===========================================================================
00009B46                            
00009B46                            loc_9314:				; XREF: Obj28_Index
00009B46 6100 0000                  		bsr.w	sub_9404
00009B4A 6A00                       		bpl.s	loc_932E
00009B4C 4268 0010                  		clr.w	$10(a0)
00009B50 4268 0032                  		clr.w	$32(a0)
00009B54 6100 0000                  		bsr.w	ObjectFall
00009B58 6100 0000                  		bsr.w	loc_93C4
00009B5C 6100 0000                  		bsr.w	loc_93EC
00009B60                            
00009B60                            loc_932E:
00009B60 6000 FEF4                  		bra.w	loc_9224
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            loc_9332:				; XREF: Obj28_Index
00009B64 6100 0000                  		bsr.w	sub_9404
00009B68 6A00                       		bpl.s	loc_936C
00009B6A 6100 0000                  		bsr.w	ObjectFall
00009B6E 117C 0001 001A             		move.b	#1,$1A(a0)
00009B74 4A68 0012                  		tst.w	$12(a0)
00009B78 6B00                       		bmi.s	loc_936C
00009B7A 117C 0000 001A             		move.b	#0,$1A(a0)
00009B80 4EB9 0000 0000             		jsr	ObjHitFloor
00009B86 4A41                       		tst.w	d1
00009B88 6A00                       		bpl.s	loc_936C
00009B8A 4468 0010                  		neg.w	$10(a0)
00009B8E 0868 0000 0001             		bchg	#0,1(a0)
00009B94 D368 000C                  		add.w	d1,$C(a0)
00009B98 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B9E                            
00009B9E                            loc_936C:
00009B9E 6000 FEB6                  		bra.w	loc_9224
00009BA2                            ; ===========================================================================
00009BA2                            
00009BA2                            loc_9370:				; XREF: Obj28_Index
00009BA2 6100 0000                  		bsr.w	sub_9404
00009BA6 6A00                       		bpl.s	loc_93C0
00009BA8 6100 0000                  		bsr.w	SpeedToPos
00009BAC 0668 0018 0012             		addi.w	#$18,$12(a0)
00009BB2 4A68 0012                  		tst.w	$12(a0)
00009BB6 6B00                       		bmi.s	loc_93AA
00009BB8 4EB9 0000 0000             		jsr	ObjHitFloor
00009BBE 4A41                       		tst.w	d1
00009BC0 6A00                       		bpl.s	loc_93AA
00009BC2 4628 0029                  		not.b	$29(a0)
00009BC6 6600                       		bne.s	loc_93A0
00009BC8 4468 0010                  		neg.w	$10(a0)
00009BCC 0868 0000 0001             		bchg	#0,1(a0)
00009BD2                            
00009BD2                            loc_93A0:
00009BD2 D368 000C                  		add.w	d1,$C(a0)
00009BD6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BDC                            
00009BDC                            loc_93AA:
00009BDC 5328 001E                  		subq.b	#1,$1E(a0)
00009BE0 6A00                       		bpl.s	loc_93C0
00009BE2 117C 0001 001E             		move.b	#1,$1E(a0)
00009BE8 5228 001A                  		addq.b	#1,$1A(a0)
00009BEC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009BF2                            
00009BF2                            loc_93C0:
00009BF2 6000 FE62                  		bra.w	loc_9224
00009BF6                            ; ===========================================================================
00009BF6                            
00009BF6                            loc_93C4:
00009BF6 117C 0001 001A             		move.b	#1,$1A(a0)
00009BFC 4A68 0012                  		tst.w	$12(a0)
00009C00 6B00                       		bmi.s	locret_93EA
00009C02 117C 0000 001A             		move.b	#0,$1A(a0)
00009C08 4EB9 0000 0000             		jsr	ObjHitFloor
00009C0E 4A41                       		tst.w	d1
00009C10 6A00                       		bpl.s	locret_93EA
00009C12 D368 000C                  		add.w	d1,$C(a0)
00009C16 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C1C                            
00009C1C                            locret_93EA:
00009C1C 4E75                       		rts	
00009C1E                            ; ===========================================================================
00009C1E                            
00009C1E                            loc_93EC:
00009C1E 08E8 0000 0001             		bset	#0,1(a0)
00009C24 3028 0008                  		move.w	8(a0),d0
00009C28 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C2C 6400                       		bcc.s	locret_9402
00009C2E 08A8 0000 0001             		bclr	#0,1(a0)
00009C34                            
00009C34                            locret_9402:
00009C34 4E75                       		rts	
00009C36                            
00009C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C36                            
00009C36                            
00009C36                            sub_9404:
00009C36 3038 D008                  		move.w	($FFFFD008).w,d0
00009C3A 9068 0008                  		sub.w	8(a0),d0
00009C3E 0440 00B8                  		subi.w	#$B8,d0
00009C42 4E75                       		rts	
00009C44                            ; End of function sub_9404
00009C44                            
00009C44                            ; ===========================================================================
00009C44                            ; ---------------------------------------------------------------------------
00009C44                            ; Object 29 - points that appear when you destroy something
00009C44                            ; ---------------------------------------------------------------------------
00009C44                            
00009C44                            Obj29:					; XREF: Obj_Index
00009C44 7000                       		moveq	#0,d0
00009C46 1028 0024                  		move.b	$24(a0),d0
00009C4A 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009C4E 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009C52 6000 0000                  		bra.w	DisplaySprite
00009C56                            ; ===========================================================================
00009C56 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009C58 0000                       		dc.w Obj29_Slower-Obj29_Index
00009C5A                            ; ===========================================================================
00009C5A                            
00009C5A                            Obj29_Main:				; XREF: Obj29_Index
00009C5A 5428 0024                  		addq.b	#2,$24(a0)
00009C5E 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009C66 317C 2797 0002             		move.w	#$2797,2(a0)
00009C6C 117C 0004 0001             		move.b	#4,1(a0)
00009C72 117C 0001 0018             		move.b	#1,$18(a0)
00009C78 117C 0008 0019             		move.b	#8,$19(a0)
00009C7E 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009C84                            
00009C84                            Obj29_Slower:				; XREF: Obj29_Index
00009C84 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009C88 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009C8C 6100 0000                  		bsr.w	SpeedToPos
00009C90 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009C96 4E75                       		rts	
00009C98                            ; ===========================================================================
00009C98                            ; ---------------------------------------------------------------------------
00009C98                            ; Sprite mappings - animals
00009C98                            ; ---------------------------------------------------------------------------
00009C98                            Map_obj28:
00009C98                            	include "_maps\obj28.asm"
00009C98                            ; ---------------------------------------------------------------------------
00009C98                            ; Sprite mappings - animals
00009C98                            ; ---------------------------------------------------------------------------
00009C98 0000                       		dc.w byte_9472-Map_obj28
00009C9A 0000                       		dc.w byte_9478-Map_obj28
00009C9C 0000                       		dc.w byte_946C-Map_obj28
00009C9E 01                         byte_946C:	dc.b 1
00009C9F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009CA4 01                         byte_9472:	dc.b 1
00009CA5 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009CAA 01                         byte_9478:	dc.b 1
00009CAB F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009CB0                            		even
00009CB0                            		even
00009CB0                            
00009CB0                            Map_obj28a:
00009CB0                            	include "_maps\obj28a.asm"
00009CB0                            ; ---------------------------------------------------------------------------
00009CB0                            ; Sprite mappings - animals
00009CB0                            ; ---------------------------------------------------------------------------
00009CB0 0000                       		dc.w byte_948A-Map_obj28a
00009CB2 0000                       		dc.w byte_9490-Map_obj28a
00009CB4 0000                       		dc.w byte_9484-Map_obj28a
00009CB6 01                         byte_9484:	dc.b 1
00009CB7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009CBC 01                         byte_948A:	dc.b 1
00009CBD FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009CC2 01                         byte_9490:	dc.b 1
00009CC3 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009CC8                            		even
00009CC8                            		even
00009CC8                            
00009CC8                            Map_obj28b:
00009CC8                            	include "_maps\obj28b.asm"
00009CC8                            ; ---------------------------------------------------------------------------
00009CC8                            ; Sprite mappings - animals
00009CC8                            ; ---------------------------------------------------------------------------
00009CC8 0000                       		dc.w byte_94A2-Map_obj28b
00009CCA 0000                       		dc.w byte_94A8-Map_obj28b
00009CCC 0000                       		dc.w byte_949C-Map_obj28b
00009CCE 01                         byte_949C:	dc.b 1
00009CCF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009CD4 01                         byte_94A2:	dc.b 1
00009CD5 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009CDA 01                         byte_94A8:	dc.b 1
00009CDB FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009CE0                            		even
00009CE0                            		even
00009CE0                            
00009CE0                            ; ---------------------------------------------------------------------------
00009CE0                            ; Sprite mappings - points that	appear when you	destroy	something
00009CE0                            ; ---------------------------------------------------------------------------
00009CE0                            Map_obj29:
00009CE0                            	include "_maps\obj29.asm"
00009CE0                            ; ================================================================================
00009CE0                            ; Sprite Mappings - generated by Flex 2 Sun Jul 01 2018 22:35:59 GMT-0700 (Pacific Daylight Time)
00009CE0                            ; ================================================================================
00009CE0                            
00009CE0                            DATAUGA3WJG5BYL:
00009CE0 0000 0000                  	dc.w $0, $0
00009CE4 0000 0000                  	dc.w $0, $0
00009CE8 0000 0000                  	dc.w $0, $0
00009CEC 0000                       	dc.w $0
00009CEE                            	even
00009CEE                            	even
00009CEE                            
00009CEE                            ; ===========================================================================
00009CEE                            ; ---------------------------------------------------------------------------
00009CEE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009CEE                            ; ---------------------------------------------------------------------------
00009CEE                            
00009CEE                            Obj1F:					; XREF: Obj_Index
00009CEE 7000                       		moveq	#0,d0
00009CF0 1028 0024                  		move.b	$24(a0),d0
00009CF4 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009CF8 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009CFC                            ; ===========================================================================
00009CFC 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009CFE 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009D00 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009D02 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009D04 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009D06                            ; ===========================================================================
00009D06                            
00009D06                            Obj1F_Main:				; XREF: Obj1F_Index
00009D06 117C 0010 0016             		move.b	#$10,$16(a0)
00009D0C 117C 0008 0017             		move.b	#8,$17(a0)
00009D12 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009D1A 317C 0400 0002             		move.w	#$400,2(a0)
00009D20 117C 0004 0001             		move.b	#4,1(a0)
00009D26 117C 0003 0018             		move.b	#3,$18(a0)
00009D2C 117C 0006 0020             		move.b	#6,$20(a0)
00009D32 117C 0015 0019             		move.b	#$15,$19(a0)
00009D38 6100 0000                  		bsr.w	ObjectFall
00009D3C 4EB9 0000 0000             		jsr	ObjHitFloor
00009D42 4A41                       		tst.w	d1
00009D44 6A00                       		bpl.s	locret_955A
00009D46 D368 000C                  		add.w	d1,$C(a0)
00009D4A 1143 0026                  		move.b	d3,$26(a0)
00009D4E 317C 0000 0012             		move.w	#0,$12(a0)
00009D54 5428 0024                  		addq.b	#2,$24(a0)
00009D58                            
00009D58                            locret_955A:
00009D58 4E75                       		rts	
00009D5A                            ; ===========================================================================
00009D5A                            
00009D5A                            Obj1F_Action:				; XREF: Obj1F_Index
00009D5A 7000                       		moveq	#0,d0
00009D5C 1028 0025                  		move.b	$25(a0),d0
00009D60 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009D64 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009D68 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009D6E 6100 0000                  		bsr.w	AnimateSprite
00009D72 6000 0000                  		bra.w	MarkObjGone
00009D76                            ; ===========================================================================
00009D76 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009D78 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009D7A                            ; ===========================================================================
00009D7A                            
00009D7A                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009D7A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009D7E 6A00                       		bpl.s	locret_95B6
00009D80 4A28 0001                  		tst.b	1(a0)
00009D84 6A00                       		bpl.s	Obj1F_Move
00009D86 0868 0001 0032             		bchg	#1,$32(a0)
00009D8C 6600                       		bne.s	Obj1F_MakeFire
00009D8E                            
00009D8E                            Obj1F_Move:
00009D8E 5428 0025                  		addq.b	#2,$25(a0)
00009D92 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009D98 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009D9E 6100 0000                  		bsr.w	Obj1F_SetAni
00009DA2 5600                       		addq.b	#3,d0
00009DA4 1140 001C                  		move.b	d0,$1C(a0)
00009DA8 0868 0000 0022             		bchg	#0,$22(a0)
00009DAE 6600                       		bne.s	locret_95B6
00009DB0 4468 0010                  		neg.w	$10(a0)		; change direction
00009DB4                            
00009DB4                            locret_95B6:
00009DB4 4E75                       		rts	
00009DB6                            ; ===========================================================================
00009DB6                            
00009DB6                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009DB6 317C 003B 0030             		move.w	#$3B,$30(a0)
00009DBC 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009DC2 6100 0000                  		bsr.w	SingleObjLoad
00009DC6 6600                       		bne.s	Obj1F_MakeFire2
00009DC8 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009DCC 137C 0006 0024             		move.b	#6,$24(a1)
00009DD2 3368 0008 0008             		move.w	8(a0),8(a1)
00009DD8 0469 0010 0008             		subi.w	#$10,8(a1)
00009DDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DE4 337C FF00 0010             		move.w	#-$100,$10(a1)
00009DEA                            
00009DEA                            Obj1F_MakeFire2:
00009DEA 6100 0000                  		bsr.w	SingleObjLoad
00009DEE 6600                       		bne.s	locret_9618
00009DF0 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009DF4 137C 0006 0024             		move.b	#6,$24(a1)
00009DFA 3368 0008 0008             		move.w	8(a0),8(a1)
00009E00 0669 0010 0008             		addi.w	#$10,8(a1)
00009E06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E0C 337C 0100 0010             		move.w	#$100,$10(a1)
00009E12                            
00009E12                            locret_9618:
00009E12 4E75                       		rts	
00009E14                            ; ===========================================================================
00009E14                            
00009E14                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009E14 5368 0030                  		subq.w	#1,$30(a0)
00009E18 6B00                       		bmi.s	loc_966E
00009E1A 6100 0000                  		bsr.w	SpeedToPos
00009E1E 0868 0000 0032             		bchg	#0,$32(a0)
00009E24 6600                       		bne.s	loc_9654
00009E26 3628 0008                  		move.w	8(a0),d3
00009E2A 0643 0010                  		addi.w	#$10,d3
00009E2E 0828 0000 0022             		btst	#0,$22(a0)
00009E34 6700                       		beq.s	loc_9640
00009E36 0443 0020                  		subi.w	#$20,d3
00009E3A                            
00009E3A                            loc_9640:
00009E3A 4EB9 0000 0000             		jsr	ObjHitFloor2
00009E40 0C41 FFF8                  		cmpi.w	#-8,d1
00009E44 6D00                       		blt.s	loc_966E
00009E46 0C41 000C                  		cmpi.w	#$C,d1
00009E4A 6C00                       		bge.s	loc_966E
00009E4C 4E75                       		rts	
00009E4E                            ; ===========================================================================
00009E4E                            
00009E4E                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009E4E 4EB9 0000 0000             		jsr	ObjHitFloor
00009E54 D368 000C                  		add.w	d1,$C(a0)
00009E58 1143 0026                  		move.b	d3,$26(a0)
00009E5C 6100 0000                  		bsr.w	Obj1F_SetAni
00009E60 5600                       		addq.b	#3,d0
00009E62 1140 001C                  		move.b	d0,$1C(a0)
00009E66 4E75                       		rts	
00009E68                            ; ===========================================================================
00009E68                            
00009E68                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009E68 5528 0025                  		subq.b	#2,$25(a0)
00009E6C 317C 003B 0030             		move.w	#59,$30(a0)
00009E72 317C 0000 0010             		move.w	#0,$10(a0)
00009E78 6100 0000                  		bsr.w	Obj1F_SetAni
00009E7C 1140 001C                  		move.b	d0,$1C(a0)
00009E80 4E75                       		rts	
00009E82                            ; ---------------------------------------------------------------------------
00009E82                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009E82                            ; ---------------------------------------------------------------------------
00009E82                            
00009E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E82                            
00009E82                            
00009E82                            Obj1F_SetAni:				; XREF: loc_966E
00009E82 7000                       		moveq	#0,d0
00009E84 1628 0026                  		move.b	$26(a0),d3
00009E88 6B00                       		bmi.s	loc_96A4
00009E8A 0C03 0006                  		cmpi.b	#6,d3
00009E8E 6500                       		bcs.s	locret_96A2
00009E90 7001                       		moveq	#1,d0
00009E92 0828 0000 0022             		btst	#0,$22(a0)
00009E98 6600                       		bne.s	locret_96A2
00009E9A 7002                       		moveq	#2,d0
00009E9C                            
00009E9C                            locret_96A2:
00009E9C 4E75                       		rts	
00009E9E                            ; ===========================================================================
00009E9E                            
00009E9E                            loc_96A4:				; XREF: Obj1F_SetAni
00009E9E 0C03 00FA                  		cmpi.b	#-6,d3
00009EA2 6200                       		bhi.s	locret_96B6
00009EA4 7002                       		moveq	#2,d0
00009EA6 0828 0000 0022             		btst	#0,$22(a0)
00009EAC 6600                       		bne.s	locret_96B6
00009EAE 7001                       		moveq	#1,d0
00009EB0                            
00009EB0                            locret_96B6:
00009EB0 4E75                       		rts	
00009EB2                            ; End of function Obj1F_SetAni
00009EB2                            
00009EB2                            ; ===========================================================================
00009EB2                            
00009EB2                            Obj1F_Delete:				; XREF: Obj1F_Index
00009EB2 6100 0000                  		bsr.w	DeleteObject
00009EB6 4E75                       		rts	
00009EB8                            ; ===========================================================================
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            ; Sub-object - missile that the	Crabmeat throws
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            
00009EB8                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009EB8 5428 0024                  		addq.b	#2,$24(a0)
00009EBC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009EC4 317C 0400 0002             		move.w	#$400,2(a0)
00009ECA 117C 0004 0001             		move.b	#4,1(a0)
00009ED0 117C 0003 0018             		move.b	#3,$18(a0)
00009ED6 117C 0087 0020             		move.b	#$87,$20(a0)
00009EDC 117C 0008 0019             		move.b	#8,$19(a0)
00009EE2 317C FC00 0012             		move.w	#-$400,$12(a0)
00009EE8 117C 0007 001C             		move.b	#7,$1C(a0)
00009EEE                            
00009EEE                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009EEE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009EF4 6100 0000                  		bsr.w	AnimateSprite
00009EF8 6100 0000                  		bsr.w	ObjectFall
00009EFC 6100 0000                  		bsr.w	DisplaySprite
00009F00 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009F04 0640 00E0                  		addi.w	#$E0,d0
00009F08 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009F0C 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009F0E 4E75                       		rts	
00009F10                            ; ===========================================================================
00009F10                            
00009F10                            Obj1F_Delete2:
00009F10 6000 0000                  		bra.w	DeleteObject
00009F14                            ; ===========================================================================
00009F14                            Ani_obj1F:
00009F14                            	include "_anim\obj1F.asm"
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            ; Animation script - Crabmeat enemy
00009F14                            ; ---------------------------------------------------------------------------
00009F14 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009F1A 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009F20 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009F24 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009F28 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009F2C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009F30 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009F36 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009F3C 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009F42 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009F46 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009F4A                            		even
00009F4A                            		even
00009F4A                            
00009F4A                            ; ---------------------------------------------------------------------------
00009F4A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009F4A                            ; ---------------------------------------------------------------------------
00009F4A                            Map_obj1F:
00009F4A                            	include "_maps\obj1F.asm"
00009F4A                            ; ---------------------------------------------------------------------------
00009F4A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009F4A                            ; ---------------------------------------------------------------------------
00009F4A 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009F4E 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009F52 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009F56 0000                       		dc.w byte_97D7-Map_obj1F
00009F58 04                         byte_975E:	dc.b 4
00009F59 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009F5E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009F63 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009F68 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009F6D 04                         byte_9773:	dc.b 4
00009F6E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009F73 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009F78 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009F7D 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009F82 04                         byte_9788:	dc.b 4
00009F83 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009F88 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009F8D FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009F92 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009F97 04                         byte_979D:	dc.b 4
00009F98 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009F9D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009FA2 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009FA7 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009FAC 06                         byte_97B2:	dc.b 6
00009FAD F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009FB2 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009FB7 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009FBC F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009FC1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009FC6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009FCB 01                         byte_97D1:	dc.b 1
00009FCC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009FD1 01                         byte_97D7:	dc.b 1
00009FD2 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009FD8 00                         		even
00009FD8 00                         		even
00009FD8                            
00009FD8                            ; ===========================================================================
00009FD8                            ; ---------------------------------------------------------------------------
00009FD8                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009FD8                            ; ---------------------------------------------------------------------------
00009FD8                            
00009FD8                            Obj22:					; XREF: Obj_Index
00009FD8 7000                       		moveq	#0,d0
00009FDA 1028 0024                  		move.b	$24(a0),d0
00009FDE 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009FE2 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009FE6                            ; ===========================================================================
00009FE6 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009FE8 0000                       		dc.w Obj22_Action-Obj22_Index
00009FEA 0000                       		dc.w Obj22_Delete-Obj22_Index
00009FEC                            ; ===========================================================================
00009FEC                            
00009FEC                            Obj22_Main:				; XREF: Obj22_Index
00009FEC 5428 0024                  		addq.b	#2,$24(a0)
00009FF0 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009FF8 317C 0444 0002             		move.w	#$444,2(a0)
00009FFE 117C 0004 0001             		move.b	#4,1(a0)
0000A004 117C 0003 0018             		move.b	#3,$18(a0)
0000A00A 117C 0008 0020             		move.b	#8,$20(a0)
0000A010 117C 0018 0019             		move.b	#$18,$19(a0)
0000A016                            
0000A016                            Obj22_Action:				; XREF: Obj22_Index
0000A016 7000                       		moveq	#0,d0
0000A018 1028 0025                  		move.b	$25(a0),d0
0000A01C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A020 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A024 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A02A 6100 0000                  		bsr.w	AnimateSprite
0000A02E 6000 0000                  		bra.w	MarkObjGone
0000A032                            ; ===========================================================================
0000A032 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A034 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A036                            ; ===========================================================================
0000A036                            
0000A036                            Obj22_Move:				; XREF: Obj22_Index2
0000A036 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A03A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A03C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A042 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A044 5428 0025                  		addq.b	#2,$25(a0)
0000A048 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A04E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A054 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A05A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A060 6600                       		bne.s	locret_986C	; if not, branch
0000A062 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A066                            
0000A066                            locret_986C:
0000A066 4E75                       		rts	
0000A068                            ; ===========================================================================
0000A068                            
0000A068                            Obj22_Fire:				; XREF: Obj22_Move
0000A068 6100 0000                  		bsr.w	SingleObjLoad
0000A06C 6600                       		bne.s	locret_98D0
0000A06E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A072 3368 0008 0008             		move.w	8(a0),8(a1)
0000A078 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A07E 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A084 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A08A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A090 303C 0018                  		move.w	#$18,d0
0000A094 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A09A 6600                       		bne.s	loc_98AA	; if not, branch
0000A09C 4440                       		neg.w	d0
0000A09E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A0A2                            
0000A0A2                            loc_98AA:
0000A0A2 D169 0008                  		add.w	d0,8(a1)
0000A0A6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A0AC 337C 000E 0032             		move.w	#$E,$32(a1)
0000A0B2 2348 003C                  		move.l	a0,$3C(a1)
0000A0B6 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A0BC 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A0C2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A0C8                            
0000A0C8                            locret_98D0:
0000A0C8 4E75                       		rts	
0000A0CA                            ; ===========================================================================
0000A0CA                            
0000A0CA                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A0CA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0CE 6B00                       		bmi.s	Obj22_ChgDir
0000A0D0 6100 0000                  		bsr.w	SpeedToPos
0000A0D4 4A28 0034                  		tst.b	$34(a0)
0000A0D8 6600                       		bne.s	locret_992A
0000A0DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000A0DE 9068 0008                  		sub.w	8(a0),d0
0000A0E2 6A00                       		bpl.s	Obj22_SetNrSonic
0000A0E4 4440                       		neg.w	d0
0000A0E6                            
0000A0E6                            Obj22_SetNrSonic:
0000A0E6 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A0EA 6400                       		bcc.s	locret_992A	; if not, branch
0000A0EC 4A28 0001                  		tst.b	1(a0)
0000A0F0 6A00                       		bpl.s	locret_992A
0000A0F2 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A0F8 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A0FE 6000                       		bra.s	Obj22_Stop
0000A100                            ; ===========================================================================
0000A100                            
0000A100                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A100 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A106 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A10C 317C 003B 0032             		move.w	#59,$32(a0)
0000A112                            
0000A112                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A112 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A116 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A11C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A122                            
0000A122                            locret_992A:
0000A122 4E75                       		rts	
0000A124                            ; ===========================================================================
0000A124                            
0000A124                            Obj22_Delete:				; XREF: Obj22_Index
0000A124 6100 0000                  		bsr.w	DeleteObject
0000A128 4E75                       		rts	
0000A12A                            ; ===========================================================================
0000A12A                            ; ---------------------------------------------------------------------------
0000A12A                            ; Object 23 - missile that Buzz	Bomber throws
0000A12A                            ; ---------------------------------------------------------------------------
0000A12A                            
0000A12A                            Obj23:					; XREF: Obj_Index
0000A12A 7000                       		moveq	#0,d0
0000A12C 1028 0024                  		move.b	$24(a0),d0
0000A130 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A134 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A138                            ; ===========================================================================
0000A138 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A13A 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A13C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A13E 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A140 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A142                            ; ===========================================================================
0000A142                            
0000A142                            Obj23_Main:				; XREF: Obj23_Index
0000A142 5368 0032                  		subq.w	#1,$32(a0)
0000A146 6A00                       		bpl.s	Obj23_ChkCancel
0000A148 5428 0024                  		addq.b	#2,$24(a0)
0000A14C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A154 317C 2444 0002             		move.w	#$2444,2(a0)
0000A15A 117C 0004 0001             		move.b	#4,1(a0)
0000A160 117C 0003 0018             		move.b	#3,$18(a0)
0000A166 117C 0008 0019             		move.b	#8,$19(a0)
0000A16C 0228 0003 0022             		andi.b	#3,$22(a0)
0000A172 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A176 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A178 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A17E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A184 117C 0001 001C             		move.b	#1,$1C(a0)
0000A18A 6000                       		bra.s	Obj23_Animate2
0000A18C                            ; ===========================================================================
0000A18C                            
0000A18C                            Obj23_Animate:				; XREF: Obj23_Index
0000A18C 6100                       		bsr.s	Obj23_ChkCancel
0000A18E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A194 6100 0000                  		bsr.w	AnimateSprite
0000A198 6000 0000                  		bra.w	DisplaySprite
0000A19C                            ; ---------------------------------------------------------------------------
0000A19C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A19C                            ; destroyed, and if it has, then cancel	the missile
0000A19C                            ; ---------------------------------------------------------------------------
0000A19C                            
0000A19C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A19C                            
0000A19C                            
0000A19C                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A19C 2268 003C                  		movea.l	$3C(a0),a1
0000A1A0 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A1A4 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A1A6 4E75                       		rts	
0000A1A8                            ; End of function Obj23_ChkCancel
0000A1A8                            
0000A1A8                            ; ===========================================================================
0000A1A8                            
0000A1A8                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A1A8 0828 0007 0022             		btst	#7,$22(a0)
0000A1AE 6600                       		bne.s	Obj23_Explode
0000A1B0 117C 0087 0020             		move.b	#$87,$20(a0)
0000A1B6 117C 0001 001C             		move.b	#1,$1C(a0)
0000A1BC 6100 0000                  		bsr.w	SpeedToPos
0000A1C0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A1C6 6100 0000                  		bsr.w	AnimateSprite
0000A1CA 6100 0000                  		bsr.w	DisplaySprite
0000A1CE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A1D2 0640 00E0                  		addi.w	#$E0,d0
0000A1D6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A1DA 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A1DC 4E75                       		rts	
0000A1DE                            ; ===========================================================================
0000A1DE                            
0000A1DE                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A1DE 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A1E2 117C 0000 0024             		move.b	#0,$24(a0)
0000A1E8 6000 F342                  		bra.w	Obj24
0000A1EC                            ; ===========================================================================
0000A1EC                            
0000A1EC                            Obj23_Delete:				; XREF: Obj23_Index
0000A1EC 6100 0000                  		bsr.w	DeleteObject
0000A1F0 4E75                       		rts	
0000A1F2                            ; ===========================================================================
0000A1F2                            
0000A1F2                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A1F2 4A28 0001                  		tst.b	1(a0)
0000A1F6 6AF4                       		bpl.s	Obj23_Delete
0000A1F8 6100 0000                  		bsr.w	SpeedToPos
0000A1FC                            
0000A1FC                            Obj23_Animate2:				; XREF: Obj23_Main
0000A1FC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A202 6100 0000                  		bsr.w	AnimateSprite
0000A206 6100 0000                  		bsr.w	DisplaySprite
0000A20A 4E75                       		rts	
0000A20C                            ; ===========================================================================
0000A20C                            Ani_obj22:
0000A20C                            	include "_anim\obj22.asm"
0000A20C                            ; ---------------------------------------------------------------------------
0000A20C                            ; Animation script - Buzz Bomber enemy
0000A20C                            ; ---------------------------------------------------------------------------
0000A20C 0000                       		dc.w byte_9A1E-Ani_obj22
0000A20E 0000                       		dc.w byte_9A22-Ani_obj22
0000A210 0000                       		dc.w byte_9A26-Ani_obj22
0000A212 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A216 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A21A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A21E                            		even
0000A21E                            		even
0000A21E                            
0000A21E                            Ani_obj23:
0000A21E                            	include "_anim\obj23.asm"
0000A21E                            ; ---------------------------------------------------------------------------
0000A21E                            ; Animation script - missile that Buzz Bomber throws
0000A21E                            ; ---------------------------------------------------------------------------
0000A21E 0000                       		dc.w byte_9A2E-Ani_obj23
0000A220 0000                       		dc.w byte_9A32-Ani_obj23
0000A222 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A226 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A22A                            		even
0000A22A                            		even
0000A22A                            
0000A22A                            ; ---------------------------------------------------------------------------
0000A22A                            ; Sprite mappings - Buzz Bomber	enemy
0000A22A                            ; ---------------------------------------------------------------------------
0000A22A                            Map_obj22:
0000A22A                            	include "_maps\obj22.asm"
0000A22A                            ; ================================================================================
0000A22A                            ; Sprite Mappings - generated by Flex 2 Sun Jun 24 2018 15:46:27 GMT-0700 (Pacific Daylight Time)
0000A22A                            ; ================================================================================
0000A22A                            
0000A22A                            DATA7N49SEAZF5N:
0000A22A 0000 0000                  	dc.w DATA7N49SEAZF5N_0-DATA7N49SEAZF5N, DATA7N49SEAZF5N_1-DATA7N49SEAZF5N
0000A22E 0000 0000                  	dc.w DATA7N49SEAZF5N_2-DATA7N49SEAZF5N, DATA7N49SEAZF5N_3-DATA7N49SEAZF5N
0000A232 0000 0000                  	dc.w DATA7N49SEAZF5N_4-DATA7N49SEAZF5N, DATA7N49SEAZF5N_5-DATA7N49SEAZF5N
0000A236 06                         DATA7N49SEAZF5N_0: dc.b $6
0000A237 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A23C F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A241 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A246 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A24B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A250 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A255 06                         DATA7N49SEAZF5N_1: dc.b $6
0000A256 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A25B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A260 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A265 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A26A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A26F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A274 07                         DATA7N49SEAZF5N_2: dc.b $7
0000A275 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A27A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A27F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A284 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A289 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A28E F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A293 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A298 07                         DATA7N49SEAZF5N_3: dc.b $7
0000A299 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A29E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2A3 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2A8 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2AD 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2B2 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A2B7 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A2BC 06                         DATA7N49SEAZF5N_4: dc.b $6
0000A2BD F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A2C2 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A2C7 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A2CC 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A2D1 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A2D6 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A2DB 04                         DATA7N49SEAZF5N_5: dc.b $4
0000A2DC F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A2E1 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A2E6 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A2EB 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A2F0                            	even
0000A2F0                            	even
0000A2F0                            
0000A2F0                            ; ---------------------------------------------------------------------------
0000A2F0                            ; Sprite mappings - missile that Buzz Bomber throws
0000A2F0                            ; ---------------------------------------------------------------------------
0000A2F0                            Map_obj23:
0000A2F0                            	include "_maps\obj23.asm"
0000A2F0                            ; ---------------------------------------------------------------------------
0000A2F0                            ; Sprite mappings - missile that Buzz Bomber throws
0000A2F0                            ; ---------------------------------------------------------------------------
0000A2F0 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A2F4 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A2F8 01                         byte_9B0E:	dc.b 1
0000A2F9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A2FE 01                         byte_9B14:	dc.b 1
0000A2FF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A304 01                         byte_9B1A:	dc.b 1
0000A305 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A30A 01                         byte_9B20:	dc.b 1
0000A30B F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A310                            		even
0000A310                            		even
0000A310                            
0000A310                            ; ===========================================================================
0000A310                            ; ---------------------------------------------------------------------------
0000A310                            ; Object 25 - rings
0000A310                            ; ---------------------------------------------------------------------------
0000A310                            
0000A310                            Obj25:					; XREF: Obj_Index
0000A310 7000                       		moveq	#0,d0
0000A312 1028 0024                  		move.b	$24(a0),d0
0000A316 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A31A 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A31E                            ; ===========================================================================
0000A31E 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A320 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A322 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A324 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A326 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A328                            ; ---------------------------------------------------------------------------
0000A328                            ; Distances between rings (format: horizontal, vertical)
0000A328                            ; ---------------------------------------------------------------------------
0000A328 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A32A 1800                       		dc.b $18, 0		; horizontal normal
0000A32C 2000                       		dc.b $20, 0		; horizontal wide
0000A32E 0010                       		dc.b 0,	$10		; vertical tight
0000A330 0018                       		dc.b 0,	$18		; vertical normal
0000A332 0020                       		dc.b 0,	$20		; vertical wide
0000A334 1010                       		dc.b $10, $10		; diagonal
0000A336 1818                       		dc.b $18, $18
0000A338 2020                       		dc.b $20, $20
0000A33A F010                       		dc.b $F0, $10
0000A33C E818                       		dc.b $E8, $18
0000A33E E020                       		dc.b $E0, $20
0000A340 1008                       		dc.b $10, 8
0000A342 1810                       		dc.b $18, $10
0000A344 F008                       		dc.b $F0, 8
0000A346 E810                       		dc.b $E8, $10
0000A348                            ; ===========================================================================
0000A348                            
0000A348                            Obj25_Main:				; XREF: Obj25_Index
0000A348 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A34C 7000                       		moveq	#0,d0
0000A34E 1028 0023                  		move.b	$23(a0),d0
0000A352 45F2 0002                  		lea	2(a2,d0.w),a2
0000A356 1812                       		move.b	(a2),d4
0000A358 1228 0028                  		move.b	$28(a0),d1
0000A35C 1001                       		move.b	d1,d0
0000A35E 0241 0007                  		andi.w	#7,d1
0000A362 0C41 0007                  		cmpi.w	#7,d1
0000A366 6600                       		bne.s	loc_9B80
0000A368 7206                       		moveq	#6,d1
0000A36A                            
0000A36A                            loc_9B80:
0000A36A 4841                       		swap	d1
0000A36C 323C 0000                  		move.w	#0,d1
0000A370 E808                       		lsr.b	#4,d0
0000A372 D040                       		add.w	d0,d0
0000A374 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A378 4885                       		ext.w	d5
0000A37A 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A37E 4886                       		ext.w	d6
0000A380 2248                       		movea.l	a0,a1
0000A382 3428 0008                  		move.w	8(a0),d2
0000A386 3628 000C                  		move.w	$C(a0),d3
0000A38A E20C                       		lsr.b	#1,d4
0000A38C 6500                       		bcs.s	loc_9C02
0000A38E 0892 0007                  		bclr	#7,(a2)
0000A392 6000                       		bra.s	loc_9BBA
0000A394                            ; ===========================================================================
0000A394                            
0000A394                            Obj25_MakeRings:
0000A394 4841                       		swap	d1
0000A396 E20C                       		lsr.b	#1,d4
0000A398 6500                       		bcs.s	loc_9C02
0000A39A 0892 0007                  		bclr	#7,(a2)
0000A39E 6100 0000                  		bsr.w	SingleObjLoad
0000A3A2 6600                       		bne.s	loc_9C0E
0000A3A4                            
0000A3A4                            loc_9BBA:				; XREF: Obj25_Main
0000A3A4 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A3A8 5429 0024                  		addq.b	#2,$24(a1)
0000A3AC 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A3B0 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A3B6 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A3BA 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3C2 337C 06CA 0002             		move.w    #$0000|($D940/$20),2(a1)
0000A3C8 137C 0004 0001             		move.b	#4,1(a1)
0000A3CE 137C 0002 0018             		move.b	#2,$18(a1)
0000A3D4 137C 0047 0020             		move.b	#$47,$20(a1)
0000A3DA 137C 0008 0019             		move.b	#8,$19(a1)
0000A3E0 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A3E6 1341 0034                  		move.b	d1,$34(a1)
0000A3EA                            
0000A3EA                            loc_9C02:
0000A3EA 5241                       		addq.w	#1,d1
0000A3EC D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A3EE D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A3F0 4841                       		swap	d1
0000A3F2 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A3F6                            
0000A3F6                            loc_9C0E:
0000A3F6 0812 0000                  		btst	#0,(a2)
0000A3FA 6600 0000                  		bne.w	DeleteObject
0000A3FE                            
0000A3FE                            Obj25_Animate:				; XREF: Obj25_Index
0000A3FE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A404 6100 0000                  		bsr.w	DisplaySprite
0000A408 3028 0032                  		move.w	$32(a0),d0
0000A40C 0240 FF80                  		andi.w	#$FF80,d0
0000A410 3238 F700                  		move.w	($FFFFF700).w,d1
0000A414 0441 0080                  		subi.w	#$80,d1
0000A418 0241 FF80                  		andi.w	#$FF80,d1
0000A41C 9041                       		sub.w	d1,d0
0000A41E 0C40 0280                  		cmpi.w	#$280,d0
0000A422 6200                       		bhi.s	Obj25_Delete
0000A424 4E75                       		rts	
0000A426                            ; ===========================================================================
0000A426                            
0000A426                            Obj25_Collect:				; XREF: Obj25_Index
0000A426 5428 0024                  		addq.b	#2,$24(a0)
0000A42A 117C 0000 0020             		move.b	#0,$20(a0)
0000A430 117C 0001 0018             		move.b	#1,$18(a0)
0000A436 6100 0000                  		bsr.w	CollectRing
0000A43A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A43E 7000                       		moveq	#0,d0
0000A440 1028 0023                  		move.b	$23(a0),d0
0000A444 1228 0034                  		move.b	$34(a0),d1
0000A448 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A44C                            
0000A44C                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A44C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A452 6100 0000                  		bsr.w	AnimateSprite
0000A456 6000 0000                  		bra.w	DisplaySprite
0000A45A                            ; ===========================================================================
0000A45A                            
0000A45A                            Obj25_Delete:				; XREF: Obj25_Index
0000A45A 6000 0000                  		bra.w	DeleteObject
0000A45E                            
0000A45E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A45E                            
0000A45E                            
0000A45E                            CollectRing:				; XREF: Obj25_Collect
0000A45E 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A462 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A468 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A46C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A472 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A474 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A47A 6700                       		beq.s	loc_9CA4
0000A47C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A482 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A484 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A48A 6600                       		bne.s	Obj25_PlaySnd
0000A48C                            
0000A48C                            loc_9CA4:
0000A48C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A490 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A494 303C 00BF                  		move.w	#$BF,d0		; play extra life music
0000A498                            
0000A498                            Obj25_PlaySnd:
0000A498 4EF9 0000 11B4             		jmp	(PlaySound_Special).l
0000A49E                            		
0000A49E                            Obj25_FakeRing:
0000A49E 303C 00C4                  		move.w	#$C4,d0		; play ring sound
0000A4A2 4EF9 0000 11B4             		jmp	(PlaySound_Special).l
0000A4A8                            ; End of function CollectRing
0000A4A8                            
0000A4A8                            ; ===========================================================================
0000A4A8                            ; ---------------------------------------------------------------------------
0000A4A8                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A4A8                            ; ---------------------------------------------------------------------------
0000A4A8                            
0000A4A8                            Obj37:					; XREF: Obj_Index
0000A4A8 7000                       		moveq	#0,d0
0000A4AA 1028 0024                  		move.b	$24(a0),d0
0000A4AE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A4B2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A4B6                            ; ===========================================================================
0000A4B6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A4B8 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A4BA 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A4BC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A4BE 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A4C0                            ; ===========================================================================
0000A4C0                            
0000A4C0                            Obj37_CountRings:			; XREF: Obj37_Index
0000A4C0 2248                       		movea.l	a0,a1
0000A4C2 7A00                       		moveq	#0,d5
0000A4C4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A4C8 7020                       		moveq	#32,d0
0000A4CA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A4CC 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A4CE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A4D0                            
0000A4D0                            loc_9CDE:
0000A4D0 5345                       		subq.w	#1,d5
0000A4D2 383C 0288                  		move.w	#$288,d4
0000A4D6 6000                       		bra.s	Obj37_MakeRings
0000A4D8                            ; ===========================================================================
0000A4D8                            
0000A4D8                            Obj37_Loop:
0000A4D8 6100 0000                  		bsr.w	SingleObjLoad
0000A4DC 6600 0000                  		bne.w	Obj37_ResetCounter
0000A4E0                            
0000A4E0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A4E0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A4E4 5429 0024                  		addq.b	#2,$24(a1)
0000A4E8 137C 0008 0016             		move.b	#8,$16(a1)
0000A4EE 137C 0008 0017             		move.b	#8,$17(a1)
0000A4F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A4FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A500 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A508 337C 06CA 0002             		move.w  #$0000|($D940/$20),2(a1)
0000A50E 137C 0004 0001             		move.b	#4,1(a1)
0000A514 137C 0003 0018             		move.b	#3,$18(a1)
0000A51A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A520 137C 0008 0019             		move.b	#8,$19(a1)
0000A526 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A52C 4A44                       		tst.w	d4
0000A52E 6B00                       		bmi.s	loc_9D62
0000A530 3004                       		move.w	d4,d0
0000A532 6100 8830                  		bsr.w	CalcSine
0000A536 3404                       		move.w	d4,d2
0000A538 E04A                       		lsr.w	#8,d2
0000A53A E560                       		asl.w	d2,d0
0000A53C E561                       		asl.w	d2,d1
0000A53E 3400                       		move.w	d0,d2
0000A540 3601                       		move.w	d1,d3
0000A542 0604 0010                  		addi.b	#$10,d4
0000A546 6400                       		bcc.s	loc_9D62
0000A548 0444 0080                  		subi.w	#$80,d4
0000A54C 6400                       		bcc.s	loc_9D62
0000A54E 383C 0288                  		move.w	#$288,d4
0000A552                            
0000A552                            loc_9D62:
0000A552 3342 0010                  		move.w	d2,$10(a1)
0000A556 3343 0012                  		move.w	d3,$12(a1)
0000A55A 4442                       		neg.w	d2
0000A55C 4444                       		neg.w	d4
0000A55E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A562                            
0000A562                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A562 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A568 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A56E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A574 303C 00C6                  		move.w	#$C6,d0
0000A578 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A57E                            
0000A57E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A57E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A584 6100 0000                  		bsr.w	SpeedToPos
0000A588 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A58E 6B00                       		bmi.s	Obj37_ChkDel
0000A590 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A594 D007                       		add.b	d7,d0
0000A596 0200 0003                  		andi.b	#3,d0
0000A59A 6600                       		bne.s	Obj37_ChkDel
0000A59C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A5A2 4A41                       		tst.w	d1
0000A5A4 6A00                       		bpl.s	Obj37_ChkDel
0000A5A6 D368 000C                  		add.w	d1,$C(a0)
0000A5AA 3028 0012                  		move.w	$12(a0),d0
0000A5AE E440                       		asr.w	#2,d0
0000A5B0 9168 0012                  		sub.w	d0,$12(a0)
0000A5B4 4468 0012                  		neg.w	$12(a0)
0000A5B8                            
0000A5B8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A5B8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A5BC 6700                       		beq.s	Obj37_Delete
0000A5BE 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000A5C4 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000A5C8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A5CC 0640 00E0                  		addi.w	#$E0,d0
0000A5D0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A5D4 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A5D6 6000 0000                  		bra.w	DisplaySprite
0000A5DA                            ; ===========================================================================
0000A5DA                            
0000A5DA                            Obj37_Collect:				; XREF: Obj37_Index
0000A5DA 5428 0024                  		addq.b	#2,$24(a0)
0000A5DE 117C 0000 0020             		move.b	#0,$20(a0)
0000A5E4 117C 0001 0018             		move.b	#1,$18(a0)
0000A5EA 6100 FE72                  		bsr.w	CollectRing
0000A5EE                            
0000A5EE                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A5EE 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A5F4 6100 0000                  		bsr.w	AnimateSprite
0000A5F8 6000 0000                  		bra.w	DisplaySprite
0000A5FC                            ; ===========================================================================
0000A5FC                            
0000A5FC                            Obj37_Delete:				; XREF: Obj37_Index
0000A5FC 6000 0000                  		bra.w	DeleteObject
0000A600                            ; ===========================================================================
0000A600                            ; ---------------------------------------------------------------------------
0000A600                            ; Object 4B - giant ring for entry to special stage
0000A600                            ; ---------------------------------------------------------------------------
0000A600                            
0000A600                            Obj4B:					; XREF: Obj_Index
0000A600 7000                       		moveq	#0,d0
0000A602 1028 0024                  		move.b	$24(a0),d0
0000A606 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A60A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A60E                            ; ===========================================================================
0000A60E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A610 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A612 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A614 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A616                            ; ===========================================================================
0000A616                            
0000A616                            Obj4B_Main:				; XREF: Obj4B_Index
0000A616 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A61E 317C 2400 0002             		move.w	#$2400,2(a0)
0000A624 0028 0004 0001             		ori.b	#4,1(a0)
0000A62A 117C 0040 0019             		move.b	#$40,$19(a0)
0000A630 4A28 0001                  		tst.b	1(a0)
0000A634 6A00                       		bpl.s	Obj4B_Animate
0000A636 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A63C 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A640 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A646 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A648 4E75                       		rts	
0000A64A                            ; ===========================================================================
0000A64A                            
0000A64A                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A64A 5428 0024                  		addq.b	#2,$24(a0)
0000A64E 117C 0002 0018             		move.b	#2,$18(a0)
0000A654 117C 0052 0020             		move.b	#$52,$20(a0)
0000A65A 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A660                            
0000A660                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A660 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A666 3028 0008                  		move.w	8(a0),d0
0000A66A 0240 FF80                  		andi.w	#$FF80,d0
0000A66E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A672 0441 0080                  		subi.w	#$80,d1
0000A676 0241 FF80                  		andi.w	#$FF80,d1
0000A67A 9041                       		sub.w	d1,d0
0000A67C 0C40 0280                  		cmpi.w	#$280,d0
0000A680 6200 0000                  		bhi.w	DeleteObject
0000A684 6000 0000                  		bra.w	DisplaySprite
0000A688                            ; ===========================================================================
0000A688                            
0000A688                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A688 5528 0024                  		subq.b	#2,$24(a0)
0000A68C 117C 0000 0020             		move.b	#0,$20(a0)
0000A692 6100 0000                  		bsr.w	SingleObjLoad
0000A696 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A69A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A69E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A6A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A6AA 2348 003C                  		move.l	a0,$3C(a1)
0000A6AE 3038 D008                  		move.w	($FFFFD008).w,d0
0000A6B2 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A6B6 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A6B8 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A6BE                            
0000A6BE                            Obj4B_PlaySnd:
0000A6BE 303C 00C3                  		move.w	#$C3,d0
0000A6C2 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A6C8 6096                       		bra.s	Obj4B_Animate
0000A6CA                            ; ===========================================================================
0000A6CA                            
0000A6CA                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A6CA 6000 0000                  		bra.w	DeleteObject
0000A6CE                            ; ===========================================================================
0000A6CE                            ; ---------------------------------------------------------------------------
0000A6CE                            ; Object 7C - flash effect when	you collect the	giant ring
0000A6CE                            ; ---------------------------------------------------------------------------
0000A6CE                            
0000A6CE                            Obj7C:					; XREF: Obj_Index
0000A6CE 7000                       		moveq	#0,d0
0000A6D0 1028 0024                  		move.b	$24(a0),d0
0000A6D4 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A6D8 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A6DC                            ; ===========================================================================
0000A6DC 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A6DE 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A6E0 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A6E2                            ; ===========================================================================
0000A6E2                            
0000A6E2                            Obj7C_Main:				; XREF: Obj7C_Index
0000A6E2 5428 0024                  		addq.b	#2,$24(a0)
0000A6E6 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A6EE 317C 2462 0002             		move.w	#$2462,2(a0)
0000A6F4 0028 0004 0001             		ori.b	#4,1(a0)
0000A6FA 117C 0000 0018             		move.b	#0,$18(a0)
0000A700 117C 0020 0019             		move.b	#$20,$19(a0)
0000A706 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A70C                            
0000A70C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A70C 6100                       		bsr.s	Obj7C_Collect
0000A70E 3028 0008                  		move.w	8(a0),d0
0000A712 0240 FF80                  		andi.w	#$FF80,d0
0000A716 3238 F700                  		move.w	($FFFFF700).w,d1
0000A71A 0441 0080                  		subi.w	#$80,d1
0000A71E 0241 FF80                  		andi.w	#$FF80,d1
0000A722 9041                       		sub.w	d1,d0
0000A724 0C40 0280                  		cmpi.w	#$280,d0
0000A728 6200 0000                  		bhi.w	DeleteObject
0000A72C 6000 0000                  		bra.w	DisplaySprite
0000A730                            
0000A730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A730                            
0000A730                            
0000A730                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A730 5328 001E                  		subq.b	#1,$1E(a0)
0000A734 6A00                       		bpl.s	locret_9F76
0000A736 117C 0001 001E             		move.b	#1,$1E(a0)
0000A73C 5228 001A                  		addq.b	#1,$1A(a0)
0000A740 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A746 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A748 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A74E 6600                       		bne.s	locret_9F76	; if not, branch
0000A750 2268 003C                  		movea.l	$3C(a0),a1
0000A754 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A75A 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A760 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A766 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A76A 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A76E                            
0000A76E                            locret_9F76:
0000A76E 4E75                       		rts	
0000A770                            ; ===========================================================================
0000A770                            
0000A770                            Obj7C_End:				; XREF: Obj7C_Collect
0000A770 5428 0024                  		addq.b	#2,$24(a0)
0000A774 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A77A 588F                       		addq.l	#4,sp
0000A77C 4E75                       		rts	
0000A77E                            ; End of function Obj7C_Collect
0000A77E                            
0000A77E                            ; ===========================================================================
0000A77E                            
0000A77E                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A77E 6000 0000                  		bra.w	DeleteObject
0000A782                            ; ===========================================================================
0000A782                            Ani_obj25:
0000A782                            	include "_anim\obj25.asm"
0000A782                            ; ---------------------------------------------------------------------------
0000A782                            ; Animation script - ring
0000A782                            ; ---------------------------------------------------------------------------
0000A782 0000                       		dc.w byte_9F8C-Ani_obj25
0000A784 0AFC                       byte_9F8C:	dc.b $A, $FC
0000A786                            		even
0000A786                            		even
0000A786                            
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            ; Sprite mappings - rings
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            Map_obj25:
0000A786                            	include "_maps\obj25.asm"
0000A786                            ; ================================================================================
0000A786                            ; Sprite Mappings - generated by Flex 2 Sun Jun 24 2018 11:08:16 GMT-0700 (Pacific Daylight Time)
0000A786                            ; ================================================================================
0000A786                            
0000A786                            DATA0O0BJ4RXQYWE:
0000A786 0000 0000                  	dc.w DATA0O0BJ4RXQYWE_0-DATA0O0BJ4RXQYWE, DATA0O0BJ4RXQYWE_1-DATA0O0BJ4RXQYWE
0000A78A 0000 0000                  	dc.w DATA0O0BJ4RXQYWE_2-DATA0O0BJ4RXQYWE, DATA0O0BJ4RXQYWE_3-DATA0O0BJ4RXQYWE
0000A78E 0000 0000                  	dc.w DATA0O0BJ4RXQYWE_4-DATA0O0BJ4RXQYWE, DATA0O0BJ4RXQYWE_5-DATA0O0BJ4RXQYWE
0000A792 0000 0000                  	dc.w DATA0O0BJ4RXQYWE_6-DATA0O0BJ4RXQYWE, DATA0O0BJ4RXQYWE_7-DATA0O0BJ4RXQYWE
0000A796 0000 0000                  	dc.w DATA0O0BJ4RXQYWE_8-DATA0O0BJ4RXQYWE, DATA0O0BJ4RXQYWE_9-DATA0O0BJ4RXQYWE
0000A79A 0000                       	dc.w DATA0O0BJ4RXQYWE_A-DATA0O0BJ4RXQYWE
0000A79C 02                         DATA0O0BJ4RXQYWE_0: dc.b $2
0000A79D F801 0000 F8               	dc.b $F8, $1, $0, $0, $F8
0000A7A2 F801 0800 00               	dc.b $F8, $1, $8, $0, $0
0000A7A7 01                         DATA0O0BJ4RXQYWE_1: dc.b $1
0000A7A8 F805 000A F8               	dc.b $F8, $5, $0, $A, $F8
0000A7AD 01                         DATA0O0BJ4RXQYWE_2: dc.b $1
0000A7AE F805 0004 F8               	dc.b $F8, $5, $0, $4, $F8
0000A7B3 01                         DATA0O0BJ4RXQYWE_3: dc.b $1
0000A7B4 F805 000E F8               	dc.b $F8, $5, $0, $E, $F8
0000A7B9 02                         DATA0O0BJ4RXQYWE_4: dc.b $2
0000A7BA F801 0002 F8               	dc.b $F8, $1, $0, $2, $F8
0000A7BF F801 0012 00               	dc.b $F8, $1, $0, $12, $0
0000A7C4 01                         DATA0O0BJ4RXQYWE_5: dc.b $1
0000A7C5 F801 0008 FC               	dc.b $F8, $1, $0, $8, $FC
0000A7CA 02                         DATA0O0BJ4RXQYWE_6: dc.b $2
0000A7CB F801 0802 00               	dc.b $F8, $1, $8, $2, $0
0000A7D0 F801 0812 F8               	dc.b $F8, $1, $8, $12, $F8
0000A7D5 01                         DATA0O0BJ4RXQYWE_7: dc.b $1
0000A7D6 F805 080E F8               	dc.b $F8, $5, $8, $E, $F8
0000A7DB 01                         DATA0O0BJ4RXQYWE_8: dc.b $1
0000A7DC F805 0804 F8               	dc.b $F8, $5, $8, $4, $F8
0000A7E1 01                         DATA0O0BJ4RXQYWE_9: dc.b $1
0000A7E2 F805 080A F8               	dc.b $F8, $5, $8, $A, $F8
0000A7E7 00                         DATA0O0BJ4RXQYWE_A: dc.b $0
0000A7E8                            	even
0000A7E8                            	even
0000A7E8                            
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8                            ; Sprite mappings - giant ring
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8                            Map_obj4B:
0000A7E8                            	include "_maps\obj4B.asm"
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8                            ; Sprite mappings - giant ring
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A7EC 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A7F0 0A                         byte_9FDA:	dc.b $A
0000A7F1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A7F6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A7FB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A800 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A805 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A80A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A80F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A814 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A819 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A81E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A823 08                         byte_A00D:	dc.b 8
0000A824 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A829 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A82E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A833 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A838 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A83D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A842 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A847 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A84C 04                         byte_A036:	dc.b 4
0000A84D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A852 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A857 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A85C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A861 08                         byte_A04B:	dc.b 8
0000A862 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A867 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A86C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A871 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A876 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A87B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A880 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A885 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A88A                            		even
0000A88A                            		even
0000A88A                            
0000A88A                            ; ---------------------------------------------------------------------------
0000A88A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A88A                            ; ---------------------------------------------------------------------------
0000A88A                            Map_obj7C:
0000A88A                            	include "_maps\obj7C.asm"
0000A88A                            ; ---------------------------------------------------------------------------
0000A88A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A88A                            ; ---------------------------------------------------------------------------
0000A88A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A88E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A892 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A896 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A89A 02                         byte_A084:	dc.b 2
0000A89B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A8A0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A8A5 04                         byte_A08F:	dc.b 4
0000A8A6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A8AB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A8B0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A8B5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A8BA 04                         byte_A0A4:	dc.b 4
0000A8BB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A8C0 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A8C5 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A8CA 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A8CF 04                         byte_A0B9:	dc.b 4
0000A8D0 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A8D5 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A8DA 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A8DF 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A8E4 04                         byte_A0CE:	dc.b 4
0000A8E5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A8EA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A8EF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A8F4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A8F9 04                         byte_A0E3:	dc.b 4
0000A8FA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A8FF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A904 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A909 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A90E 02                         byte_A0F8:	dc.b 2
0000A90F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A914 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A919 04                         byte_A103:	dc.b 4
0000A91A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A91F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A924 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A929 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A92E                            		even
0000A92E                            		even
0000A92E                            
0000A92E                            ; ===========================================================================
0000A92E                            ; ---------------------------------------------------------------------------
0000A92E                            ; Object 26 - monitors
0000A92E                            ; ---------------------------------------------------------------------------
0000A92E                            
0000A92E                            Obj26:					; XREF: Obj_Index
0000A92E 7000                       		moveq	#0,d0
0000A930 1028 0024                  		move.b	$24(a0),d0
0000A934 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A938 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A93C                            ; ===========================================================================
0000A93C 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A93E 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A940 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A942 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A944 0000                       		dc.w Obj26_Display-Obj26_Index
0000A946                            ; ===========================================================================
0000A946                            
0000A946                            Obj26_Main:				; XREF: Obj26_Index
0000A946 5428 0024                  		addq.b	#2,$24(a0)
0000A94A 117C 000E 0016             		move.b	#$E,$16(a0)
0000A950 117C 000E 0017             		move.b	#$E,$17(a0)
0000A956 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A95E 317C 0680 0002             		move.w	#$680,2(a0)
0000A964 117C 0004 0001             		move.b	#4,1(a0)
0000A96A 117C 0003 0018             		move.b	#3,$18(a0)
0000A970 117C 000F 0019             		move.b	#$F,$19(a0)
0000A976 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A97A 7000                       		moveq	#0,d0
0000A97C 1028 0023                  		move.b	$23(a0),d0
0000A980 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A986 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A98C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A98E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A994 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A99A 4E75                       		rts	
0000A99C                            ; ===========================================================================
0000A99C                            
0000A99C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A99C 117C 0046 0020             		move.b	#$46,$20(a0)
0000A9A2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A9A8                            
0000A9A8                            Obj26_Solid:				; XREF: Obj26_Index
0000A9A8 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A9AC 6700                       		beq.s	loc_A1EC	; if not, branch
0000A9AE 5500                       		subq.b	#2,d0
0000A9B0 6600                       		bne.s	Obj26_Fall
0000A9B2 7200                       		moveq	#0,d1
0000A9B4 1228 0019                  		move.b	$19(a0),d1
0000A9B8 0641 000B                  		addi.w	#$B,d1
0000A9BC 6100 D3A6                  		bsr.w	ExitPlatform
0000A9C0 0829 0003 0022             		btst	#3,$22(a1)
0000A9C6 6600 0000                  		bne.w	loc_A1BC
0000A9CA 4228 0025                  		clr.b	$25(a0)
0000A9CE 6000 0000                  		bra.w	Obj26_Animate
0000A9D2                            ; ===========================================================================
0000A9D2                            
0000A9D2                            loc_A1BC:				; XREF: Obj26_Solid
0000A9D2 363C 0010                  		move.w	#$10,d3
0000A9D6 3428 0008                  		move.w	8(a0),d2
0000A9DA 6100 D8E6                  		bsr.w	MvSonicOnPtfm
0000A9DE 6000 0000                  		bra.w	Obj26_Animate
0000A9E2                            ; ===========================================================================
0000A9E2                            
0000A9E2                            Obj26_Fall:				; XREF: Obj26_Solid
0000A9E2 6100 0000                  		bsr.w	ObjectFall
0000A9E6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A9EC 4A41                       		tst.w	d1
0000A9EE 6A00 0000                  		bpl.w	Obj26_Animate
0000A9F2 D368 000C                  		add.w	d1,$C(a0)
0000A9F6 4268 0012                  		clr.w	$12(a0)
0000A9FA 4228 0025                  		clr.b	$25(a0)
0000A9FE 6000 0000                  		bra.w	Obj26_Animate
0000AA02                            ; ===========================================================================
0000AA02                            
0000AA02                            loc_A1EC:				; XREF: Obj26_Solid
0000AA02 323C 001A                  		move.w	#$1A,d1
0000AA06 343C 000F                  		move.w	#$F,d2
0000AA0A 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA0E 6700 0000                  		beq.w	loc_A25C
0000AA12 4A69 0012                  		tst.w	$12(a1)
0000AA16 6B00                       		bmi.s	loc_A20A
0000AA18 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AA1E 6700                       		beq.s	loc_A25C	; if yes, branch
0000AA20                            
0000AA20                            loc_A20A:
0000AA20 4A41                       		tst.w	d1
0000AA22 6A00                       		bpl.s	loc_A220
0000AA24 9769 000C                  		sub.w	d3,$C(a1)
0000AA28 6100 D228                  		bsr.w	loc_74AE
0000AA2C 117C 0002 0025             		move.b	#2,$25(a0)
0000AA32 6000 0000                  		bra.w	Obj26_Animate
0000AA36                            ; ===========================================================================
0000AA36                            
0000AA36                            loc_A220:
0000AA36 4A40                       		tst.w	d0
0000AA38 6700 0000                  		beq.w	loc_A246
0000AA3C 6B00                       		bmi.s	loc_A230
0000AA3E 4A69 0010                  		tst.w	$10(a1)
0000AA42 6B00                       		bmi.s	loc_A246
0000AA44 6000                       		bra.s	loc_A236
0000AA46                            ; ===========================================================================
0000AA46                            
0000AA46                            loc_A230:
0000AA46 4A69 0010                  		tst.w	$10(a1)
0000AA4A 6A00                       		bpl.s	loc_A246
0000AA4C                            
0000AA4C                            loc_A236:
0000AA4C 9169 0008                  		sub.w	d0,8(a1)
0000AA50 337C 0000 0014             		move.w	#0,$14(a1)
0000AA56 337C 0000 0010             		move.w	#0,$10(a1)
0000AA5C                            
0000AA5C                            loc_A246:
0000AA5C 0829 0001 0022             		btst	#1,$22(a1)
0000AA62 6600                       		bne.s	loc_A26A
0000AA64 08E9 0005 0022             		bset	#5,$22(a1)
0000AA6A 08E8 0005 0022             		bset	#5,$22(a0)
0000AA70 6000                       		bra.s	Obj26_Animate
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            loc_A25C:
0000AA72 0828 0005 0022             		btst	#5,$22(a0)
0000AA78 6700                       		beq.s	Obj26_Animate
0000AA7A 337C 0001 001C             		move.w	#1,$1C(a1)
0000AA80                            
0000AA80                            loc_A26A:
0000AA80 08A8 0005 0022             		bclr	#5,$22(a0)
0000AA86 08A9 0005 0022             		bclr	#5,$22(a1)
0000AA8C                            
0000AA8C                            Obj26_Animate:				; XREF: Obj26_Index
0000AA8C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AA92 6100 0000                  		bsr.w	AnimateSprite
0000AA96                            
0000AA96                            Obj26_Display:				; XREF: Obj26_Index
0000AA96 6100 0000                  		bsr.w	DisplaySprite
0000AA9A 3028 0008                  		move.w	8(a0),d0
0000AA9E 0240 FF80                  		andi.w	#$FF80,d0
0000AAA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000AAA6 0441 0080                  		subi.w	#$80,d1
0000AAAA 0241 FF80                  		andi.w	#$FF80,d1
0000AAAE 9041                       		sub.w	d1,d0
0000AAB0 0C40 0280                  		cmpi.w	#$280,d0
0000AAB4 6200 0000                  		bhi.w	DeleteObject
0000AAB8 4E75                       		rts	
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AABA 4238 FFE9                  		clr.b ($FFFFFFE9).w ; clear Pepsi drop move flag
0000AABE 4238 FFDF                  		clr.b ($FFFFFFDF).w ; clear double jump flag
0000AAC2 4238 FFEB                  		clr.b ($FFFFFFEB).w ; clear air dash flag
0000AAC6 5428 0024                  		addq.b	#2,$24(a0)
0000AACA 117C 0000 0020             		move.b	#0,$20(a0)
0000AAD0 6100 0000                  		bsr.w	SingleObjLoad
0000AAD4 6600                       		bne.s	Obj26_Explode
0000AAD6 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AADA 3368 0008 0008             		move.w	8(a0),8(a1)
0000AAE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AAE6 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AAEC                            
0000AAEC                            Obj26_Explode:
0000AAEC 6100 0000                  		bsr.w	SingleObjLoad
0000AAF0 6600                       		bne.s	Obj26_SetBroken
0000AAF2 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000AAF6 5429 0024                  		addq.b	#2,$24(a1)
0000AAFA 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB00 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB06                            
0000AB06                            Obj26_SetBroken:
0000AB06 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB0A 7000                       		moveq	#0,d0
0000AB0C 1028 0023                  		move.b	$23(a0),d0
0000AB10 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AB16 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AB1C 6000 0000                  		bra.w	DisplaySprite
0000AB20                            ; ===========================================================================
0000AB20                            ; ---------------------------------------------------------------------------
0000AB20                            ; Object 2E - contents of monitors
0000AB20                            ; ---------------------------------------------------------------------------
0000AB20                            
0000AB20                            Obj2E:					; XREF: Obj_Index
0000AB20 7000                       		moveq	#0,d0
0000AB22 1028 0024                  		move.b	$24(a0),d0
0000AB26 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AB2A 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AB2E 6000 0000                  		bra.w	DisplaySprite
0000AB32                            ; ===========================================================================
0000AB32 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AB34 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AB36 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AB38                            ; ===========================================================================
0000AB38                            
0000AB38                            Obj2E_Main:				; XREF: Obj2E_Index
0000AB38 5428 0024                  		addq.b	#2,$24(a0)
0000AB3C 317C 0680 0002             		move.w	#$680,2(a0)
0000AB42 117C 0024 0001             		move.b	#$24,1(a0)
0000AB48 117C 0003 0018             		move.b	#3,$18(a0)
0000AB4E 117C 0008 0019             		move.b	#8,$19(a0)
0000AB54 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AB5A 7000                       		moveq	#0,d0
0000AB5C 1028 001C                  		move.b	$1C(a0),d0
0000AB60 5400                       		addq.b	#2,d0
0000AB62 1140 001A                  		move.b	d0,$1A(a0)
0000AB66 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AB6C D000                       		add.b	d0,d0
0000AB6E D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AB72 5249                       		addq.w	#1,a1
0000AB74 2149 0004                  		move.l	a1,4(a0)
0000AB78                            
0000AB78                            Obj2E_Move:				; XREF: Obj2E_Index
0000AB78 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AB7C 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AB80 6100 0000                  		bsr.w	SpeedToPos
0000AB84 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AB8A 4E75                       		rts	
0000AB8C                            ; ===========================================================================
0000AB8C                            
0000AB8C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AB8C 5428 0024                  		addq.b	#2,$24(a0)
0000AB90 317C 001D 001E             		move.w	#29,$1E(a0)
0000AB96 1028 001C                  		move.b	$1C(a0),d0
0000AB9A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AB9E 6600                       		bne.s	Obj2E_ChkSonic
0000ABA0 5278 F5C0                  		addi.w	#1,($FFFFF5C0)	; add 1 pizza
0000ABA4 31FC 0001 F5C0             		move.w	#1,($FFFFF5C0)	; activate pizza mode
0000ABAA 708D                       		moveq   #$FFFFFF8D,d0 
0000ABAC 4EB8 118C                  		jsr     PlaySample		; play pizza theme
0000ABB0                            		
0000ABB0                            PizzaPee:
0000ABB0 303C 008E                  		move.w	#$8E,d0
0000ABB4 4EF9 0000 11AE             		jmp	(PlaySound).l	; play nothing
0000ABBA                            ; ===========================================================================
0000ABBA                            
0000ABBA                            Obj2E_ChkSonic:
0000ABBA 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000ABBE 6600                       		bne.s	Obj2E_ChkShoes
0000ABC0                            
0000ABC0                            ExtraLife:
0000ABC0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ABC4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000ABC8 303C 00BF                  		move.w	#$BF,d0		; doing what literally every rom hacker does and lazily changes the sound
0000ABCC 4EF9 0000 11AE             		jmp	(PlaySound).l	; play extra life music
0000ABD2                            ; ===========================================================================
0000ABD2                            
0000ABD2                            Obj2E_ChkShoes:
0000ABD2 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000ABD6 6600                       		bne.s	Obj2E_ChkShield
0000ABD8 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000ABDE 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000ABE4 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000ABEA 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000ABF0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000ABF6 303C 00E2                  		move.w	#$E2,d0
0000ABFA 4EF9 0000 11AE             		jmp	(PlaySound).l	; Speed	up the music
0000AC00                            ; ===========================================================================
0000AC00                            
0000AC00                            Obj2E_ChkShield:
0000AC00 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC04 6600                       		bne.s	Obj2E_ChkInvinc
0000AC06 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC0C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC12 303C 00AF                  		move.w	#$AF,d0
0000AC16 4EF9 0000 11AE             		jmp	(PlaySound).l	; play shield sound
0000AC1C                            ; ===========================================================================
0000AC1C                            
0000AC1C                            Obj2E_ChkInvinc:
0000AC1C 0C00 0005                                  cmpi.b  #5,d0           ; does monitor contain invincibility?
0000AC20 6600                                       bne.s   Obj2E_ChkRings
0000AC22 11FC 0001 FE2D                             move.b  #1,($FFFFFE2D).w        ; Set Invisibility to 1
0000AC28 31FC 04B0 D032                             move.w  #$4B0,($FFFFD032).w     ; Set Invisibility timer to 4B0
0000AC2E 11FC 004A D200                             move.b  #$4A,($FFFFD200).w ; load stars object ($3801)
0000AC34 11FC 0001 D21C                             move.b  #1,($FFFFD21C).w
0000AC3A 11FC 004A D240                             move.b  #$4A,($FFFFD240).w ; load stars object ($3802)
0000AC40 11FC 0002 D25C                             move.b  #2,($FFFFD25C).w
0000AC46 11FC 004A D280                             move.b  #$4A,($FFFFD280).w ; load stars object ($3803)
0000AC4C 11FC 0003 D29C                             move.b  #3,($FFFFD29C).w
0000AC52 11FC 004A D2C0                             move.b  #$4A,($FFFFD2C0).w ; load stars object ($3804)
0000AC58 11FC 0004 D2DC                             move.b  #4,($FFFFD2DC).w
0000AC5E 4A38 F7AA                                  tst.b   ($FFFFF7AA).w           ; is boss mode on?
0000AC62 6600                                       bne.s   DontPlayMusic           ; If so, don't play music
0000AC64 0C78 000C FE14                             cmpi.w  #$C,($FFFFFE14).w       ; Check if Sonic has air left
0000AC6A 6300                                       bls.s   DontPlayMusic           ; If so, don't play music
0000AC6C 303C 0087                                  move.w  #$87,d0                     ; Load Invisibility music
0000AC70 4EF9 0000 11AE                             jmp     (PlaySound).l        
0000AC76                            DontPlayMusic:
0000AC76 4E75                                       rts
0000AC78                            ; ===========================================================================
0000AC78                            
0000AC78                            Obj2E_NoMusic:
0000AC78 4E75                       		rts	
0000AC7A                            ; ===========================================================================
0000AC7A                            
0000AC7A                            Obj2E_ChkRings:
0000AC7A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AC7E 6600                       		bne.s	Obj2E_ChkS
0000AC80 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AC86 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AC8C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AC92 6500                       		bcs.s	Obj2E_RingSound
0000AC94 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AC9A 6700 FF24                  		beq.w	ExtraLife
0000AC9E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000ACA4 6500                       		bcs.s	Obj2E_RingSound
0000ACA6 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ACAC 6700 FF12                  		beq.w	ExtraLife
0000ACB0                            
0000ACB0                            Obj2E_RingSound:
0000ACB0 303C 00B5                  		move.w	#$B5,d0
0000ACB4 4EF9 0000 11AE             		jmp	(PlaySound).l	; play ring sound
0000ACBA                            ; ===========================================================================
0000ACBA                            
0000ACBA                            Obj2E_ChkS:
0000ACBA 0C00 0007                  		cmpi.b	#7,d0		; dos moneetorr cawntaan S pawer??? owo???
0000ACBE 6600 0000                  		bne.w	Obj2E_ChkGoggles ; no buldge >\\<
0000ACC2 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
0000ACC8 6700                       		beq.s	SMonitor_Encore	; *pounces on you*
0000ACCA 709D                       		moveq   #$FFFFFF9D,d0 ; notices BULDGE
0000ACCC 4EB8 118C                  		jsr     PlaySample		; owo whats this?
0000ACD0                            		
0000ACD0                            SMonitor_Encore:
0000ACD0 4EF8 37C2                  		jmp	LevSel_Credits
0000ACD4                            ; ===========================================================================
0000ACD4                            
0000ACD4                            Obj2E_ChkGoggles:
0000ACD4 0C00 0008                  		cmpi.b	#8,d0		; is monitor Pizza?
0000ACD8 6600 0000                  		bne.w	Obj2E_ChkEnd ; if not, branch
0000ACDC 31FC 0001 F5C0             		move.w	#1,($FFFFF5C0)	; activate pizza mode
0000ACE2                            		
0000ACE2                            Obj2E_ChkEnd:
0000ACE2 4E75                       		rts
0000ACE4                            		
0000ACE4                            ; ===========================================================================
0000ACE4                            
0000ACE4                            Obj2E_Delete:				; XREF: Obj2E_Index
0000ACE4 5368 001E                  		subq.w	#1,$1E(a0)
0000ACE8 6B00 0000                  		bmi.w	DeleteObject
0000ACEC 4E75                       		rts	
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Subroutine to	make the sides of a monitor solid
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            
0000ACEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACEE                            
0000ACEE                            
0000ACEE                            Obj26_SolidSides:			; XREF: loc_A1EC
0000ACEE 43F8 D000                  		lea	($FFFFD000).w,a1
0000ACF2 3029 0008                  		move.w	8(a1),d0
0000ACF6 9068 0008                  		sub.w	8(a0),d0
0000ACFA D041                       		add.w	d1,d0
0000ACFC 6B00                       		bmi.s	loc_A4E6
0000ACFE 3601                       		move.w	d1,d3
0000AD00 D643                       		add.w	d3,d3
0000AD02 B043                       		cmp.w	d3,d0
0000AD04 6200                       		bhi.s	loc_A4E6
0000AD06 1629 0016                  		move.b	$16(a1),d3
0000AD0A 4883                       		ext.w	d3
0000AD0C D443                       		add.w	d3,d2
0000AD0E 3629 000C                  		move.w	$C(a1),d3
0000AD12 9668 000C                  		sub.w	$C(a0),d3
0000AD16 D642                       		add.w	d2,d3
0000AD18 6B00                       		bmi.s	loc_A4E6
0000AD1A D442                       		add.w	d2,d2
0000AD1C B642                       		cmp.w	d2,d3
0000AD1E 6400                       		bcc.s	loc_A4E6
0000AD20 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD24 6B00                       		bmi.s	loc_A4E6
0000AD26 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD2C 6400                       		bcc.s	loc_A4E6
0000AD2E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD32 6600                       		bne.s	loc_A4E6
0000AD34 B240                       		cmp.w	d0,d1
0000AD36 6400                       		bcc.s	loc_A4DC
0000AD38 D241                       		add.w	d1,d1
0000AD3A 9041                       		sub.w	d1,d0
0000AD3C                            
0000AD3C                            loc_A4DC:
0000AD3C 0C43 0010                  		cmpi.w	#$10,d3
0000AD40 6500                       		bcs.s	loc_A4EA
0000AD42                            
0000AD42                            loc_A4E2:
0000AD42 7201                       		moveq	#1,d1
0000AD44 4E75                       		rts	
0000AD46                            ; ===========================================================================
0000AD46                            
0000AD46                            loc_A4E6:
0000AD46 7200                       		moveq	#0,d1
0000AD48 4E75                       		rts	
0000AD4A                            ; ===========================================================================
0000AD4A                            
0000AD4A                            loc_A4EA:
0000AD4A 7200                       		moveq	#0,d1
0000AD4C 1228 0019                  		move.b	$19(a0),d1
0000AD50 5841                       		addq.w	#4,d1
0000AD52 3401                       		move.w	d1,d2
0000AD54 D442                       		add.w	d2,d2
0000AD56 D269 0008                  		add.w	8(a1),d1
0000AD5A 9268 0008                  		sub.w	8(a0),d1
0000AD5E 6BE2                       		bmi.s	loc_A4E2
0000AD60 B242                       		cmp.w	d2,d1
0000AD62 64DE                       		bcc.s	loc_A4E2
0000AD64 72FF                       		moveq	#-1,d1
0000AD66 4E75                       		rts	
0000AD68                            ; End of function Obj26_SolidSides
0000AD68                            
0000AD68                            ; ===========================================================================
0000AD68                            Ani_obj26:
0000AD68                            	include "_anim\obj26.asm"
0000AD68                            ; ---------------------------------------------------------------------------
0000AD68                            ; Animation script - monitors
0000AD68                            ; ---------------------------------------------------------------------------
0000AD68 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AD6E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AD74 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AD7A 0000                       		dc.w byte_A582-Ani_obj26
0000AD7C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AD82 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AD8E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AD9A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADA6 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ADB2 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ADBE 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ADCA 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ADD6 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ADE2 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ADEA                            		even
0000ADEA                            		even
0000ADEA                            
0000ADEA                            ; ---------------------------------------------------------------------------
0000ADEA                            ; Sprite mappings - monitors
0000ADEA                            ; ---------------------------------------------------------------------------
0000ADEA                            Map_obj26:
0000ADEA                            	include "_maps\obj26.asm"
0000ADEA                            ; ================================================================================
0000ADEA                            ; Sprite Mappings - generated by Flex 2 Sun Oct 21 2018 08:24:56 GMT-0700 (Pacific Daylight Time)
0000ADEA                            ; ================================================================================
0000ADEA                            
0000ADEA                            DATAO4S1WSZEYZ:
0000ADEA 0000 0000                  	dc.w DATAO4S1WSZEYZ_0-DATAO4S1WSZEYZ, DATAO4S1WSZEYZ_1-DATAO4S1WSZEYZ
0000ADEE 0000 0000                  	dc.w DATAO4S1WSZEYZ_2-DATAO4S1WSZEYZ, DATAO4S1WSZEYZ_3-DATAO4S1WSZEYZ
0000ADF2 0000 0000                  	dc.w DATAO4S1WSZEYZ_4-DATAO4S1WSZEYZ, DATAO4S1WSZEYZ_5-DATAO4S1WSZEYZ
0000ADF6 0000 0000                  	dc.w DATAO4S1WSZEYZ_6-DATAO4S1WSZEYZ, DATAO4S1WSZEYZ_7-DATAO4S1WSZEYZ
0000ADFA 0000 0000                  	dc.w DATAO4S1WSZEYZ_8-DATAO4S1WSZEYZ, DATAO4S1WSZEYZ_9-DATAO4S1WSZEYZ
0000ADFE 0000 0000                  	dc.w DATAO4S1WSZEYZ_A-DATAO4S1WSZEYZ, DATAO4S1WSZEYZ_B-DATAO4S1WSZEYZ
0000AE02 02                         DATAO4S1WSZEYZ_0: dc.b $2
0000AE03 EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE08 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE0D 04                         DATAO4S1WSZEYZ_1: dc.b $4
0000AE0E F501 1008 F8               	dc.b $F5, $1, $10, $8, $F8
0000AE13 F501 1808 00               	dc.b $F5, $1, $18, $8, $0
0000AE18 EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE1D EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE22 04                         DATAO4S1WSZEYZ_2: dc.b $4
0000AE23 F501 0008 F8               	dc.b $F5, $1, $0, $8, $F8
0000AE28 F501 0808 00               	dc.b $F5, $1, $8, $8, $0
0000AE2D EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE32 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE37 03                         DATAO4S1WSZEYZ_3: dc.b $3
0000AE38 F505 000A F8               	dc.b $F5, $5, $0, $A, $F8
0000AE3D EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE42 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE47 03                         DATAO4S1WSZEYZ_4: dc.b $3
0000AE48 F505 000E F8               	dc.b $F5, $5, $0, $E, $F8
0000AE4D EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE52 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE57 03                         DATAO4S1WSZEYZ_5: dc.b $3
0000AE58 F505 0016 F8               	dc.b $F5, $5, $0, $16, $F8
0000AE5D EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE62 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE67 04                         DATAO4S1WSZEYZ_6: dc.b $4
0000AE68 F501 081A 00               	dc.b $F5, $1, $8, $1A, $0
0000AE6D F501 001A F8               	dc.b $F5, $1, $0, $1A, $F8
0000AE72 EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE77 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE7C 04                         DATAO4S1WSZEYZ_7: dc.b $4
0000AE7D F501 001C F8               	dc.b $F5, $1, $0, $1C, $F8
0000AE82 F501 081C 00               	dc.b $F5, $1, $8, $1C, $0
0000AE87 EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AE8C EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AE91 04                         DATAO4S1WSZEYZ_8: dc.b $4
0000AE92 F501 001E F8               	dc.b $F5, $1, $0, $1E, $F8
0000AE97 F501 081E 00               	dc.b $F5, $1, $8, $1E, $0
0000AE9C EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AEA1 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AEA6 03                         DATAO4S1WSZEYZ_9: dc.b $3
0000AEA7 F505 0020 F8               	dc.b $F5, $5, $0, $20, $F8
0000AEAC EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AEB1 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AEB6 03                         DATAO4S1WSZEYZ_A: dc.b $3
0000AEB7 F505 0012 F8               	dc.b $F5, $5, $0, $12, $F8
0000AEBC EF07 0000 F0               	dc.b $EF, $7, $0, $0, $F0
0000AEC1 EF07 0800 00               	dc.b $EF, $7, $8, $0, $0
0000AEC6 01                         DATAO4S1WSZEYZ_B: dc.b $1
0000AEC7 FF0D 0024 F0               	dc.b $FF, $D, $0, $24, $F0
0000AECC                            	even
0000AECC                            	even
0000AECC                            
0000AECC                            ; ===========================================================================
0000AECC                            ; ---------------------------------------------------------------------------
0000AECC                            ; Object 0E - Sonic on the title screen
0000AECC                            ; ---------------------------------------------------------------------------
0000AECC                            
0000AECC                            Obj0E:					; XREF: Obj_Index
0000AECC 7000                       		moveq	#0,d0
0000AECE 1028 0024                  		move.b	$24(a0),d0
0000AED2 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AED6 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AEDA                            ; ===========================================================================
0000AEDA 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AEDC 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AEDE 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AEE0 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AEE2                            ; ===========================================================================
0000AEE2                            
0000AEE2                            Obj0E_Main:				; XREF: Obj0E_Index
0000AEE2 5428 0024                  		addq.b	#2,$24(a0)
0000AEE6 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AEEC 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AEF2 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AEFA 317C 2300 0002             		move.w	#$2300,2(a0)
0000AF00 117C 0001 0018             		move.b	#1,$18(a0)
0000AF06 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AF0C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AF12 6100 0000                  		bsr.w	AnimateSprite
0000AF16                            
0000AF16                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AF16 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AF1A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AF1C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AF20 6000 0000                  		bra.w	DisplaySprite
0000AF24                            ; ===========================================================================
0000AF24                            
0000AF24                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AF24 4E75                       		rts	
0000AF26                            ; ===========================================================================
0000AF26                            
0000AF26                            Obj0E_Move:				; XREF: Obj0E_Index
0000AF26 5168 000A                  		subq.w	#8,$A(a0)
0000AF2A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AF30 6600                       		bne.s	Obj0E_Display
0000AF32 5428 0024                  		addq.b	#2,$24(a0)
0000AF36                            
0000AF36                            Obj0E_Display:
0000AF36 6000 0000                  		bra.w	DisplaySprite
0000AF3A                            ; ===========================================================================
0000AF3A 4E75                       		rts	
0000AF3C                            ; ===========================================================================
0000AF3C                            
0000AF3C                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AF3C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AF42 6100 0000                  		bsr.w	AnimateSprite
0000AF46 6000 0000                  		bra.w	DisplaySprite
0000AF4A                            ; ===========================================================================
0000AF4A 4E75                       		rts	
0000AF4C                            ; ===========================================================================
0000AF4C                            ; ---------------------------------------------------------------------------
0000AF4C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AF4C                            ; ---------------------------------------------------------------------------
0000AF4C                            
0000AF4C                            Obj0F:					; XREF: Obj_Index
0000AF4C 7000                       		moveq	#0,d0
0000AF4E 1028 0024                  		move.b	$24(a0),d0
0000AF52 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AF56 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AF5A 6000 0000                  		bra.w	DisplaySprite
0000AF5E                            ; ===========================================================================
0000AF5E 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AF60 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AF62 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AF64                            ; ===========================================================================
0000AF64                            
0000AF64                            Obj0F_Main:				; XREF: Obj0F_Index
0000AF64 5428 0024                  		addq.b	#2,$24(a0)
0000AF68 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AF6E 317C 0130 000A             		move.w	#$130,$A(a0)
0000AF74 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AF7C 317C 0200 0002             		move.w	#$200,2(a0)
0000AF82 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AF88 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AF8A 5428 0024                  		addq.b	#2,$24(a0)
0000AF8E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AF94 6600                       		bne.s	locret_A6F8	; if not, branch
0000AF96 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AF9C 317C 0170 0008             		move.w	#$170,8(a0)
0000AFA2 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AFA8                            
0000AFA8                            locret_A6F8:				; XREF: Obj0F_Index
0000AFA8 4E75                       		rts	
0000AFAA                            ; ===========================================================================
0000AFAA                            
0000AFAA                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AFAA 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AFB0 6000 0000                  		bra.w	AnimateSprite
0000AFB4                            ; ===========================================================================
0000AFB4                            Ani_obj0E:
0000AFB4                            	include "_anim\obj0E.asm"
0000AFB4                            ; ---------------------------------------------------------------------------
0000AFB4                            ; Animation script - Sonic on the title screen
0000AFB4                            ; ---------------------------------------------------------------------------
0000AFB4 0000                       		dc.w byte_A706-Ani_obj0E
0000AFB6 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AFC2                            		even
0000AFC2                            		even
0000AFC2                            
0000AFC2                            Ani_obj0F:
0000AFC2                            	include "_anim\obj0F.asm"
0000AFC2                            ; ---------------------------------------------------------------------------
0000AFC2                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AFC2                            ; ---------------------------------------------------------------------------
0000AFC2 0000                       		dc.w byte_A714-Ani_obj0F
0000AFC4 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AFC8                            		even
0000AFC8                            		even
0000AFC8                            
0000AFC8                            ; ---------------------------------------------------------------------------
0000AFC8                            ; Subroutine to	animate	a sprite using an animation script
0000AFC8                            ; ---------------------------------------------------------------------------
0000AFC8                            
0000AFC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AFC8                            
0000AFC8                            
0000AFC8                            AnimateSprite:
0000AFC8 7000                       		moveq	#0,d0
0000AFCA 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AFCE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AFD2 6700                       		beq.s	Anim_Run	; if not, branch
0000AFD4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AFD8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AFDE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AFE4                            
0000AFE4                            Anim_Run:
0000AFE4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AFE8 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AFEA D040                       		add.w	d0,d0
0000AFEC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AFF0 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AFF4 7200                       		moveq	#0,d1
0000AFF6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AFFA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AFFE 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B002 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B006                            
0000B006                            Anim_Next:
0000B006 1200                       		move.b	d0,d1
0000B008 0200 001F                  		andi.b	#$1F,d0
0000B00C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B010 1028 0022                  		move.b	$22(a0),d0
0000B014 E719                       		rol.b	#3,d1
0000B016 B101                       		eor.b	d0,d1
0000B018 0201 0003                  		andi.b	#3,d1
0000B01C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B022 8328 0001                  		or.b	d1,1(a0)
0000B026 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B02A                            
0000B02A                            Anim_Wait:
0000B02A 4E75                       		rts	
0000B02C                            ; ===========================================================================
0000B02C                            
0000B02C                            Anim_End_FF:
0000B02C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B02E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B030 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B036 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B03A 60CA                       		bra.s	Anim_Next
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            Anim_End_FE:
0000B03C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B03E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B040 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B044 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B048 9200                       		sub.b	d0,d1
0000B04A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B04E 60B6                       		bra.s	Anim_Next
0000B050                            ; ===========================================================================
0000B050                            
0000B050                            Anim_End_FD:
0000B050 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B052 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B054 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B05A                            
0000B05A                            Anim_End_FC:
0000B05A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B05C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B05E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B062                            
0000B062                            Anim_End_FB:
0000B062 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B064 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B066 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B06C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B070                            
0000B070                            Anim_End_FA:
0000B070 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B072 6600                       		bne.s	Anim_End	; if not, branch
0000B074 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B078                            
0000B078                            Anim_End:
0000B078 4E75                       		rts	
0000B07A                            ; End of function AnimateSprite
0000B07A                            
0000B07A                            ; ===========================================================================
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            Map_obj0F:
0000B07A                            	include "_maps\obj0F.asm"
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A 0000                       		dc.w byte_A7CD-Map_obj0F
0000B07C 0000                       		dc.w byte_A7CC-Map_obj0F
0000B07E 0000                       		dc.w byte_A7EB-Map_obj0F
0000B080 0000                       		dc.w byte_A882-Map_obj0F
0000B082 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B083 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B088 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B08D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B092 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B097 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B09C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B0A1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B0A2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0A7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0AC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0B1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0B6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0BB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0C0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0C5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0CA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0CF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B0D4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0D9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0DE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0E3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0E8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0ED D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0F2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0F7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B0FC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B101 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B106 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B10B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B110 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B115 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B11A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B11F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B124 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B129 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B12E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B133 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B138 01                         byte_A882:	dc.b 1			; "TM"
0000B139 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B13E                            		even
0000B13E                            		even
0000B13E                            
0000B13E                            ; ---------------------------------------------------------------------------
0000B13E                            ; Sprite mappings - Sonic on the title screen
0000B13E                            ; ---------------------------------------------------------------------------
0000B13E                            Map_obj0E:
0000B13E                            	include "_maps\obj0E.asm"
0000B13E                            ; ---------------------------------------------------------------------------
0000B13E                            ; Sprite mappings - Sonic on the title screen
0000B13E                            ; ---------------------------------------------------------------------------
0000B13E 0000                       		dc.w byte_A898-Map_obj0E
0000B140 0000                       		dc.w byte_A8CB-Map_obj0E
0000B142 0000                       		dc.w byte_A917-Map_obj0E
0000B144 0000                       		dc.w byte_A96D-Map_obj0E
0000B146 0000                       		dc.w byte_A9AF-Map_obj0E
0000B148 0000                       		dc.w byte_A9E7-Map_obj0E
0000B14A 0000                       		dc.w byte_AA47-Map_obj0E
0000B14C 0000                       		dc.w byte_AAB1-Map_obj0E
0000B14E 0A                         byte_A898:	dc.b $A
0000B14F 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B154 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B159 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B15E 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B163 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B168 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B16D 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B172 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B177 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B17C 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B181 0F                         byte_A8CB:	dc.b $F
0000B182 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B187 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B18C 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B191 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B196 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B19B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B1A0 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B1A5 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B1AA 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B1AF 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B1B4 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B1B9 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B1BE 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B1C3 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B1C8 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B1CD 11                         byte_A917:	dc.b $11
0000B1CE 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B1D3 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B1D8 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B1DD 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B1E2 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B1E7 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B1EC 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B1F1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B1F6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B1FB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B200 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B205 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B20A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B20F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B214 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B219 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B21E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B223 0D                         byte_A96D:	dc.b $D
0000B224 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B229 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B22E 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B233 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B238 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B23D 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B242 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B247 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B24C 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B251 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B256 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B25B 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B260 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B265 0B                         byte_A9AF:	dc.b $B
0000B266 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B26B 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B270 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B275 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B27A 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B27F 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B284 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B289 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B28E 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B293 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B298 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B29D 13                         byte_A9E7:	dc.b $13
0000B29E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B2A3 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B2A8 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B2AD 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B2B2 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B2B7 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B2BC 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B2C1 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B2C6 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B2CB 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B2D0 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B2D5 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B2DA 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B2DF 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B2E4 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B2E9 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B2EE 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B2F3 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B2F8 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B2FD 15                         byte_AA47:	dc.b $15
0000B2FE 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B303 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B308 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B30D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B312 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B317 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B31C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B321 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B326 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B32B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B330 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B335 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B33A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B33F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B344 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B349 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B34E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B353 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B358 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B35D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B362 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B367 16                         byte_AAB1:	dc.b $16
0000B368 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B36D 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B372 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B377 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B37C 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B381 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B386 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B38B 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B390 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B395 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B39A 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B39F 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B3A4 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B3A9 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B3AE 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B3B3 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B3B8 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B3BD 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B3C2 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B3C7 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B3CC 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B3D1 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B3D6                            		even
0000B3D6                            		even
0000B3D6                            
0000B3D6                            ; ===========================================================================
0000B3D6                            ; ---------------------------------------------------------------------------
0000B3D6                            ; Object 2B - Chopper enemy (GHZ)
0000B3D6                            ; ---------------------------------------------------------------------------
0000B3D6                            
0000B3D6                            Obj2B:					; XREF: Obj_Index
0000B3D6 7000                       		moveq	#0,d0
0000B3D8 1028 0024                  		move.b	$24(a0),d0
0000B3DC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B3E0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B3E4 6000 0000                  		bra.w	MarkObjGone
0000B3E8                            ; ===========================================================================
0000B3E8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B3EA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B3EC                            ; ===========================================================================
0000B3EC                            
0000B3EC                            Obj2B_Main:				; XREF: Obj2B_Index
0000B3EC 5428 0024                  		addq.b	#2,$24(a0)
0000B3F0 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B3F8 317C 047B 0002             		move.w	#$47B,2(a0)
0000B3FE 117C 0004 0001             		move.b	#4,1(a0)
0000B404 117C 0004 0018             		move.b	#4,$18(a0)
0000B40A 117C 0009 0020             		move.b	#9,$20(a0)
0000B410 117C 0010 0019             		move.b	#$10,$19(a0)
0000B416 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B41C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B422                            
0000B422                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B422 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B428 6100 FB9E                  		bsr.w	AnimateSprite
0000B42C 6100 0000                  		bsr.w	SpeedToPos
0000B430 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B436 3028 0030                  		move.w	$30(a0),d0
0000B43A B068 000C                  		cmp.w	$C(a0),d0
0000B43E 6400                       		bcc.s	Obj2B_ChgAni
0000B440 3140 000C                  		move.w	d0,$C(a0)
0000B444 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B44A                            
0000B44A                            Obj2B_ChgAni:
0000B44A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B450 0440 00C0                  		subi.w	#$C0,d0
0000B454 B068 000C                  		cmp.w	$C(a0),d0
0000B458 6400                       		bcc.s	locret_ABB6
0000B45A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B460 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B464 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B466 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B46C                            
0000B46C                            locret_ABB6:
0000B46C 4E75                       		rts	
0000B46E                            ; ===========================================================================
0000B46E                            Ani_obj2B:
0000B46E                            	include "_anim\obj2B.asm"
0000B46E                            ; ---------------------------------------------------------------------------
0000B46E                            ; Animation script - Chopper enemy
0000B46E                            ; ---------------------------------------------------------------------------
0000B46E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B470 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B472 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B474 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B478 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B47C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B480 00                         		even
0000B480 00                         		even
0000B480                            
0000B480                            ; ---------------------------------------------------------------------------
0000B480                            ; Sprite mappings - Chopper enemy (GHZ)
0000B480                            ; ---------------------------------------------------------------------------
0000B480                            Map_obj2B:
0000B480                            	include "_maps\obj2B.asm"
0000B480                            ; ================================================================================
0000B480                            ; Sprite Mappings - generated by Flex 2 Sun Jun 24 2018 15:01:12 GMT-0700 (Pacific Daylight Time)
0000B480                            ; ================================================================================
0000B480                            
0000B480                            DATAHU1N3R6Q81S:
0000B480 0000 0000                  	dc.w DATAHU1N3R6Q81S_0-DATAHU1N3R6Q81S, DATAHU1N3R6Q81S_1-DATAHU1N3R6Q81S
0000B484 01                         DATAHU1N3R6Q81S_0: dc.b $1
0000B485 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0000B48A 01                         DATAHU1N3R6Q81S_1: dc.b $1
0000B48B F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
0000B490                            	even
0000B490                            	even
0000B490                            
0000B490                            ; ===========================================================================
0000B490                            ; ---------------------------------------------------------------------------
0000B490                            ; Object 2C - Jaws enemy (LZ)
0000B490                            ; ---------------------------------------------------------------------------
0000B490                            
0000B490                            Obj2C:					; XREF: Obj_Index
0000B490 7000                       		moveq	#0,d0
0000B492 1028 0024                  		move.b	$24(a0),d0
0000B496 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B49A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B49E                            ; ===========================================================================
0000B49E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B4A0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            Obj2C_Main:				; XREF: Obj2C_Index
0000B4A2 5428 0024                  		addq.b	#2,$24(a0)
0000B4A6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4AE 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4B4 0028 0004 0001             		ori.b	#4,1(a0)
0000B4BA 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4C0 117C 0004 0018             		move.b	#4,$18(a0)
0000B4C6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B4CC 7000                       		moveq	#0,d0
0000B4CE 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B4D2 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B4D4 5340                       		subq.w	#1,d0
0000B4D6 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B4DA 3140 0032                  		move.w	d0,$32(a0)
0000B4DE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B4E4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B4EA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B4EC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B4F0                            
0000B4F0                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B4F0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B4F4 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B4F6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B4FC 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B500 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B506 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B50C                            
0000B50C                            Obj2C_Animate:
0000B50C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B512 6100 FAB4                  		bsr.w	AnimateSprite
0000B516 6100 0000                  		bsr.w	SpeedToPos
0000B51A 6000 0000                  		bra.w	MarkObjGone
0000B51E                            ; ===========================================================================
0000B51E                            Ani_obj2C:
0000B51E                            	include "_anim\obj2C.asm"
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E                            ; Animation script - Jaws enemy
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B520 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B526                            		even
0000B526                            		even
0000B526                            
0000B526                            ; ---------------------------------------------------------------------------
0000B526                            ; Sprite mappings - Jaws enemy (LZ)
0000B526                            ; ---------------------------------------------------------------------------
0000B526                            Map_obj2C:
0000B526                            	include "_maps\obj2C.asm"
0000B526                            ; ---------------------------------------------------------------------------
0000B526                            ; Sprite mappings - Jaws enemy (LZ)
0000B526                            ; ---------------------------------------------------------------------------
0000B526 0000                       		dc.w byte_AC78-Map_obj2C
0000B528 0000                       		dc.w byte_AC83-Map_obj2C
0000B52A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B52C 0000                       		dc.w byte_AC99-Map_obj2C
0000B52E 02                         byte_AC78:	dc.b 2
0000B52F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B534 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B539 02                         byte_AC83:	dc.b 2
0000B53A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B53F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B544 02                         byte_AC8E:	dc.b 2
0000B545 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B54A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B54F 02                         byte_AC99:	dc.b 2
0000B550 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B555 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B55A                            		even
0000B55A                            		even
0000B55A                            
0000B55A                            ; ===========================================================================
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            ; Object 2D - Burrobot enemy (LZ)
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            
0000B55A                            Obj2D:					; XREF: Obj_Index
0000B55A 7000                       		moveq	#0,d0
0000B55C 1028 0024                  		move.b	$24(a0),d0
0000B560 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B564 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B568                            ; ===========================================================================
0000B568 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B56A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B56C                            ; ===========================================================================
0000B56C                            
0000B56C                            Obj2D_Main:				; XREF: Obj2D_Index
0000B56C 5428 0024                  		addq.b	#2,$24(a0)
0000B570 117C 0013 0016             		move.b	#$13,$16(a0)
0000B576 117C 0008 0017             		move.b	#8,$17(a0)
0000B57C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B584 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B58A 0028 0004 0001             		ori.b	#4,1(a0)
0000B590 117C 0004 0018             		move.b	#4,$18(a0)
0000B596 117C 0005 0020             		move.b	#5,$20(a0)
0000B59C 117C 000C 0019             		move.b	#$C,$19(a0)
0000B5A2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B5A6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5AC                            
0000B5AC                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5AC 7000                       		moveq	#0,d0
0000B5AE 1028 0025                  		move.b	$25(a0),d0
0000B5B2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5B6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5BA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5C0 6100 FA06                  		bsr.w	AnimateSprite
0000B5C4 6000 0000                  		bra.w	MarkObjGone
0000B5C8                            ; ===========================================================================
0000B5C8 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B5CA 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B5CC 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B5CE 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B5D0                            ; ===========================================================================
0000B5D0                            
0000B5D0                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B5D0 5368 0030                  		subq.w	#1,$30(a0)
0000B5D4 6A00                       		bpl.s	locret_AD42
0000B5D6 5428 0025                  		addq.b	#2,$25(a0)
0000B5DA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B5E0 317C 0080 0010             		move.w	#$80,$10(a0)
0000B5E6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B5EC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B5F2 6700                       		beq.s	locret_AD42
0000B5F4 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B5F8                            
0000B5F8                            locret_AD42:
0000B5F8 4E75                       		rts	
0000B5FA                            ; ===========================================================================
0000B5FA                            
0000B5FA                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B5FA 5368 0030                  		subq.w	#1,$30(a0)
0000B5FE 6B00                       		bmi.s	loc_AD84
0000B600 6100 0000                  		bsr.w	SpeedToPos
0000B604 0868 0000 0032             		bchg	#0,$32(a0)
0000B60A 6600                       		bne.s	loc_AD78
0000B60C 3628 0008                  		move.w	8(a0),d3
0000B610 0643 000C                  		addi.w	#$C,d3
0000B614 0828 0000 0022             		btst	#0,$22(a0)
0000B61A 6600                       		bne.s	loc_AD6A
0000B61C 0443 0018                  		subi.w	#$18,d3
0000B620                            
0000B620                            loc_AD6A:
0000B620 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B626 0C41 000C                  		cmpi.w	#$C,d1
0000B62A 6C00                       		bge.s	loc_AD84
0000B62C 4E75                       		rts	
0000B62E                            ; ===========================================================================
0000B62E                            
0000B62E                            loc_AD78:				; XREF: Obj2D_Move
0000B62E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B634 D368 000C                  		add.w	d1,$C(a0)
0000B638 4E75                       		rts	
0000B63A                            ; ===========================================================================
0000B63A                            
0000B63A                            loc_AD84:				; XREF: Obj2D_Move
0000B63A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B640 6700                       		beq.s	loc_ADA4
0000B642 5528 0025                  		subq.b	#2,$25(a0)
0000B646 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B64C 317C 0000 0010             		move.w	#0,$10(a0)
0000B652 117C 0000 001C             		move.b	#0,$1C(a0)
0000B658 4E75                       		rts	
0000B65A                            ; ===========================================================================
0000B65A                            
0000B65A                            loc_ADA4:
0000B65A 5428 0025                  		addq.b	#2,$25(a0)
0000B65E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B664 117C 0002 001C             		move.b	#2,$1C(a0)
0000B66A 4E75                       		rts	
0000B66C                            ; ===========================================================================
0000B66C                            
0000B66C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B66C 6100 0000                  		bsr.w	SpeedToPos
0000B670 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B676 6B00                       		bmi.s	locret_ADF0
0000B678 117C 0003 001C             		move.b	#3,$1C(a0)
0000B67E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B684 4A41                       		tst.w	d1
0000B686 6A00                       		bpl.s	locret_ADF0
0000B688 D368 000C                  		add.w	d1,$C(a0)
0000B68C 317C 0000 0012             		move.w	#0,$12(a0)
0000B692 117C 0001 001C             		move.b	#1,$1C(a0)
0000B698 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B69E 5528 0025                  		subq.b	#2,$25(a0)
0000B6A2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6A6                            
0000B6A6                            locret_ADF0:
0000B6A6 4E75                       		rts	
0000B6A8                            ; ===========================================================================
0000B6A8                            
0000B6A8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6A8 343C 0060                  		move.w	#$60,d2
0000B6AC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6B0 6400                       		bcc.s	locret_AE20
0000B6B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6B6 9068 000C                  		sub.w	$C(a0),d0
0000B6BA 6400                       		bcc.s	locret_AE20
0000B6BC 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6C0 6500                       		bcs.s	locret_AE20
0000B6C2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B6C6 6600                       		bne.s	locret_AE20
0000B6C8 5528 0025                  		subq.b	#2,$25(a0)
0000B6CC 3141 0010                  		move.w	d1,$10(a0)
0000B6D0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6D6                            
0000B6D6                            locret_AE20:
0000B6D6 4E75                       		rts	
0000B6D8                            
0000B6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6D8                            
0000B6D8                            
0000B6D8                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B6D8 323C 0080                  		move.w	#$80,d1
0000B6DC 08E8 0000 0022             		bset	#0,$22(a0)
0000B6E2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B6E6 9068 0008                  		sub.w	8(a0),d0
0000B6EA 6400                       		bcc.s	loc_AE40
0000B6EC 4440                       		neg.w	d0
0000B6EE 4441                       		neg.w	d1
0000B6F0 08A8 0000 0022             		bclr	#0,$22(a0)
0000B6F6                            
0000B6F6                            loc_AE40:
0000B6F6 B042                       		cmp.w	d2,d0
0000B6F8 4E75                       		rts	
0000B6FA                            ; End of function Obj2D_ChkSonic2
0000B6FA                            
0000B6FA                            ; ===========================================================================
0000B6FA                            Ani_obj2D:
0000B6FA                            	include "_anim\obj2D.asm"
0000B6FA                            ; ---------------------------------------------------------------------------
0000B6FA                            ; Animation script - Burrobot enemy
0000B6FA                            ; ---------------------------------------------------------------------------
0000B6FA 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B6FC 0000                       		dc.w byte_AE50-Ani_obj2D
0000B6FE 0000                       		dc.w byte_AE54-Ani_obj2D
0000B700 0000                       		dc.w byte_AE58-Ani_obj2D
0000B702 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B706 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B70A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B70E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B712 00                         		even
0000B712 00                         		even
0000B712                            
0000B712                            ; ---------------------------------------------------------------------------
0000B712                            ; Sprite mappings - Burrobot enemy (LZ)
0000B712                            ; ---------------------------------------------------------------------------
0000B712                            Map_obj2D:
0000B712                            	include "_maps\obj2D.asm"
0000B712                            ; ---------------------------------------------------------------------------
0000B712                            ; Sprite mappings - Burrobot enemy (LZ)
0000B712                            ; ---------------------------------------------------------------------------
0000B712 0000                       		dc.w byte_AE6A-Map_obj2D
0000B714 0000                       		dc.w byte_AE75-Map_obj2D
0000B716 0000                       		dc.w byte_AE80-Map_obj2D
0000B718 0000                       		dc.w byte_AE8B-Map_obj2D
0000B71A 0000                       		dc.w byte_AE96-Map_obj2D
0000B71C 0000                       		dc.w byte_AEA1-Map_obj2D
0000B71E 0000                       		dc.w byte_AEAC-Map_obj2D
0000B720 02                         byte_AE6A:	dc.b 2
0000B721 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B726 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B72B 02                         byte_AE75:	dc.b 2
0000B72C EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B731 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B736 02                         byte_AE80:	dc.b 2
0000B737 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B73C 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B741 02                         byte_AE8B:	dc.b 2
0000B742 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B747 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B74C 02                         byte_AE96:	dc.b 2
0000B74D E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B752 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B757 02                         byte_AEA1:	dc.b 2
0000B758 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B75D F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B762 02                         byte_AEAC:	dc.b 2
0000B763 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B768 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B76E 00                         		even
0000B76E 00                         		even
0000B76E                            
0000B76E                            ; ===========================================================================
0000B76E                            ; ---------------------------------------------------------------------------
0000B76E                            ; Object 2F - large moving platforms (MZ)
0000B76E                            ; ---------------------------------------------------------------------------
0000B76E                            
0000B76E                            Obj2F:					; XREF: Obj_Index
0000B76E 7000                       		moveq	#0,d0
0000B770 1028 0024                  		move.b	$24(a0),d0
0000B774 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B778 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B77C                            ; ===========================================================================
0000B77C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B77E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B780                            
0000B780 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B782 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B784 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B786 0140                       		dc.b 1,	$40
0000B788 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B78A 0220                       		dc.b 2,	$20
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B78C 5428 0024                  		addq.b	#2,$24(a0)
0000B790 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B798 317C C000 0002             		move.w	#$C000,2(a0)
0000B79E 117C 0004 0001             		move.b	#4,1(a0)
0000B7A4 117C 0005 0018             		move.b	#5,$18(a0)
0000B7AA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B7B0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B7B6 7000                       		moveq	#0,d0
0000B7B8 1028 0028                  		move.b	$28(a0),d0
0000B7BC E448                       		lsr.w	#2,d0
0000B7BE 0240 001C                  		andi.w	#$1C,d0
0000B7C2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B7C6 3019                       		move.w	(a1)+,d0
0000B7C8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B7CC 214A 0030                  		move.l	a2,$30(a0)
0000B7D0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B7D4 1151 0019                  		move.b	(a1),$19(a0)
0000B7D8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B7DE 117C 0040 0016             		move.b	#$40,$16(a0)
0000B7E4 08E8 0004 0001             		bset	#4,1(a0)
0000B7EA                            
0000B7EA                            Obj2F_Action:				; XREF: Obj2F_Index
0000B7EA 6100 0000                  		bsr.w	Obj2F_Types
0000B7EE 4A28 0025                  		tst.b	$25(a0)
0000B7F2 6700                       		beq.s	Obj2F_Solid
0000B7F4 7200                       		moveq	#0,d1
0000B7F6 1228 0019                  		move.b	$19(a0),d1
0000B7FA 0641 000B                  		addi.w	#$B,d1
0000B7FE 6100 C564                  		bsr.w	ExitPlatform
0000B802 0829 0003 0022             		btst	#3,$22(a1)
0000B808 6600 0000                  		bne.w	Obj2F_Slope
0000B80C 4228 0025                  		clr.b	$25(a0)
0000B810 6000                       		bra.s	Obj2F_Display
0000B812                            ; ===========================================================================
0000B812                            
0000B812                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B812 7200                       		moveq	#0,d1
0000B814 1228 0019                  		move.b	$19(a0),d1
0000B818 0641 000B                  		addi.w	#$B,d1
0000B81C 2468 0030                  		movea.l	$30(a0),a2
0000B820 3428 0008                  		move.w	8(a0),d2
0000B824 6100 D544                  		bsr.w	SlopeObject2
0000B828 6000                       		bra.s	Obj2F_Display
0000B82A                            ; ===========================================================================
0000B82A                            
0000B82A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B82A 7200                       		moveq	#0,d1
0000B82C 1228 0019                  		move.b	$19(a0),d1
0000B830 0641 000B                  		addi.w	#$B,d1
0000B834 343C 0020                  		move.w	#$20,d2
0000B838 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B83E 6600                       		bne.s	loc_AF8E
0000B840 343C 0030                  		move.w	#$30,d2
0000B844                            
0000B844                            loc_AF8E:
0000B844 2468 0030                  		movea.l	$30(a0),a2
0000B848 6100 0000                  		bsr.w	SolidObject2F
0000B84C                            
0000B84C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B84C 6100 0000                  		bsr.w	DisplaySprite
0000B850 6000 0000                  		bra.w	Obj2F_ChkDel
0000B854                            
0000B854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B854                            
0000B854                            
0000B854                            Obj2F_Types:				; XREF: Obj2F_Action
0000B854 7000                       		moveq	#0,d0
0000B856 1028 0028                  		move.b	$28(a0),d0
0000B85A 0240 0007                  		andi.w	#7,d0
0000B85E D040                       		add.w	d0,d0
0000B860 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B864 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B868                            ; End of function Obj2F_Types
0000B868                            
0000B868                            ; ===========================================================================
0000B868 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B86A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B86C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B86E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B870 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B872 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B874                            ; ===========================================================================
0000B874                            
0000B874                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B874 4E75                       		rts			; type 00 platform doesn't move
0000B876                            ; ===========================================================================
0000B876                            
0000B876                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B876 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B87A 323C 0020                  		move.w	#$20,d1
0000B87E 6000                       		bra.s	Obj2F_Move
0000B880                            ; ===========================================================================
0000B880                            
0000B880                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B880 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B884 323C 0030                  		move.w	#$30,d1
0000B888 6000                       		bra.s	Obj2F_Move
0000B88A                            ; ===========================================================================
0000B88A                            
0000B88A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B88A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B88E 323C 0040                  		move.w	#$40,d1
0000B892 6000                       		bra.s	Obj2F_Move
0000B894                            ; ===========================================================================
0000B894                            
0000B894                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B894 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B898 323C 0060                  		move.w	#$60,d1
0000B89C                            
0000B89C                            Obj2F_Move:
0000B89C 0828 0003 0028             		btst	#3,$28(a0)
0000B8A2 6700                       		beq.s	loc_AFF2
0000B8A4 4440                       		neg.w	d0
0000B8A6 D041                       		add.w	d1,d0
0000B8A8                            
0000B8A8                            loc_AFF2:
0000B8A8 3228 002C                  		move.w	$2C(a0),d1
0000B8AC 9240                       		sub.w	d0,d1
0000B8AE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B8B2 4E75                       		rts	
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B8B4 1028 0034                  		move.b	$34(a0),d0
0000B8B8 4A28 0025                  		tst.b	$25(a0)
0000B8BC 6600                       		bne.s	loc_B010
0000B8BE 5500                       		subq.b	#2,d0
0000B8C0 6400                       		bcc.s	loc_B01C
0000B8C2 7000                       		moveq	#0,d0
0000B8C4 6000                       		bra.s	loc_B01C
0000B8C6                            ; ===========================================================================
0000B8C6                            
0000B8C6                            loc_B010:
0000B8C6 5800                       		addq.b	#4,d0
0000B8C8 0C00 0040                  		cmpi.b	#$40,d0
0000B8CC 6500                       		bcs.s	loc_B01C
0000B8CE 103C 0040                  		move.b	#$40,d0
0000B8D2                            
0000B8D2                            loc_B01C:
0000B8D2 1140 0034                  		move.b	d0,$34(a0)
0000B8D6 4EB9 0000 2D64             		jsr	(CalcSine).l
0000B8DC E848                       		lsr.w	#4,d0
0000B8DE 3200                       		move.w	d0,d1
0000B8E0 D068 002C                  		add.w	$2C(a0),d0
0000B8E4 3140 000C                  		move.w	d0,$C(a0)
0000B8E8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B8EE 6600                       		bne.s	loc_B07A
0000B8F0 4A28 0035                  		tst.b	$35(a0)
0000B8F4 6600                       		bne.s	loc_B07A
0000B8F6 117C 0001 0035             		move.b	#1,$35(a0)
0000B8FC 6100 0000                  		bsr.w	SingleObjLoad2
0000B900 6600                       		bne.s	loc_B07A
0000B902 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B906 3368 0008 0008             		move.w	8(a0),8(a1)
0000B90C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B912 5069 002C                  		addq.w	#8,$2C(a1)
0000B916 5769 002C                  		subq.w	#3,$2C(a1)
0000B91A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B920 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B926 2348 0038                  		move.l	a0,$38(a1)
0000B92A 2448                       		movea.l	a0,a2
0000B92C 6100                       		bsr.s	sub_B09C
0000B92E                            
0000B92E                            loc_B07A:
0000B92E 7400                       		moveq	#0,d2
0000B930 45E8 0036                  		lea	$36(a0),a2
0000B934 141A                       		move.b	(a2)+,d2
0000B936 5302                       		subq.b	#1,d2
0000B938 6500                       		bcs.s	locret_B09A
0000B93A                            
0000B93A                            loc_B086:
0000B93A 7000                       		moveq	#0,d0
0000B93C 101A                       		move.b	(a2)+,d0
0000B93E ED48                       		lsl.w	#6,d0
0000B940 0640 D000                  		addi.w	#-$3000,d0
0000B944 3240                       		movea.w	d0,a1
0000B946 3341 003C                  		move.w	d1,$3C(a1)
0000B94A 51CA FFEE                  		dbf	d2,loc_B086
0000B94E                            
0000B94E                            locret_B09A:
0000B94E 4E75                       		rts	
0000B950                            
0000B950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B950                            
0000B950                            
0000B950                            sub_B09C:
0000B950 45EA 0036                  		lea	$36(a2),a2
0000B954 7000                       		moveq	#0,d0
0000B956 1012                       		move.b	(a2),d0
0000B958 5212                       		addq.b	#1,(a2)
0000B95A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B95E 3009                       		move.w	a1,d0
0000B960 0440 D000                  		subi.w	#-$3000,d0
0000B964 EC48                       		lsr.w	#6,d0
0000B966 0240 007F                  		andi.w	#$7F,d0
0000B96A 1480                       		move.b	d0,(a2)
0000B96C 4E75                       		rts	
0000B96E                            ; End of function sub_B09C
0000B96E                            
0000B96E                            ; ===========================================================================
0000B96E                            
0000B96E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B96E 4A28 0035                  		tst.b	$35(a0)
0000B972 6700                       		beq.s	loc_B0C6
0000B974 4A28 0001                  		tst.b	1(a0)
0000B978 6A00                       		bpl.s	Obj2F_DelFlames
0000B97A                            
0000B97A                            loc_B0C6:
0000B97A 3028 002A                  		move.w	$2A(a0),d0
0000B97E 0240 FF80                  		andi.w	#$FF80,d0
0000B982 3238 F700                  		move.w	($FFFFF700).w,d1
0000B986 0441 0080                  		subi.w	#$80,d1
0000B98A 0241 FF80                  		andi.w	#$FF80,d1
0000B98E 9041                       		sub.w	d1,d0
0000B990 0C40 0280                  		cmpi.w	#$280,d0
0000B994 6200 0000                  		bhi.w	DeleteObject
0000B998 4E75                       		rts	
0000B99A                            ; ===========================================================================
0000B99A                            
0000B99A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B99A 7400                       		moveq	#0,d2
0000B99C                            
0000B99C                            loc_B0E8:
0000B99C 45E8 0036                  		lea	$36(a0),a2
0000B9A0 1412                       		move.b	(a2),d2
0000B9A2 421A                       		clr.b	(a2)+
0000B9A4 5302                       		subq.b	#1,d2
0000B9A6 6500                       		bcs.s	locret_B116
0000B9A8                            
0000B9A8                            loc_B0F4:
0000B9A8 7000                       		moveq	#0,d0
0000B9AA 1012                       		move.b	(a2),d0
0000B9AC 421A                       		clr.b	(a2)+
0000B9AE ED48                       		lsl.w	#6,d0
0000B9B0 0640 D000                  		addi.w	#-$3000,d0
0000B9B4 3240                       		movea.w	d0,a1
0000B9B6 6100 0000                  		bsr.w	DeleteObject2
0000B9BA 51CA FFEC                  		dbf	d2,loc_B0F4
0000B9BE 117C 0000 0035             		move.b	#0,$35(a0)
0000B9C4 117C 0000 0034             		move.b	#0,$34(a0)
0000B9CA                            
0000B9CA                            locret_B116:
0000B9CA 4E75                       		rts	
0000B9CC                            ; ===========================================================================
0000B9CC                            ; ---------------------------------------------------------------------------
0000B9CC                            ; Collision data for large moving platforms (MZ)
0000B9CC                            ; ---------------------------------------------------------------------------
0000B9CC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA18                            		even
0000BA18                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BA44                            		even
0000BA44                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BA90                            		even
0000BA90                            ; ===========================================================================
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BA90                            ; (appears when	you walk on sinking platforms)
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            
0000BA90                            Obj35:					; XREF: Obj_Index
0000BA90 7000                       		moveq	#0,d0
0000BA92 1028 0024                  		move.b	$24(a0),d0
0000BA96 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BA9A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BA9E                            ; ===========================================================================
0000BA9E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BAA0 0000                       		dc.w loc_B238-Obj35_Index
0000BAA2 0000                       		dc.w Obj35_Move-Obj35_Index
0000BAA4                            ; ===========================================================================
0000BAA4                            
0000BAA4                            Obj35_Main:				; XREF: Obj35_Index
0000BAA4 5428 0024                  		addq.b	#2,$24(a0)
0000BAA8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BAB0 317C 0345 0002             		move.w	#$345,2(a0)
0000BAB6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BABC 117C 0004 0001             		move.b	#4,1(a0)
0000BAC2 117C 0001 0018             		move.b	#1,$18(a0)
0000BAC8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BACE 117C 0008 0019             		move.b	#8,$19(a0)
0000BAD4 303C 00C8                  		move.w	#$C8,d0
0000BAD8 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play flame sound
0000BADE 4A28 0028                  		tst.b	$28(a0)
0000BAE2 6700                       		beq.s	loc_B238
0000BAE4 5428 0024                  		addq.b	#2,$24(a0)
0000BAE8 6000 0000                  		bra.w	Obj35_Move
0000BAEC                            ; ===========================================================================
0000BAEC                            
0000BAEC                            loc_B238:				; XREF: Obj35_Index
0000BAEC 2268 0030                  		movea.l	$30(a0),a1
0000BAF0 3228 0008                  		move.w	8(a0),d1
0000BAF4 9268 002A                  		sub.w	$2A(a0),d1
0000BAF8 0641 000C                  		addi.w	#$C,d1
0000BAFC 3001                       		move.w	d1,d0
0000BAFE E248                       		lsr.w	#1,d0
0000BB00 1031 0000                  		move.b	(a1,d0.w),d0
0000BB04 4440                       		neg.w	d0
0000BB06 D068 002C                  		add.w	$2C(a0),d0
0000BB0A 3400                       		move.w	d0,d2
0000BB0C D068 003C                  		add.w	$3C(a0),d0
0000BB10 3140 000C                  		move.w	d0,$C(a0)
0000BB14 0C41 0084                  		cmpi.w	#$84,d1
0000BB18 6400                       		bcc.s	loc_B2B0
0000BB1A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB22 0C41 0080                  		cmpi.w	#$80,d1
0000BB26 6400                       		bcc.s	loc_B2B0
0000BB28 2028 0008                  		move.l	8(a0),d0
0000BB2C 0680 0008 0000             		addi.l	#$80000,d0
0000BB32 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BB38 6600                       		bne.s	loc_B2B0
0000BB3A 6100 0000                  		bsr.w	SingleObjLoad2
0000BB3E 6600                       		bne.s	loc_B2B0
0000BB40 12BC 0035                  		move.b	#$35,0(a1)
0000BB44 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB4A 3342 002C                  		move.w	d2,$2C(a1)
0000BB4E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BB54 137C 0001 0028             		move.b	#1,$28(a1)
0000BB5A 2468 0038                  		movea.l	$38(a0),a2
0000BB5E 6100 FDF0                  		bsr.w	sub_B09C
0000BB62                            
0000BB62                            loc_B2B0:
0000BB62 6000                       		bra.s	Obj35_Animate
0000BB64                            ; ===========================================================================
0000BB64                            
0000BB64                            Obj35_Move:				; XREF: Obj35_Index
0000BB64 3028 002C                  		move.w	$2C(a0),d0
0000BB68 D068 003C                  		add.w	$3C(a0),d0
0000BB6C 3140 000C                  		move.w	d0,$C(a0)
0000BB70                            
0000BB70                            Obj35_Animate:				; XREF: loc_B238
0000BB70 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BB76 6100 F450                  		bsr.w	AnimateSprite
0000BB7A 6000 0000                  		bra.w	DisplaySprite
0000BB7E                            ; ===========================================================================
0000BB7E                            Ani_obj35:
0000BB7E                            	include "_anim\obj35.asm"
0000BB7E                            ; ---------------------------------------------------------------------------
0000BB7E                            ; Animation script - fireball that sits on the	floor (MZ)
0000BB7E                            ; ---------------------------------------------------------------------------
0000BB7E 0000                       		dc.w byte_B2CE-Ani_obj35
0000BB80 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BB86                            		even
0000BB86                            		even
0000BB86                            
0000BB86                            ; ---------------------------------------------------------------------------
0000BB86                            ; Sprite mappings - large moving platforms (MZ)
0000BB86                            ; ---------------------------------------------------------------------------
0000BB86                            Map_obj2F:
0000BB86                            	include "_maps\obj2F.asm"
0000BB86                            ; ---------------------------------------------------------------------------
0000BB86                            ; Sprite mappings - large moving platforms (MZ)
0000BB86                            ; ---------------------------------------------------------------------------
0000BB86 0000                       		dc.w byte_B2DA-Map_obj2F
0000BB88 0000                       		dc.w byte_B31C-Map_obj2F
0000BB8A 0000                       		dc.w byte_B34F-Map_obj2F
0000BB8C 0D                         byte_B2DA:	dc.b $D
0000BB8D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BB92 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BB97 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BB9C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BBA1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BBA6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BBAB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BBB0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BBB5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BBBA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BBBF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BBC4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BBC9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BBCE 0A                         byte_B31C:	dc.b $A
0000BBCF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BBD4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BBD9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BBDE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BBE3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BBE8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BBED C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BBF2 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BBF7 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BBFC E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC01 06                         byte_B34F:	dc.b 6
0000BC02 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC07 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC0C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC11 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC16 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC1B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC20                            		even
0000BC20                            		even
0000BC20                            
0000BC20                            ; ---------------------------------------------------------------------------
0000BC20                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC20                            ; ---------------------------------------------------------------------------
0000BC20                            Map_obj14:
0000BC20                            	include "_maps\obj14.asm"
0000BC20                            ; ================================================================================
0000BC20                            ; Sprite Mappings - generated by Flex 2 Sat Jul 28 2018 22:10:15 GMT-0700 (Pacific Daylight Time)
0000BC20                            ; ================================================================================
0000BC20                            
0000BC20                            DATA55FC54GRGPG:
0000BC20 0000 0000                  	dc.w DATA55FC54GRGPG_0-DATA55FC54GRGPG, DATA55FC54GRGPG_1-DATA55FC54GRGPG
0000BC24 0000 0000                  	dc.w DATA55FC54GRGPG_2-DATA55FC54GRGPG, DATA55FC54GRGPG_3-DATA55FC54GRGPG
0000BC28 0000 0000                  	dc.w DATA55FC54GRGPG_4-DATA55FC54GRGPG, DATA55FC54GRGPG_5-DATA55FC54GRGPG
0000BC2C 01                         DATA55FC54GRGPG_0: dc.b $1
0000BC2D E807 0000 F8               	dc.b $E8, $7, $0, $0, $F8
0000BC32 01                         DATA55FC54GRGPG_1: dc.b $1
0000BC33 E807 0008 F8               	dc.b $E8, $7, $0, $8, $F8
0000BC38 01                         DATA55FC54GRGPG_2: dc.b $1
0000BC39 F006 0010 F8               	dc.b $F0, $6, $0, $10, $F8
0000BC3E 01                         DATA55FC54GRGPG_3: dc.b $1
0000BC3F F80D 0016 E8               	dc.b $F8, $D, $0, $16, $E8
0000BC44 01                         DATA55FC54GRGPG_4: dc.b $1
0000BC45 F80D 001E E8               	dc.b $F8, $D, $0, $1E, $E8
0000BC4A 01                         DATA55FC54GRGPG_5: dc.b $1
0000BC4B F809 0026 F0               	dc.b $F8, $9, $0, $26, $F0
0000BC50                            	even
0000BC50                            	even
0000BC50                            
0000BC50                            ; ===========================================================================
0000BC50                            ; ---------------------------------------------------------------------------
0000BC50                            ; Object 30 - large green glassy blocks	(MZ)
0000BC50                            ; ---------------------------------------------------------------------------
0000BC50                            
0000BC50                            Obj30:					; XREF: Obj_Index
0000BC50 7000                       		moveq	#0,d0
0000BC52 1028 0024                  		move.b	$24(a0),d0
0000BC56 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BC5A 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BC5E 3028 0008                  		move.w	8(a0),d0
0000BC62 0240 FF80                  		andi.w	#$FF80,d0
0000BC66 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC6A 0441 0080                  		subi.w	#$80,d1
0000BC6E 0241 FF80                  		andi.w	#$FF80,d1
0000BC72 9041                       		sub.w	d1,d0
0000BC74 0C40 0280                  		cmpi.w	#$280,d0
0000BC78 6200 0000                  		bhi.w	Obj30_Delete
0000BC7C 6000 0000                  		bra.w	DisplaySprite
0000BC80                            ; ===========================================================================
0000BC80                            
0000BC80                            Obj30_Delete:
0000BC80 6000 0000                  		bra.w	DeleteObject
0000BC84                            ; ===========================================================================
0000BC84 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BC86 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BC88 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BC8A 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BC8C 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BC8E                            
0000BC8E 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BC91 0400 01                    		dc.b 4,	0, 1
0000BC94 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BC97 0800 01                    		dc.b 8,	0, 1
0000BC9A                            ; ===========================================================================
0000BC9A                            
0000BC9A                            Obj30_Main:				; XREF: Obj30_Index
0000BC9A 45F9 0000 BC8E             		lea	(Obj30_Vars1).l,a2
0000BCA0 7201                       		moveq	#1,d1
0000BCA2 117C 0048 0016             		move.b	#$48,$16(a0)
0000BCA8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BCAE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BCB0 45F9 0000 BC94             		lea	(Obj30_Vars2).l,a2
0000BCB6 7201                       		moveq	#1,d1
0000BCB8 117C 0038 0016             		move.b	#$38,$16(a0)
0000BCBE                            
0000BCBE                            loc_B40C:
0000BCBE 2248                       		movea.l	a0,a1
0000BCC0 6000                       		bra.s	Obj30_Load	; load main object
0000BCC2                            ; ===========================================================================
0000BCC2                            
0000BCC2                            Obj30_Loop:
0000BCC2 6100 0000                  		bsr.w	SingleObjLoad2
0000BCC6 6600                       		bne.s	loc_B480
0000BCC8                            
0000BCC8                            Obj30_Load:				; XREF: Obj30_Main
0000BCC8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BCCC 12BC 0030                  		move.b	#$30,0(a1)
0000BCD0 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCD6 101A                       		move.b	(a2)+,d0
0000BCD8 4880                       		ext.w	d0
0000BCDA D068 000C                  		add.w	$C(a0),d0
0000BCDE 3340 000C                  		move.w	d0,$C(a1)
0000BCE2 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BCEA 337C 038E 0002             		move.w	#$38E,2(a1)
0000BCF0 137C 0004 0001             		move.b	#4,1(a1)
0000BCF6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BCFC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD02 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD08 137C 0004 0018             		move.b	#4,$18(a1)
0000BD0E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD12 2348 003C                  		move.l	a0,$3C(a1)
0000BD16 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD1A                            
0000BD1A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD20 137C 0003 0018             		move.b	#3,$18(a1)
0000BD26 5029 0028                  		addq.b	#8,$28(a1)
0000BD2A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BD30                            
0000BD30                            loc_B480:
0000BD30 317C 0090 0032             		move.w	#$90,$32(a0)
0000BD36 08E8 0004 0001             		bset	#4,1(a0)
0000BD3C                            
0000BD3C                            Obj30_Block012:				; XREF: Obj30_Index
0000BD3C 6100 0000                  		bsr.w	Obj30_Types
0000BD40 323C 002B                  		move.w	#$2B,d1
0000BD44 343C 0048                  		move.w	#$48,d2
0000BD48 363C 0049                  		move.w	#$49,d3
0000BD4C 3828 0008                  		move.w	8(a0),d4
0000BD50 6000 0000                  		bra.w	SolidObject
0000BD54                            ; ===========================================================================
0000BD54                            
0000BD54                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BD54 2268 003C                  		movea.l	$3C(a0),a1
0000BD58 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BD5E 6000 0000                  		bra.w	Obj30_Types
0000BD62                            ; ===========================================================================
0000BD62                            
0000BD62                            Obj30_Block34:				; XREF: Obj30_Index
0000BD62 6100 0000                  		bsr.w	Obj30_Types
0000BD66 323C 002B                  		move.w	#$2B,d1
0000BD6A 343C 0038                  		move.w	#$38,d2
0000BD6E 363C 0039                  		move.w	#$39,d3
0000BD72 3828 0008                  		move.w	8(a0),d4
0000BD76 6000 0000                  		bra.w	SolidObject
0000BD7A                            ; ===========================================================================
0000BD7A                            
0000BD7A                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BD7A 2268 003C                  		movea.l	$3C(a0),a1
0000BD7E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BD84 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BD8A 6000 0002                  		bra.w	*+4
0000BD8E                            
0000BD8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD8E                            
0000BD8E                            
0000BD8E                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BD8E 7000                       		moveq	#0,d0
0000BD90 1028 0028                  		move.b	$28(a0),d0
0000BD94 0240 0007                  		andi.w	#7,d0
0000BD98 D040                       		add.w	d0,d0
0000BD9A 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BD9E 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BDA2                            ; End of function Obj30_Types
0000BDA2                            
0000BDA2                            ; ===========================================================================
0000BDA2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BDA4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BDA6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BDA8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BDAA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BDAC                            ; ===========================================================================
0000BDAC                            
0000BDAC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BDAC 4E75                       		rts	
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BDAE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDB2 323C 0040                  		move.w	#$40,d1
0000BDB6 6000                       		bra.s	loc_B514
0000BDB8                            ; ===========================================================================
0000BDB8                            
0000BDB8                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BDB8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDBC 323C 0040                  		move.w	#$40,d1
0000BDC0 4440                       		neg.w	d0
0000BDC2 D041                       		add.w	d1,d0
0000BDC4                            
0000BDC4                            loc_B514:				; XREF: Obj30_Type01
0000BDC4 0828 0003 0028             		btst	#3,$28(a0)
0000BDCA 6700                       		beq.s	loc_B526
0000BDCC 4440                       		neg.w	d0
0000BDCE D041                       		add.w	d1,d0
0000BDD0 E208                       		lsr.b	#1,d0
0000BDD2 0640 0020                  		addi.w	#$20,d0
0000BDD6                            
0000BDD6                            loc_B526:
0000BDD6 6000 0000                  		bra.w	loc_B5EE
0000BDDA                            ; ===========================================================================
0000BDDA                            
0000BDDA                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BDDA 0828 0003 0028             		btst	#3,$28(a0)
0000BDE0 6700                       		beq.s	loc_B53E
0000BDE2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDE6 0440 0010                  		subi.w	#$10,d0
0000BDEA 6000 0000                  		bra.w	loc_B5EE
0000BDEE                            ; ===========================================================================
0000BDEE                            
0000BDEE                            loc_B53E:
0000BDEE 0828 0003 0022             		btst	#3,$22(a0)
0000BDF4 6600                       		bne.s	loc_B54E
0000BDF6 08A8 0000 0034             		bclr	#0,$34(a0)
0000BDFC 6000                       		bra.s	loc_B582
0000BDFE                            ; ===========================================================================
0000BDFE                            
0000BDFE                            loc_B54E:
0000BDFE 4A28 0034                  		tst.b	$34(a0)
0000BE02 6600                       		bne.s	loc_B582
0000BE04 117C 0001 0034             		move.b	#1,$34(a0)
0000BE0A 08E8 0000 0035             		bset	#0,$35(a0)
0000BE10 6700                       		beq.s	loc_B582
0000BE12 08E8 0007 0034             		bset	#7,$34(a0)
0000BE18 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE1E 117C 000A 0038             		move.b	#$A,$38(a0)
0000BE24 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BE2A 6600                       		bne.s	loc_B582
0000BE2C 317C 0040 0036             		move.w	#$40,$36(a0)
0000BE32                            
0000BE32                            loc_B582:
0000BE32 4A28 0034                  		tst.b	$34(a0)
0000BE36 6A00                       		bpl.s	loc_B5AA
0000BE38 4A28 0038                  		tst.b	$38(a0)
0000BE3C 6700                       		beq.s	loc_B594
0000BE3E 5328 0038                  		subq.b	#1,$38(a0)
0000BE42 6600                       		bne.s	loc_B5AA
0000BE44                            
0000BE44                            loc_B594:
0000BE44 4A68 0032                  		tst.w	$32(a0)
0000BE48 6700                       		beq.s	loc_B5A4
0000BE4A 5368 0032                  		subq.w	#1,$32(a0)
0000BE4E 5368 0036                  		subq.w	#1,$36(a0)
0000BE52 6600                       		bne.s	loc_B5AA
0000BE54                            
0000BE54                            loc_B5A4:
0000BE54 08A8 0007 0034             		bclr	#7,$34(a0)
0000BE5A                            
0000BE5A                            loc_B5AA:
0000BE5A 3028 0032                  		move.w	$32(a0),d0
0000BE5E 6000                       		bra.s	loc_B5EE
0000BE60                            ; ===========================================================================
0000BE60                            
0000BE60                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BE60 0828 0003 0028             		btst	#3,$28(a0)
0000BE66 6700                       		beq.s	Obj30_ChkSwitch
0000BE68 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE6C 0440 0010                  		subi.w	#$10,d0
0000BE70 6000                       		bra.s	loc_B5EE
0000BE72                            ; ===========================================================================
0000BE72                            
0000BE72                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BE72 4A28 0034                  		tst.b	$34(a0)
0000BE76 6600                       		bne.s	loc_B5E0
0000BE78 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BE7C 7000                       		moveq	#0,d0
0000BE7E 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BE82 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BE84 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BE88 6700                       		beq.s	loc_B5EA	; if not, branch
0000BE8A 117C 0001 0034             		move.b	#1,$34(a0)
0000BE90                            
0000BE90                            loc_B5E0:
0000BE90 4A68 0032                  		tst.w	$32(a0)
0000BE94 6700                       		beq.s	loc_B5EA
0000BE96 5568 0032                  		subq.w	#2,$32(a0)
0000BE9A                            
0000BE9A                            loc_B5EA:
0000BE9A 3028 0032                  		move.w	$32(a0),d0
0000BE9E                            
0000BE9E                            loc_B5EE:
0000BE9E 3228 0030                  		move.w	$30(a0),d1
0000BEA2 9240                       		sub.w	d0,d1
0000BEA4 3141 000C                  		move.w	d1,$C(a0)
0000BEA8 4E75                       		rts	
0000BEAA                            ; ===========================================================================
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            Map_obj30:
0000BEAA                            	include "_maps\obj30.asm"
0000BEAA                            ; ================================================================================
0000BEAA                            ; Sprite Mappings - generated by Flex 2 Mon Oct 08 2018 20:24:10 GMT-0700 (Pacific Daylight Time)
0000BEAA                            ; ================================================================================
0000BEAA                            
0000BEAA                            DATAWGHIKX447BI:
0000BEAA 0000 0000                  	dc.w DATAWGHIKX447BI_0-DATAWGHIKX447BI, DATAWGHIKX447BI_1-DATAWGHIKX447BI
0000BEAE 0000                       	dc.w DATAWGHIKX447BI_2-DATAWGHIKX447BI
0000BEB0 0C                         DATAWGHIKX447BI_0: dc.b $C
0000BEB1 B80C 0000 E0               	dc.b $B8, $C, $0, $0, $E0
0000BEB6 B80C 0800 00               	dc.b $B8, $C, $8, $0, $0
0000BEBB C00F 0004 E0               	dc.b $C0, $F, $0, $4, $E0
0000BEC0 C00F 0804 00               	dc.b $C0, $F, $8, $4, $0
0000BEC5 E00F 0004 E0               	dc.b $E0, $F, $0, $4, $E0
0000BECA E00F 0804 00               	dc.b $E0, $F, $8, $4, $0
0000BECF 000F 0004 E0               	dc.b $0, $F, $0, $4, $E0
0000BED4 000F 0804 00               	dc.b $0, $F, $8, $4, $0
0000BED9 200F 0004 E0               	dc.b $20, $F, $0, $4, $E0
0000BEDE 200F 0804 00               	dc.b $20, $F, $8, $4, $0
0000BEE3 400C 1000 E0               	dc.b $40, $C, $10, $0, $E0
0000BEE8 400C 1800 00               	dc.b $40, $C, $18, $0, $0
0000BEED 02                         DATAWGHIKX447BI_1: dc.b $2
0000BEEE 0806 0014 F0               	dc.b $8, $6, $0, $14, $F0
0000BEF3 0006 0014 00               	dc.b $0, $6, $0, $14, $0
0000BEF8 0A                         DATAWGHIKX447BI_2: dc.b $A
0000BEF9 C80C 0000 E0               	dc.b $C8, $C, $0, $0, $E0
0000BEFE C80C 0800 00               	dc.b $C8, $C, $8, $0, $0
0000BF03 D00F 0004 E0               	dc.b $D0, $F, $0, $4, $E0
0000BF08 D00F 0804 00               	dc.b $D0, $F, $8, $4, $0
0000BF0D F00F 0004 E0               	dc.b $F0, $F, $0, $4, $E0
0000BF12 F00F 0804 00               	dc.b $F0, $F, $8, $4, $0
0000BF17 100F 0004 E0               	dc.b $10, $F, $0, $4, $E0
0000BF1C 100F 0804 00               	dc.b $10, $F, $8, $4, $0
0000BF21 300C 1000 E0               	dc.b $30, $C, $10, $0, $E0
0000BF26 300C 1800 00               	dc.b $30, $C, $18, $0, $0
0000BF2C 00                         	even
0000BF2C 00                         	even
0000BF2C                            
0000BF2C                            ; ===========================================================================
0000BF2C                            ; ---------------------------------------------------------------------------
0000BF2C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BF2C                            ; ---------------------------------------------------------------------------
0000BF2C                            
0000BF2C                            Obj31:					; XREF: Obj_Index
0000BF2C 7000                       		moveq	#0,d0
0000BF2E 1028 0024                  		move.b	$24(a0),d0
0000BF32 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BF36 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BF3A                            ; ===========================================================================
0000BF3A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BF3C 0000                       		dc.w loc_B798-Obj31_Index
0000BF3E 0000                       		dc.w loc_B7FE-Obj31_Index
0000BF40 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BF42 0000                       		dc.w loc_B7E2-Obj31_Index
0000BF44                            
0000BF44 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BF46 0100                       		dc.b 1,	0
0000BF48                            
0000BF48 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BF4B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BF4E 08CC 03                    		dc.b 8,	$CC, 3
0000BF51 06F0 02                    		dc.b 6,	$F0, 2
0000BF54                            
0000BF54 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BF58 5000 7800                  		dc.w $5000, $7800
0000BF5C 3800 5800                  		dc.w $3800, $5800
0000BF60 B800                       		dc.w $B800
0000BF62                            ; ===========================================================================
0000BF62                            
0000BF62                            Obj31_Main:				; XREF: Obj31_Index
0000BF62 7000                       		moveq	#0,d0
0000BF64 1028 0028                  		move.b	$28(a0),d0
0000BF68 6A00                       		bpl.s	loc_B6CE
0000BF6A 0240 007F                  		andi.w	#$7F,d0
0000BF6E D040                       		add.w	d0,d0
0000BF70 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BF74 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BF78 101A                       		move.b	(a2)+,d0
0000BF7A 1140 0028                  		move.b	d0,$28(a0)
0000BF7E                            
0000BF7E                            loc_B6CE:
0000BF7E 0200 000F                  		andi.b	#$F,d0
0000BF82 D040                       		add.w	d0,d0
0000BF84 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BF88 4A40                       		tst.w	d0
0000BF8A 6600                       		bne.s	loc_B6E0
0000BF8C 3142 0032                  		move.w	d2,$32(a0)
0000BF90                            
0000BF90                            loc_B6E0:
0000BF90 45F9 0000 BF48             		lea	(Obj31_Var).l,a2
0000BF96 2248                       		movea.l	a0,a1
0000BF98 7203                       		moveq	#3,d1
0000BF9A 6000                       		bra.s	Obj31_MakeStomper
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            Obj31_Loop:
0000BF9C 6100 0000                  		bsr.w	SingleObjLoad2
0000BFA0 6600 0000                  		bne.w	Obj31_SetSize
0000BFA4                            
0000BFA4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BFA4 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFA8 12BC 0031                  		move.b	#$31,0(a1)
0000BFAC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFB2 101A                       		move.b	(a2)+,d0
0000BFB4 4880                       		ext.w	d0
0000BFB6 D068 000C                  		add.w	$C(a0),d0
0000BFBA 3340 000C                  		move.w	d0,$C(a1)
0000BFBE 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BFC6 337C 0300 0002             		move.w	#$300,2(a1)
0000BFCC 137C 0004 0001             		move.b	#4,1(a1)
0000BFD2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BFD8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BFDE 137C 0010 0019             		move.b	#$10,$19(a1)
0000BFE4 3342 0034                  		move.w	d2,$34(a1)
0000BFE8 137C 0004 0018             		move.b	#4,$18(a1)
0000BFEE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BFF2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BFF8 6600                       		bne.s	loc_B76A
0000BFFA 5341                       		subq.w	#1,d1
0000BFFC 1028 0028                  		move.b	$28(a0),d0
0000C000 0240 00F0                  		andi.w	#$F0,d0
0000C004 0C40 0020                  		cmpi.w	#$20,d0
0000C008 679A                       		beq.s	Obj31_MakeStomper
0000C00A 137C 0038 0019             		move.b	#$38,$19(a1)
0000C010 137C 0090 0020             		move.b	#$90,$20(a1)
0000C016 5241                       		addq.w	#1,d1
0000C018                            
0000C018                            loc_B76A:
0000C018 2348 003C                  		move.l	a0,$3C(a1)
0000C01C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C020                            
0000C020 137C 0003 0018             		move.b	#3,$18(a1)
0000C026                            
0000C026                            Obj31_SetSize:
0000C026 7000                       		moveq	#0,d0
0000C028 1028 0028                  		move.b	$28(a0),d0
0000C02C E648                       		lsr.w	#3,d0
0000C02E 0200 000E                  		andi.b	#$E,d0
0000C032 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C036 115A 0019                  		move.b	(a2)+,$19(a0)
0000C03A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C03E 6000                       		bra.s	loc_B798
0000C040                            ; ===========================================================================
0000C040 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C042 3009                       		dc.b $30, 9
0000C044 100A                       		dc.b $10, $A
0000C046                            ; ===========================================================================
0000C046                            
0000C046                            loc_B798:				; XREF: Obj31_Index
0000C046 6100 0000                  		bsr.w	Obj31_Types
0000C04A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C050 7200                       		moveq	#0,d1
0000C052 1228 0019                  		move.b	$19(a0),d1
0000C056 0641 000B                  		addi.w	#$B,d1
0000C05A 343C 000C                  		move.w	#$C,d2
0000C05E 363C 000D                  		move.w	#$D,d3
0000C062 3828 0008                  		move.w	8(a0),d4
0000C066 6100 0000                  		bsr.w	SolidObject
0000C06A 0828 0003 0022             		btst	#3,$22(a0)
0000C070 6700                       		beq.s	Obj31_Display
0000C072 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C078 6400                       		bcc.s	Obj31_Display
0000C07A 2448                       		movea.l	a0,a2
0000C07C 41F8 D000                  		lea	($FFFFD000).w,a0
0000C080 4EB9 0000 0000             		jsr	KillSonic
0000C086 204A                       		movea.l	a2,a0
0000C088                            
0000C088                            Obj31_Display:
0000C088 6100 0000                  		bsr.w	DisplaySprite
0000C08C 6000 0000                  		bra.w	Obj31_ChkDel
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            loc_B7E2:				; XREF: Obj31_Index
0000C090 117C 0080 0016             		move.b	#$80,$16(a0)
0000C096 08E8 0004 0001             		bset	#4,1(a0)
0000C09C 2268 003C                  		movea.l	$3C(a0),a1
0000C0A0 1029 0032                  		move.b	$32(a1),d0
0000C0A4 EA08                       		lsr.b	#5,d0
0000C0A6 5600                       		addq.b	#3,d0
0000C0A8 1140 001A                  		move.b	d0,$1A(a0)
0000C0AC                            
0000C0AC                            loc_B7FE:				; XREF: Obj31_Index
0000C0AC 2268 003C                  		movea.l	$3C(a0),a1
0000C0B0 7000                       		moveq	#0,d0
0000C0B2 1029 0032                  		move.b	$32(a1),d0
0000C0B6 D068 0030                  		add.w	$30(a0),d0
0000C0BA 3140 000C                  		move.w	d0,$C(a0)
0000C0BE                            
0000C0BE                            Obj31_Display2:				; XREF: Obj31_Index
0000C0BE 6100 0000                  		bsr.w	DisplaySprite
0000C0C2                            
0000C0C2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C0C2 3028 0008                  		move.w	8(a0),d0
0000C0C6 0240 FF80                  		andi.w	#$FF80,d0
0000C0CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0CE 0441 0080                  		subi.w	#$80,d1
0000C0D2 0241 FF80                  		andi.w	#$FF80,d1
0000C0D6 9041                       		sub.w	d1,d0
0000C0D8 0C40 0280                  		cmpi.w	#$280,d0
0000C0DC 6200 0000                  		bhi.w	DeleteObject
0000C0E0 4E75                       		rts	
0000C0E2                            ; ===========================================================================
0000C0E2                            
0000C0E2                            Obj31_Types:				; XREF: loc_B798
0000C0E2 1028 0028                  		move.b	$28(a0),d0
0000C0E6 0240 000F                  		andi.w	#$F,d0
0000C0EA D040                       		add.w	d0,d0
0000C0EC 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C0F0 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C0F4                            ; ===========================================================================
0000C0F4 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C0F6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C0F8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C0FA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C0FC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C0FE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C100 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C102                            ; ===========================================================================
0000C102                            
0000C102                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C102 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C106 7000                       		moveq	#0,d0
0000C108 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C10C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C110 6700                       		beq.s	loc_B8A8	; if not, branch
0000C112 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C116 6A00                       		bpl.s	loc_B872
0000C118 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C11E 6700                       		beq.s	loc_B8A0
0000C120                            
0000C120                            loc_B872:
0000C120 4A68 0032                  		tst.w	$32(a0)
0000C124 6700                       		beq.s	loc_B8A0
0000C126 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C12A 0200 000F                  		andi.b	#$F,d0
0000C12E 6600                       		bne.s	loc_B892
0000C130 4A28 0001                  		tst.b	1(a0)
0000C134 6A00                       		bpl.s	loc_B892
0000C136 303C 00C7                  		move.w	#$C7,d0
0000C13A 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C140                            
0000C140                            loc_B892:
0000C140 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C146 6400                       		bcc.s	Obj31_Restart
0000C148 317C 0000 0032             		move.w	#0,$32(a0)
0000C14E                            
0000C14E                            loc_B8A0:
0000C14E 317C 0000 0012             		move.w	#0,$12(a0)
0000C154 6000                       		bra.s	Obj31_Restart
0000C156                            ; ===========================================================================
0000C156                            
0000C156                            loc_B8A8:				; XREF: Obj31_Type00
0000C156 3228 0034                  		move.w	$34(a0),d1
0000C15A B268 0032                  		cmp.w	$32(a0),d1
0000C15E 6700                       		beq.s	Obj31_Restart
0000C160 3028 0012                  		move.w	$12(a0),d0
0000C164 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C16A D168 0032                  		add.w	d0,$32(a0)
0000C16E B268 0032                  		cmp.w	$32(a0),d1
0000C172 6200                       		bhi.s	Obj31_Restart
0000C174 3141 0032                  		move.w	d1,$32(a0)
0000C178 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C17E 4A28 0001                  		tst.b	1(a0)
0000C182 6A00                       		bpl.s	Obj31_Restart
0000C184 303C 00BD                  		move.w	#$BD,d0
0000C188 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C18E                            
0000C18E                            Obj31_Restart:
0000C18E 7000                       		moveq	#0,d0
0000C190 1028 0032                  		move.b	$32(a0),d0
0000C194 D068 0030                  		add.w	$30(a0),d0
0000C198 3140 000C                  		move.w	d0,$C(a0)
0000C19C 4E75                       		rts	
0000C19E                            ; ===========================================================================
0000C19E                            
0000C19E                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C19E 4A68 0036                  		tst.w	$36(a0)
0000C1A2 6700                       		beq.s	loc_B938
0000C1A4 4A68 0038                  		tst.w	$38(a0)
0000C1A8 6700                       		beq.s	loc_B902
0000C1AA 5368 0038                  		subq.w	#1,$38(a0)
0000C1AE 6000                       		bra.s	loc_B97C
0000C1B0                            ; ===========================================================================
0000C1B0                            
0000C1B0                            loc_B902:
0000C1B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1B4 0200 000F                  		andi.b	#$F,d0
0000C1B8 6600                       		bne.s	loc_B91C
0000C1BA 4A28 0001                  		tst.b	1(a0)
0000C1BE 6A00                       		bpl.s	loc_B91C
0000C1C0 303C 00C7                  		move.w	#$C7,d0
0000C1C4 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1CA                            
0000C1CA                            loc_B91C:
0000C1CA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1D0 6400                       		bcc.s	loc_B97C
0000C1D2 317C 0000 0032             		move.w	#0,$32(a0)
0000C1D8 317C 0000 0012             		move.w	#0,$12(a0)
0000C1DE 317C 0000 0036             		move.w	#0,$36(a0)
0000C1E4 6000                       		bra.s	loc_B97C
0000C1E6                            ; ===========================================================================
0000C1E6                            
0000C1E6                            loc_B938:				; XREF: Obj31_Type01
0000C1E6 3228 0034                  		move.w	$34(a0),d1
0000C1EA B268 0032                  		cmp.w	$32(a0),d1
0000C1EE 6700                       		beq.s	loc_B97C
0000C1F0 3028 0012                  		move.w	$12(a0),d0
0000C1F4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1FA D168 0032                  		add.w	d0,$32(a0)
0000C1FE B268 0032                  		cmp.w	$32(a0),d1
0000C202 6200                       		bhi.s	loc_B97C
0000C204 3141 0032                  		move.w	d1,$32(a0)
0000C208 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C20E 317C 0001 0036             		move.w	#1,$36(a0)
0000C214 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C21A 4A28 0001                  		tst.b	1(a0)
0000C21E 6A00                       		bpl.s	loc_B97C
0000C220 303C 00BD                  		move.w	#$BD,d0
0000C224 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C22A                            
0000C22A                            loc_B97C:
0000C22A 6000 FF62                  		bra.w	Obj31_Restart
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C22E 3038 D008                  		move.w	($FFFFD008).w,d0
0000C232 9068 0008                  		sub.w	8(a0),d0
0000C236 6400                       		bcc.s	loc_B98C
0000C238 4440                       		neg.w	d0
0000C23A                            
0000C23A                            loc_B98C:
0000C23A 0C40 0090                  		cmpi.w	#$90,d0
0000C23E 6400                       		bcc.s	loc_B996
0000C240 5228 0028                  		addq.b	#1,$28(a0)
0000C244                            
0000C244                            loc_B996:
0000C244 6000 FF48                  		bra.w	Obj31_Restart
0000C248                            ; ===========================================================================
0000C248                            ; ---------------------------------------------------------------------------
0000C248                            ; Object 45 - spiked metal block from beta version (MZ)
0000C248                            ; ---------------------------------------------------------------------------
0000C248                            
0000C248                            Obj45:					; XREF: Obj_Index
0000C248 7000                       		moveq	#0,d0
0000C24A 1028 0024                  		move.b	$24(a0),d0
0000C24E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C252 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C256                            ; ===========================================================================
0000C256 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C258 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C25A 0000                       		dc.w loc_BA8E-Obj45_Index
0000C25C 0000                       		dc.w Obj45_Display-Obj45_Index
0000C25E 0000                       		dc.w loc_BA7A-Obj45_Index
0000C260                            
0000C260 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C263 04E4 01                    		dc.b	4, $E4,	  1
0000C266 0834 03                    		dc.b	8, $34,	  3
0000C269 0628 02                    		dc.b	6, $28,	  2
0000C26C                            
0000C26C 3800                       word_B9BE:	dc.w $3800
0000C26E A000                       		dc.w -$6000
0000C270 5000                       		dc.w $5000
0000C272                            ; ===========================================================================
0000C272                            
0000C272                            Obj45_Main:				; XREF: Obj45_Index
0000C272 7000                       		moveq	#0,d0
0000C274 1028 0028                  		move.b	$28(a0),d0
0000C278 D040                       		add.w	d0,d0
0000C27A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C27E 45F9 0000 C260             		lea	(Obj45_Var).l,a2
0000C284 2248                       		movea.l	a0,a1
0000C286 7203                       		moveq	#3,d1
0000C288 6000                       		bra.s	Obj45_Load
0000C28A                            ; ===========================================================================
0000C28A                            
0000C28A                            Obj45_Loop:
0000C28A 6100 0000                  		bsr.w	SingleObjLoad2
0000C28E 6600                       		bne.s	loc_BA52
0000C290                            
0000C290                            Obj45_Load:				; XREF: Obj45_Main
0000C290 135A 0024                  		move.b	(a2)+,$24(a1)
0000C294 12BC 0045                  		move.b	#$45,0(a1)
0000C298 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C29E 101A                       		move.b	(a2)+,d0
0000C2A0 4880                       		ext.w	d0
0000C2A2 D068 0008                  		add.w	8(a0),d0
0000C2A6 3340 0008                  		move.w	d0,8(a1)
0000C2AA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C2B2 337C 0300 0002             		move.w	#$300,2(a1)
0000C2B8 137C 0004 0001             		move.b	#4,1(a1)
0000C2BE 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C2C4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C2CA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C2D0 137C 0020 0019             		move.b	#$20,$19(a1)
0000C2D6 3342 0034                  		move.w	d2,$34(a1)
0000C2DA 137C 0004 0018             		move.b	#4,$18(a1)
0000C2E0 0C12 0001                  		cmpi.b	#1,(a2)
0000C2E4 6600                       		bne.s	loc_BA40
0000C2E6 137C 0091 0020             		move.b	#$91,$20(a1)
0000C2EC                            
0000C2EC                            loc_BA40:
0000C2EC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C2F0 2348 003C                  		move.l	a0,$3C(a1)
0000C2F4 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C2F8                            
0000C2F8 137C 0003 0018             		move.b	#3,$18(a1)
0000C2FE                            
0000C2FE                            loc_BA52:
0000C2FE 117C 0010 0019             		move.b	#$10,$19(a0)
0000C304                            
0000C304                            Obj45_Solid:				; XREF: Obj45_Index
0000C304 3F28 0008                  		move.w	8(a0),-(sp)
0000C308 6100 0000                  		bsr.w	Obj45_Move
0000C30C 323C 0017                  		move.w	#$17,d1
0000C310 343C 0020                  		move.w	#$20,d2
0000C314 363C 0020                  		move.w	#$20,d3
0000C318 381F                       		move.w	(sp)+,d4
0000C31A 6100 0000                  		bsr.w	SolidObject
0000C31E 6100 0000                  		bsr.w	DisplaySprite
0000C322 6000 0000                  		bra.w	Obj45_ChkDel
0000C326                            ; ===========================================================================
0000C326                            
0000C326                            loc_BA7A:				; XREF: Obj45_Index
0000C326 2268 003C                  		movea.l	$3C(a0),a1
0000C32A 1029 0032                  		move.b	$32(a1),d0
0000C32E 0600 0010                  		addi.b	#$10,d0
0000C332 EA08                       		lsr.b	#5,d0
0000C334 5600                       		addq.b	#3,d0
0000C336 1140 001A                  		move.b	d0,$1A(a0)
0000C33A                            
0000C33A                            loc_BA8E:				; XREF: Obj45_Index
0000C33A 2268 003C                  		movea.l	$3C(a0),a1
0000C33E 7000                       		moveq	#0,d0
0000C340 1029 0032                  		move.b	$32(a1),d0
0000C344 4440                       		neg.w	d0
0000C346 D068 0030                  		add.w	$30(a0),d0
0000C34A 3140 0008                  		move.w	d0,8(a0)
0000C34E                            
0000C34E                            Obj45_Display:				; XREF: Obj45_Index
0000C34E 6100 0000                  		bsr.w	DisplaySprite
0000C352                            
0000C352                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C352 3028 003A                  		move.w	$3A(a0),d0
0000C356 0240 FF80                  		andi.w	#$FF80,d0
0000C35A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C35E 0441 0080                  		subi.w	#$80,d1
0000C362 0241 FF80                  		andi.w	#$FF80,d1
0000C366 9041                       		sub.w	d1,d0
0000C368 0C40 0280                  		cmpi.w	#$280,d0
0000C36C 6200 0000                  		bhi.w	DeleteObject
0000C370 4E75                       		rts	
0000C372                            
0000C372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C372                            
0000C372                            
0000C372                            Obj45_Move:				; XREF: Obj45_Solid
0000C372 7000                       		moveq	#0,d0
0000C374 1028 0028                  		move.b	$28(a0),d0
0000C378 D040                       		add.w	d0,d0
0000C37A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C37E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C382                            ; End of function Obj45_Move
0000C382                            
0000C382                            ; ===========================================================================
0000C382 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C384 0000                       		dc.w loc_BADA-off_BAD6
0000C386                            ; ===========================================================================
0000C386                            
0000C386                            loc_BADA:				; XREF: off_BAD6
0000C386 4A68 0036                  		tst.w	$36(a0)
0000C38A 6700                       		beq.s	loc_BB08
0000C38C 4A68 0038                  		tst.w	$38(a0)
0000C390 6700                       		beq.s	loc_BAEC
0000C392 5368 0038                  		subq.w	#1,$38(a0)
0000C396 6000                       		bra.s	loc_BB3C
0000C398                            ; ===========================================================================
0000C398                            
0000C398                            loc_BAEC:
0000C398 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C39E 6400                       		bcc.s	loc_BB3C
0000C3A0 317C 0000 0032             		move.w	#0,$32(a0)
0000C3A6 317C 0000 0010             		move.w	#0,$10(a0)
0000C3AC 317C 0000 0036             		move.w	#0,$36(a0)
0000C3B2 6000                       		bra.s	loc_BB3C
0000C3B4                            ; ===========================================================================
0000C3B4                            
0000C3B4                            loc_BB08:				; XREF: loc_BADA
0000C3B4 3228 0034                  		move.w	$34(a0),d1
0000C3B8 B268 0032                  		cmp.w	$32(a0),d1
0000C3BC 6700                       		beq.s	loc_BB3C
0000C3BE 3028 0010                  		move.w	$10(a0),d0
0000C3C2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C3C8 D168 0032                  		add.w	d0,$32(a0)
0000C3CC B268 0032                  		cmp.w	$32(a0),d1
0000C3D0 6200                       		bhi.s	loc_BB3C
0000C3D2 3141 0032                  		move.w	d1,$32(a0)
0000C3D6 317C 0000 0010             		move.w	#0,$10(a0)
0000C3DC 317C 0001 0036             		move.w	#1,$36(a0)
0000C3E2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C3E8                            
0000C3E8                            loc_BB3C:
0000C3E8 7000                       		moveq	#0,d0
0000C3EA 1028 0032                  		move.b	$32(a0),d0
0000C3EE 4440                       		neg.w	d0
0000C3F0 D068 0030                  		add.w	$30(a0),d0
0000C3F4 3140 0008                  		move.w	d0,8(a0)
0000C3F8 4E75                       		rts	
0000C3FA                            ; ===========================================================================
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            Map_obj31:
0000C3FA                            	include "_maps\obj31.asm"
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA 0000                       		dc.w byte_BB64-Map_obj31
0000C3FC 0000                       		dc.w byte_BB7E-Map_obj31
0000C3FE 0000                       		dc.w byte_BB98-Map_obj31
0000C400 0000                       		dc.w byte_BB9E-Map_obj31
0000C402 0000                       		dc.w byte_BBA9-Map_obj31
0000C404 0000                       		dc.w byte_BBBE-Map_obj31
0000C406 0000                       		dc.w byte_BBDD-Map_obj31
0000C408 0000                       		dc.w byte_BC06-Map_obj31
0000C40A 0000                       		dc.w byte_BC06-Map_obj31
0000C40C 0000                       		dc.w byte_BC39-Map_obj31
0000C40E 0000                       		dc.w byte_BC53-Map_obj31
0000C410 05                         byte_BB64:	dc.b 5
0000C411 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C416 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C41B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C420 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C425 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C42A 05                         byte_BB7E:	dc.b 5
0000C42B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C430 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C435 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C43A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C43F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C444 01                         byte_BB98:	dc.b 1
0000C445 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C44A 02                         byte_BB9E:	dc.b 2
0000C44B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C450 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C455 04                         byte_BBA9:	dc.b 4
0000C456 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C45B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C460 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C465 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C46A 06                         byte_BBBE:	dc.b 6
0000C46B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C470 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C475 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C47A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C47F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C484 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C489 08                         byte_BBDD:	dc.b 8
0000C48A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C48F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C494 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C499 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C49E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4A3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4A8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4AD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4B2 0A                         byte_BC06:	dc.b $A
0000C4B3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C4B8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C4BD A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4C2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4C7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4CC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4D1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4D6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4DB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4E0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4E5 05                         byte_BC39:	dc.b 5
0000C4E6 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C4EB F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C4F0 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C4F5 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C4FA EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C4FF 01                         byte_BC53:	dc.b 1
0000C500 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C506 00                         		even
0000C506 00                         		even
0000C506                            
0000C506                            ; ---------------------------------------------------------------------------
0000C506                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C506                            ; ---------------------------------------------------------------------------
0000C506                            Map_obj45:
0000C506                            	include "_maps\obj45.asm"
0000C506                            ; ---------------------------------------------------------------------------
0000C506                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C506                            ; ---------------------------------------------------------------------------
0000C506 0000                       		dc.w byte_BC6C-Map_obj45
0000C508 0000                       		dc.w byte_BC7C-Map_obj45
0000C50A 0000                       		dc.w byte_BC8C-Map_obj45
0000C50C 0000                       		dc.w byte_BC92-Map_obj45
0000C50E 0000                       		dc.w byte_BC9D-Map_obj45
0000C510 0000                       		dc.w byte_BCB2-Map_obj45
0000C512 0000                       		dc.w byte_BCD1-Map_obj45
0000C514 0000                       		dc.w byte_BCFA-Map_obj45
0000C516 0000                       		dc.w byte_BCFA-Map_obj45
0000C518 03                         byte_BC6C:	dc.b 3
0000C519 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C51E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C523 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C528 03                         byte_BC7C:	dc.b 3
0000C529 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C52E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C533 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C538 01                         byte_BC8C:	dc.b 1
0000C539 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C53E 02                         byte_BC92:	dc.b 2
0000C53F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C544 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C549 04                         byte_BC9D:	dc.b 4
0000C54A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C54F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C554 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C559 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C55E 06                         byte_BCB2:	dc.b 6
0000C55F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C564 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C569 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C56E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C573 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C578 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C57D 08                         byte_BCD1:	dc.b 8
0000C57E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C583 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C588 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C58D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C592 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C597 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C59C F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5A1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5A6 08                         byte_BCFA:	dc.b 8
0000C5A7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5AC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5B1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5B6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5BB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5C0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5C5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5CA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5CF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C5D4 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C5DA 00                         		even
0000C5DA 00                         		even
0000C5DA                            
0000C5DA                            ; ===========================================================================
0000C5DA                            ; ---------------------------------------------------------------------------
0000C5DA                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C5DA                            ; ---------------------------------------------------------------------------
0000C5DA                            
0000C5DA                            Obj32:					; XREF: Obj_Index
0000C5DA 7000                       		moveq	#0,d0
0000C5DC 1028 0024                  		move.b	$24(a0),d0
0000C5E0 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C5E4 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C5E8                            ; ===========================================================================
0000C5E8 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C5EA 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C5EC                            ; ===========================================================================
0000C5EC                            
0000C5EC                            Obj32_Main:				; XREF: Obj32_Index
0000C5EC 5428 0024                  		addq.b	#2,$24(a0)
0000C5F0 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C5F8 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C5FE 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C604 6700                       		beq.s	loc_BD60
0000C606 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C60C                            
0000C60C                            loc_BD60:
0000C60C 117C 0004 0001             		move.b	#4,1(a0)
0000C612 117C 0010 0019             		move.b	#$10,$19(a0)
0000C618 117C 0004 0018             		move.b	#4,$18(a0)
0000C61E 5668 000C                  		addq.w	#3,$C(a0)
0000C622                            
0000C622                            Obj32_Pressed:				; XREF: Obj32_Index
0000C622 4A28 0001                  		tst.b	1(a0)
0000C626 6A00                       		bpl.s	Obj32_Display
0000C628 323C 001B                  		move.w	#$1B,d1
0000C62C 343C 0005                  		move.w	#5,d2
0000C630 363C 0005                  		move.w	#5,d3
0000C634 3828 0008                  		move.w	8(a0),d4
0000C638 6100 0000                  		bsr.w	SolidObject
0000C63C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C642 1028 0028                  		move.b	$28(a0),d0
0000C646 0240 000F                  		andi.w	#$F,d0
0000C64A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C64E 47F3 0000                  		lea	(a3,d0.w),a3
0000C652 7600                       		moveq	#0,d3
0000C654 0828 0006 0028             		btst	#6,$28(a0)
0000C65A 6700                       		beq.s	loc_BDB2
0000C65C 7607                       		moveq	#7,d3
0000C65E                            
0000C65E                            loc_BDB2:
0000C65E 4A28 0028                  		tst.b	$28(a0)
0000C662 6A00                       		bpl.s	loc_BDBE
0000C664 6100 0000                  		bsr.w	Obj32_MZBlock
0000C668 6600                       		bne.s	loc_BDC8
0000C66A                            
0000C66A                            loc_BDBE:
0000C66A 4A28 0025                  		tst.b	$25(a0)
0000C66E 6600                       		bne.s	loc_BDC8
0000C670 0793                       		bclr	d3,(a3)
0000C672 6000                       		bra.s	loc_BDDE
0000C674                            ; ===========================================================================
0000C674                            
0000C674                            loc_BDC8:
0000C674 4A13                       		tst.b	(a3)
0000C676 6600                       		bne.s	loc_BDD6
0000C678 303C 00CD                  		move.w	#$CD,d0
0000C67C 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play switch sound
0000C682                            
0000C682                            loc_BDD6:
0000C682 07D3                       		bset	d3,(a3)
0000C684 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C68A                            
0000C68A                            loc_BDDE:
0000C68A 0828 0005 0028             		btst	#5,$28(a0)
0000C690 6700                       		beq.s	Obj32_Display
0000C692 5328 001E                  		subq.b	#1,$1E(a0)
0000C696 6A00                       		bpl.s	Obj32_Display
0000C698 117C 0007 001E             		move.b	#7,$1E(a0)
0000C69E 0868 0001 001A             		bchg	#1,$1A(a0)
0000C6A4                            
0000C6A4                            Obj32_Display:
0000C6A4 6100 0000                  		bsr.w	DisplaySprite
0000C6A8 3028 0008                  		move.w	8(a0),d0
0000C6AC 0240 FF80                  		andi.w	#$FF80,d0
0000C6B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6B4 0441 0080                  		subi.w	#$80,d1
0000C6B8 0241 FF80                  		andi.w	#$FF80,d1
0000C6BC 9041                       		sub.w	d1,d0
0000C6BE 0C40 0280                  		cmpi.w	#$280,d0
0000C6C2 6200 0000                  		bhi.w	Obj32_Delete
0000C6C6 4E75                       		rts	
0000C6C8                            ; ===========================================================================
0000C6C8                            
0000C6C8                            Obj32_Delete:
0000C6C8 6100 0000                  		bsr.w	DeleteObject
0000C6CC 4E75                       		rts	
0000C6CE                            
0000C6CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C6CE                            
0000C6CE                            
0000C6CE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C6CE 3F03                       		move.w	d3,-(sp)
0000C6D0 3428 0008                  		move.w	8(a0),d2
0000C6D4 3628 000C                  		move.w	$C(a0),d3
0000C6D8 0442 0010                  		subi.w	#$10,d2
0000C6DC 5143                       		subq.w	#8,d3
0000C6DE 383C 0020                  		move.w	#$20,d4
0000C6E2 3A3C 0010                  		move.w	#$10,d5
0000C6E6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C6EA 3C3C 005F                  		move.w	#$5F,d6
0000C6EE                            
0000C6EE                            Obj32_MZLoop:
0000C6EE 4A29 0001                  		tst.b	1(a1)
0000C6F2 6A00                       		bpl.s	loc_BE4E
0000C6F4 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C6F8 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C6FA                            
0000C6FA                            loc_BE4E:
0000C6FA 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C6FE 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C702                            
0000C702 361F                       		move.w	(sp)+,d3
0000C704 7000                       		moveq	#0,d0
0000C706                            
0000C706                            locret_BE5A:
0000C706 4E75                       		rts	
0000C708                            ; ===========================================================================
0000C708 1010                       Obj32_MZData:	dc.b $10, $10
0000C70A                            ; ===========================================================================
0000C70A                            
0000C70A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C70A 7001                       		moveq	#1,d0
0000C70C 0240 003F                  		andi.w	#$3F,d0
0000C710 D040                       		add.w	d0,d0
0000C712 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C716 121A                       		move.b	(a2)+,d1
0000C718 4881                       		ext.w	d1
0000C71A 3029 0008                  		move.w	8(a1),d0
0000C71E 9041                       		sub.w	d1,d0
0000C720 9042                       		sub.w	d2,d0
0000C722 6400                       		bcc.s	loc_BE80
0000C724 D241                       		add.w	d1,d1
0000C726 D041                       		add.w	d1,d0
0000C728 6500                       		bcs.s	loc_BE84
0000C72A 60CE                       		bra.s	loc_BE4E
0000C72C                            ; ===========================================================================
0000C72C                            
0000C72C                            loc_BE80:
0000C72C B044                       		cmp.w	d4,d0
0000C72E 62CA                       		bhi.s	loc_BE4E
0000C730                            
0000C730                            loc_BE84:
0000C730 121A                       		move.b	(a2)+,d1
0000C732 4881                       		ext.w	d1
0000C734 3029 000C                  		move.w	$C(a1),d0
0000C738 9041                       		sub.w	d1,d0
0000C73A 9043                       		sub.w	d3,d0
0000C73C 6400                       		bcc.s	loc_BE9A
0000C73E D241                       		add.w	d1,d1
0000C740 D041                       		add.w	d1,d0
0000C742 6500                       		bcs.s	loc_BE9E
0000C744 60B4                       		bra.s	loc_BE4E
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            loc_BE9A:
0000C746 B045                       		cmp.w	d5,d0
0000C748 62B0                       		bhi.s	loc_BE4E
0000C74A                            
0000C74A                            loc_BE9E:
0000C74A 361F                       		move.w	(sp)+,d3
0000C74C 7001                       		moveq	#1,d0
0000C74E 4E75                       		rts	
0000C750                            ; End of function Obj32_MZBlock
0000C750                            
0000C750                            ; ===========================================================================
0000C750                            ; ---------------------------------------------------------------------------
0000C750                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C750                            ; ---------------------------------------------------------------------------
0000C750                            Map_obj32:
0000C750                            	include "_maps\obj32.asm"
0000C750                            ; ---------------------------------------------------------------------------
0000C750                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C750                            ; ---------------------------------------------------------------------------
0000C750 0000                       		dc.w byte_BEAC-Map_obj32
0000C752 0000                       		dc.w byte_BEB7-Map_obj32
0000C754 0000                       		dc.w byte_BEC2-Map_obj32
0000C756 0000                       		dc.w byte_BEB7-Map_obj32
0000C758 02                         byte_BEAC:	dc.b 2
0000C759 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C75E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C763 02                         byte_BEB7:	dc.b 2
0000C764 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C769 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C76E 02                         byte_BEC2:	dc.b 2
0000C76F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C774 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C779 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C77E                            		even
0000C77E                            		even
0000C77E                            
0000C77E                            ; ===========================================================================
0000C77E                            ; ---------------------------------------------------------------------------
0000C77E                            ; Object 33 - pushable blocks (MZ, LZ)
0000C77E                            ; ---------------------------------------------------------------------------
0000C77E                            
0000C77E                            Obj33:					; XREF: Obj_Index
0000C77E 7000                       		moveq	#0,d0
0000C780 1028 0024                  		move.b	$24(a0),d0
0000C784 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C788 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C78C                            ; ===========================================================================
0000C78C 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C78E 0000                       		dc.w loc_BF6E-Obj33_Index
0000C790 0000                       		dc.w loc_C02C-Obj33_Index
0000C792                            
0000C792 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C794 4001                       		dc.b $40, 1
0000C796                            ; ===========================================================================
0000C796                            
0000C796                            Obj33_Main:				; XREF: Obj33_Index
0000C796 5428 0024                  		addq.b	#2,$24(a0)
0000C79A 117C 000F 0016             		move.b	#$F,$16(a0)
0000C7A0 117C 000F 0017             		move.b	#$F,$17(a0)
0000C7A6 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C7AE 317C 02B8 0002             		move.w	#$2B8,2(a0)	; MZ specific code
0000C7B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C7BA 6600                       		bne.s	loc_BF16
0000C7BC 317C 03DE 0002             		move.w	#$3DE,2(a0)	; LZ specific code
0000C7C2                            
0000C7C2                            loc_BF16:
0000C7C2 117C 0004 0001             		move.b	#4,1(a0)
0000C7C8 117C 0003 0018             		move.b	#3,$18(a0)
0000C7CE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C7D4 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C7DA 7000                       		moveq	#0,d0
0000C7DC 1028 0028                  		move.b	$28(a0),d0
0000C7E0 D040                       		add.w	d0,d0
0000C7E2 0240 000E                  		andi.w	#$E,d0
0000C7E6 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C7EA 115A 0019                  		move.b	(a2)+,$19(a0)
0000C7EE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C7F2 4A28 0028                  		tst.b	$28(a0)
0000C7F6 6700                       		beq.s	Obj33_ChkGone
0000C7F8 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C7FE                            
0000C7FE                            Obj33_ChkGone:
0000C7FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C802 7000                       		moveq	#0,d0
0000C804 1028 0023                  		move.b	$23(a0),d0
0000C808 6700                       		beq.s	loc_BF6E
0000C80A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C810 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C816 6600 0000                  		bne.w	DeleteObject
0000C81A                            
0000C81A                            loc_BF6E:				; XREF: Obj33_Index
0000C81A 4A28 0032                  		tst.b	$32(a0)
0000C81E 6600 0000                  		bne.w	loc_C046
0000C822 7200                       		moveq	#0,d1
0000C824 1228 0019                  		move.b	$19(a0),d1
0000C828 0641 000B                  		addi.w	#$B,d1
0000C82C 343C 0010                  		move.w	#$10,d2
0000C830 363C 0011                  		move.w	#$11,d3
0000C834 3828 0008                  		move.w	8(a0),d4
0000C838 6100 0000                  		bsr.w	loc_C186
0000C83C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C842 6600                       		bne.s	loc_BFC6	; if not, branch
0000C844 08A8 0007 0028             		bclr	#7,$28(a0)
0000C84A 3028 0008                  		move.w	8(a0),d0
0000C84E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C852 6500                       		bcs.s	loc_BFC6
0000C854 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C858 6400                       		bcc.s	loc_BFC6
0000C85A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C85E 0440 001C                  		subi.w	#$1C,d0
0000C862 3140 000C                  		move.w	d0,$C(a0)
0000C866 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C86C 08E8 0007 0028             		bset	#7,$28(a0)
0000C872                            
0000C872                            loc_BFC6:
0000C872 3028 0008                  		move.w	8(a0),d0
0000C876 0240 FF80                  		andi.w	#$FF80,d0
0000C87A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C87E 0441 0080                  		subi.w	#$80,d1
0000C882 0241 FF80                  		andi.w	#$FF80,d1
0000C886 9041                       		sub.w	d1,d0
0000C888 0C40 0280                  		cmpi.w	#$280,d0
0000C88C 6200                       		bhi.s	loc_BFE6
0000C88E 6000 0000                  		bra.w	DisplaySprite
0000C892                            ; ===========================================================================
0000C892                            
0000C892                            loc_BFE6:
0000C892 3028 0034                  		move.w	$34(a0),d0
0000C896 0240 FF80                  		andi.w	#$FF80,d0
0000C89A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C89E 0441 0080                  		subi.w	#$80,d1
0000C8A2 0241 FF80                  		andi.w	#$FF80,d1
0000C8A6 9041                       		sub.w	d1,d0
0000C8A8 0C40 0280                  		cmpi.w	#$280,d0
0000C8AC 6200                       		bhi.s	loc_C016
0000C8AE 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C8B4 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C8BA 117C 0004 0024             		move.b	#4,$24(a0)
0000C8C0 6000                       		bra.s	loc_C02C
0000C8C2                            ; ===========================================================================
0000C8C2                            
0000C8C2                            loc_C016:
0000C8C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C8C6 7000                       		moveq	#0,d0
0000C8C8 1028 0023                  		move.b	$23(a0),d0
0000C8CC 6700                       		beq.s	loc_C028
0000C8CE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C8D4                            
0000C8D4                            loc_C028:
0000C8D4 6000 0000                  		bra.w	DeleteObject
0000C8D8                            ; ===========================================================================
0000C8D8                            
0000C8D8                            loc_C02C:				; XREF: Obj33_Index
0000C8D8 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C8DC 6700                       		beq.s	locret_C044
0000C8DE 117C 0002 0024             		move.b	#2,$24(a0)
0000C8E4 4228 0032                  		clr.b	$32(a0)
0000C8E8 4268 0010                  		clr.w	$10(a0)
0000C8EC 4268 0012                  		clr.w	$12(a0)
0000C8F0                            
0000C8F0                            locret_C044:
0000C8F0 4E75                       		rts	
0000C8F2                            ; ===========================================================================
0000C8F2                            
0000C8F2                            loc_C046:				; XREF: loc_BF6E
0000C8F2 3F28 0008                  		move.w	8(a0),-(sp)
0000C8F6 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C8FC 6400                       		bcc.s	loc_C056
0000C8FE 6100 0000                  		bsr.w	SpeedToPos
0000C902                            
0000C902                            loc_C056:
0000C902 0828 0001 0022             		btst	#1,$22(a0)
0000C908 6700                       		beq.s	loc_C0A0
0000C90A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C910 4EB9 0000 0000             		jsr	ObjHitFloor
0000C916 4A41                       		tst.w	d1
0000C918 6A00 0000                  		bpl.w	loc_C09E
0000C91C D368 000C                  		add.w	d1,$C(a0)
0000C920 4268 0012                  		clr.w	$12(a0)
0000C924 08A8 0001 0022             		bclr	#1,$22(a0)
0000C92A 3011                       		move.w	(a1),d0
0000C92C 0240 03FF                  		andi.w	#$3FF,d0
0000C930 0C40 016A                  		cmpi.w	#$16A,d0
0000C934 6500                       		bcs.s	loc_C09E
0000C936 3028 0030                  		move.w	$30(a0),d0
0000C93A E640                       		asr.w	#3,d0
0000C93C 3140 0010                  		move.w	d0,$10(a0)
0000C940 117C 0001 0032             		move.b	#1,$32(a0)
0000C946 4268 000E                  		clr.w	$E(a0)
0000C94A                            
0000C94A                            loc_C09E:
0000C94A 6000                       		bra.s	loc_C0E6
0000C94C                            ; ===========================================================================
0000C94C                            
0000C94C                            loc_C0A0:
0000C94C 4A68 0010                  		tst.w	$10(a0)
0000C950 6700 0000                  		beq.w	loc_C0D6
0000C954 6B00                       		bmi.s	loc_C0BC
0000C956 7600                       		moveq	#0,d3
0000C958 1628 0019                  		move.b	$19(a0),d3
0000C95C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C962 4A41                       		tst.w	d1		; has block touched a wall?
0000C964 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C966 6000                       		bra.s	loc_C0E6
0000C968                            ; ===========================================================================
0000C968                            
0000C968                            loc_C0BC:
0000C968 7600                       		moveq	#0,d3
0000C96A 1628 0019                  		move.b	$19(a0),d3
0000C96E 4643                       		not.w	d3
0000C970 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C976 4A41                       		tst.w	d1		; has block touched a wall?
0000C978 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C97A 6000                       		bra.s	loc_C0E6
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Obj33_StopPush:
0000C97C 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C980 6000                       		bra.s	loc_C0E6
0000C982                            ; ===========================================================================
0000C982                            
0000C982                            loc_C0D6:
0000C982 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C98A 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C990 6400                       		bcc.s	loc_C104
0000C992                            
0000C992                            loc_C0E6:
0000C992 7200                       		moveq	#0,d1
0000C994 1228 0019                  		move.b	$19(a0),d1
0000C998 0641 000B                  		addi.w	#$B,d1
0000C99C 343C 0010                  		move.w	#$10,d2
0000C9A0 363C 0011                  		move.w	#$11,d3
0000C9A4 381F                       		move.w	(sp)+,d4
0000C9A6 6100 0000                  		bsr.w	loc_C186
0000C9AA 6100                       		bsr.s	Obj33_ChkLava
0000C9AC 6000 FEC4                  		bra.w	loc_BFC6
0000C9B0                            ; ===========================================================================
0000C9B0                            
0000C9B0                            loc_C104:
0000C9B0 381F                       		move.w	(sp)+,d4
0000C9B2 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9B6 08A9 0003 0022             		bclr	#3,$22(a1)
0000C9BC 08A8 0003 0022             		bclr	#3,$22(a0)
0000C9C2 6000 FECE                  		bra.w	loc_BFE6
0000C9C6                            ; ===========================================================================
0000C9C6                            
0000C9C6                            Obj33_ChkLava:
0000C9C6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C9CC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C9CE 343C FFE0                  		move.w	#-$20,d2
0000C9D2 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C9D8 6700                       		beq.s	Obj33_LoadLava
0000C9DA 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C9E0 6700                       		beq.s	Obj33_LoadLava
0000C9E2 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C9E8 6700                       		beq.s	Obj33_LoadLava
0000C9EA 4E75                       		rts	
0000C9EC                            ; ===========================================================================
0000C9EC                            
0000C9EC                            Obj33_ChkLava2:
0000C9EC 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C9F2 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C9F4 343C 0020                  		move.w	#$20,d2
0000C9F8 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C9FE 6700                       		beq.s	Obj33_LoadLava
0000CA00 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA06 6700                       		beq.s	Obj33_LoadLava
0000CA08                            
0000CA08                            Obj33_NoLava:
0000CA08 4E75                       		rts	
0000CA0A                            ; ===========================================================================
0000CA0A                            
0000CA0A                            Obj33_LoadLava:
0000CA0A 6100 0000                  		bsr.w	SingleObjLoad
0000CA0E 6600                       		bne.s	locret_C184
0000CA10 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA14 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA1A D569 0008                  		add.w	d2,8(a1)
0000CA1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA24 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CA2A 2348 003C                  		move.l	a0,$3C(a1)
0000CA2E                            
0000CA2E                            locret_C184:
0000CA2E 4E75                       		rts	
0000CA30                            ; ===========================================================================
0000CA30                            
0000CA30                            loc_C186:				; XREF: loc_BF6E
0000CA30 1028 0025                  		move.b	$25(a0),d0
0000CA34 6700 0000                  		beq.w	loc_C218
0000CA38 5500                       		subq.b	#2,d0
0000CA3A 6600                       		bne.s	loc_C1AA
0000CA3C 6100 B326                  		bsr.w	ExitPlatform
0000CA40 0829 0003 0022             		btst	#3,$22(a1)
0000CA46 6600                       		bne.s	loc_C1A4
0000CA48 4228 0025                  		clr.b	$25(a0)
0000CA4C 4E75                       		rts	
0000CA4E                            ; ===========================================================================
0000CA4E                            
0000CA4E                            loc_C1A4:
0000CA4E 3404                       		move.w	d4,d2
0000CA50 6000 B870                  		bra.w	MvSonicOnPtfm
0000CA54                            ; ===========================================================================
0000CA54                            
0000CA54                            loc_C1AA:
0000CA54 5500                       		subq.b	#2,d0
0000CA56 6600                       		bne.s	loc_C1F2
0000CA58 6100 0000                  		bsr.w	SpeedToPos
0000CA5C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CA62 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA68 4A41                       		tst.w	d1
0000CA6A 6A00 0000                  		bpl.w	locret_C1F0
0000CA6E D368 000C                  		add.w	d1,$C(a0)
0000CA72 4268 0012                  		clr.w	$12(a0)
0000CA76 4228 0025                  		clr.b	$25(a0)
0000CA7A 3011                       		move.w	(a1),d0
0000CA7C 0240 03FF                  		andi.w	#$3FF,d0
0000CA80 0C40 016A                  		cmpi.w	#$16A,d0
0000CA84 6500                       		bcs.s	locret_C1F0
0000CA86 3028 0030                  		move.w	$30(a0),d0
0000CA8A E640                       		asr.w	#3,d0
0000CA8C 3140 0010                  		move.w	d0,$10(a0)
0000CA90 117C 0001 0032             		move.b	#1,$32(a0)
0000CA96 4268 000E                  		clr.w	$E(a0)
0000CA9A                            
0000CA9A                            locret_C1F0:
0000CA9A 4E75                       		rts	
0000CA9C                            ; ===========================================================================
0000CA9C                            
0000CA9C                            loc_C1F2:
0000CA9C 6100 0000                  		bsr.w	SpeedToPos
0000CAA0 3028 0008                  		move.w	8(a0),d0
0000CAA4 0240 000C                  		andi.w	#$C,d0
0000CAA8 6600 0000                  		bne.w	locret_C2E4
0000CAAC 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CAB2 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CAB8 4268 0010                  		clr.w	$10(a0)
0000CABC 5528 0025                  		subq.b	#2,$25(a0)
0000CAC0 4E75                       		rts	
0000CAC2                            ; ===========================================================================
0000CAC2                            
0000CAC2                            loc_C218:
0000CAC2 6100 0000                  		bsr.w	loc_FAC8
0000CAC6 4A44                       		tst.w	d4
0000CAC8 6700 0000                  		beq.w	locret_C2E4
0000CACC 6B00 0000                  		bmi.w	locret_C2E4
0000CAD0 4A28 0032                  		tst.b	$32(a0)
0000CAD4 6700                       		beq.s	loc_C230
0000CAD6 6000 0000                  		bra.w	locret_C2E4
0000CADA                            ; ===========================================================================
0000CADA                            
0000CADA                            loc_C230:
0000CADA 4A40                       		tst.w	d0
0000CADC 6700 0000                  		beq.w	locret_C2E4
0000CAE0 6B00                       		bmi.s	loc_C268
0000CAE2 0829 0000 0022             		btst	#0,$22(a1)
0000CAE8 6600 0000                  		bne.w	locret_C2E4
0000CAEC 3F00                       		move.w	d0,-(sp)
0000CAEE 7600                       		moveq	#0,d3
0000CAF0 1628 0019                  		move.b	$19(a0),d3
0000CAF4 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CAFA 301F                       		move.w	(sp)+,d0
0000CAFC 4A41                       		tst.w	d1
0000CAFE 6B00 0000                  		bmi.w	locret_C2E4
0000CB02 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB0A 7001                       		moveq	#1,d0
0000CB0C 323C 0040                  		move.w	#$40,d1
0000CB10 6000                       		bra.s	loc_C294
0000CB12                            ; ===========================================================================
0000CB12                            
0000CB12                            loc_C268:
0000CB12 0829 0000 0022             		btst	#0,$22(a1)
0000CB18 6700                       		beq.s	locret_C2E4
0000CB1A 3F00                       		move.w	d0,-(sp)
0000CB1C 7600                       		moveq	#0,d3
0000CB1E 1628 0019                  		move.b	$19(a0),d3
0000CB22 4643                       		not.w	d3
0000CB24 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB2A 301F                       		move.w	(sp)+,d0
0000CB2C 4A41                       		tst.w	d1
0000CB2E 6B00                       		bmi.s	locret_C2E4
0000CB30 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CB38 70FF                       		moveq	#-1,d0
0000CB3A 323C FFC0                  		move.w	#-$40,d1
0000CB3E                            
0000CB3E                            loc_C294:
0000CB3E 43F8 D000                  		lea	($FFFFD000).w,a1
0000CB42 D169 0008                  		add.w	d0,8(a1)
0000CB46 3341 0014                  		move.w	d1,$14(a1)
0000CB4A 337C 0000 0010             		move.w	#0,$10(a1)
0000CB50 3F00                       		move.w	d0,-(sp)
0000CB52 303C 00A7                  		move.w	#$A7,d0
0000CB56 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CB5C 301F                       		move.w	(sp)+,d0
0000CB5E 4A28 0028                  		tst.b	$28(a0)
0000CB62 6B00                       		bmi.s	locret_C2E4
0000CB64 3F00                       		move.w	d0,-(sp)
0000CB66 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB6C 301F                       		move.w	(sp)+,d0
0000CB6E 0C41 0004                  		cmpi.w	#4,d1
0000CB72 6F00                       		ble.s	loc_C2E0
0000CB74 317C 0400 0010             		move.w	#$400,$10(a0)
0000CB7A 4A40                       		tst.w	d0
0000CB7C 6A00                       		bpl.s	loc_C2D8
0000CB7E 4468 0010                  		neg.w	$10(a0)
0000CB82                            
0000CB82                            loc_C2D8:
0000CB82 117C 0006 0025             		move.b	#6,$25(a0)
0000CB88 6000                       		bra.s	locret_C2E4
0000CB8A                            ; ===========================================================================
0000CB8A                            
0000CB8A                            loc_C2E0:
0000CB8A D368 000C                  		add.w	d1,$C(a0)
0000CB8E                            
0000CB8E                            locret_C2E4:
0000CB8E 4E75                       		rts	
0000CB90                            ; ===========================================================================
0000CB90                            ; ---------------------------------------------------------------------------
0000CB90                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CB90                            ; ---------------------------------------------------------------------------
0000CB90                            Map_obj33:
0000CB90                            	include "_maps\obj33.asm"
0000CB90                            ; ================================================================================
0000CB90                            ; Sprite Mappings - generated by Flex 2 Tue Oct 09 2018 18:21:08 GMT-0700 (Pacific Daylight Time)
0000CB90                            ; ================================================================================
0000CB90                            
0000CB90                            DATAAXCFZ76YASU:
0000CB90 0000 0000                  	dc.w DATAAXCFZ76YASU_0-DATAAXCFZ76YASU, DATAAXCFZ76YASU_1-DATAAXCFZ76YASU
0000CB94 01                         DATAAXCFZ76YASU_0: dc.b $1
0000CB95 F00F 0008 F0               	dc.b $F0, $F, $0, $8, $F0
0000CB9A 04                         DATAAXCFZ76YASU_1: dc.b $4
0000CB9B F00F 0008 C0               	dc.b $F0, $F, $0, $8, $C0
0000CBA0 F00F 0008 E0               	dc.b $F0, $F, $0, $8, $E0
0000CBA5 F00F 0008 00               	dc.b $F0, $F, $0, $8, $0
0000CBAA F00F 0008 20               	dc.b $F0, $F, $0, $8, $20
0000CBB0 00                         	even
0000CBB0 00                         	even
0000CBB0                            
0000CBB0                            ; ===========================================================================
0000CBB0                            ; ---------------------------------------------------------------------------
0000CBB0                            ; Object 34 - zone title cards
0000CBB0                            ; ---------------------------------------------------------------------------
0000CBB0                            
0000CBB0                            Obj34:					; XREF: Obj_Index
0000CBB0 7000                       		moveq	#0,d0
0000CBB2 1028 0024                  		move.b	$24(a0),d0
0000CBB6 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CBBA 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CBBE                            ; ===========================================================================
0000CBBE 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CBC0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CBC2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBC4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBC6                            ; ===========================================================================
0000CBC6                            
0000CBC6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CBC6 2248                       		movea.l	a0,a1
0000CBC8 7000                       		moveq	#0,d0
0000CBCA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBCE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CBD4 6600                       		bne.s	Obj34_CheckFZ
0000CBD6 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CBD8                            
0000CBD8                            Obj34_CheckFZ:
0000CBD8 3400                       		move.w	d0,d2
0000CBDA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CBE0 6600                       		bne.s	Obj34_CheckNew
0000CBE2 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CBE4 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CBE6                            
0000CBE6                            Obj34_CheckNew:
0000CBE6 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
0000CBEC 6500                       		blo.s	Obj34_LoadConfig
0000CBEE 5A02                       		addq.b	#$C-7,d2	; use correct mappings
0000CBF0                            
0000CBF0                            Obj34_LoadConfig:
0000CBF0 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CBF6 E948                       		lsl.w	#4,d0
0000CBF8 D6C0                       		adda.w	d0,a3
0000CBFA 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC00 7203                       		moveq	#3,d1
0000CC02                            
0000CC02                            Obj34_Loop:
0000CC02 12BC 0034                  		move.b	#$34,0(a1)
0000CC06 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC0A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC0E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC12 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC16 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC1A 101A                       		move.b	(a2)+,d0
0000CC1C 6600                       		bne.s	Obj34_ActNumber
0000CC1E 1002                       		move.b	d2,d0
0000CC20                            
0000CC20                            Obj34_ActNumber:
0000CC20 0C00 0007                  		cmpi.b	#7,d0
0000CC24 6600                       		bne.s	Obj34_MakeSprite
0000CC26 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC2A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CC30 6600                       		bne.s	Obj34_MakeSprite
0000CC32 5300                       		subq.b	#1,d0
0000CC34                            
0000CC34                            Obj34_MakeSprite:
0000CC34 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CC38 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CC40 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC46 137C 0078 0019             		move.b	#$78,$19(a1)
0000CC4C 137C 0000 0001             		move.b	#0,1(a1)
0000CC52 137C 0000 0018             		move.b	#0,$18(a1)
0000CC58 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CC5E 43E9 0040                  		lea	$40(a1),a1	; next object
0000CC62 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CC66                            
0000CC66                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CC66 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC68 3028 0030                  		move.w	$30(a0),d0
0000CC6C B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CC70 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CC72 6C00                       		bge.s	Obj34_Move
0000CC74 4441                       		neg.w	d1
0000CC76                            
0000CC76                            Obj34_Move:
0000CC76 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC7A                            
0000CC7A                            loc_C3C8:
0000CC7A 3028 0008                  		move.w	8(a0),d0
0000CC7E 6B00                       		bmi.s	locret_C3D8
0000CC80 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC84 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CC86 6000 0000                  		bra.w	DisplaySprite
0000CC8A                            ; ===========================================================================
0000CC8A                            
0000CC8A                            locret_C3D8:
0000CC8A 4E75                       		rts	
0000CC8C                            ; ===========================================================================
0000CC8C                            
0000CC8C                            Obj34_Wait:				; XREF: Obj34_Index
0000CC8C 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CC90 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CC92 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CC96 6000 0000                  		bra.w	DisplaySprite
0000CC9A                            ; ===========================================================================
0000CC9A                            
0000CC9A                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CC9A 4A28 0001                  		tst.b	1(a0)
0000CC9E 6A00                       		bpl.s	Obj34_ChangeArt
0000CCA0 7220                       		moveq	#$20,d1
0000CCA2 3028 0032                  		move.w	$32(a0),d0
0000CCA6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CCAA 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CCAC 6C00                       		bge.s	Obj34_Move2
0000CCAE 4441                       		neg.w	d1
0000CCB0                            
0000CCB0                            Obj34_Move2:
0000CCB0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCB4 3028 0008                  		move.w	8(a0),d0
0000CCB8 6B00                       		bmi.s	locret_C412
0000CCBA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCBE 6400                       		bcc.s	locret_C412	; if yes, branch
0000CCC0 6000 0000                  		bra.w	DisplaySprite
0000CCC4                            ; ===========================================================================
0000CCC4                            
0000CCC4                            locret_C412:
0000CCC4 4E75                       		rts	
0000CCC6                            ; ===========================================================================
0000CCC6                            
0000CCC6                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CCC6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CCCC 6600                       		bne.s	Obj34_Delete
0000CCCE 7002                       		moveq	#2,d0
0000CCD0 4EB9 0000 13B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CCD6 4EB9 0000 1398             		jsr	(LoadAnimalPLC).l ; load animal patterns
0000CCDC                            
0000CCDC                            Obj34_Delete:
0000CCDC 6000 0000                  		bra.w	DeleteObject
0000CCE0                            ; ===========================================================================
0000CCE0 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CCE2 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CCE4 00E4                       		dc.w $E4
0000CCE6 0206                       		dc.b 2,	6
0000CCE8 00EA                       		dc.w $EA
0000CCEA 0207                       		dc.b 2,	7
0000CCEC 00E0                       		dc.w $E0
0000CCEE 020A                       		dc.b 2,	$A
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            ; Title	card configuration data
0000CCF0                            ; Format:
0000CCF0                            ; 4 bytes per item (YYYY XXXX)
0000CCF0                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD00 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD10 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CD20 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CD30 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CD40 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CD50 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CD60 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; EPZ
0000CD70 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; INZ
0000CD80                            ; ===========================================================================
0000CD80                            ; ---------------------------------------------------------------------------
0000CD80                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CD80                            ; ---------------------------------------------------------------------------
0000CD80                            
0000CD80                            Obj39:					; XREF: Obj_Index
0000CD80 7000                       		moveq	#0,d0
0000CD82 1028 0024                  		move.b	$24(a0),d0
0000CD86 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CD8A 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CD8E                            ; ===========================================================================
0000CD8E 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CD90 0000                       		dc.w loc_C50C-Obj39_Index
0000CD92 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CD94                            ; ===========================================================================
0000CD94                            
0000CD94                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CD94 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD98 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CD9A 4E75                       		rts	
0000CD9C                            ; ===========================================================================
0000CD9C                            
0000CD9C                            Obj39_Main:
0000CD9C 5428 0024                  		addq.b	#2,$24(a0)
0000CDA0 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CDA6 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CDAC 6700                       		beq.s	loc_C4EC	; if not, branch
0000CDAE 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CDB4                            
0000CDB4                            loc_C4EC:
0000CDB4 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CDBA 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CDC2 317C 855E 0002             		move.w	#$855E,2(a0)
0000CDC8 117C 0000 0001             		move.b	#0,1(a0)
0000CDCE 117C 0000 0018             		move.b	#0,$18(a0)
0000CDD4                            
0000CDD4                            loc_C50C:				; XREF: Obj39_Index
0000CDD4 7210                       		moveq	#$10,d1		; set horizontal speed
0000CDD6 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CDDC 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CDDE 6500                       		bcs.s	Obj39_Move
0000CDE0 4441                       		neg.w	d1
0000CDE2                            
0000CDE2                            Obj39_Move:
0000CDE2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDE6 6000 0000                  		bra.w	DisplaySprite
0000CDEA                            ; ===========================================================================
0000CDEA                            
0000CDEA                            Obj39_SetWait:				; XREF: Obj39_Main
0000CDEA 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CDF0 5428 0024                  		addq.b	#2,$24(a0)
0000CDF4 4E75                       		rts	
0000CDF6                            ; ===========================================================================
0000CDF6                            
0000CDF6                            Obj39_Wait:				; XREF: Obj39_Index
0000CDF6 1038 F605                  		move.b	($FFFFF605).w,d0
0000CDFA 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CDFE 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE00 0828 0000 001A             		btst	#0,$1A(a0)
0000CE06 6600                       		bne.s	Obj39_Display
0000CE08 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE0C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE0E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE12 6000 0000                  		bra.w	DisplaySprite
0000CE16                            ; ===========================================================================
0000CE16                            
0000CE16                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE16 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CE1A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CE1C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CE22 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CE26 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CE28 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CE2E 6000                       		bra.s	Obj39_Display
0000CE30                            ; ===========================================================================
0000CE30                            
0000CE30                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CE30 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE36                            
0000CE36                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CE36 6000 0000                  		bra.w	DisplaySprite
0000CE3A                            ; ===========================================================================
0000CE3A                            ; ---------------------------------------------------------------------------
0000CE3A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CE3A                            ; ---------------------------------------------------------------------------
0000CE3A                            
0000CE3A                            Obj3A:					; XREF: Obj_Index
0000CE3A 7000                       		moveq	#0,d0
0000CE3C 1028 0024                  		move.b	$24(a0),d0
0000CE40 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CE44 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CE48                            ; ===========================================================================
0000CE48 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CE4A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CE4C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE4E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CE50 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE52 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CE54 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE56 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CE58 0000                       		dc.w loc_C766-Obj3A_Index
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CE5A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE5E 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CE60 4E75                       		rts	
0000CE62                            ; ===========================================================================
0000CE62                            
0000CE62                            Obj3A_Main:
0000CE62 2248                       		movea.l	a0,a1
0000CE64 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CE6A 7206                       		moveq	#6,d1
0000CE6C                            
0000CE6C                            Obj3A_Loop:
0000CE6C 12BC 003A                  		move.b	#$3A,0(a1)
0000CE70 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CE74 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CE78 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CE7C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CE80 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE84 101A                       		move.b	(a2)+,d0
0000CE86 0C00 0006                  		cmpi.b	#6,d0
0000CE8A 6600                       		bne.s	loc_C5CA
0000CE8C D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CE90                            
0000CE90                            loc_C5CA:
0000CE90 1340 001A                  		move.b	d0,$1A(a1)
0000CE94 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CE9C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CEA2 137C 0000 0001             		move.b	#0,1(a1)
0000CEA8 43E9 0040                  		lea	$40(a1),a1
0000CEAC 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CEB0                            
0000CEB0                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CEB0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEB2 3028 0030                  		move.w	$30(a0),d0
0000CEB6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEBA 6700                       		beq.s	loc_C61A	; if yes, branch
0000CEBC 6C00                       		bge.s	Obj3A_Move
0000CEBE 4441                       		neg.w	d1
0000CEC0                            
0000CEC0                            Obj3A_Move:
0000CEC0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEC4                            
0000CEC4                            loc_C5FE:				; XREF: loc_C61A
0000CEC4 3028 0008                  		move.w	8(a0),d0
0000CEC8 6B00                       		bmi.s	locret_C60E
0000CECA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CECE 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CED0 6000 0000                  		bra.w	DisplaySprite
0000CED4                            ; ===========================================================================
0000CED4                            
0000CED4                            locret_C60E:
0000CED4 4E75                       		rts	
0000CED6                            ; ===========================================================================
0000CED6                            
0000CED6                            loc_C610:				; XREF: loc_C61A
0000CED6 117C 000E 0024             		move.b	#$E,$24(a0)
0000CEDC 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CEE0                            ; ===========================================================================
0000CEE0                            
0000CEE0                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CEE0 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CEE6 67EE                       		beq.s	loc_C610
0000CEE8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEEE 66D4                       		bne.s	loc_C5FE
0000CEF0 5428 0024                  		addq.b	#2,$24(a0)
0000CEF4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CEFA                            
0000CEFA                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CEFA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CEFE 6600                       		bne.s	Obj3A_Display
0000CF00 5428 0024                  		addq.b	#2,$24(a0)
0000CF04                            
0000CF04                            Obj3A_Display:
0000CF04 6000 0000                  		bra.w	DisplaySprite
0000CF08                            ; ===========================================================================
0000CF08                            
0000CF08                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF08 6100 0000                  		bsr.w	DisplaySprite
0000CF0C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF12 7000                       		moveq	#0,d0
0000CF14 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF18 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CF1A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF1E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CF24                            
0000CF24                            Obj3A_RingBonus:
0000CF24 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF28 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CF2A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF2E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF34                            
0000CF34                            Obj3A_ChkBonus:
0000CF34 4A40                       		tst.w	d0		; is there any bonus?
0000CF36 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CF38 303C 00C5                  		move.w	#$C5,d0
0000CF3C 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF42 5428 0024                  		addq.b	#2,$24(a0)
0000CF46 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CF4C 6600                       		bne.s	Obj3A_SetDelay
0000CF4E 5828 0024                  		addq.b	#4,$24(a0)
0000CF52                            
0000CF52                            Obj3A_SetDelay:
0000CF52 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF58                            
0000CF58                            locret_C692:
0000CF58 4E75                       		rts	
0000CF5A                            ; ===========================================================================
0000CF5A                            
0000CF5A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CF5A 4EB9 0000 0000             		jsr	AddPoints
0000CF60 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF64 0200 0003                  		andi.b	#3,d0
0000CF68 66EE                       		bne.s	locret_C692
0000CF6A 303C 00CD                  		move.w	#$CD,d0
0000CF6E 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CF74                            ; ===========================================================================
0000CF74                            
0000CF74                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CF74 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CF78 0240 0007                  		andi.w	#7,d0
0000CF7C E748                       		lsl.w	#3,d0
0000CF7E 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CF82 0241 0003                  		andi.w	#3,d1
0000CF86 D241                       		add.w	d1,d1
0000CF88 D041                       		add.w	d1,d0
0000CF8A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CF8E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CF92 4A40                       		tst.w	d0
0000CF94 6600                       		bne.s	Obj3A_ChkSS
0000CF96 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CF9C 6000                       		bra.s	Obj3A_Display2
0000CF9E                            ; ===========================================================================
0000CF9E                            
0000CF9E                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CF9E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CFA2 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CFA6 6700                       		beq.s	loc_C6EA	; if not, branch
0000CFA8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CFAE 6000                       		bra.s	Obj3A_Display2
0000CFB0                            ; ===========================================================================
0000CFB0                            
0000CFB0                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CFB0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFB6                            
0000CFB6                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CFB6 6000 0000                  		bra.w	DisplaySprite
0000CFBA                            ; ===========================================================================
0000CFBA                            ; ---------------------------------------------------------------------------
0000CFBA                            ; Level	order array
0000CFBA                            ; ---------------------------------------------------------------------------
0000CFBA                            LevelOrder:	
0000CFBA 0801                       		dc.w	island_nowhere_act_2	; GHZ1
0000CFBC 0400                       		dc.w	spring_yard_act_1	; GHZ2
0000CFBE 0000                       		dc.w	lvlord_sega		; GHZ3
0000CFC0 0000                       		dc.w	lvlord_sega		; GHZ4
0000CFC2                            		
0000CFC2 0101                       		dc.w	labyrinth_act_2		; LZ1
0000CFC4 0102                       		dc.w	labyrinth_act_3		; LZ2
0000CFC6 0300                       		dc.w	star_light_act_1	; LZ3
0000CFC8 0502                       		dc.w	final_zone		; LZ4 (SBZ3)
0000CFCA                            		
0000CFCA 0502                       		dc.w	final_zone		; MZ1
0000CFCC 0000                       		dc.w	lvlord_sega			; MZ2
0000CFCE 0000                       		dc.w	lvlord_sega		; MZ3
0000CFD0 0000                       		dc.w	lvlord_sega		; MZ4
0000CFD2                            		
0000CFD2 0301                       		dc.w	star_light_act_2	; SLZ1
0000CFD4 0302                       		dc.w	star_light_act_3	; SLZ2
0000CFD6 0000                       		dc.w	lvlord_sega	; SLZ3
0000CFD8 0000                       		dc.w	lvlord_sega		; SLZ4
0000CFDA                            		
0000CFDA 0200                       		dc.w	marble_act_1	; SYZ1
0000CFDC 0000                       		dc.w	lvlord_sega		; SYZ2
0000CFDE 0000                       		dc.w	lvlord_sega		; SYZ3
0000CFE0 0000                       		dc.w	lvlord_sega		; SYZ4
0000CFE2                            		
0000CFE2 0000                       		dc.w	lvlord_sega	; SBZ1
0000CFE4 0103                       		dc.w	scrap_brain_act_3	; SBZ2
0000CFE6 0500                       		dc.w	scrap_brain_act_1		; SBZ3 (FZ)
0000CFE8 0000                       		dc.w	lvlord_sega		; SBZ4
0000CFEA                            		
0000CFEA 0000                       		dc.w	lvlord_sega
0000CFEC 0000                       		dc.w	lvlord_sega
0000CFEE 0000                       		dc.w	lvlord_sega
0000CFF0 0000                       		dc.w	lvlord_sega
0000CFF2                            		
0000CFF2 0701                       		dc.w	egg_plant_act_2 ; EPZ1
0000CFF4 0702                       		dc.w	egg_plant_act_3 ; EPZ2
0000CFF6 0800                       		dc.w	island_nowhere_act_1 ; EPZ3
0000CFF8 0000                       		dc.w	lvlord_sega ; EPZ4
0000CFFA                            		
0000CFFA 0801                       		dc.w	island_nowhere_act_2 ; Island Nowhere 1
0000CFFC 0802                       		dc.w	island_nowhere_act_3 ; Island Nowhere 3
0000CFFE 0000                       		dc.w	lvlord_sega ; Island Nowhere 3
0000D000 0000                       		dc.w	lvlord_sega ; Island Nowhere 4
0000D002                            		even
0000D002                            ; ===========================================================================
0000D002                            
0000D002                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D002 7220                       		moveq	#$20,d1		; set horizontal speed
0000D004 3028 0032                  		move.w	$32(a0),d0
0000D008 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D00C 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D00E 6C00                       		bge.s	Obj3A_Move2
0000D010 4441                       		neg.w	d1
0000D012                            
0000D012                            Obj3A_Move2:
0000D012 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D016 3028 0008                  		move.w	8(a0),d0
0000D01A 6B00                       		bmi.s	locret_C748
0000D01C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D020 6400                       		bcc.s	locret_C748	; if yes, branch
0000D022 6000 0000                  		bra.w	DisplaySprite
0000D026                            ; ===========================================================================
0000D026                            
0000D026                            locret_C748:
0000D026 4E75                       		rts	
0000D028                            ; ===========================================================================
0000D028                            
0000D028                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D028 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D02E 6600 0000                  		bne.w	DeleteObject
0000D032 5428 0024                  		addq.b	#2,$24(a0)
0000D036 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D03A 303C 008D                  		move.w	#$8D,d0
0000D03E 4EF9 0000 11AE             		jmp	(PlaySound).l	; play FZ music
0000D044                            ; ===========================================================================
0000D044                            
0000D044                            loc_C766:				; XREF: Obj3A_Index
0000D044 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D048 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D04E 6700 0000                  		beq.w	DeleteObject
0000D052 4E75                       		rts	
0000D054                            ; ===========================================================================
0000D054 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D05A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D05C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D062 0201                       		dc.b 2,	1
0000D064 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D06A 0206                       		dc.b 2,	6
0000D06C 0520 0120 00EC             		dc.w $520, $120, $EC
0000D072 0202                       		dc.b 2,	2
0000D074 0540 0120 00FC             		dc.w $540, $120, $FC
0000D07A 0203                       		dc.b 2,	3
0000D07C 0560 0120 010C             		dc.w $560, $120, $10C
0000D082 0204                       		dc.b 2,	4
0000D084 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D08A 0205                       		dc.b 2,	5
0000D08C                            ; ===========================================================================
0000D08C                            ; ---------------------------------------------------------------------------
0000D08C                            ; Object 7E - special stage results screen
0000D08C                            ; ---------------------------------------------------------------------------
0000D08C                            
0000D08C                            Obj7E:					; XREF: Obj_Index
0000D08C 7000                       		moveq	#0,d0
0000D08E 1028 0024                  		move.b	$24(a0),d0
0000D092 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D096 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D09A                            ; ===========================================================================
0000D09A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D09C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D09E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0A0 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D0A2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0A4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0A6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0A8 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D0AA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0AC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0AE 0000                       		dc.w loc_C91A-Obj7E_Index
0000D0B0                            ; ===========================================================================
0000D0B0                            
0000D0B0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D0B0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D0B4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D0B6 4E75                       		rts	
0000D0B8                            ; ===========================================================================
0000D0B8                            
0000D0B8                            Obj7E_Main:
0000D0B8 2248                       		movea.l	a0,a1
0000D0BA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D0C0 7203                       		moveq	#3,d1
0000D0C2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D0C8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D0CA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D0CC                            
0000D0CC                            Obj7E_Loop:
0000D0CC 12BC 007E                  		move.b	#$7E,0(a1)
0000D0D0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D0D4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D0D8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D0DC 135A 0024                  		move.b	(a2)+,$24(a1)
0000D0E0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D0E4 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D0EC 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0F2 137C 0000 0001             		move.b	#0,1(a1)
0000D0F8 43E9 0040                  		lea	$40(a1),a1
0000D0FC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D100                            
0000D100 7007                       		moveq	#7,d0
0000D102 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D106 6700                       		beq.s	loc_C842
0000D108 7000                       		moveq	#0,d0
0000D10A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D10E 6600                       		bne.s	loc_C842	; if not, branch
0000D110 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D112 317C 0018 0008             		move.w	#$18,8(a0)
0000D118 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D11E                            
0000D11E                            loc_C842:
0000D11E 1140 001A                  		move.b	d0,$1A(a0)
0000D122                            
0000D122                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D122 7210                       		moveq	#$10,d1		; set horizontal speed
0000D124 3028 0030                  		move.w	$30(a0),d0
0000D128 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D12C 6700                       		beq.s	loc_C86C	; if yes, branch
0000D12E 6C00                       		bge.s	Obj7E_Move
0000D130 4441                       		neg.w	d1
0000D132                            
0000D132                            Obj7E_Move:
0000D132 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D136                            
0000D136                            loc_C85A:				; XREF: loc_C86C
0000D136 3028 0008                  		move.w	8(a0),d0
0000D13A 6B00                       		bmi.s	locret_C86A
0000D13C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D140 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D142 6000 0000                  		bra.w	DisplaySprite
0000D146                            ; ===========================================================================
0000D146                            
0000D146                            locret_C86A:
0000D146 4E75                       		rts	
0000D148                            ; ===========================================================================
0000D148                            
0000D148                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D148 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D14E 66E6                       		bne.s	loc_C85A
0000D150 5428 0024                  		addq.b	#2,$24(a0)
0000D154 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D15A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D160                            
0000D160                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D160 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D164 6600                       		bne.s	Obj7E_Display
0000D166 5428 0024                  		addq.b	#2,$24(a0)
0000D16A                            
0000D16A                            Obj7E_Display:
0000D16A 6000 0000                  		bra.w	DisplaySprite
0000D16E                            ; ===========================================================================
0000D16E                            
0000D16E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D16E 6100 0000                  		bsr.w	DisplaySprite
0000D172 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D178 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D17C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D17E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D184 700A                       		moveq	#10,d0		; add 10 to score
0000D186 4EB9 0000 0000             		jsr	AddPoints
0000D18C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D190 0200 0003                  		andi.b	#3,d0
0000D194 6600                       		bne.s	locret_C8EA
0000D196 303C 00CD                  		move.w	#$CD,d0
0000D19A 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1A0                            ; ===========================================================================
0000D1A0                            
0000D1A0                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D1A0 303C 00C5                  		move.w	#$C5,d0
0000D1A4 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D1AA 5428 0024                  		addq.b	#2,$24(a0)
0000D1AE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1B4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D1BA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D1BC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D1C2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D1C6                            
0000D1C6                            locret_C8EA:
0000D1C6 4E75                       		rts	
0000D1C8                            ; ===========================================================================
0000D1C8                            
0000D1C8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D1C8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1CE 6000 0000                  		bra.w	DisplaySprite
0000D1D2                            ; ===========================================================================
0000D1D2                            
0000D1D2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D1D2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D1D8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D1DE 303C 00BF                  		move.w	#$BF,d0
0000D1E2 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play continues music
0000D1E8 5428 0024                  		addq.b	#2,$24(a0)
0000D1EC 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D1F2 6000 0000                  		bra.w	DisplaySprite
0000D1F6                            ; ===========================================================================
0000D1F6                            
0000D1F6                            loc_C91A:				; XREF: Obj7E_Index
0000D1F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1FA 0200 000F                  		andi.b	#$F,d0
0000D1FE 6600                       		bne.s	Obj7E_Display2
0000D200 0868 0000 001A             		bchg	#0,$1A(a0)
0000D206                            
0000D206                            Obj7E_Display2:
0000D206 6000 0000                  		bra.w	DisplaySprite
0000D20A                            ; ===========================================================================
0000D20A 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D210 0200                       		dc.b 2,	0		; rountine number, frame number
0000D212 0320 0120 0118             		dc.w $320, $120, $118
0000D218 0201                       		dc.b 2,	1
0000D21A 0360 0120 0128             		dc.w $360, $120, $128
0000D220 0202                       		dc.b 2,	2
0000D222 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D228 0203                       		dc.b 2,	3
0000D22A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D230 0206                       		dc.b 2,	6
0000D232                            ; ===========================================================================
0000D232                            ; ---------------------------------------------------------------------------
0000D232                            ; Object 7F - chaos emeralds from the special stage results screen
0000D232                            ; ---------------------------------------------------------------------------
0000D232                            
0000D232                            Obj7F:					; XREF: Obj_Index
0000D232 7000                       		moveq	#0,d0
0000D234 1028 0024                  		move.b	$24(a0),d0
0000D238 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D23C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D240                            ; ===========================================================================
0000D240 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D242 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D244                            
0000D244                            ; ---------------------------------------------------------------------------
0000D244                            ; X-axis positions for chaos emeralds
0000D244                            ; ---------------------------------------------------------------------------
0000D244 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D250                            ; ===========================================================================
0000D250                            
0000D250                            Obj7F_Main:				; XREF: Obj7F_Index
0000D250 2248                       		movea.l	a0,a1
0000D252 45F9 0000 D244             		lea	(Obj7F_PosData).l,a2
0000D258 7400                       		moveq	#0,d2
0000D25A 7200                       		moveq	#0,d1
0000D25C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D260 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D262 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D266                            
0000D266                            Obj7F_Loop:
0000D266 12BC 007F                  		move.b	#$7F,0(a1)
0000D26A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D26E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D274 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D278 1633 2000                  		move.b	(a3,d2.w),d3
0000D27C 1343 001A                  		move.b	d3,$1A(a1)
0000D280 1343 001C                  		move.b	d3,$1C(a1)
0000D284 5202                       		addq.b	#1,d2
0000D286 5429 0024                  		addq.b	#2,$24(a1)
0000D28A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D292 337C 8541 0002             		move.w	#$8541,2(a1)
0000D298 137C 0000 0001             		move.b	#0,1(a1)
0000D29E 43E9 0040                  		lea	$40(a1),a1	; next object
0000D2A2 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D2A6                            
0000D2A6                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D2A6 1028 001A                  		move.b	$1A(a0),d0
0000D2AA 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D2B0 0C00 0006                  		cmpi.b	#6,d0
0000D2B4 6600                       		bne.s	Obj7F_Display
0000D2B6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D2BC                            
0000D2BC                            Obj7F_Display:
0000D2BC 6000 0000                  		bra.w	DisplaySprite
0000D2C0                            ; ===========================================================================
0000D2C0                            ; ---------------------------------------------------------------------------
0000D2C0                            ; Sprite mappings - zone title cards
0000D2C0                            ; ---------------------------------------------------------------------------
0000D2C0 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D2C2 0000                       		dc.w byte_CA2C-Map_obj34
0000D2C4 0000                       		dc.w byte_CA5A-Map_obj34
0000D2C6 0000                       		dc.w byte_CA7A-Map_obj34
0000D2C8 0000                       		dc.w byte_CAA8-Map_obj34
0000D2CA 0000                       		dc.w byte_CADC-Map_obj34
0000D2CC 0000                       		dc.w byte_CB10-Map_obj34
0000D2CE 0000                       		dc.w byte_CB26-Map_obj34
0000D2D0 0000                       		dc.w byte_CB31-Map_obj34
0000D2D2 0000                       		dc.w byte_CB3C-Map_obj34
0000D2D4 0000                       		dc.w byte_CB47-Map_obj34
0000D2D6 0000                       		dc.w byte_CB8A-Map_obj34
0000D2D8 0000                       		dc.w TitleCard_EPZ-Map_obj34
0000D2DA 0000                       		dc.w TitleCard_INZ-Map_obj34
0000D2DC 00                         byte_C9FE:	dc.b 0 			; GREEN HILL
0000D2DD 00                         		dc.b 0
0000D2DE 00                         byte_CA2C:	dc.b 0			; LABYRINTH
0000D2DF 00                         		dc.b 0
0000D2E0 00                         byte_CA5A:	dc.b 0			; MARBLE
0000D2E1 00                         		dc.b 0
0000D2E2 00                         byte_CA7A:	dc.b 0			; STAR	LIGHT
0000D2E3 00                         		dc.b 0
0000D2E4 00                         byte_CAA8:	dc.b 0			; SPRING YARD
0000D2E5 00                         		dc.b 0
0000D2E6 00                         byte_CADC:	dc.b 0			; SCRAP BRAIN
0000D2E7 00                         		dc.b 0
0000D2E8 00                         byte_CB10:	dc.b 0			; ZONE
0000D2E9 00                         		dc.b 0
0000D2EA 00                         byte_CB26:	dc.b 0			; ACT 1
0000D2EB 00                         		dc.b 0
0000D2EC 00                         byte_CB31:	dc.b 0			; ACT 2
0000D2ED 00                         		dc.b 0
0000D2EE 00                         byte_CB3C:	dc.b 0			; ACT 3
0000D2EF 00                         		dc.b 0
0000D2F0 00                         byte_CB47:	dc.b $0			; Oval
0000D2F1 00                         		dc.b 0
0000D2F2 00                         byte_CB8A:	dc.b 0			; FINAL
0000D2F3 00                         		dc.b 0
0000D2F4 00                         TitleCard_EPZ:	dc.b 0 			; EGG PLANT
0000D2F5 00                         		dc.b 0
0000D2F6 00                         TitleCard_INZ:	dc.b 0 			; ISLAND NOWHERE
0000D2F7 00                         		dc.b 0
0000D2F8                            		even
0000D2F8                            ; ---------------------------------------------------------------------------
0000D2F8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2F8                            ; ---------------------------------------------------------------------------
0000D2F8                            Map_obj39:
0000D2F8                            	include "_maps\obj39.asm"
0000D2F8                            ; ---------------------------------------------------------------------------
0000D2F8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2F8                            ; ---------------------------------------------------------------------------
0000D2F8 0000                       		dc.w byte_CBAC-Map_obj39
0000D2FA 0000                       		dc.w byte_CBB7-Map_obj39
0000D2FC 0000                       		dc.w byte_CBC2-Map_obj39
0000D2FE 0000                       		dc.w byte_CBCD-Map_obj39
0000D300 02                         byte_CBAC:	dc.b 2
0000D301 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D306 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D30B 02                         byte_CBB7:	dc.b 2
0000D30C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D311 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D316 02                         byte_CBC2:	dc.b 2
0000D317 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D31C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D321 02                         byte_CBCD:	dc.b 2
0000D322 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D327 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D32C                            		even
0000D32C                            		even
0000D32C                            
0000D32C                            ; ---------------------------------------------------------------------------
0000D32C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D32C                            ; ---------------------------------------------------------------------------
0000D32C 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D32E 0000                       		dc.w byte_CC13-Map_obj3A
0000D330 0000                       		dc.w byte_CC32-Map_obj3A
0000D332 0000                       		dc.w byte_CC51-Map_obj3A
0000D334 0000                       		dc.w byte_CC75-Map_obj3A
0000D336 FFC4                       		dc.w byte_CB47-Map_obj3A
0000D338 FFBE                       		dc.w byte_CB26-Map_obj3A
0000D33A FFC0                       		dc.w byte_CB31-Map_obj3A
0000D33C FFC2                       		dc.w byte_CB3C-Map_obj3A
0000D33E 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D33F F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D344 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D349 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D34E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D353 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D358 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D35D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D362 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D367 06                         byte_CC13:	dc.b 6			; PASSED
0000D368 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D36D F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D372 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D377 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D37C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D381 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D386 06                         byte_CC32:	dc.b 6			; SCORE
0000D387 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D38C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D391 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D396 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D39B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3A0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3A5 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D3A6 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D3AB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3B0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3B5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3BA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3BF F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D3C4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3C9 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D3CA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3CF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3D4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3D9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3DE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3E3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D3E8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3EE 00                         		even
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            ; Sprite mappings - special stage results screen
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D3F0 0000                       		dc.w byte_CCEE-Map_obj7E
0000D3F2 0000                       		dc.w byte_CD0D-Map_obj7E
0000D3F4 FF02                       		dc.w byte_CB47-Map_obj7E
0000D3F6 0000                       		dc.w byte_CD31-Map_obj7E
0000D3F8 0000                       		dc.w byte_CD46-Map_obj7E
0000D3FA 0000                       		dc.w byte_CD5B-Map_obj7E
0000D3FC 0000                       		dc.w byte_CD6B-Map_obj7E
0000D3FE 0000                       		dc.w byte_CDA8-Map_obj7E
0000D400 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D401 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D406 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D40B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D410 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D415 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D41A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D41F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D424 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D429 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D42E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D433 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D438 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D43D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D442 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D443 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D448 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D44D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D452 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D457 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D45C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D461 07                         byte_CD0D:	dc.b 7
0000D462 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D467 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D46C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D471 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D476 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D47B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D480 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D485 04                         byte_CD31:	dc.b 4
0000D486 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D48B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D490 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D495 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D49A 04                         byte_CD46:	dc.b 4
0000D49B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4A0 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4A5 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4AA F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D4AF 03                         byte_CD5B:	dc.b 3
0000D4B0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4B5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4BA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4BF 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D4C0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D4C5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D4CA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D4CF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D4D4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D4D9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D4DE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D4E3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D4E8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D4ED F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D4F2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D4F7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D4FC 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D4FD F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D502 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D507 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D50C F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D511 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D516 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D51B F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D520 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D525 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D52A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D52F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D534 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D539 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D53E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D543 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D548                            		even
0000D548                            ; ---------------------------------------------------------------------------
0000D548                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D548                            ; ---------------------------------------------------------------------------
0000D548                            Map_obj7F:
0000D548                            	include "_maps\obj7F.asm"
0000D548                            ; ---------------------------------------------------------------------------
0000D548                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D548                            ; ---------------------------------------------------------------------------
0000D548 0000                       		dc.w byte_CE02-Map_obj7F
0000D54A 0000                       		dc.w byte_CE08-Map_obj7F
0000D54C 0000                       		dc.w byte_CE0E-Map_obj7F
0000D54E 0000                       		dc.w byte_CE14-Map_obj7F
0000D550 0000                       		dc.w byte_CE1A-Map_obj7F
0000D552 0000                       		dc.w byte_CE20-Map_obj7F
0000D554 0000                       		dc.w byte_CE26-Map_obj7F
0000D556 01                         byte_CE02:	dc.b 1
0000D557 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D55C 01                         byte_CE08:	dc.b 1
0000D55D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D562 01                         byte_CE0E:	dc.b 1
0000D563 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D568 01                         byte_CE14:	dc.b 1
0000D569 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D56E 01                         byte_CE1A:	dc.b 1
0000D56F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D574 01                         byte_CE20:	dc.b 1
0000D575 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D57A 00                         byte_CE26:	dc.b 0			; Blank frame
0000D57C 00                         		even
0000D57C 00                         		even
0000D57C                            
0000D57C                            ; ===========================================================================
0000D57C                            ; ---------------------------------------------------------------------------
0000D57C                            ; Object 36 - spikes
0000D57C                            ; ---------------------------------------------------------------------------
0000D57C                            
0000D57C                            Obj36:					; XREF: Obj_Index
0000D57C 7000                       		moveq	#0,d0
0000D57E 1028 0024                  		move.b	$24(a0),d0
0000D582 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D586 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D58A                            ; ===========================================================================
0000D58A 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D58C 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D58E                            
0000D58E 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D590 0110                       		dc.b 1,	$10
0000D592 0204                       		dc.b 2,	4
0000D594 031C                       		dc.b 3,	$1C
0000D596 0440                       		dc.b 4,	$40
0000D598 0510                       		dc.b 5,	$10
0000D59A                            ; ===========================================================================
0000D59A                            
0000D59A                            Obj36_Main:				; XREF: Obj36_Index
0000D59A 5428 0024                  		addq.b	#2,$24(a0)
0000D59E 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D5A6 317C 051B 0002             		move.w	#$51B,2(a0)
0000D5AC 0028 0004 0001             		ori.b	#4,1(a0)
0000D5B2 117C 0004 0018             		move.b	#4,$18(a0)
0000D5B8 1028 0028                  		move.b	$28(a0),d0
0000D5BC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D5C2 0240 00F0                  		andi.w	#$F0,d0
0000D5C6 43F9 0000 D58E             		lea	(Obj36_Var).l,a1
0000D5CC E648                       		lsr.w	#3,d0
0000D5CE D2C0                       		adda.w	d0,a1
0000D5D0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D5D4 1159 0019                  		move.b	(a1)+,$19(a0)
0000D5D8 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D5DE 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D5E4                            
0000D5E4                            Obj36_Solid:				; XREF: Obj36_Index
0000D5E4 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D5E8 343C 0004                  		move.w	#4,d2
0000D5EC 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D5F2 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D5F4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D5FA 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D5FC 343C 0014                  		move.w	#$14,d2
0000D600                            
0000D600                            ; Spikes types $1x and $5x face	sideways
0000D600                            
0000D600                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D600 323C 001B                  		move.w	#$1B,d1
0000D604 3602                       		move.w	d2,d3
0000D606 5243                       		addq.w	#1,d3
0000D608 3828 0008                  		move.w	8(a0),d4
0000D60C 6100 0000                  		bsr.w	SolidObject
0000D610 0828 0003 0022             		btst	#3,$22(a0)
0000D616 6600                       		bne.s	Obj36_Display
0000D618 0C44 0001                  		cmpi.w	#1,d4
0000D61C 6700                       		beq.s	Obj36_Hurt
0000D61E 6000                       		bra.s	Obj36_Display
0000D620                            ; ===========================================================================
0000D620                            
0000D620                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D620                            
0000D620                            Obj36_Upright:				; XREF: Obj36_Solid
0000D620 7200                       		moveq	#0,d1
0000D622 1228 0019                  		move.b	$19(a0),d1
0000D626 0641 000B                  		addi.w	#$B,d1
0000D62A 343C 0010                  		move.w	#$10,d2
0000D62E 363C 0011                  		move.w	#$11,d3
0000D632 3828 0008                  		move.w	8(a0),d4
0000D636 6100 0000                  		bsr.w	SolidObject
0000D63A 0828 0003 0022             		btst	#3,$22(a0)
0000D640 6600                       		bne.s	Obj36_Hurt
0000D642 4A44                       		tst.w	d4
0000D644 6A00                       		bpl.s	Obj36_Display
0000D646                            
0000D646                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D646 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D64A 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D64C 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D650 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D652 2F08                       		move.l	a0,-(sp)
0000D654 2448                       		movea.l	a0,a2
0000D656 41F8 D000                  		lea	($FFFFD000).w,a0
0000D65A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D660 6400                       		bcc.s	loc_CF20
0000D662 2628 000C                  		move.l	$C(a0),d3
0000D666 3028 0012                  		move.w	$12(a0),d0
0000D66A 48C0                       		ext.l	d0
0000D66C E180                       		asl.l	#8,d0
0000D66E 9680                       		sub.l	d0,d3
0000D670 2143 000C                  		move.l	d3,$C(a0)
0000D674 4EB9 0000 0000             		jsr	HurtSonic
0000D67A                            
0000D67A                            loc_CF20:
0000D67A 205F                       		movea.l	(sp)+,a0
0000D67C                            
0000D67C                            Obj36_Display:
0000D67C 6100 0000                  		bsr.w	DisplaySprite
0000D680 3028 0030                  		move.w	$30(a0),d0
0000D684 0240 FF80                  		andi.w	#$FF80,d0
0000D688 3238 F700                  		move.w	($FFFFF700).w,d1
0000D68C 0441 0080                  		subi.w	#$80,d1
0000D690 0241 FF80                  		andi.w	#$FF80,d1
0000D694 9041                       		sub.w	d1,d0
0000D696 0C40 0280                  		cmpi.w	#$280,d0
0000D69A 6200 0000                  		bhi.w	DeleteObject
0000D69E 4E75                       		rts	
0000D6A0                            ; ===========================================================================
0000D6A0                            
0000D6A0                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D6A0 7000                       		moveq	#0,d0
0000D6A2 1028 0028                  		move.b	$28(a0),d0
0000D6A6 D040                       		add.w	d0,d0
0000D6A8 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D6AC 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D6B0                            ; ===========================================================================
0000D6B0 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D6B2 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D6B4 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D6B6                            ; ===========================================================================
0000D6B6                            
0000D6B6                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D6B6 4E75                       		rts			; don't move the object
0000D6B8                            ; ===========================================================================
0000D6B8                            
0000D6B8                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D6B8 6100 0000                  		bsr.w	Obj36_Wait
0000D6BC 7000                       		moveq	#0,d0
0000D6BE 1028 0034                  		move.b	$34(a0),d0
0000D6C2 D068 0032                  		add.w	$32(a0),d0
0000D6C6 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D6CA 4E75                       		rts	
0000D6CC                            ; ===========================================================================
0000D6CC                            
0000D6CC                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D6CC 6100 0000                  		bsr.w	Obj36_Wait
0000D6D0 7000                       		moveq	#0,d0
0000D6D2 1028 0034                  		move.b	$34(a0),d0
0000D6D6 D068 0030                  		add.w	$30(a0),d0
0000D6DA 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D6DE 4E75                       		rts	
0000D6E0                            ; ===========================================================================
0000D6E0                            
0000D6E0                            Obj36_Wait:
0000D6E0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D6E4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D6E6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D6EA 6600                       		bne.s	locret_CFE6
0000D6EC 4A28 0001                  		tst.b	1(a0)
0000D6F0 6A00                       		bpl.s	locret_CFE6
0000D6F2 303C 00B6                  		move.w	#$B6,d0
0000D6F6 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D6FC 6000                       		bra.s	locret_CFE6
0000D6FE                            ; ===========================================================================
0000D6FE                            
0000D6FE                            loc_CFA4:
0000D6FE 4A68 0036                  		tst.w	$36(a0)
0000D702 6700                       		beq.s	loc_CFC6
0000D704 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D70A 6400                       		bcc.s	locret_CFE6
0000D70C 317C 0000 0034             		move.w	#0,$34(a0)
0000D712 317C 0000 0036             		move.w	#0,$36(a0)
0000D718 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D71E 6000                       		bra.s	locret_CFE6
0000D720                            ; ===========================================================================
0000D720                            
0000D720                            loc_CFC6:
0000D720 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D726 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D72C 6500                       		bcs.s	locret_CFE6
0000D72E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D734 317C 0001 0036             		move.w	#1,$36(a0)
0000D73A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D740                            
0000D740                            locret_CFE6:
0000D740 4E75                       		rts	
0000D742                            ; ===========================================================================
0000D742                            ; ---------------------------------------------------------------------------
0000D742                            ; Sprite mappings - spikes
0000D742                            ; ---------------------------------------------------------------------------
0000D742                            Map_obj36:
0000D742                            	include "_maps\obj36.asm"
0000D742                            ; ---------------------------------------------------------------------------
0000D742                            ; Sprite mappings - spikes
0000D742                            ; ---------------------------------------------------------------------------
0000D742 0000                       		dc.w byte_CFF4-Map_obj36
0000D744 0000                       		dc.w byte_D004-Map_obj36
0000D746 0000                       		dc.w byte_D014-Map_obj36
0000D748 0000                       		dc.w byte_D01A-Map_obj36
0000D74A 0000                       		dc.w byte_D02A-Map_obj36
0000D74C 0000                       		dc.w byte_D049-Map_obj36
0000D74E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D74F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D754 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D759 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D75E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D75F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D764 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D769 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D76E 01                         byte_D014:	dc.b 1			; 1 spike
0000D76F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D774 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D775 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D77A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D77F F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D784 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D785 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D78A F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D78F F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D794 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D799 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D79E F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D7A3 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D7A4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D7AA 00                         		even
0000D7AA 00                         		even
0000D7AA                            
0000D7AA                            ; ===========================================================================
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            ; Object 3B - purple rock (GHZ)
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            
0000D7AA                            Obj3B:					; XREF: Obj_Index
0000D7AA 7000                       		moveq	#0,d0
0000D7AC 1028 0024                  		move.b	$24(a0),d0
0000D7B0 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D7B4 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D7B8                            ; ===========================================================================
0000D7B8 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D7BA 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D7BC                            ; ===========================================================================
0000D7BC                            
0000D7BC                            Obj3B_Main:				; XREF: Obj3B_Index
0000D7BC 5428 0024                  		addq.b	#2,$24(a0)
0000D7C0 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D7C8 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D7CE 117C 0004 0001             		move.b	#4,1(a0)
0000D7D4 117C 0013 0019             		move.b	#$13,$19(a0)
0000D7DA 117C 0004 0018             		move.b	#4,$18(a0)
0000D7E0                            
0000D7E0                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D7E0 323C 001B                  		move.w	#$1B,d1
0000D7E4 343C 0010                  		move.w	#$10,d2
0000D7E8 363C 0010                  		move.w	#$10,d3
0000D7EC 3828 0008                  		move.w	8(a0),d4
0000D7F0 6100 0000                  		bsr.w	SolidObject
0000D7F4 6100 0000                  		bsr.w	DisplaySprite
0000D7F8 3028 0008                  		move.w	8(a0),d0
0000D7FC 0240 FF80                  		andi.w	#$FF80,d0
0000D800 3238 F700                  		move.w	($FFFFF700).w,d1
0000D804 0441 0080                  		subi.w	#$80,d1
0000D808 0241 FF80                  		andi.w	#$FF80,d1
0000D80C 9041                       		sub.w	d1,d0
0000D80E 0C40 0280                  		cmpi.w	#$280,d0
0000D812 6200 0000                  		bhi.w	DeleteObject
0000D816 4E75                       		rts	
0000D818                            ; ===========================================================================
0000D818                            ; ---------------------------------------------------------------------------
0000D818                            ; Object 49 - waterfall	sound effect (GHZ)
0000D818                            ; ---------------------------------------------------------------------------
0000D818                            
0000D818                            Obj49:					; XREF: Obj_Index
0000D818 7000                       		moveq	#0,d0
0000D81A 1028 0024                  		move.b	$24(a0),d0
0000D81E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D822 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D826                            ; ===========================================================================
0000D826 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D828 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D82A                            ; ===========================================================================
0000D82A                            
0000D82A                            Obj49_Main:				; XREF: Obj49_Index
0000D82A 5428 0024                  		addq.b	#2,$24(a0)
0000D82E 117C 0004 0001             		move.b	#4,1(a0)
0000D834                            
0000D834                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D834 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D838 0200 003F                  		andi.b	#$3F,d0
0000D83C 6600                       		bne.s	Obj49_ChkDel
0000D83E 303C 00D0                  		move.w	#$D0,d0
0000D842 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D848                            
0000D848                            Obj49_ChkDel:
0000D848 3028 0008                  		move.w	8(a0),d0
0000D84C 0240 FF80                  		andi.w	#$FF80,d0
0000D850 3238 F700                  		move.w	($FFFFF700).w,d1
0000D854 0441 0080                  		subi.w	#$80,d1
0000D858 0241 FF80                  		andi.w	#$FF80,d1
0000D85C 9041                       		sub.w	d1,d0
0000D85E 0C40 0280                  		cmpi.w	#$280,d0
0000D862 6200 0000                  		bhi.w	DeleteObject
0000D866 4E75                       		rts	
0000D868                            ; ===========================================================================
0000D868                            ; ---------------------------------------------------------------------------
0000D868                            ; Sprite mappings - purple rock	(GHZ)
0000D868                            ; ---------------------------------------------------------------------------
0000D868                            Map_obj3B:
0000D868                            	include "_maps\obj3B.asm"
0000D868                            ; ---------------------------------------------------------------------------
0000D868                            ; Sprite mappings - purple rock	(GHZ)
0000D868                            ; ---------------------------------------------------------------------------
0000D868 0000                       		dc.w byte_D110-Map_obj3B
0000D86A 02                         byte_D110:	dc.b 2
0000D86B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D870 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D876 00                         		even
0000D876 00                         		even
0000D876                            
0000D876                            ; ===========================================================================
0000D876                            ; ---------------------------------------------------------------------------
0000D876                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D876                            ; ---------------------------------------------------------------------------
0000D876                            
0000D876                            Obj3C:					; XREF: Obj_Index
0000D876 7000                       		moveq	#0,d0
0000D878 1028 0024                  		move.b	$24(a0),d0
0000D87C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D880 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D884 6000 0000                  		bra.w	MarkObjGone
0000D888                            ; ===========================================================================
0000D888 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D88A 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D88C 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D88E                            ; ===========================================================================
0000D88E                            
0000D88E                            Obj3C_Main:				; XREF: Obj3C_Index
0000D88E 5428 0024                  		addq.b	#2,$24(a0)
0000D892 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D89A 317C 450F 0002             		move.w	#$450F,2(a0)
0000D8A0 117C 0004 0001             		move.b	#4,1(a0)
0000D8A6 117C 0010 0019             		move.b	#$10,$19(a0)
0000D8AC 117C 0004 0018             		move.b	#4,$18(a0)
0000D8B2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D8B8                            
0000D8B8                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D8B8 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D8BE 323C 001B                  		move.w	#$1B,d1
0000D8C2 343C 0020                  		move.w	#$20,d2
0000D8C6 363C 0020                  		move.w	#$20,d3
0000D8CA 3828 0008                  		move.w	8(a0),d4
0000D8CE 6100 0000                  		bsr.w	SolidObject
0000D8D2 0828 0005 0022             		btst	#5,$22(a0)
0000D8D8 6600                       		bne.s	Obj3C_ChkRoll
0000D8DA                            
0000D8DA                            locret_D180:
0000D8DA 4E75                       		rts	
0000D8DC                            ; ===========================================================================
0000D8DC                            
0000D8DC                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D8DC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D8E2 66F6                       		bne.s	locret_D180	; if not, branch
0000D8E4 3028 0030                  		move.w	$30(a0),d0
0000D8E8 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D8EA 4440                       		neg.w	d0
0000D8EC                            
0000D8EC                            Obj3C_ChkSpeed:
0000D8EC 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D8F0 65E8                       		bcs.s	locret_D180	; if not, branch
0000D8F2 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D8F8 5869 0008                  		addq.w	#4,8(a1)
0000D8FC 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D902 3028 0008                  		move.w	8(a0),d0
0000D906 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D90A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D90C 5169 0008                  		subq.w	#8,8(a1)
0000D910 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D916                            
0000D916                            Obj3C_Smash:
0000D916 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D91C 08A8 0005 0022             		bclr	#5,$22(a0)
0000D922 08A9 0005 0022             		bclr	#5,$22(a1)
0000D928 7207                       		moveq	#7,d1		; load 8 fragments
0000D92A 343C 0070                  		move.w	#$70,d2
0000D92E 6100                       		bsr.s	SmashObject
0000D930                            
0000D930                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D930 6100 0000                  		bsr.w	SpeedToPos
0000D934 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D93A 6100 0000                  		bsr.w	DisplaySprite
0000D93E 4A28 0001                  		tst.b	1(a0)
0000D942 6A00 0000                  		bpl.w	DeleteObject
0000D946 4E75                       		rts	
0000D948                            
0000D948                            ; ---------------------------------------------------------------------------
0000D948                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D948                            ; ---------------------------------------------------------------------------
0000D948                            
0000D948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D948                            
0000D948                            
0000D948                            SmashObject:				; XREF: Obj3C_Smash
0000D948 7000                       		moveq	#0,d0
0000D94A 1028 001A                  		move.b	$1A(a0),d0
0000D94E D040                       		add.w	d0,d0
0000D950 2668 0004                  		movea.l	4(a0),a3
0000D954 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D958 524B                       		addq.w	#1,a3
0000D95A 08E8 0005 0001             		bset	#5,1(a0)
0000D960 1810                       		move.b	0(a0),d4
0000D962 1A28 0001                  		move.b	1(a0),d5
0000D966 2248                       		movea.l	a0,a1
0000D968 6000                       		bra.s	Smash_LoadFrag
0000D96A                            ; ===========================================================================
0000D96A                            
0000D96A                            Smash_Loop:
0000D96A 6100 0000                  		bsr.w	SingleObjLoad
0000D96E 6600                       		bne.s	Smash_PlaySnd
0000D970 5A4B                       		addq.w	#5,a3
0000D972                            
0000D972                            Smash_LoadFrag:				; XREF: SmashObject
0000D972 137C 0004 0024             		move.b	#4,$24(a1)
0000D978 1284                       		move.b	d4,0(a1)
0000D97A 234B 0004                  		move.l	a3,4(a1)
0000D97E 1345 0001                  		move.b	d5,1(a1)
0000D982 3368 0008 0008             		move.w	8(a0),8(a1)
0000D988 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D98E 3368 0002 0002             		move.w	2(a0),2(a1)
0000D994 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D99A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D9A0 335C 0010                  		move.w	(a4)+,$10(a1)
0000D9A4 335C 0012                  		move.w	(a4)+,$12(a1)
0000D9A8 B3C8                       		cmpa.l	a0,a1
0000D9AA 6400                       		bcc.s	loc_D268
0000D9AC 2F08                       		move.l	a0,-(sp)
0000D9AE 2049                       		movea.l	a1,a0
0000D9B0 6100 0000                  		bsr.w	SpeedToPos
0000D9B4 D568 0012                  		add.w	d2,$12(a0)
0000D9B8 205F                       		movea.l	(sp)+,a0
0000D9BA 6100 0000                  		bsr.w	DisplaySprite2
0000D9BE                            
0000D9BE                            loc_D268:
0000D9BE 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D9C2                            
0000D9C2                            Smash_PlaySnd:
0000D9C2 303C 00CB                  		move.w	#$CB,d0
0000D9C6 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D9CC                            ; End of function SmashObject
0000D9CC                            
0000D9CC                            ; ===========================================================================
0000D9CC                            ; Smashed block	fragment speeds
0000D9CC                            ;
0000D9CC 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D9D0 0600 FF00                  		dc.w $600, $FF00
0000D9D4 0600 0100                  		dc.w $600, $100
0000D9D8 0400 0500                  		dc.w $400, $500
0000D9DC 0600 FA00                  		dc.w $600, $FA00
0000D9E0 0800 FE00                  		dc.w $800, $FE00
0000D9E4 0800 0200                  		dc.w $800, $200
0000D9E8 0600 0600                  		dc.w $600, $600
0000D9EC                            
0000D9EC FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D9F0 F800 FE00                  		dc.w $F800, $FE00
0000D9F4 F800 0200                  		dc.w $F800, $200
0000D9F8 FA00 0600                  		dc.w $FA00, $600
0000D9FC FC00 FB00                  		dc.w $FC00, $FB00
0000DA00 FA00 FF00                  		dc.w $FA00, $FF00
0000DA04 FA00 0100                  		dc.w $FA00, $100
0000DA08 FC00 0500                  		dc.w $FC00, $500
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            Map_obj3C:
0000DA0C                            	include "_maps\obj3C.asm"
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA0E 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA10 0000                       		dc.w byte_D30E-Map_obj3C
0000DA12 08                         byte_D2BC:	dc.b 8
0000DA13 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA18 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA1D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA22 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA27 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA2C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA31 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA36 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA3B 08                         byte_D2E5:	dc.b 8
0000DA3C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA41 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA46 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA4B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA50 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA55 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA5A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA5F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA64 08                         byte_D30E:	dc.b 8
0000DA65 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA6A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA6F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA74 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA79 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DA7E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DA83 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DA88 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DA8E 00                         		even
0000DA8E 00                         		even
0000DA8E                            
0000DA8E                            ; ---------------------------------------------------------------------------
0000DA8E                            ; Object code loading subroutine
0000DA8E                            ; ---------------------------------------------------------------------------
0000DA8E                            
0000DA8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA8E                            
0000DA8E                            
0000DA8E                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DA8E 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DA92 7E7F                       		moveq	#$7F,d7
0000DA94 7000                       		moveq	#0,d0
0000DA96 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DA9C 6400                       		bcc.s	loc_D362
0000DA9E                            
0000DA9E                            loc_D348:
0000DA9E 1010                       		move.b	(a0),d0		; load object number from RAM
0000DAA0 6700                       		beq.s	loc_D358
0000DAA2 D040                       		add.w	d0,d0
0000DAA4 D040                       		add.w	d0,d0
0000DAA6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DAAA 4E91                       		jsr	(a1)		; run the object's code
0000DAAC 7000                       		moveq	#0,d0
0000DAAE                            
0000DAAE                            loc_D358:
0000DAAE 41E8 0040                  		lea	$40(a0),a0	; next object
0000DAB2 51CF FFEA                  		dbf	d7,loc_D348
0000DAB6 4E75                       		rts	
0000DAB8                            ; ===========================================================================
0000DAB8                            
0000DAB8                            loc_D362:
0000DAB8 7E1F                       		moveq	#$1F,d7
0000DABA 61E2                       		bsr.s	loc_D348
0000DABC 7E5F                       		moveq	#$5F,d7
0000DABE                            
0000DABE                            loc_D368:
0000DABE 7000                       		moveq	#0,d0
0000DAC0 1010                       		move.b	(a0),d0
0000DAC2 6700                       		beq.s	loc_D378
0000DAC4 4A28 0001                  		tst.b	1(a0)
0000DAC8 6A00                       		bpl.s	loc_D378
0000DACA 6100 0000                  		bsr.w	DisplaySprite
0000DACE                            
0000DACE                            loc_D378:
0000DACE 41E8 0040                  		lea	$40(a0),a0
0000DAD2                            
0000DAD2                            loc_D37C:
0000DAD2 51CF FFEA                  		dbf	d7,loc_D368
0000DAD6 4E75                       		rts	
0000DAD8                            ; End of function ObjectsLoad
0000DAD8                            
0000DAD8                            ; ===========================================================================
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            ; Object pointers
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            Obj_Index:
0000DAD8                            	include "_inc\Object pointers.asm"
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            ; Object pointers
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8 0000 0000 0000 0000 0000+  	dc.l Obj01, CurveGrip,	Obj03, ObjectFall
0000DAE8 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DAF8 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB08 0000 0000 0000 AECC 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB18 0000 7AD0 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB28 0000 80F6 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DB38 0000 8A1E 0000 8A54 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DB48 0000 909E 0000 938C 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DB58 0000 0000 0000 9FD8 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DB68 0000 A310 0000 A92E 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DB78 0000 9C44 0000 9174 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DB88 0000 B55A 0000 AB20 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DB98 0000 BF2C 0000 C5DA 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DBA8 0000 BA90 0000 D57C 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DBB8 0000 CD80 0000 CE3A 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DBC8 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DBD8 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DBE8 0000 C248 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DBF8 0000 D818 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC08 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC18 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC28 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DC38 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DC48 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DC58 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DC68 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DC78 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DC88 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DC98 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DCA8 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DCB8 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DCC8 0000 0000 0000 D08C 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DCD8 0000 5522 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DCE8 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DCF8 0000 5BD8 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DCF8 0000 5BD8 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD08                            
0000DD08                            ; ---------------------------------------------------------------------------
0000DD08                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD08                            ; ---------------------------------------------------------------------------
0000DD08                            
0000DD08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD08                            
0000DD08                            
0000DD08                            ObjectFall:
0000DD08 3028 0010                  		move.w	$10(a0),d0
0000DD0C 48C0                       		ext.l	d0
0000DD0E E188                       		lsl.l	#8,d0
0000DD10 D1A8 0008                  		add.l	d0,8(a0)
0000DD14 3028 0012                  		move.w	$12(a0),d0
0000DD18 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD1E 48C0                       		ext.l	d0
0000DD20 E188                       		lsl.l	#8,d0
0000DD22 D1A8 000C                  		add.l	d0,$C(a0)
0000DD26 4E75                       		rts	
0000DD28                            
0000DD28                            ; End of function ObjectFall
0000DD28                            
0000DD28                            ; ---------------------------------------------------------------------------
0000DD28                            ; Subroutine translating object	speed to update	object position
0000DD28                            ; ---------------------------------------------------------------------------
0000DD28                            
0000DD28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD28                            
0000DD28                            
0000DD28                            SpeedToPos:
0000DD28 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DD2C 48C0                       		ext.l	d0
0000DD2E E188                       		lsl.l	#8,d0		; multiply speed by $100
0000DD30 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000DD34 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DD38 48C0                       		ext.l	d0
0000DD3A E188                       		lsl.l	#8,d0		; multiply by $100
0000DD3C D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000DD40 4E75                       		rts	
0000DD42                            
0000DD42                            ; End of function SpeedToPos
0000DD42                            
0000DD42                            ; ---------------------------------------------------------------------------
0000DD42                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DD42                            ; ---------------------------------------------------------------------------
0000DD42                            
0000DD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD42                            
0000DD42                            
0000DD42                            DisplaySprite:
0000DD42 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DD46 3028 0018                  		move.w	$18(a0),d0
0000DD4A E248                       		lsr.w	#1,d0
0000DD4C 0240 0380                  		andi.w	#$380,d0
0000DD50 D2C0                       		adda.w	d0,a1
0000DD52 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DD56 6400                       		bcc.s	locret_D620
0000DD58 5451                       		addq.w	#2,(a1)
0000DD5A D2D1                       		adda.w	(a1),a1
0000DD5C 3288                       		move.w	a0,(a1)
0000DD5E                            
0000DD5E                            locret_D620:
0000DD5E 4E75                       		rts	
0000DD60                            ; End of function DisplaySprite
0000DD60                            
0000DD60                            ; ---------------------------------------------------------------------------
0000DD60                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DD60                            ; ---------------------------------------------------------------------------
0000DD60                            
0000DD60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD60                            
0000DD60                            
0000DD60                            DisplaySprite2:
0000DD60 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DD64 3029 0018                  		move.w	$18(a1),d0
0000DD68 E248                       		lsr.w	#1,d0
0000DD6A 0240 0380                  		andi.w	#$380,d0
0000DD6E D4C0                       		adda.w	d0,a2
0000DD70 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DD74 6400                       		bcc.s	locret_D63E
0000DD76 5452                       		addq.w	#2,(a2)
0000DD78 D4D2                       		adda.w	(a2),a2
0000DD7A 3489                       		move.w	a1,(a2)
0000DD7C                            
0000DD7C                            locret_D63E:
0000DD7C 4E75                       		rts	
0000DD7E                            ; End of function DisplaySprite2
0000DD7E                            
0000DD7E                            ; ---------------------------------------------------------------------------
0000DD7E                            ; Subroutine to	delete an object
0000DD7E                            ; ---------------------------------------------------------------------------
0000DD7E                            
0000DD7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD7E                            
0000DD7E                            
0000DD7E                            DeleteObject:
0000DD7E 2248                       		movea.l	a0,a1
0000DD80                            
0000DD80                            DeleteObject2:
0000DD80 7200                       		moveq	#0,d1
0000DD82 700F                       		moveq	#$F,d0
0000DD84                            
0000DD84                            loc_D646:
0000DD84 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DD86 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DD8A 4E75                       		rts	
0000DD8C                            ; End of function DeleteObject
0000DD8C                            
0000DD8C                            ; ===========================================================================
0000DD8C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DD90 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DD94 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DD98 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DD9C                            ; ---------------------------------------------------------------------------
0000DD9C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DD9C                            ; ---------------------------------------------------------------------------
0000DD9C                            
0000DD9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD9C                            
0000DD9C                            
0000DD9C                            BuildSprites:				; XREF: TitleScreen; et al
0000DD9C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DDA0 7A00                       		moveq	#0,d5
0000DDA2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DDA6 7E07                       		moveq	#7,d7
0000DDA8                            
0000DDA8                            loc_D66A:
0000DDA8 4A54                       		tst.w	(a4)
0000DDAA 6700 0000                  		beq.w	loc_D72E
0000DDAE 7C02                       		moveq	#2,d6
0000DDB0                            
0000DDB0                            loc_D672:
0000DDB0 3074 6000                  		movea.w	(a4,d6.w),a0
0000DDB4 4A10                       		tst.b	(a0)
0000DDB6 6700 0000                  		beq.w	loc_D726
0000DDBA 08A8 0007 0001             		bclr	#7,1(a0)
0000DDC0 1028 0001                  		move.b	1(a0),d0
0000DDC4 1800                       		move.b	d0,d4
0000DDC6 0240 000C                  		andi.w	#$C,d0
0000DDCA 6700                       		beq.s	loc_D6DE
0000DDCC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DDD0 7000                       		moveq	#0,d0
0000DDD2 1028 0019                  		move.b	$19(a0),d0
0000DDD6 3628 0008                  		move.w	8(a0),d3
0000DDDA 9651                       		sub.w	(a1),d3
0000DDDC 3203                       		move.w	d3,d1
0000DDDE D240                       		add.w	d0,d1
0000DDE0 6B00 0000                  		bmi.w	loc_D726
0000DDE4 3203                       		move.w	d3,d1
0000DDE6 9240                       		sub.w	d0,d1
0000DDE8 0C41 0140                  		cmpi.w	#$140,d1
0000DDEC 6C00                       		bge.s	loc_D726
0000DDEE 0643 0080                  		addi.w	#$80,d3
0000DDF2 0804 0004                  		btst	#4,d4
0000DDF6 6700                       		beq.s	loc_D6E8
0000DDF8 7000                       		moveq	#0,d0
0000DDFA 1028 0016                  		move.b	$16(a0),d0
0000DDFE 3428 000C                  		move.w	$C(a0),d2
0000DE02 9469 0004                  		sub.w	4(a1),d2
0000DE06 3202                       		move.w	d2,d1
0000DE08 D240                       		add.w	d0,d1
0000DE0A 6B00                       		bmi.s	loc_D726
0000DE0C 3202                       		move.w	d2,d1
0000DE0E 9240                       		sub.w	d0,d1
0000DE10 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE14 6C00                       		bge.s	loc_D726
0000DE16 0642 0080                  		addi.w	#$80,d2
0000DE1A 6000                       		bra.s	loc_D700
0000DE1C                            ; ===========================================================================
0000DE1C                            
0000DE1C                            loc_D6DE:
0000DE1C 3428 000A                  		move.w	$A(a0),d2
0000DE20 3628 0008                  		move.w	8(a0),d3
0000DE24 6000                       		bra.s	loc_D700
0000DE26                            ; ===========================================================================
0000DE26                            
0000DE26                            loc_D6E8:
0000DE26 3428 000C                  		move.w	$C(a0),d2
0000DE2A 9469 0004                  		sub.w	4(a1),d2
0000DE2E 0642 0080                  		addi.w	#$80,d2
0000DE32 0C42 0060                  		cmpi.w	#$60,d2
0000DE36 6500                       		bcs.s	loc_D726
0000DE38 0C42 0180                  		cmpi.w	#$180,d2
0000DE3C 6400                       		bcc.s	loc_D726
0000DE3E                            
0000DE3E                            loc_D700:
0000DE3E 2268 0004                  		movea.l	4(a0),a1
0000DE42 7200                       		moveq	#0,d1
0000DE44 0804 0005                  		btst	#5,d4
0000DE48 6600                       		bne.s	loc_D71C
0000DE4A 1228 001A                  		move.b	$1A(a0),d1
0000DE4E D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000DE50 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DE54 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000DE56 1219                       		move.b	(a1)+,d1
0000DE58 5301                       		subq.b	#1,d1
0000DE5A 6B00                       		bmi.s	loc_D720
0000DE5C                            
0000DE5C                            loc_D71C:
0000DE5C 6100 0000                  		bsr.w	sub_D750
0000DE60                            
0000DE60                            loc_D720:
0000DE60 08E8 0007 0001             		bset	#7,1(a0)
0000DE66                            
0000DE66                            loc_D726:
0000DE66 5446                       		addq.w	#2,d6
0000DE68 5554                       		subq.w	#2,(a4)
0000DE6A 6600 FF44                  		bne.w	loc_D672
0000DE6E                            
0000DE6E                            loc_D72E:
0000DE6E 49EC 0080                  		lea	$80(a4),a4
0000DE72 51CF FF34                  		dbf	d7,loc_D66A
0000DE76 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DE7A 0C05 0050                  		cmpi.b	#$50,d5
0000DE7E 6700                       		beq.s	loc_D748
0000DE80 24BC 0000 0000             		move.l	#0,(a2)
0000DE86 4E75                       		rts	
0000DE88                            ; ===========================================================================
0000DE88                            
0000DE88                            loc_D748:
0000DE88 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DE8E 4E75                       		rts	
0000DE90                            ; End of function BuildSprites
0000DE90                            
0000DE90                            
0000DE90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE90                            
0000DE90                            
0000DE90                            sub_D750:				; XREF: BuildSprites
0000DE90 3668 0002                  		movea.w	2(a0),a3
0000DE94 0804 0000                  		btst	#0,d4
0000DE98 6600                       		bne.s	loc_D796
0000DE9A 0804 0001                  		btst	#1,d4
0000DE9E 6600 0000                  		bne.w	loc_D7E4
0000DEA2                            ; End of function sub_D750
0000DEA2                            
0000DEA2                            
0000DEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA2                            
0000DEA2                            
0000DEA2                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DEA2 0C05 0050                  		cmpi.b	#$50,d5
0000DEA6 6700                       		beq.s	locret_D794
0000DEA8 1019                       		move.b	(a1)+,d0
0000DEAA 4880                       		ext.w	d0
0000DEAC D042                       		add.w	d2,d0
0000DEAE 34C0                       		move.w	d0,(a2)+
0000DEB0 14D9                       		move.b	(a1)+,(a2)+
0000DEB2 5205                       		addq.b	#1,d5
0000DEB4 14C5                       		move.b	d5,(a2)+
0000DEB6 1019                       		move.b	(a1)+,d0
0000DEB8 E148                       		lsl.w	#8,d0
0000DEBA 1019                       		move.b	(a1)+,d0
0000DEBC D04B                       		add.w	a3,d0
0000DEBE 34C0                       		move.w	d0,(a2)+
0000DEC0 1019                       		move.b	(a1)+,d0
0000DEC2 4880                       		ext.w	d0
0000DEC4 D043                       		add.w	d3,d0
0000DEC6 0240 01FF                  		andi.w	#$1FF,d0
0000DECA 6600                       		bne.s	loc_D78E
0000DECC 5240                       		addq.w	#1,d0
0000DECE                            
0000DECE                            loc_D78E:
0000DECE 34C0                       		move.w	d0,(a2)+
0000DED0 51C9 FFD0                  		dbf	d1,sub_D762
0000DED4                            
0000DED4                            locret_D794:
0000DED4 4E75                       		rts	
0000DED6                            ; End of function sub_D762
0000DED6                            
0000DED6                            ; ===========================================================================
0000DED6                            
0000DED6                            loc_D796:
0000DED6 0804 0001                  		btst	#1,d4
0000DEDA 6600 0000                  		bne.w	loc_D82A
0000DEDE                            
0000DEDE                            loc_D79E:
0000DEDE 0C05 0050                  		cmpi.b	#$50,d5
0000DEE2 6700                       		beq.s	locret_D7E2
0000DEE4 1019                       		move.b	(a1)+,d0
0000DEE6 4880                       		ext.w	d0
0000DEE8 D042                       		add.w	d2,d0
0000DEEA 34C0                       		move.w	d0,(a2)+
0000DEEC 1819                       		move.b	(a1)+,d4
0000DEEE 14C4                       		move.b	d4,(a2)+
0000DEF0 5205                       		addq.b	#1,d5
0000DEF2 14C5                       		move.b	d5,(a2)+
0000DEF4 1019                       		move.b	(a1)+,d0
0000DEF6 E148                       		lsl.w	#8,d0
0000DEF8 1019                       		move.b	(a1)+,d0
0000DEFA D04B                       		add.w	a3,d0
0000DEFC 0A40 0800                  		eori.w	#$800,d0
0000DF00 34C0                       		move.w	d0,(a2)+
0000DF02 1019                       		move.b	(a1)+,d0
0000DF04 4880                       		ext.w	d0
0000DF06 4440                       		neg.w	d0
0000DF08 D804                       		add.b	d4,d4
0000DF0A 0244 0018                  		andi.w	#$18,d4
0000DF0E 5044                       		addq.w	#8,d4
0000DF10 9044                       		sub.w	d4,d0
0000DF12 D043                       		add.w	d3,d0
0000DF14 0240 01FF                  		andi.w	#$1FF,d0
0000DF18 6600                       		bne.s	loc_D7DC
0000DF1A 5240                       		addq.w	#1,d0
0000DF1C                            
0000DF1C                            loc_D7DC:
0000DF1C 34C0                       		move.w	d0,(a2)+
0000DF1E 51C9 FFBE                  		dbf	d1,loc_D79E
0000DF22                            
0000DF22                            locret_D7E2:
0000DF22 4E75                       		rts	
0000DF24                            ; ===========================================================================
0000DF24                            
0000DF24                            loc_D7E4:				; XREF: sub_D750
0000DF24 0C05 0050                  		cmpi.b	#$50,d5
0000DF28 6700                       		beq.s	locret_D828
0000DF2A 1019                       		move.b	(a1)+,d0
0000DF2C 1811                       		move.b	(a1),d4
0000DF2E 4880                       		ext.w	d0
0000DF30 4440                       		neg.w	d0
0000DF32 E70C                       		lsl.b	#3,d4
0000DF34 0244 0018                  		andi.w	#$18,d4
0000DF38 5044                       		addq.w	#8,d4
0000DF3A 9044                       		sub.w	d4,d0
0000DF3C D042                       		add.w	d2,d0
0000DF3E 34C0                       		move.w	d0,(a2)+
0000DF40 14D9                       		move.b	(a1)+,(a2)+
0000DF42 5205                       		addq.b	#1,d5
0000DF44 14C5                       		move.b	d5,(a2)+
0000DF46 1019                       		move.b	(a1)+,d0
0000DF48 E148                       		lsl.w	#8,d0
0000DF4A 1019                       		move.b	(a1)+,d0
0000DF4C D04B                       		add.w	a3,d0
0000DF4E 0A40 1000                  		eori.w	#$1000,d0
0000DF52 34C0                       		move.w	d0,(a2)+
0000DF54 1019                       		move.b	(a1)+,d0
0000DF56 4880                       		ext.w	d0
0000DF58 D043                       		add.w	d3,d0
0000DF5A 0240 01FF                  		andi.w	#$1FF,d0
0000DF5E 6600                       		bne.s	loc_D822
0000DF60 5240                       		addq.w	#1,d0
0000DF62                            
0000DF62                            loc_D822:
0000DF62 34C0                       		move.w	d0,(a2)+
0000DF64 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DF68                            
0000DF68                            locret_D828:
0000DF68 4E75                       		rts	
0000DF6A                            ; ===========================================================================
0000DF6A                            
0000DF6A                            loc_D82A:
0000DF6A 0C05 0050                  		cmpi.b	#$50,d5
0000DF6E 6700                       		beq.s	locret_D87C
0000DF70 1019                       		move.b	(a1)+,d0
0000DF72 1811                       		move.b	(a1),d4
0000DF74 4880                       		ext.w	d0
0000DF76 4440                       		neg.w	d0
0000DF78 E70C                       		lsl.b	#3,d4
0000DF7A 0244 0018                  		andi.w	#$18,d4
0000DF7E 5044                       		addq.w	#8,d4
0000DF80 9044                       		sub.w	d4,d0
0000DF82 D042                       		add.w	d2,d0
0000DF84 34C0                       		move.w	d0,(a2)+
0000DF86 1819                       		move.b	(a1)+,d4
0000DF88 14C4                       		move.b	d4,(a2)+
0000DF8A 5205                       		addq.b	#1,d5
0000DF8C 14C5                       		move.b	d5,(a2)+
0000DF8E 1019                       		move.b	(a1)+,d0
0000DF90 E148                       		lsl.w	#8,d0
0000DF92 1019                       		move.b	(a1)+,d0
0000DF94 D04B                       		add.w	a3,d0
0000DF96 0A40 1800                  		eori.w	#$1800,d0
0000DF9A 34C0                       		move.w	d0,(a2)+
0000DF9C 1019                       		move.b	(a1)+,d0
0000DF9E 4880                       		ext.w	d0
0000DFA0 4440                       		neg.w	d0
0000DFA2 D804                       		add.b	d4,d4
0000DFA4 0244 0018                  		andi.w	#$18,d4
0000DFA8 5044                       		addq.w	#8,d4
0000DFAA 9044                       		sub.w	d4,d0
0000DFAC D043                       		add.w	d3,d0
0000DFAE 0240 01FF                  		andi.w	#$1FF,d0
0000DFB2 6600                       		bne.s	loc_D876
0000DFB4 5240                       		addq.w	#1,d0
0000DFB6                            
0000DFB6                            loc_D876:
0000DFB6 34C0                       		move.w	d0,(a2)+
0000DFB8 51C9 FFB0                  		dbf	d1,loc_D82A
0000DFBC                            
0000DFBC                            locret_D87C:
0000DFBC 4E75                       		rts	
0000DFBE                            ; ---------------------------------------------------------------------------
0000DFBE                            ; Subroutine to	check if an object is on the screen
0000DFBE                            ; ---------------------------------------------------------------------------
0000DFBE                            
0000DFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFBE                            
0000DFBE                            
0000DFBE                            ChkObjOnScreen:
0000DFBE 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DFC2 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DFC6 6B00                       		bmi.s	NotOnScreen
0000DFC8 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DFCC 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFCE                            
0000DFCE 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DFD2 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DFD6 6B00                       		bmi.s	NotOnScreen
0000DFD8 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DFDC 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFDE                            
0000DFDE 7000                       		moveq	#0,d0		; set flag to 0
0000DFE0 4E75                       		rts	
0000DFE2                            ; ===========================================================================
0000DFE2                            
0000DFE2                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DFE2 7001                       		moveq	#1,d0		; set flag to 1
0000DFE4 4E75                       		rts	
0000DFE6                            ; End of function ChkObjOnScreen
0000DFE6                            
0000DFE6                            
0000DFE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFE6                            
0000DFE6                            
0000DFE6                            ChkObjOnScreen2:
0000DFE6 7200                       		moveq	#0,d1
0000DFE8 1228 0019                  		move.b	$19(a0),d1
0000DFEC 3028 0008                  		move.w	8(a0),d0
0000DFF0 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DFF4 D041                       		add.w	d1,d0
0000DFF6 6B00                       		bmi.s	NotOnScreen2
0000DFF8 D241                       		add.w	d1,d1
0000DFFA 9041                       		sub.w	d1,d0
0000DFFC 0C40 0140                  		cmpi.w	#320,d0
0000E000 6C00                       		bge.s	NotOnScreen2
0000E002                            
0000E002 3228 000C                  		move.w	$C(a0),d1
0000E006 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E00A 6B00                       		bmi.s	NotOnScreen2
0000E00C 0C41 00E0                  		cmpi.w	#224,d1
0000E010 6C00                       		bge.s	NotOnScreen2
0000E012                            
0000E012 7000                       		moveq	#0,d0
0000E014 4E75                       		rts	
0000E016                            ; ===========================================================================
0000E016                            
0000E016                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E016 7001                       		moveq	#1,d0
0000E018 4E75                       		rts	
0000E01A                            ; End of function ChkObjOnScreen2
0000E01A                            
0000E01A                            ; ---------------------------------------------------------------------------
0000E01A                            ; Subroutine to	load a level's objects
0000E01A                            ; ---------------------------------------------------------------------------
0000E01A                            
0000E01A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E01A                            
0000E01A                            
0000E01A                            ObjPosLoad:				; XREF: Level; et al
0000E01A 7000                       		moveq	#0,d0
0000E01C 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E020 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E024 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E028                            ; End of function ObjPosLoad
0000E028                            
0000E028                            ; ===========================================================================
0000E028 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E02A 0000                       		dc.w OPL_Next-OPL_Index
0000E02C                            ; ===========================================================================
0000E02C                            
0000E02C                            OPL_Main:				; XREF: OPL_Index
0000E02C 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E030 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E034 ED08                       		lsl.b	#6,d0
0000E036 E848                       		lsr.w	#4,d0
0000E038 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E03E 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1? (Encore Mode)
0000E044 6600 0000                  		bne.w	OPL_MainCont	; if not, branch
0000E048 41F9 0000 0000             		lea	(ObjPos_IndexEncore).l,a0	; use Encore index
0000E04E 4EF9 0000 0000             		jmp	OPL_MainCont
0000E054                            		
0000E054                            OPL_MainCont:
0000E054 2248                       		movea.l	a0,a1
0000E056 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E05A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E05E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E062 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E066 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E06A 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E06E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E072 34FC 0101                  		move.w	#$101,(a2)+
0000E076 303C 005E                  		move.w	#$5E,d0
0000E07A                            
0000E07A                            OPL_ClrList:
0000E07A 429A                       		clr.l	(a2)+
0000E07C 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E080                            
0000E080 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E084 7400                       		moveq	#0,d2
0000E086 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E08A 0446 0080                  		subi.w	#$80,d6
0000E08E 6400                       		bcc.s	loc_D93C
0000E090 7C00                       		moveq	#0,d6
0000E092                            
0000E092                            loc_D93C:
0000E092 0246 FF80                  		andi.w	#$FF80,d6
0000E096 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E09A                            
0000E09A                            loc_D944:
0000E09A BC50                       		cmp.w	(a0),d6
0000E09C 6300                       		bls.s	loc_D956
0000E09E 4A28 0004                  		tst.b	4(a0)
0000E0A2 6A00                       		bpl.s	loc_D952
0000E0A4 1412                       		move.b	(a2),d2
0000E0A6 5212                       		addq.b	#1,(a2)
0000E0A8                            
0000E0A8                            loc_D952:
0000E0A8 5C48                       		addq.w	#6,a0
0000E0AA 60EE                       		bra.s	loc_D944
0000E0AC                            ; ===========================================================================
0000E0AC                            
0000E0AC                            loc_D956:
0000E0AC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0B0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0B4 0446 0080                  		subi.w	#$80,d6
0000E0B8 6500                       		bcs.s	loc_D976
0000E0BA                            
0000E0BA                            loc_D964:
0000E0BA BC50                       		cmp.w	(a0),d6
0000E0BC 6300                       		bls.s	loc_D976
0000E0BE 4A28 0004                  		tst.b	4(a0)
0000E0C2 6A00                       		bpl.s	loc_D972
0000E0C4 522A 0001                  		addq.b	#1,1(a2)
0000E0C8                            
0000E0C8                            loc_D972:
0000E0C8 5C48                       		addq.w	#6,a0
0000E0CA 60EE                       		bra.s	loc_D964
0000E0CC                            ; ===========================================================================
0000E0CC                            
0000E0CC                            loc_D976:
0000E0CC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0D0 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E0D6                            
0000E0D6                            OPL_Next:				; XREF: OPL_Index
0000E0D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0DA 7400                       		moveq	#0,d2
0000E0DC 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0E0 0246 FF80                  		andi.w	#$FF80,d6
0000E0E4 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E0E8 6700 0000                  		beq.w	locret_DA3A
0000E0EC 6C00                       		bge.s	loc_D9F6
0000E0EE 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E0F2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0F6 0446 0080                  		subi.w	#$80,d6
0000E0FA 6500                       		bcs.s	loc_D9D2
0000E0FC                            
0000E0FC                            loc_D9A6:
0000E0FC BC68 FFFA                  		cmp.w	-6(a0),d6
0000E100 6C00                       		bge.s	loc_D9D2
0000E102 5D48                       		subq.w	#6,a0
0000E104 4A28 0004                  		tst.b	4(a0)
0000E108 6A00                       		bpl.s	loc_D9BC
0000E10A 532A 0001                  		subq.b	#1,1(a2)
0000E10E 142A 0001                  		move.b	1(a2),d2
0000E112                            
0000E112                            loc_D9BC:
0000E112 6100 0000                  		bsr.w	loc_DA3C
0000E116 6600                       		bne.s	loc_D9C6
0000E118 5D48                       		subq.w	#6,a0
0000E11A 60E0                       		bra.s	loc_D9A6
0000E11C                            ; ===========================================================================
0000E11C                            
0000E11C                            loc_D9C6:
0000E11C 4A28 0004                  		tst.b	4(a0)
0000E120 6A00                       		bpl.s	loc_D9D0
0000E122 522A 0001                  		addq.b	#1,1(a2)
0000E126                            
0000E126                            loc_D9D0:
0000E126 5C48                       		addq.w	#6,a0
0000E128                            
0000E128                            loc_D9D2:
0000E128 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E12C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E130 0646 0300                  		addi.w	#$300,d6
0000E134                            
0000E134                            loc_D9DE:
0000E134 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E138 6E00                       		bgt.s	loc_D9F0
0000E13A 4A28 FFFE                  		tst.b	-2(a0)
0000E13E 6A00                       		bpl.s	loc_D9EC
0000E140 5312                       		subq.b	#1,(a2)
0000E142                            
0000E142                            loc_D9EC:
0000E142 5D48                       		subq.w	#6,a0
0000E144 60EE                       		bra.s	loc_D9DE
0000E146                            ; ===========================================================================
0000E146                            
0000E146                            loc_D9F0:
0000E146 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E14A 4E75                       		rts	
0000E14C                            ; ===========================================================================
0000E14C                            
0000E14C                            loc_D9F6:
0000E14C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E150 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E154 0646 0280                  		addi.w	#$280,d6
0000E158                            
0000E158                            loc_DA02:
0000E158 BC50                       		cmp.w	(a0),d6
0000E15A 6300                       		bls.s	loc_DA16
0000E15C 4A28 0004                  		tst.b	4(a0)
0000E160 6A00                       		bpl.s	loc_DA10
0000E162 1412                       		move.b	(a2),d2
0000E164 5212                       		addq.b	#1,(a2)
0000E166                            
0000E166                            loc_DA10:
0000E166 6100 0000                  		bsr.w	loc_DA3C
0000E16A 67EC                       		beq.s	loc_DA02
0000E16C 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E170 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E172 5312                       		subq.b	#$01,(a2)	; move right counter back
0000E174                            
0000E174                            loc_DA16:
0000E174 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E178 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E17C 0446 0300                  		subi.w	#$300,d6
0000E180 6500                       		bcs.s	loc_DA36
0000E182                            
0000E182                            loc_DA24:
0000E182 BC50                       		cmp.w	(a0),d6
0000E184 6300                       		bls.s	loc_DA36
0000E186 4A28 0004                  		tst.b	4(a0)
0000E18A 6A00                       		bpl.s	loc_DA32
0000E18C 522A 0001                  		addq.b	#1,1(a2)
0000E190                            
0000E190                            loc_DA32:
0000E190 5C48                       		addq.w	#6,a0
0000E192 60EE                       		bra.s	loc_DA24
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            loc_DA36:
0000E194 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E198                            
0000E198                            locret_DA3A:
0000E198 4E75                       		rts	
0000E19A                            ; ===========================================================================
0000E19A                            
0000E19A                            loc_DA3C:
0000E19A 4A28 0004                  		tst.b	4(a0)
0000E19E 6A00                       		bpl.s	OPL_MakeItem
0000E1A0 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E1A6 6700                       		beq.s	OPL_MakeItem
0000E1A8 5C48                       		addq.w	#6,a0
0000E1AA 7000                       		moveq	#0,d0
0000E1AC 4E75                       		rts	
0000E1AE                            ; ===========================================================================
0000E1AE                            
0000E1AE                            OPL_MakeItem:
0000E1AE 6100 0000                  		bsr.w	SingleObjLoad
0000E1B2 6600                       		bne.s	locret_DA8A
0000E1B4 3358 0008                  		move.w	(a0)+,8(a1)
0000E1B8 3018                       		move.w	(a0)+,d0
0000E1BA 3200                       		move.w	d0,d1
0000E1BC 0240 0FFF                  		andi.w	#$FFF,d0
0000E1C0 3340 000C                  		move.w	d0,$C(a1)
0000E1C4 E559                       		rol.w	#2,d1
0000E1C6 0201 0003                  		andi.b	#3,d1
0000E1CA 1341 0001                  		move.b	d1,1(a1)
0000E1CE 1341 0022                  		move.b	d1,$22(a1)
0000E1D2 1018                       		move.b	(a0)+,d0
0000E1D4 6A00                       		bpl.s	loc_DA80
0000E1D6 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E1DC 0200 007F                  		andi.b	#$7F,d0
0000E1E0 1342 0023                  		move.b	d2,$23(a1)
0000E1E4                            
0000E1E4                            loc_DA80:
0000E1E4 1280                       		move.b	d0,0(a1)
0000E1E6 1358 0028                  		move.b	(a0)+,$28(a1)
0000E1EA 7000                       		moveq	#0,d0
0000E1EC                            
0000E1EC                            locret_DA8A:
0000E1EC 4E75                       		rts	
0000E1EE                            ; ---------------------------------------------------------------------------
0000E1EE                            ; Single object	loading	subroutine
0000E1EE                            ; ---------------------------------------------------------------------------
0000E1EE                            
0000E1EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1EE                            
0000E1EE                            
0000E1EE                            SingleObjLoad:
0000E1EE 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E1F2 303C 005F                  		move.w	#$5F,d0
0000E1F6                            
0000E1F6                            loc_DA94:
0000E1F6 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E1F8 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E1FA 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E1FE 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E202                            
0000E202                            locret_DAA0:
0000E202 4E75                       		rts	
0000E204                            ; End of function SingleObjLoad
0000E204                            
0000E204                            
0000E204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E204                            
0000E204                            
0000E204                            SingleObjLoad2:
0000E204 2248                       		movea.l	a0,a1
0000E206 303C F000                  		move.w	#-$1000,d0
0000E20A 9048                       		sub.w	a0,d0
0000E20C EC48                       		lsr.w	#6,d0
0000E20E 5340                       		subq.w	#1,d0
0000E210 6500                       		bcs.s	locret_DABC
0000E212                            
0000E212                            loc_DAB0:
0000E212 4A11                       		tst.b	(a1)
0000E214 6700                       		beq.s	locret_DABC
0000E216 43E9 0040                  		lea	$40(a1),a1
0000E21A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E21E                            
0000E21E                            locret_DABC:
0000E21E 4E75                       		rts	
0000E220                            ; End of function SingleObjLoad2
0000E220                            
0000E220                            ; ===========================================================================
0000E220                            ; ---------------------------------------------------------------------------
0000E220                            ; Object 41 - springs
0000E220                            ; ---------------------------------------------------------------------------
0000E220                            
0000E220                            Obj41:					; XREF: Obj_Index
0000E220 7000                       		moveq	#0,d0
0000E222 1028 0024                  		move.b	$24(a0),d0
0000E226 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E22A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E22E 6100 FB12                  		bsr.w	DisplaySprite
0000E232 3028 0008                  		move.w	8(a0),d0
0000E236 0240 FF80                  		andi.w	#$FF80,d0
0000E23A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E23E 0441 0080                  		subi.w	#$80,d1
0000E242 0241 FF80                  		andi.w	#$FF80,d1
0000E246 9041                       		sub.w	d1,d0
0000E248 0C40 0280                  		cmpi.w	#$280,d0
0000E24C 6200 FB30                  		bhi.w	DeleteObject
0000E250 4E75                       		rts	
0000E252                            ; ===========================================================================
0000E252 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E254 0000                       		dc.w Obj41_Up-Obj41_Index
0000E256 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E258 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E25A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E25C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E25E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E260 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E262 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E264 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E266                            
0000E266 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E268 F600                       		dc.w -$A00		; power	of yellow spring
0000E26A                            ; ===========================================================================
0000E26A                            
0000E26A                            Obj41_Main:				; XREF: Obj41_Index
0000E26A 5428 0024                  		addq.b	#2,$24(a0)
0000E26E 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E276 317C 0523 0002             		move.w	#$523,2(a0)
0000E27C 0028 0004 0001             		ori.b	#4,1(a0)
0000E282 117C 0010 0019             		move.b	#$10,$19(a0)
0000E288 117C 0004 0018             		move.b	#4,$18(a0)
0000E28E 1028 0028                  		move.b	$28(a0),d0
0000E292 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E296 6700                       		beq.s	loc_DB54	; if not, branch
0000E298 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E29E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E2A4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E2AA 317C 0533 0002             		move.w	#$533,2(a0)
0000E2B0 117C 0008 0019             		move.b	#8,$19(a0)
0000E2B6                            
0000E2B6                            loc_DB54:
0000E2B6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E2BA 6700                       		beq.s	loc_DB66	; if not, branch
0000E2BC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E2C2 08E8 0001 0022             		bset	#1,$22(a0)
0000E2C8                            
0000E2C8                            loc_DB66:
0000E2C8 0800 0001                  		btst	#1,d0
0000E2CC 6700                       		beq.s	loc_DB72
0000E2CE 08E8 0005 0002             		bset	#5,2(a0)
0000E2D4                            
0000E2D4                            loc_DB72:
0000E2D4 0240 000F                  		andi.w	#$F,d0
0000E2D8 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E2DE 4E75                       		rts	
0000E2E0                            ; ===========================================================================
0000E2E0                            
0000E2E0                            Obj41_Up:				; XREF: Obj41_Index
0000E2E0 323C 001B                  		move.w	#$1B,d1
0000E2E4 343C 0008                  		move.w	#8,d2
0000E2E8 363C 0010                  		move.w	#$10,d3
0000E2EC 3828 0008                  		move.w	8(a0),d4
0000E2F0 6100 0000                  		bsr.w	SolidObject
0000E2F4 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E2F8 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E2FA 4E75                       		rts	
0000E2FC                            ; ===========================================================================
0000E2FC                            
0000E2FC                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E2FC 5428 0024                  		addq.b	#2,$24(a0)
0000E300 5069 000C                  		addq.w	#8,$C(a1)
0000E304 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E30A 08E9 0001 0022             		bset	#1,$22(a1)
0000E310 08A9 0003 0022             		bclr	#3,$22(a1)
0000E316 137C 0002 001C             		move.b	#2,$1C(a1)	; use "jumping"	animation
0000E31C 137C 0002 0024             		move.b	#2,$24(a1)
0000E322 08A8 0003 0022             		bclr	#3,$22(a0)
0000E328 4228 0025                  		clr.b	$25(a0)
0000E32C 303C 00CC                  		move.w	#$CC,d0
0000E330 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play spring sound
0000E336                            
0000E336                            Obj41_AniUp:				; XREF: Obj41_Index
0000E336 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E33C 6000 CC8A                  		bra.w	AnimateSprite
0000E340                            ; ===========================================================================
0000E340                            
0000E340                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E340 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E346 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E34A 4E75                       		rts	
0000E34C                            ; ===========================================================================
0000E34C                            
0000E34C                            Obj41_LR:				; XREF: Obj41_Index
0000E34C 323C 0013                  		move.w	#$13,d1
0000E350 343C 000E                  		move.w	#$E,d2
0000E354 363C 000F                  		move.w	#$F,d3
0000E358 3828 0008                  		move.w	8(a0),d4
0000E35C 6100 0000                  		bsr.w	SolidObject
0000E360 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E366 6600                       		bne.s	loc_DC0C
0000E368 117C 0008 0024             		move.b	#8,$24(a0)
0000E36E                            
0000E36E                            loc_DC0C:
0000E36E 0828 0005 0022             		btst	#5,$22(a0)
0000E374 6600                       		bne.s	Obj41_BounceLR
0000E376 4E75                       		rts	
0000E378                            ; ===========================================================================
0000E378                            
0000E378                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E378 5428 0024                  		addq.b	#2,$24(a0)
0000E37C 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E382 5069 0008                  		addq.w	#8,8(a1)
0000E386 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E38C 6600                       		bne.s	loc_DC36	; if yes, branch
0000E38E 0469 0010 0008             		subi.w	#$10,8(a1)
0000E394 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E398                            
0000E398                            loc_DC36:
0000E398 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E39E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E3A4 0869 0000 0022             		bchg	#0,$22(a1)
0000E3AA 0829 0002 0022             		btst	#2,$22(a1)
0000E3B0 6600                       		bne.s	loc_DC56
0000E3B2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E3B8                            
0000E3B8                            loc_DC56:
0000E3B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E3BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E3C4 303C 00CC                  		move.w	#$CC,d0
0000E3C8 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3CE                            
0000E3CE                            Obj41_AniLR:				; XREF: Obj41_Index
0000E3CE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3D4 6000 CBF2                  		bra.w	AnimateSprite
0000E3D8                            ; ===========================================================================
0000E3D8                            
0000E3D8                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E3D8 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E3DE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E3E2 4E75                       		rts	
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            Obj41_Dwn:				; XREF: Obj41_Index
0000E3E4 323C 001B                  		move.w	#$1B,d1
0000E3E8 343C 0008                  		move.w	#8,d2
0000E3EC 363C 0010                  		move.w	#$10,d3
0000E3F0 3828 0008                  		move.w	8(a0),d4
0000E3F4 6100 0000                  		bsr.w	SolidObject
0000E3F8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E3FE 6600                       		bne.s	loc_DCA4
0000E400 117C 000E 0024             		move.b	#$E,$24(a0)
0000E406                            
0000E406                            loc_DCA4:
0000E406 4A28 0025                  		tst.b	$25(a0)
0000E40A 6600                       		bne.s	locret_DCAE
0000E40C 4A44                       		tst.w	d4
0000E40E 6B00                       		bmi.s	Obj41_BounceDwn
0000E410                            
0000E410                            locret_DCAE:
0000E410 4E75                       		rts	
0000E412                            ; ===========================================================================
0000E412                            
0000E412                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E412 5428 0024                  		addq.b	#2,$24(a0)
0000E416 5169 000C                  		subq.w	#8,$C(a1)
0000E41A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E420 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E424 08E9 0001 0022             		bset	#1,$22(a1)
0000E42A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E430 137C 0002 0024             		move.b	#2,$24(a1)
0000E436 08A8 0003 0022             		bclr	#3,$22(a0)
0000E43C 4228 0025                  		clr.b	$25(a0)
0000E440 303C 00CC                  		move.w	#$CC,d0
0000E444 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play spring sound
0000E44A                            
0000E44A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E44A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E450 6000 CB76                  		bra.w	AnimateSprite
0000E454                            ; ===========================================================================
0000E454                            
0000E454                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E454 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E45A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E45E 4E75                       		rts	
0000E460                            ; ===========================================================================
0000E460                            Ani_obj41:
0000E460                            	include "_anim\obj41.asm"
0000E460                            ; ---------------------------------------------------------------------------
0000E460                            ; Animation script - springs
0000E460                            ; ---------------------------------------------------------------------------
0000E460 0000                       		dc.w byte_DD02-Ani_obj41
0000E462 0000                       		dc.w byte_DD0E-Ani_obj41
0000E464 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E470 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E47C                            		even
0000E47C                            		even
0000E47C                            
0000E47C                            ; ---------------------------------------------------------------------------
0000E47C                            ; Sprite mappings - springs
0000E47C                            ; ---------------------------------------------------------------------------
0000E47C                            Map_obj41:
0000E47C                            	include "_maps\obj41.asm"
0000E47C                            ; ================================================================================
0000E47C                            ; Sprite Mappings - generated by Flex 2 Sat Oct 20 2018 15:17:18 GMT-0700 (Pacific Daylight Time)
0000E47C                            ; ================================================================================
0000E47C                            
0000E47C                            DATA9PRZ0HTOO7D:
0000E47C 0000 0000                  	dc.w DATA9PRZ0HTOO7D_0-DATA9PRZ0HTOO7D, DATA9PRZ0HTOO7D_1-DATA9PRZ0HTOO7D
0000E480 0000 0000                  	dc.w DATA9PRZ0HTOO7D_2-DATA9PRZ0HTOO7D, DATA9PRZ0HTOO7D_3-DATA9PRZ0HTOO7D
0000E484 0000 0000                  	dc.w DATA9PRZ0HTOO7D_4-DATA9PRZ0HTOO7D, DATA9PRZ0HTOO7D_5-DATA9PRZ0HTOO7D
0000E488 02                         DATA9PRZ0HTOO7D_0: dc.b $2
0000E489 F80C 0000 F0               	dc.b $F8, $C, $0, $0, $F0
0000E48E 000C 0004 F0               	dc.b $0, $C, $0, $4, $F0
0000E493 01                         DATA9PRZ0HTOO7D_1: dc.b $1
0000E494 000C 0000 F0               	dc.b $0, $C, $0, $0, $F0
0000E499 03                         DATA9PRZ0HTOO7D_2: dc.b $3
0000E49A E80C 0000 F0               	dc.b $E8, $C, $0, $0, $F0
0000E49F F005 0008 F8               	dc.b $F0, $5, $0, $8, $F8
0000E4A4 000C 000C F0               	dc.b $0, $C, $0, $C, $F0
0000E4A9 01                         DATA9PRZ0HTOO7D_3: dc.b $1
0000E4AA F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
0000E4AF 01                         DATA9PRZ0HTOO7D_4: dc.b $1
0000E4B0 F003 0004 F8               	dc.b $F0, $3, $0, $4, $F8
0000E4B5 04                         DATA9PRZ0HTOO7D_5: dc.b $4
0000E4B6 F003 0004 10               	dc.b $F0, $3, $0, $4, $10
0000E4BB F809 0008 F8               	dc.b $F8, $9, $0, $8, $F8
0000E4C0 F000 0000 F8               	dc.b $F0, $0, $0, $0, $F8
0000E4C5 0800 0003 F8               	dc.b $8, $0, $0, $3, $F8
0000E4CA                            	even
0000E4CA                            	even
0000E4CA                            
0000E4CA                            ; ===========================================================================
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            ; Object 42 - Newtron enemy (GHZ)
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            
0000E4CA                            Obj42:					; XREF: Obj_Index
0000E4CA 7000                       		moveq	#0,d0
0000E4CC 1028 0024                  		move.b	$24(a0),d0
0000E4D0 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E4D4 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E4D8                            ; ===========================================================================
0000E4D8 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E4DA 0000                       		dc.w Obj42_Action-Obj42_Index
0000E4DC 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E4DE                            ; ===========================================================================
0000E4DE                            
0000E4DE                            Obj42_Main:				; XREF: Obj42_Index
0000E4DE 5428 0024                  		addq.b	#2,$24(a0)
0000E4E2 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E4EA 317C 049B 0002             		move.w	#$49B,2(a0)
0000E4F0 117C 0004 0001             		move.b	#4,1(a0)
0000E4F6 117C 0004 0018             		move.b	#4,$18(a0)
0000E4FC 117C 0014 0019             		move.b	#$14,$19(a0)
0000E502 117C 0010 0016             		move.b	#$10,$16(a0)
0000E508 117C 0008 0017             		move.b	#8,$17(a0)
0000E50E                            
0000E50E                            Obj42_Action:				; XREF: Obj42_Index
0000E50E 7000                       		moveq	#0,d0
0000E510 1028 0025                  		move.b	$25(a0),d0
0000E514 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E518 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E51C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E522 6100 CAA4                  		bsr.w	AnimateSprite
0000E526 6000 0000                  		bra.w	MarkObjGone
0000E52A                            ; ===========================================================================
0000E52A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E52C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E52E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E530 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E532 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E534 08E8 0000 0022             		bset	#0,$22(a0)
0000E53A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E53E 9068 0008                  		sub.w	8(a0),d0
0000E542 6400                       		bcc.s	loc_DDEA
0000E544 4440                       		neg.w	d0
0000E546 08A8 0000 0022             		bclr	#0,$22(a0)
0000E54C                            
0000E54C                            loc_DDEA:
0000E54C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E550 6400                       		bcc.s	locret_DE12	; if not, branch
0000E552 5428 0025                  		addq.b	#2,$25(a0)
0000E556 117C 0001 001C             		move.b	#1,$1C(a0)
0000E55C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E560 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E562 317C 249B 0002             		move.w	#$249B,2(a0)
0000E568 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E56E 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E574                            
0000E574                            locret_DE12:
0000E574 4E75                       		rts	
0000E576                            ; ===========================================================================
0000E576                            
0000E576                            Obj42_Type00:				; XREF: Obj42_Index2
0000E576 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E57C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E57E 08E8 0000 0022             		bset	#0,$22(a0)
0000E584 3038 D008                  		move.w	($FFFFD008).w,d0
0000E588 9068 0008                  		sub.w	8(a0),d0
0000E58C 6400                       		bcc.s	locret_DE32
0000E58E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E594                            
0000E594                            locret_DE32:
0000E594 4E75                       		rts	
0000E596                            ; ===========================================================================
0000E596                            
0000E596                            Obj42_Fall:				; XREF: Obj42_Type00
0000E596 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E59C 6600                       		bne.s	loc_DE42
0000E59E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E5A4                            
0000E5A4                            loc_DE42:
0000E5A4 6100 F762                  		bsr.w	ObjectFall
0000E5A8 6100 0000                  		bsr.w	ObjHitFloor
0000E5AC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E5AE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E5B0 D368 000C                  		add.w	d1,$C(a0)
0000E5B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E5BA 5428 0025                  		addq.b	#2,$25(a0)
0000E5BE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5C4 0828 0005 0002             		btst	#5,2(a0)
0000E5CA 6700                       		beq.s	Obj42_Move
0000E5CC 5228 001C                  		addq.b	#1,$1C(a0)
0000E5D0                            
0000E5D0                            Obj42_Move:
0000E5D0 117C 000D 0020             		move.b	#$D,$20(a0)
0000E5D6 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E5DC 0828 0000 0022             		btst	#0,$22(a0)
0000E5E2 6600                       		bne.s	locret_DE86
0000E5E4 4468 0010                  		neg.w	$10(a0)
0000E5E8                            
0000E5E8                            locret_DE86:
0000E5E8 4E75                       		rts	
0000E5EA                            ; ===========================================================================
0000E5EA                            
0000E5EA                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E5EA 6100 F73C                  		bsr.w	SpeedToPos
0000E5EE 6100 0000                  		bsr.w	ObjHitFloor
0000E5F2 0C41 FFF8                  		cmpi.w	#-8,d1
0000E5F6 6D00                       		blt.s	loc_DEA2
0000E5F8 0C41 000C                  		cmpi.w	#$C,d1
0000E5FC 6C00                       		bge.s	loc_DEA2
0000E5FE D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E602 4E75                       		rts	
0000E604                            ; ===========================================================================
0000E604                            
0000E604                            loc_DEA2:
0000E604 5428 0025                  		addq.b	#2,$25(a0)
0000E608 4E75                       		rts	
0000E60A                            ; ===========================================================================
0000E60A                            
0000E60A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E60A 6100 F71C                  		bsr.w	SpeedToPos
0000E60E 4E75                       		rts	
0000E610                            ; ===========================================================================
0000E610                            
0000E610                            Obj42_Type01:				; XREF: Obj42_Index2
0000E610 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E616 6600                       		bne.s	Obj42_FireMissile
0000E618 117C 000C 0020             		move.b	#$C,$20(a0)
0000E61E                            
0000E61E                            Obj42_FireMissile:
0000E61E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E624 6600                       		bne.s	locret_DF14
0000E626 4A28 0032                  		tst.b	$32(a0)
0000E62A 6600                       		bne.s	locret_DF14
0000E62C 117C 0001 0032             		move.b	#1,$32(a0)
0000E632 6100 FBBA                  		bsr.w	SingleObjLoad
0000E636 6600                       		bne.s	locret_DF14
0000E638 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E63C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E642 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E648 5169 000C                  		subq.w	#8,$C(a1)
0000E64C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E652 303C 0014                  		move.w	#$14,d0
0000E656 0828 0000 0022             		btst	#0,$22(a0)
0000E65C 6600                       		bne.s	loc_DF04
0000E65E 4440                       		neg.w	d0
0000E660 4469 0010                  		neg.w	$10(a1)
0000E664                            
0000E664                            loc_DF04:
0000E664 D169 0008                  		add.w	d0,8(a1)
0000E668 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E66E 137C 0001 0028             		move.b	#1,$28(a1)
0000E674                            
0000E674                            locret_DF14:
0000E674 4E75                       		rts	
0000E676                            ; ===========================================================================
0000E676                            
0000E676                            Obj42_Delete:				; XREF: Obj42_Index
0000E676 6000 F706                  		bra.w	DeleteObject
0000E67A                            ; ===========================================================================
0000E67A                            Ani_obj42:
0000E67A                            	include "_anim\obj42.asm"
0000E67A                            ; ---------------------------------------------------------------------------
0000E67A                            ; Animation script - Newtron enemy
0000E67A                            ; ---------------------------------------------------------------------------
0000E67A 0000                       		dc.w byte_DF24-Ani_obj42
0000E67C 0000                       		dc.w byte_DF28-Ani_obj42
0000E67E 0000                       		dc.w byte_DF30-Ani_obj42
0000E680 0000                       		dc.w byte_DF34-Ani_obj42
0000E682 0000                       		dc.w byte_DF38-Ani_obj42
0000E684 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E688 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E690 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E694 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E698 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E6A2                            		even
0000E6A2                            		even
0000E6A2                            
0000E6A2                            ; ---------------------------------------------------------------------------
0000E6A2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6A2                            ; ---------------------------------------------------------------------------
0000E6A2                            Map_obj42:
0000E6A2                            	include "_maps\obj42.asm"
0000E6A2                            ; ================================================================================
0000E6A2                            ; Sprite Mappings - generated by Flex 2 Sun Jun 24 2018 09:53:56 GMT-0700 (Pacific Daylight Time)
0000E6A2                            ; ================================================================================
0000E6A2                            
0000E6A2                            DATAGWZWV8Y0QWB:
0000E6A2 0000 0000                  	dc.w DATAGWZWV8Y0QWB_0-DATAGWZWV8Y0QWB, DATAGWZWV8Y0QWB_1-DATAGWZWV8Y0QWB
0000E6A6 0000 0000                  	dc.w DATAGWZWV8Y0QWB_2-DATAGWZWV8Y0QWB, DATAGWZWV8Y0QWB_3-DATAGWZWV8Y0QWB
0000E6AA 0000 0000                  	dc.w DATAGWZWV8Y0QWB_4-DATAGWZWV8Y0QWB, DATAGWZWV8Y0QWB_5-DATAGWZWV8Y0QWB
0000E6AE 0000 0000                  	dc.w DATAGWZWV8Y0QWB_6-DATAGWZWV8Y0QWB, DATAGWZWV8Y0QWB_7-DATAGWZWV8Y0QWB
0000E6B2 0000 0000                  	dc.w DATAGWZWV8Y0QWB_8-DATAGWZWV8Y0QWB, DATAGWZWV8Y0QWB_9-DATAGWZWV8Y0QWB
0000E6B6 0000                       	dc.w DATAGWZWV8Y0QWB_A-DATAGWZWV8Y0QWB
0000E6B8 03                         DATAGWZWV8Y0QWB_0: dc.b $3
0000E6B9 EC0D 0000 EC               	dc.b $EC, $D, $0, $0, $EC
0000E6BE F400 0008 0C               	dc.b $F4, $0, $0, $8, $C
0000E6C3 FC0E 0009 F4               	dc.b $FC, $E, $0, $9, $F4
0000E6C8 03                         DATAGWZWV8Y0QWB_1: dc.b $3
0000E6C9 EC06 0015 EC               	dc.b $EC, $6, $0, $15, $EC
0000E6CE EC09 001B FC               	dc.b $EC, $9, $0, $1B, $FC
0000E6D3 FC0A 0021 FC               	dc.b $FC, $A, $0, $21, $FC
0000E6D8 03                         DATAGWZWV8Y0QWB_2: dc.b $3
0000E6D9 EC09 001B FC               	dc.b $EC, $9, $0, $1B, $FC
0000E6DE FC0A 0021 FC               	dc.b $FC, $A, $0, $21, $FC
0000E6E3 EC06 0015 EC               	dc.b $EC, $6, $0, $15, $EC
0000E6E8 04                         DATAGWZWV8Y0QWB_3: dc.b $4
0000E6E9 EC06 0030 EC               	dc.b $EC, $6, $0, $30, $EC
0000E6EE EC09 001B FC               	dc.b $EC, $9, $0, $1B, $FC
0000E6F3 FC09 0036 FC               	dc.b $FC, $9, $0, $36, $FC
0000E6F8 0C00 003C 0C               	dc.b $C, $0, $0, $3C, $C
0000E6FD 03                         DATAGWZWV8Y0QWB_4: dc.b $3
0000E6FE F40D 003D EC               	dc.b $F4, $D, $0, $3D, $EC
0000E703 FC00 0020 0C               	dc.b $FC, $0, $0, $20, $C
0000E708 0408 0045 FC               	dc.b $4, $8, $0, $45, $FC
0000E70D 02                         DATAGWZWV8Y0QWB_5: dc.b $2
0000E70E F80D 0048 EC               	dc.b $F8, $D, $0, $48, $EC
0000E713 F801 0050 0C               	dc.b $F8, $1, $0, $50, $C
0000E718 03                         DATAGWZWV8Y0QWB_6: dc.b $3
0000E719 F80D 0048 EC               	dc.b $F8, $D, $0, $48, $EC
0000E71E F801 0050 0C               	dc.b $F8, $1, $0, $50, $C
0000E723 0000 0052 14               	dc.b $0, $0, $0, $52, $14
0000E728 03                         DATAGWZWV8Y0QWB_7: dc.b $3
0000E729 F80D 0048 EC               	dc.b $F8, $D, $0, $48, $EC
0000E72E F801 0050 0C               	dc.b $F8, $1, $0, $50, $C
0000E733 0004 0053 14               	dc.b $0, $4, $0, $53, $14
0000E738 03                         DATAGWZWV8Y0QWB_8: dc.b $3
0000E739 F80D 0048 EC               	dc.b $F8, $D, $0, $48, $EC
0000E73E F801 0050 0C               	dc.b $F8, $1, $0, $50, $C
0000E743 0000 E052 14               	dc.b $0, $0, $E0, $52, $14
0000E748 03                         DATAGWZWV8Y0QWB_9: dc.b $3
0000E749 F80D 0048 EC               	dc.b $F8, $D, $0, $48, $EC
0000E74E F801 0050 0C               	dc.b $F8, $1, $0, $50, $C
0000E753 0004 E053 14               	dc.b $0, $4, $E0, $53, $14
0000E758 00                         DATAGWZWV8Y0QWB_A: dc.b $0
0000E75A 00                         	even
0000E75A 00                         	even
0000E75A                            
0000E75A                            ; ===========================================================================
0000E75A                            ; ---------------------------------------------------------------------------
0000E75A                            ; Object 43 - Roller enemy (SYZ)
0000E75A                            ; ---------------------------------------------------------------------------
0000E75A                            
0000E75A                            Obj43:					; XREF: Obj_Index
0000E75A 7000                       		moveq	#0,d0
0000E75C 1028 0024                  		move.b	$24(a0),d0
0000E760 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E764 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E768                            ; ===========================================================================
0000E768 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E76A 0000                       		dc.w Obj43_Action-Obj43_Index
0000E76C                            ; ===========================================================================
0000E76C                            
0000E76C                            Obj43_Main:				; XREF: Obj43_Index
0000E76C 117C 000E 0016             		move.b	#$E,$16(a0)
0000E772 117C 0008 0017             		move.b	#8,$17(a0)
0000E778 6100 F58E                  		bsr.w	ObjectFall
0000E77C 6100 0000                  		bsr.w	ObjHitFloor
0000E780 4A41                       		tst.w	d1
0000E782 6A00                       		bpl.s	locret_E052
0000E784 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E788 317C 0000 0012             		move.w	#0,$12(a0)
0000E78E 5428 0024                  		addq.b	#2,$24(a0)
0000E792 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E79A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E7A0 117C 0004 0001             		move.b	#4,1(a0)
0000E7A6 117C 0004 0018             		move.b	#4,$18(a0)
0000E7AC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7B2                            
0000E7B2                            locret_E052:
0000E7B2 4E75                       		rts	
0000E7B4                            ; ===========================================================================
0000E7B4                            
0000E7B4                            Obj43_Action:				; XREF: Obj43_Index
0000E7B4 7000                       		moveq	#0,d0
0000E7B6 1028 0025                  		move.b	$25(a0),d0
0000E7BA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E7BE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E7C2 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E7C8 6100 C7FE                  		bsr.w	AnimateSprite
0000E7CC 3028 0008                  		move.w	8(a0),d0
0000E7D0 0240 FF80                  		andi.w	#$FF80,d0
0000E7D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7D8 0441 0080                  		subi.w	#$80,d1
0000E7DC 0241 FF80                  		andi.w	#$FF80,d1
0000E7E0 9041                       		sub.w	d1,d0
0000E7E2 0C40 0280                  		cmpi.w	#$280,d0
0000E7E6 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E7EA 6000 F556                  		bra.w	DisplaySprite
0000E7EE                            ; ===========================================================================
0000E7EE                            
0000E7EE                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E7EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E7F2 7000                       		moveq	#0,d0
0000E7F4 1028 0023                  		move.b	$23(a0),d0
0000E7F8 6700                       		beq.s	Obj43_Delete
0000E7FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E800                            
0000E800                            Obj43_Delete:
0000E800 6000 F57C                  		bra.w	DeleteObject
0000E804                            ; ===========================================================================
0000E804 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E806 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E808 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E80A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E80C                            ; ===========================================================================
0000E80C                            
0000E80C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E80C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E810 0440 0100                  		subi.w	#$100,d0
0000E814 6500                       		bcs.s	loc_E0D2
0000E816 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E81A 6500                       		bcs.s	loc_E0D2
0000E81C 5828 0025                  		addq.b	#4,$25(a0)
0000E820 117C 0002 001C             		move.b	#2,$1C(a0)
0000E826 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E82C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E832                            
0000E832                            loc_E0D2:
0000E832 588F                       		addq.l	#4,sp
0000E834 4E75                       		rts	
0000E836                            ; ===========================================================================
0000E836                            
0000E836                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E836 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E83C 6700                       		beq.s	loc_E0F8
0000E83E 5368 0030                  		subq.w	#1,$30(a0)
0000E842 6A00                       		bpl.s	locret_E0F6
0000E844 117C 0001 001C             		move.b	#1,$1C(a0)
0000E84A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E850 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E856                            
0000E856                            locret_E0F6:
0000E856 4E75                       		rts	
0000E858                            ; ===========================================================================
0000E858                            
0000E858                            loc_E0F8:
0000E858 5428 0025                  		addq.b	#2,$25(a0)
0000E85C 4E75                       		rts	
0000E85E                            ; ===========================================================================
0000E85E                            
0000E85E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E85E 6100 0000                  		bsr.w	Obj43_Stop
0000E862 6100 F4C4                  		bsr.w	SpeedToPos
0000E866 6100 0000                  		bsr.w	ObjHitFloor
0000E86A 0C41 FFF8                  		cmpi.w	#-8,d1
0000E86E 6D00                       		blt.s	Obj43_Jump
0000E870 0C41 000C                  		cmpi.w	#$C,d1
0000E874 6C00                       		bge.s	Obj43_Jump
0000E876 D368 000C                  		add.w	d1,$C(a0)
0000E87A 4E75                       		rts	
0000E87C                            ; ===========================================================================
0000E87C                            
0000E87C                            Obj43_Jump:
0000E87C 5428 0025                  		addq.b	#2,$25(a0)
0000E880 08E8 0000 0032             		bset	#0,$32(a0)
0000E886 6700                       		beq.s	locret_E12E
0000E888 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E88E                            
0000E88E                            locret_E12E:
0000E88E 4E75                       		rts	
0000E890                            ; ===========================================================================
0000E890                            
0000E890                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E890 6100 F476                  		bsr.w	ObjectFall
0000E894 4A68 0012                  		tst.w	$12(a0)
0000E898 6B00                       		bmi.s	locret_E150
0000E89A 6100 0000                  		bsr.w	ObjHitFloor
0000E89E 4A41                       		tst.w	d1
0000E8A0 6A00                       		bpl.s	locret_E150
0000E8A2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E8A6 5528 0025                  		subq.b	#2,$25(a0)
0000E8AA 317C 0000 0012             		move.w	#0,$12(a0)
0000E8B0                            
0000E8B0                            locret_E150:
0000E8B0 4E75                       		rts	
0000E8B2                            
0000E8B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8B2                            
0000E8B2                            
0000E8B2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E8B2 4A28 0032                  		tst.b	$32(a0)
0000E8B6 6B00                       		bmi.s	locret_E188
0000E8B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8BC 0440 0030                  		subi.w	#$30,d0
0000E8C0 9068 0008                  		sub.w	8(a0),d0
0000E8C4 6400                       		bcc.s	locret_E188
0000E8C6 117C 0000 001C             		move.b	#0,$1C(a0)
0000E8CC 117C 000E 0020             		move.b	#$E,$20(a0)
0000E8D2 4268 0010                  		clr.w	$10(a0)
0000E8D6 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E8DC 117C 0002 0025             		move.b	#2,$25(a0)
0000E8E2 08E8 0007 0032             		bset	#7,$32(a0)
0000E8E8                            
0000E8E8                            locret_E188:
0000E8E8 4E75                       		rts	
0000E8EA                            ; End of function Obj43_Stop
0000E8EA                            
0000E8EA                            ; ===========================================================================
0000E8EA                            Ani_obj43:
0000E8EA                            	include "_anim\obj43.asm"
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA                            ; Animation script - Roller enemy
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA 0000                       		dc.w byte_E190-Ani_obj43
0000E8EC 0000                       		dc.w byte_E196-Ani_obj43
0000E8EE 0000                       		dc.w byte_E19C-Ani_obj43
0000E8F0 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E8F6 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E8FC 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E902 00                         		even
0000E902 00                         		even
0000E902                            
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            ; Sprite mappings - Roller enemy (SYZ)
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            Map_obj43:
0000E902                            	include "_maps\obj43.asm"
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            ; Sprite mappings - Roller enemy (SYZ)
0000E902                            ; ---------------------------------------------------------------------------
0000E902 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E906 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E90A 0000                       		dc.w byte_E1CE-Map_obj43
0000E90C 02                         byte_E1AC:	dc.b 2
0000E90D DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E912 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E917 02                         byte_E1B7:	dc.b 2
0000E918 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E91D FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E922 01                         byte_E1C2:	dc.b 1
0000E923 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E928 01                         byte_E1C8:	dc.b 1
0000E929 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E92E 01                         byte_E1CE:	dc.b 1
0000E92F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E934                            		even
0000E934                            		even
0000E934                            
0000E934                            ; ===========================================================================
0000E934                            ; ---------------------------------------------------------------------------
0000E934                            ; Object 44 - walls (GHZ)
0000E934                            ; ---------------------------------------------------------------------------
0000E934                            
0000E934                            Obj44:					; XREF: Obj_Index
0000E934 7000                       		moveq	#0,d0
0000E936 1028 0024                  		move.b	$24(a0),d0
0000E93A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E93E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E942                            ; ===========================================================================
0000E942 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E944 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E946 0000                       		dc.w Obj44_Display-Obj44_Index
0000E948                            ; ===========================================================================
0000E948                            
0000E948                            Obj44_Main:				; XREF: Obj44_Index
0000E948 5428 0024                  		addq.b	#2,$24(a0)
0000E94C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E954 317C 434C 0002             		move.w	#$434C,2(a0)
0000E95A 0028 0004 0001             		ori.b	#4,1(a0)
0000E960 117C 0008 0019             		move.b	#8,$19(a0)
0000E966 117C 0006 0018             		move.b	#6,$18(a0)
0000E96C 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E972 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E978 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E97A 5428 0024                  		addq.b	#2,$24(a0)
0000E97E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E980                            ; ===========================================================================
0000E980                            
0000E980                            Obj44_Solid:				; XREF: Obj44_Index
0000E980 323C 0013                  		move.w	#$13,d1
0000E984 343C 0028                  		move.w	#$28,d2
0000E988 6100 A918                  		bsr.w	Obj44_SolidWall
0000E98C                            
0000E98C                            Obj44_Display:				; XREF: Obj44_Index
0000E98C 6100 F3B4                  		bsr.w	DisplaySprite
0000E990 3028 0008                  		move.w	8(a0),d0
0000E994 0240 FF80                  		andi.w	#$FF80,d0
0000E998 3238 F700                  		move.w	($FFFFF700).w,d1
0000E99C 0441 0080                  		subi.w	#$80,d1
0000E9A0 0241 FF80                  		andi.w	#$FF80,d1
0000E9A4 9041                       		sub.w	d1,d0
0000E9A6 0C40 0280                  		cmpi.w	#$280,d0
0000E9AA 6200 F3D2                  		bhi.w	DeleteObject
0000E9AE 4E75                       		rts	
0000E9B0                            ; ===========================================================================
0000E9B0                            ; ---------------------------------------------------------------------------
0000E9B0                            ; Sprite mappings - walls (GHZ)
0000E9B0                            ; ---------------------------------------------------------------------------
0000E9B0                            Map_obj44:
0000E9B0                            	include "_maps\obj44.asm"
0000E9B0                            ; ---------------------------------------------------------------------------
0000E9B0                            ; Sprite mappings - walls (GHZ)
0000E9B0                            ; ---------------------------------------------------------------------------
0000E9B0 0000                       		dc.w byte_E256-Map_obj44
0000E9B2 0000                       		dc.w byte_E26B-Map_obj44
0000E9B4 0000                       		dc.w byte_E280-Map_obj44
0000E9B6 04                         byte_E256:	dc.b 4
0000E9B7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E9BC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9C1 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9C6 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9CB 04                         byte_E26B:	dc.b 4
0000E9CC E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E9D1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9D6 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9DB 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9E0 04                         byte_E280:	dc.b 4
0000E9E1 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E9E6 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E9EB 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E9F0 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E9F6 00                         		even
0000E9F6 00                         		even
0000E9F6                            
0000E9F6                            ; ===========================================================================
0000E9F6                            ; ---------------------------------------------------------------------------
0000E9F6                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E9F6                            ; ---------------------------------------------------------------------------
0000E9F6                            
0000E9F6                            Obj13:					; XREF: Obj_Index
0000E9F6 7000                       		moveq	#0,d0
0000E9F8 1028 0024                  		move.b	$24(a0),d0
0000E9FC 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA00 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA04 6000 0000                  		bra.w	Obj14_ChkDel
0000EA08                            ; ===========================================================================
0000EA08 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA0A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA0C                            ; ---------------------------------------------------------------------------
0000EA0C                            ;
0000EA0C                            ; Lava ball production rates
0000EA0C                            ;
0000EA0C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA12                            ; ===========================================================================
0000EA12                            
0000EA12                            Obj13_Main:				; XREF: Obj13_Index
0000EA12 5428 0024                  		addq.b	#2,$24(a0)
0000EA16 1028 0028                  		move.b	$28(a0),d0
0000EA1A E848                       		lsr.w	#4,d0
0000EA1C 0240 000F                  		andi.w	#$F,d0
0000EA20 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA26 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA2C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA32                            
0000EA32                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA32 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA36 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA38 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA3E 6100 F57E                  		bsr.w	ChkObjOnScreen
0000EA42 6600                       		bne.s	locret_E302
0000EA44 6100 F7A8                  		bsr.w	SingleObjLoad
0000EA48 6600                       		bne.s	locret_E302
0000EA4A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EA4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA54 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA5A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EA60                            
0000EA60                            locret_E302:
0000EA60 4E75                       		rts	
0000EA62                            ; ===========================================================================
0000EA62                            ; ---------------------------------------------------------------------------
0000EA62                            ; Object 14 - lava balls (MZ, SLZ)
0000EA62                            ; ---------------------------------------------------------------------------
0000EA62                            
0000EA62                            Obj14:					; XREF: Obj_Index
0000EA62 7000                       		moveq	#0,d0
0000EA64 1028 0024                  		move.b	$24(a0),d0
0000EA68 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EA6C 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EA70 6000 F2D0                  		bra.w	DisplaySprite
0000EA74                            ; ===========================================================================
0000EA74 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EA76 0000                       		dc.w Obj14_Action-Obj14_Index
0000EA78 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EA7A                            
0000EA7A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EA84 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EA8C                            ; ===========================================================================
0000EA8C                            
0000EA8C                            Obj14_Main:				; XREF: Obj14_Index
0000EA8C 5428 0024                  		addq.b	#2,$24(a0)
0000EA90 117C 0008 0016             		move.b	#8,$16(a0)
0000EA96 117C 0008 0017             		move.b	#8,$17(a0)
0000EA9C 217C 0000 BC20 0004        		move.l	#Map_obj14,4(a0)
0000EAA4 317C 0345 0002             		move.w	#$345,2(a0)
0000EAAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EAB0 6600                       		bne.s	loc_E35A
0000EAB2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EAB8                            
0000EAB8                            loc_E35A:
0000EAB8 117C 0004 0001             		move.b	#4,1(a0)
0000EABE 117C 0003 0018             		move.b	#3,$18(a0)
0000EAC4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EACA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAD0 4A28 0029                  		tst.b	$29(a0)
0000EAD4 6700                       		beq.s	Obj14_SetSpeed
0000EAD6 5428 0018                  		addq.b	#2,$18(a0)
0000EADA                            
0000EADA                            Obj14_SetSpeed:
0000EADA 7000                       		moveq	#0,d0
0000EADC 1028 0028                  		move.b	$28(a0),d0
0000EAE0 D040                       		add.w	d0,d0
0000EAE2 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EAE8 117C 0008 0019             		move.b	#8,$19(a0)
0000EAEE 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EAF4 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EAF6 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAFC 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB02 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB08 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB0E                            
0000EB0E                            Obj14_PlaySnd:
0000EB0E 303C 00AE                  		move.w	#$AE,d0
0000EB12 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB18                            
0000EB18                            Obj14_Action:				; XREF: Obj14_Index
0000EB18 7000                       		moveq	#0,d0
0000EB1A 1028 0028                  		move.b	$28(a0),d0
0000EB1E D040                       		add.w	d0,d0
0000EB20 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB24 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB28 6100 F1FE                  		bsr.w	SpeedToPos
0000EB2C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB32 6100 C494                  		bsr.w	AnimateSprite
0000EB36                            
0000EB36                            Obj14_ChkDel:				; XREF: Obj13
0000EB36 3028 0008                  		move.w	8(a0),d0
0000EB3A 0240 FF80                  		andi.w	#$FF80,d0
0000EB3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB42 0441 0080                  		subi.w	#$80,d1
0000EB46 0241 FF80                  		andi.w	#$FF80,d1
0000EB4A 9041                       		sub.w	d1,d0
0000EB4C 0C40 0280                  		cmpi.w	#$280,d0
0000EB50 6200 F22C                  		bhi.w	DeleteObject
0000EB54 4E75                       		rts	
0000EB56                            ; ===========================================================================
0000EB56 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB5A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB5E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EB62 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EB66 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EB68                            ; ===========================================================================
0000EB68                            ; lavaball types 00-03 fly up and fall back down
0000EB68                            
0000EB68                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EB68 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EB6E 3028 0030                  		move.w	$30(a0),d0
0000EB72 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EB76 6400                       		bcc.s	loc_E41E	; if not, branch
0000EB78 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EB7C                            
0000EB7C                            loc_E41E:
0000EB7C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EB82 4A68 0012                  		tst.w	$12(a0)
0000EB86 6A00                       		bpl.s	locret_E430
0000EB88 08E8 0001 0022             		bset	#1,$22(a0)
0000EB8E                            
0000EB8E                            locret_E430:
0000EB8E 4E75                       		rts	
0000EB90                            ; ===========================================================================
0000EB90                            ; lavaball type	04 flies up until it hits the ceiling
0000EB90                            
0000EB90                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EB90 08E8 0001 0022             		bset	#1,$22(a0)
0000EB96 6100 0000                  		bsr.w	ObjHitCeiling
0000EB9A 4A41                       		tst.w	d1
0000EB9C 6A00                       		bpl.s	locret_E452
0000EB9E 117C 0008 0028             		move.b	#8,$28(a0)
0000EBA4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EBB0                            
0000EBB0                            locret_E452:
0000EBB0 4E75                       		rts	
0000EBB2                            ; ===========================================================================
0000EBB2                            ; lavaball type	05 falls down until it hits the	floor
0000EBB2                            
0000EBB2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EBB2 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBB8 6100 0000                  		bsr.w	ObjHitFloor
0000EBBC 4A41                       		tst.w	d1
0000EBBE 6A00                       		bpl.s	locret_E474
0000EBC0 117C 0008 0028             		move.b	#8,$28(a0)
0000EBC6 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBCC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EBD2                            
0000EBD2                            locret_E474:
0000EBD2 4E75                       		rts	
0000EBD4                            ; ===========================================================================
0000EBD4                            ; lavaball types 06-07 move sideways
0000EBD4                            
0000EBD4                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EBD4 08E8 0000 0022             		bset	#0,$22(a0)
0000EBDA 76F8                       		moveq	#-8,d3
0000EBDC 6100 0000                  		bsr.w	ObjHitWallLeft
0000EBE0 4A41                       		tst.w	d1
0000EBE2 6A00                       		bpl.s	locret_E498
0000EBE4 117C 0008 0028             		move.b	#8,$28(a0)
0000EBEA 117C 0003 001C             		move.b	#3,$1C(a0)
0000EBF0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EBF6                            
0000EBF6                            locret_E498:
0000EBF6 4E75                       		rts	
0000EBF8                            ; ===========================================================================
0000EBF8                            
0000EBF8                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EBF8 08A8 0000 0022             		bclr	#0,$22(a0)
0000EBFE 7608                       		moveq	#8,d3
0000EC00 6100 0000                  		bsr.w	ObjHitWallRight
0000EC04 4A41                       		tst.w	d1
0000EC06 6A00                       		bpl.s	locret_E4BC
0000EC08 117C 0008 0028             		move.b	#8,$28(a0)
0000EC0E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC14 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC1A                            
0000EC1A                            locret_E4BC:
0000EC1A 4E75                       		rts	
0000EC1C                            ; ===========================================================================
0000EC1C                            
0000EC1C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC1C 4E75                       		rts	
0000EC1E                            ; ===========================================================================
0000EC1E                            
0000EC1E                            Obj14_Delete:				; XREF: Obj14_Index
0000EC1E 6000 F15E                  		bra.w	DeleteObject
0000EC22                            ; ===========================================================================
0000EC22                            Ani_obj14:
0000EC22                            	include "_anim\obj14.asm"
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22                            ; Animation script - lava balls
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC24 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC26 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC28 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC2A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC30 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC34 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC3A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC3E                            		even
0000EC3E                            		even
0000EC3E                            
0000EC3E                            ; ===========================================================================
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            ; Object 6D - flame thrower (SBZ)
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            
0000EC3E                            Obj6D:					; XREF: Obj_Index
0000EC3E 7000                       		moveq	#0,d0
0000EC40 1028 0024                  		move.b	$24(a0),d0
0000EC44 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EC48 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EC4C                            ; ===========================================================================
0000EC4C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EC4E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EC50                            ; ===========================================================================
0000EC50                            
0000EC50                            Obj6D_Main:				; XREF: Obj6D_Index
0000EC50 5428 0024                  		addq.b	#2,$24(a0)
0000EC54 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EC5C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EC62 0028 0004 0001             		ori.b	#4,1(a0)
0000EC68 117C 0001 0018             		move.b	#1,$18(a0)
0000EC6E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC74 117C 000C 0019             		move.b	#$C,$19(a0)
0000EC7A 1028 0028                  		move.b	$28(a0),d0
0000EC7E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EC82 D040                       		add.w	d0,d0		; multiply by 2
0000EC84 3140 0030                  		move.w	d0,$30(a0)
0000EC88 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EC8C 1028 0028                  		move.b	$28(a0),d0
0000EC90 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EC94 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EC96 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EC9A 117C 000A 0036             		move.b	#$A,$36(a0)
0000ECA0 0828 0001 0022             		btst	#1,$22(a0)
0000ECA6 6700                       		beq.s	Obj6D_Action
0000ECA8 117C 0002 001C             		move.b	#2,$1C(a0)
0000ECAE 117C 0015 0036             		move.b	#$15,$36(a0)
0000ECB4                            
0000ECB4                            Obj6D_Action:				; XREF: Obj6D_Index
0000ECB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ECB8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ECBA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ECC0 0868 0000 001C             		bchg	#0,$1C(a0)
0000ECC6 6700                       		beq.s	loc_E57A
0000ECC8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ECCE 303C 00B3                  		move.w	#$B3,d0
0000ECD2 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play flame sound
0000ECD8                            
0000ECD8                            loc_E57A:
0000ECD8 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ECDE 6100 C2E8                  		bsr.w	AnimateSprite
0000ECE2 117C 0000 0020             		move.b	#0,$20(a0)
0000ECE8 1028 0036                  		move.b	$36(a0),d0
0000ECEC B028 001A                  		cmp.b	$1A(a0),d0
0000ECF0 6600                       		bne.s	Obj6D_ChkDel
0000ECF2 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ECF8                            
0000ECF8                            Obj6D_ChkDel:
0000ECF8 3028 0008                  		move.w	8(a0),d0
0000ECFC 0240 FF80                  		andi.w	#$FF80,d0
0000ED00 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED04 0441 0080                  		subi.w	#$80,d1
0000ED08 0241 FF80                  		andi.w	#$FF80,d1
0000ED0C 9041                       		sub.w	d1,d0
0000ED0E 0C40 0280                  		cmpi.w	#$280,d0
0000ED12 6200 F06A                  		bhi.w	DeleteObject
0000ED16 6000 F02A                  		bra.w	DisplaySprite
0000ED1A                            ; ===========================================================================
0000ED1A                            Ani_obj6D:
0000ED1A                            	include "_anim\obj6D.asm"
0000ED1A                            ; ---------------------------------------------------------------------------
0000ED1A                            ; Animation script - flamethrower (SBZ)
0000ED1A                            ; ---------------------------------------------------------------------------
0000ED1A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED1C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED1E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED20 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED22 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED30 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED3A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000ED48 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000ED52                            		even
0000ED52                            		even
0000ED52                            
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            ; Sprite mappings - flame thrower (SBZ)
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            Map_obj6D:
0000ED52                            	include "_maps\obj6D.asm"
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            ; Sprite mappings - flame thrower (SBZ)
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000ED56 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000ED5A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000ED5E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000ED62 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000ED66 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000ED6A 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000ED6E 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000ED72 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000ED76 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000ED7A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000ED7E 01                         byte_E620:	dc.b 1
0000ED7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED84 02                         byte_E626:	dc.b 2
0000ED85 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED8A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED8F 02                         byte_E631:	dc.b 2
0000ED90 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED95 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED9A 03                         byte_E63C:	dc.b 3
0000ED9B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDA5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDAA 03                         byte_E64C:	dc.b 3
0000EDAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDB0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDB5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDBA 04                         byte_E65C:	dc.b 4
0000EDBB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDC0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDCA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDCF 04                         byte_E671:	dc.b 4
0000EDD0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDD5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDDA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDDF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDE4 05                         byte_E686:	dc.b 5
0000EDE5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EDEA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDEF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDF4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDF9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDFE 05                         byte_E6A0:	dc.b 5
0000EDFF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE04 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE09 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE0E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE13 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE18 06                         byte_E6BA:	dc.b 6
0000EE19 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE1E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE23 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE28 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE2D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE32 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE37 06                         byte_E6D9:	dc.b 6
0000EE38 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE3D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE42 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE4C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE51 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE56 01                         byte_E6F8:	dc.b 1
0000EE57 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE5C 02                         byte_E6FE:	dc.b 2
0000EE5D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE62 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE67 02                         byte_E709:	dc.b 2
0000EE68 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE6D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE72 03                         byte_E714:	dc.b 3
0000EE73 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE78 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE7D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE82 03                         byte_E724:	dc.b 3
0000EE83 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE88 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE8D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE92 04                         byte_E734:	dc.b 4
0000EE93 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE98 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEA7 04                         byte_E749:	dc.b 4
0000EEA8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEAD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEB2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEB7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEBC 05                         byte_E75E:	dc.b 5
0000EEBD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEC2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEC7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EECC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EED1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EED6 05                         byte_E778:	dc.b 5
0000EED7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEDC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEE1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEE6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEEB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEF0 06                         byte_E792:	dc.b 6
0000EEF1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EEF6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EEFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF00 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF05 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF0A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF0F 06                         byte_E7B1:	dc.b 6
0000EF10 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF15 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF1A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF1F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF24 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF29 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF2E                            		even
0000EF2E                            		even
0000EF2E                            
0000EF2E                            ; ===========================================================================
0000EF2E                            ; ---------------------------------------------------------------------------
0000EF2E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF2E                            ; ---------------------------------------------------------------------------
0000EF2E                            
0000EF2E                            Obj46:					; XREF: Obj_Index
0000EF2E 7000                       		moveq	#0,d0
0000EF30 1028 0024                  		move.b	$24(a0),d0
0000EF34 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF38 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF3C                            ; ===========================================================================
0000EF3C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF3E 0000                       		dc.w Obj46_Action-Obj46_Index
0000EF40                            ; ===========================================================================
0000EF40                            
0000EF40                            Obj46_Main:				; XREF: Obj46_Index
0000EF40 5428 0024                  		addq.b	#2,$24(a0)
0000EF44 117C 000F 0016             		move.b	#$F,$16(a0)
0000EF4A 117C 000F 0017             		move.b	#$F,$17(a0)
0000EF50 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EF58 317C 4000 0002             		move.w	#$4000,2(a0)
0000EF5E 117C 0004 0001             		move.b	#4,1(a0)
0000EF64 117C 0003 0018             		move.b	#3,$18(a0)
0000EF6A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF70 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF76 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EF7C                            
0000EF7C                            Obj46_Action:				; XREF: Obj46_Index
0000EF7C 4A28 0001                  		tst.b	1(a0)
0000EF80 6A00                       		bpl.s	Obj46_ChkDel
0000EF82 7000                       		moveq	#0,d0
0000EF84 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EF88 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EF8C D040                       		add.w	d0,d0
0000EF8E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EF92 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EF96 323C 001B                  		move.w	#$1B,d1
0000EF9A 343C 0010                  		move.w	#$10,d2
0000EF9E 363C 0011                  		move.w	#$11,d3
0000EFA2 3828 0008                  		move.w	8(a0),d4
0000EFA6 6100 0000                  		bsr.w	SolidObject
0000EFAA                            
0000EFAA                            Obj46_ChkDel:
0000EFAA 6100 ED96                  		bsr.w	DisplaySprite
0000EFAE 3028 0008                  		move.w	8(a0),d0
0000EFB2 0240 FF80                  		andi.w	#$FF80,d0
0000EFB6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFBA 0441 0080                  		subi.w	#$80,d1
0000EFBE 0241 FF80                  		andi.w	#$FF80,d1
0000EFC2 9041                       		sub.w	d1,d0
0000EFC4 0C40 0280                  		cmpi.w	#$280,d0
0000EFC8 6200 EDB4                  		bhi.w	DeleteObject
0000EFCC 4E75                       		rts	
0000EFCE                            ; ===========================================================================
0000EFCE 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EFD0 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EFD2 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EFD4 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EFD6 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EFD8                            ; ===========================================================================
0000EFD8                            
0000EFD8                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EFD8 4E75                       		rts	
0000EFDA                            ; ===========================================================================
0000EFDA                            
0000EFDA                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EFDA 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFDE 9068 0008                  		sub.w	8(a0),d0
0000EFE2 6400                       		bcc.s	loc_E888
0000EFE4 4440                       		neg.w	d0
0000EFE6                            
0000EFE6                            loc_E888:
0000EFE6 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EFEA 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EFEC 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EFF2                            
0000EFF2                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EFF2 7000                       		moveq	#0,d0
0000EFF4 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EFF8 0828 0003 0028             		btst	#3,$28(a0)
0000EFFE 6700                       		beq.s	loc_E8A8
0000F000 4440                       		neg.w	d0
0000F002 0640 0010                  		addi.w	#$10,d0
0000F006                            
0000F006                            loc_E8A8:
0000F006 3228 0030                  		move.w	$30(a0),d1
0000F00A 9240                       		sub.w	d0,d1
0000F00C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F010 4E75                       		rts	
0000F012                            ; ===========================================================================
0000F012                            
0000F012                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F012 6100 ED14                  		bsr.w	SpeedToPos
0000F016 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F01C 6100 0000                  		bsr.w	ObjHitFloor
0000F020 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F022 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F026 D368 000C                  		add.w	d1,$C(a0)
0000F02A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F02E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F034 117C 0004 0028             		move.b	#4,$28(a0)
0000F03A 3011                       		move.w	(a1),d0
0000F03C 0240 03FF                  		andi.w	#$3FF,d0
0000F040 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F044 6400                       		bcc.s	locret_E8EE
0000F046 117C 0000 0028             		move.b	#0,$28(a0)
0000F04C                            
0000F04C                            locret_E8EE:
0000F04C 4E75                       		rts	
0000F04E                            ; ===========================================================================
0000F04E                            
0000F04E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F04E 7000                       		moveq	#0,d0
0000F050 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F054 E648                       		lsr.w	#3,d0
0000F056 3228 0030                  		move.w	$30(a0),d1
0000F05A 9240                       		sub.w	d0,d1
0000F05C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F060 4E75                       		rts	
0000F062                            ; ===========================================================================
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            Map_obj46:
0000F062                            	include "_maps\obj46.asm"
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F062                            ; ---------------------------------------------------------------------------
0000F062 0000                       		dc.w byte_E906-Map_obj46
0000F064 01                         byte_E906:	dc.b 1
0000F065 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F06A                            		even
0000F06A                            		even
0000F06A                            
0000F06A                            ; ===========================================================================
0000F06A                            ; ---------------------------------------------------------------------------
0000F06A                            ; Object 12 - lamp (SYZ)
0000F06A                            ; ---------------------------------------------------------------------------
0000F06A                            
0000F06A                            Obj12:					; XREF: Obj_Index
0000F06A 7000                       		moveq	#0,d0
0000F06C 1028 0024                  		move.b	$24(a0),d0
0000F070 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F074 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F078                            ; ===========================================================================
0000F078 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F07A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F07C                            ; ===========================================================================
0000F07C                            
0000F07C                            Obj12_Main:				; XREF: Obj12_Index
0000F07C 5428 0024                  		addq.b	#2,$24(a0)
0000F080 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F088 317C 0000 0002             		move.w	#0,2(a0)
0000F08E 117C 0004 0001             		move.b	#4,1(a0)
0000F094 117C 0010 0019             		move.b	#$10,$19(a0)
0000F09A 117C 0006 0018             		move.b	#6,$18(a0)
0000F0A0                            
0000F0A0                            Obj12_Animate:				; XREF: Obj12_Index
0000F0A0 5328 001E                  		subq.b	#1,$1E(a0)
0000F0A4 6A00                       		bpl.s	Obj12_ChkDel
0000F0A6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0AC 5228 001A                  		addq.b	#1,$1A(a0)
0000F0B0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F0B6 6500                       		bcs.s	Obj12_ChkDel
0000F0B8 117C 0000 001A             		move.b	#0,$1A(a0)
0000F0BE                            
0000F0BE                            Obj12_ChkDel:
0000F0BE 3028 0008                  		move.w	8(a0),d0
0000F0C2 0240 FF80                  		andi.w	#$FF80,d0
0000F0C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0CA 0441 0080                  		subi.w	#$80,d1
0000F0CE 0241 FF80                  		andi.w	#$FF80,d1
0000F0D2 9041                       		sub.w	d1,d0
0000F0D4 0C40 0280                  		cmpi.w	#$280,d0
0000F0D8 6200 ECA4                  		bhi.w	DeleteObject
0000F0DC 6000 EC64                  		bra.w	DisplaySprite
0000F0E0                            ; ===========================================================================
0000F0E0                            ; ---------------------------------------------------------------------------
0000F0E0                            ; Sprite mappings - lamp (SYZ)
0000F0E0                            ; ---------------------------------------------------------------------------
0000F0E0                            Map_obj12:
0000F0E0                            	include "_maps\obj12.asm"
0000F0E0                            ; ---------------------------------------------------------------------------
0000F0E0                            ; Sprite mappings - lamp (SYZ)
0000F0E0                            ; ---------------------------------------------------------------------------
0000F0E0 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F0E4 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F0E8 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F0EC 02                         byte_E98E:	dc.b 2
0000F0ED F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F0F2 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F0F7 02                         byte_E999:	dc.b 2
0000F0F8 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F0FD 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F102 02                         byte_E9A4:	dc.b 2
0000F103 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F108 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F10D 02                         byte_E9AF:	dc.b 2
0000F10E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F113 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F118 02                         byte_E9BA:	dc.b 2
0000F119 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F11E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F123 02                         byte_E9C5:	dc.b 2
0000F124 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F129 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F12E                            		even
0000F12E                            		even
0000F12E                            
0000F12E                            ; ===========================================================================
0000F12E                            ; ---------------------------------------------------------------------------
0000F12E                            ; Object 47 - pinball bumper (SYZ)
0000F12E                            ; ---------------------------------------------------------------------------
0000F12E                            
0000F12E                            Obj47:					; XREF: Obj_Index
0000F12E 7000                       		moveq	#0,d0
0000F130 1028 0024                  		move.b	$24(a0),d0
0000F134 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F138 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F13C                            ; ===========================================================================
0000F13C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F13E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F140                            ; ===========================================================================
0000F140                            
0000F140                            Obj47_Main:				; XREF: Obj47_Index
0000F140 5428 0024                  		addq.b	#2,$24(a0)
0000F144 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F14C 317C 0380 0002             		move.w	#$380,2(a0)
0000F152 117C 0004 0001             		move.b	#4,1(a0)
0000F158 117C 0010 0019             		move.b	#$10,$19(a0)
0000F15E 117C 0001 0018             		move.b	#1,$18(a0)
0000F164 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F16A                            
0000F16A                            Obj47_Hit:				; XREF: Obj47_Index
0000F16A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F16E 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F172 4238 FFDF                  		clr.b ($FFFFFFDF).w ; clear double jump flag
0000F176 4238 FFEB                  		clr.b ($FFFFFFEB).w ; clear jumpdash flag
0000F17A 4238 FFE9                  		clr.b ($FFFFFFE9).w ; clear Pepsi drop move flag
0000F17E 4228 0021                  		clr.b	$21(a0)
0000F182 43F8 D000                  		lea	($FFFFD000).w,a1
0000F186 3228 0008                  		move.w	8(a0),d1
0000F18A 3428 000C                  		move.w	$C(a0),d2
0000F18E 9269 0008                  		sub.w	8(a1),d1
0000F192 9469 000C                  		sub.w	$C(a1),d2
0000F196 4EB9 0000 3032             		jsr	(CalcAngle).l
0000F19C 4EB9 0000 2D64             		jsr	(CalcSine).l
0000F1A2 C3FC F900                  		muls.w	#-$700,d1
0000F1A6 E081                       		asr.l	#8,d1
0000F1A8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F1AC C1FC F900                  		muls.w	#-$700,d0
0000F1B0 E080                       		asr.l	#8,d0
0000F1B2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F1B6 08E9 0001 0022             		bset	#1,$22(a1)
0000F1BC 08A9 0004 0022             		bclr	#4,$22(a1)
0000F1C2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F1C8 4229 003C                  		clr.b	$3C(a1)
0000F1CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F1D2 303C 00B4                  		move.w	#$B4,d0
0000F1D6 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F1DC 709A                       		moveq   #$FFFFFF9A,d0 ; play PINGAS sound
0000F1DE 4EB8 118C                          jsr     PlaySample
0000F1E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1E6 7000                       		moveq	#0,d0
0000F1E8 1028 0023                  		move.b	$23(a0),d0
0000F1EC 6700                       		beq.s	Obj47_Score
0000F1EE 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F1F4 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F1F6 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F1FA                            
0000F1FA                            Obj47_Score:
0000F1FA 7001                       		moveq	#1,d0
0000F1FC 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F202 6100 EFEA                  		bsr.w	SingleObjLoad
0000F206 6600                       		bne.s	Obj47_Display
0000F208 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F20C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F212 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F218 137C 0004 001A             		move.b	#4,$1A(a1)
0000F21E                            
0000F21E                            Obj47_Display:
0000F21E 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F224 6100 BDA2                  		bsr.w	AnimateSprite
0000F228 3028 0008                  		move.w	8(a0),d0
0000F22C 0240 FF80                  		andi.w	#$FF80,d0
0000F230 3238 F700                  		move.w	($FFFFF700).w,d1
0000F234 0441 0080                  		subi.w	#$80,d1
0000F238 0241 FF80                  		andi.w	#$FF80,d1
0000F23C 9041                       		sub.w	d1,d0
0000F23E 0C40 0280                  		cmpi.w	#$280,d0
0000F242 6200                       		bhi.s	Obj47_ChkHit
0000F244 6000 EAFC                  		bra.w	DisplaySprite
0000F248                            ; ===========================================================================
0000F248                            
0000F248                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F248 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F24C 7000                       		moveq	#0,d0
0000F24E 1028 0023                  		move.b	$23(a0),d0
0000F252 6700                       		beq.s	Obj47_Delete
0000F254 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F25A                            
0000F25A                            Obj47_Delete:
0000F25A 6000 EB22                  		bra.w	DeleteObject
0000F25E                            ; ===========================================================================
0000F25E                            Ani_obj47:
0000F25E                            	include "_anim\obj47.asm"
0000F25E                            ; ---------------------------------------------------------------------------
0000F25E                            ; Animation script - flamethrower (SBZ)
0000F25E                            ; ---------------------------------------------------------------------------
0000F25E 0000                       		dc.w byte_EAF4-Ani_obj47
0000F260 0000                       		dc.w byte_EAF8-Ani_obj47
0000F262 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F266 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F26E                            		even
0000F26E                            		even
0000F26E                            
0000F26E                            ; ---------------------------------------------------------------------------
0000F26E                            ; Sprite mappings - pinball bumper (SYZ)
0000F26E                            ; ---------------------------------------------------------------------------
0000F26E                            Map_obj47:
0000F26E                            	include "_maps\obj47.asm"
0000F26E                            ; ================================================================================
0000F26E                            ; Sprite Mappings - generated by Flex 2 Fri Jul 13 2018 22:40:39 GMT-0700 (Pacific Daylight Time)
0000F26E                            ; ================================================================================
0000F26E                            
0000F26E                            DATA3ST796E0Q6T:
0000F26E 0000 0000                  	dc.w DATA3ST796E0Q6T_0-DATA3ST796E0Q6T, DATA3ST796E0Q6T_1-DATA3ST796E0Q6T
0000F272 0000                       	dc.w DATA3ST796E0Q6T_2-DATA3ST796E0Q6T
0000F274 02                         DATA3ST796E0Q6T_0: dc.b $2
0000F275 F007 0000 F0               	dc.b $F0, $7, $0, $0, $F0
0000F27A F007 0800 00               	dc.b $F0, $7, $8, $0, $0
0000F27F 02                         DATA3ST796E0Q6T_1: dc.b $2
0000F280 F406 0008 F4               	dc.b $F4, $6, $0, $8, $F4
0000F285 F402 0808 04               	dc.b $F4, $2, $8, $8, $4
0000F28A 02                         DATA3ST796E0Q6T_2: dc.b $2
0000F28B F007 000E F0               	dc.b $F0, $7, $0, $E, $F0
0000F290 F007 080E 00               	dc.b $F0, $7, $8, $E, $0
0000F296 00                         	even
0000F296 00                         	even
0000F296                            
0000F296                            ; ===========================================================================
0000F296                            ; ---------------------------------------------------------------------------
0000F296                            ; Object 0D - signpost at the end of a level
0000F296                            ; ---------------------------------------------------------------------------
0000F296                            
0000F296                            Obj0D:					; XREF: Obj_Index
0000F296 7000                       		moveq	#0,d0
0000F298 1028 0024                  		move.b	$24(a0),d0
0000F29C 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F2A0 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F2A4 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F2AA 6100 BD1C                  		bsr.w	AnimateSprite
0000F2AE 6100 EA92                  		bsr.w	DisplaySprite
0000F2B2 3028 0008                  		move.w	8(a0),d0
0000F2B6 0240 FF80                  		andi.w	#$FF80,d0
0000F2BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2BE 0441 0080                  		subi.w	#$80,d1
0000F2C2 0241 FF80                  		andi.w	#$FF80,d1
0000F2C6 9041                       		sub.w	d1,d0
0000F2C8 0C40 0280                  		cmpi.w	#$280,d0
0000F2CC 6200 EAB0                  		bhi.w	DeleteObject
0000F2D0 4E75                       		rts	
0000F2D2                            ; ===========================================================================
0000F2D2 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F2D4 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F2D6 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F2D8 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F2DA 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F2DC                            ; ===========================================================================
0000F2DC                            
0000F2DC                            Obj0D_Main:				; XREF: Obj0D_Index
0000F2DC 5428 0024                  		addq.b	#2,$24(a0)
0000F2E0 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F2E8 317C 0680 0002             		move.w	#$680,2(a0)
0000F2EE 117C 0004 0001             		move.b	#4,1(a0)
0000F2F4 117C 0018 0019             		move.b	#$18,$19(a0)
0000F2FA 117C 0004 0018             		move.b	#4,$18(a0)
0000F300                            
0000F300                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F300 3038 D008                  		move.w	($FFFFD008).w,d0
0000F304 9068 0008                  		sub.w	8(a0),d0
0000F308 6500                       		bcs.s	locret_EBBA
0000F30A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F30E 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F310 303C 00CF                  		move.w	#$CF,d0
0000F314 4EFA DC5E                  		jmp  	Obj3A_NextLevel
0000F318 4EB9 0000 11AE             		jsr	(PlaySound).l	; play signpost	sound
0000F31E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F322 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F328 5428 0024                  		addq.b	#2,$24(a0)
0000F32C                            
0000F32C                            locret_EBBA:
0000F32C 4E75                       		rts	
0000F32E                            ; ===========================================================================
0000F32E                            
0000F32E                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F32E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F332 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F334 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F33A 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F33E 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F344 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F346 5428 0024                  		addq.b	#2,$24(a0)
0000F34A                            
0000F34A                            Obj0D_Sparkle:
0000F34A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F34E 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F350 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F356 7000                       		moveq	#0,d0
0000F358 1028 0034                  		move.b	$34(a0),d0
0000F35C 5428 0034                  		addq.b	#2,$34(a0)
0000F360 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F366 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F36A 6100 EE82                  		bsr.w	SingleObjLoad
0000F36E 6600                       		bne.s	locret_EC42
0000F370 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F374 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F37A 101A                       		move.b	(a2)+,d0
0000F37C 4880                       		ext.w	d0
0000F37E D068 0008                  		add.w	8(a0),d0
0000F382 3340 0008                  		move.w	d0,8(a1)
0000F386 101A                       		move.b	(a2)+,d0
0000F388 4880                       		ext.w	d0
0000F38A D068 000C                  		add.w	$C(a0),d0
0000F38E 3340 000C                  		move.w	d0,$C(a1)
0000F392 237C 0000 A786 0004        		move.l	#Map_obj25,4(a1)
0000F39A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F3A0 137C 0004 0001             		move.b	#4,1(a1)
0000F3A6 137C 0002 0018             		move.b	#2,$18(a1)
0000F3AC 137C 0008 0019             		move.b	#8,$19(a1)
0000F3B2                            
0000F3B2                            locret_EC42:
0000F3B2 4E75                       		rts	
0000F3B4                            ; ===========================================================================
0000F3B4 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F3B6 0808                       		dc.b	8,   8
0000F3B8 F000                       		dc.b -$10,   0
0000F3BA 18F8                       		dc.b  $18,  -8
0000F3BC 00F8                       		dc.b	0,  -8
0000F3BE 1000                       		dc.b  $10,   0
0000F3C0 E808                       		dc.b -$18,   8
0000F3C2 1810                       		dc.b  $18, $10
0000F3C4                            ; ===========================================================================
0000F3C4                            
0000F3C4                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F3C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F3C8 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F3CC 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F3D2 6600                       		bne.s	loc_EC70
0000F3D4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F3DA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F3E0                            
0000F3E0                            loc_EC70:
0000F3E0 4A38 D000                  		tst.b	($FFFFD000).w
0000F3E4 6700                       		beq.s	loc_EC86
0000F3E6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3EA 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F3EE 0641 0128                  		addi.w	#$128,d1
0000F3F2 B041                       		cmp.w	d1,d0
0000F3F4 6500                       		bcs.s	locret_ECEE
0000F3F6                            
0000F3F6                            loc_EC86:
0000F3F6 5428 0024                  		addq.b	#2,$24(a0)
0000F3FA                            
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            ; Subroutine to	set up bonuses at the end of an	act
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            
0000F3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3FA                            
0000F3FA                            
0000F3FA                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F3FA                            ;		jmp  	Obj3A_NextLevel
0000F3FA 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F3FE 6600                       		bne.s	locret_ECEE
0000F400 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F406 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F40A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F40E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F414 7010                       		moveq	#$10,d0
0000F416 4EB9 0000 13E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F41C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F422 7000                       		moveq	#0,d0
0000F424 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F428 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F42C 7200                       		moveq	#0,d1
0000F42E 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F432 D041                       		add.w	d1,d0		; add up your time
0000F434 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F438 7214                       		moveq	#$14,d1
0000F43A B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F43C 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F43E 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F440                            
0000F440                            loc_ECD0:
0000F440 D040                       		add.w	d0,d0
0000F442 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F448 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F44C C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F450 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F454 303C 008E                  		move.w	#$8E,d0
0000F458 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F45E                            
0000F45E                            locret_ECEE:
0000F45E 4E75                       		rts	
0000F460                            ; End of function GotThroughAct
0000F460                            
0000F460                            ; ===========================================================================
0000F460 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F474 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F48A                            ; ===========================================================================
0000F48A                            
0000F48A                            locret_ED1A:				; XREF: Obj0D_Index
0000F48A 4E75                       		rts	
0000F48C                            ; ===========================================================================
0000F48C                            Ani_obj0D:
0000F48C                            	include "_anim\obj0D.asm"
0000F48C                            ; ---------------------------------------------------------------------------
0000F48C                            ; Animation script - signpost
0000F48C                            ; ---------------------------------------------------------------------------
0000F48C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F48E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F490 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F492 0000                       		dc.w byte_ED34-Ani_obj0D
0000F494 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F498 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F49E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F4A4 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F4A8 00                         		even
0000F4A8 00                         		even
0000F4A8                            
0000F4A8                            ; ---------------------------------------------------------------------------
0000F4A8                            ; Sprite mappings - signpost
0000F4A8                            ; ---------------------------------------------------------------------------
0000F4A8                            Map_obj0D:
0000F4A8                            	include "_maps\obj0D.asm"
0000F4A8                            ; ---------------------------------------------------------------------------
0000F4A8                            ; Sprite mappings - signpost
0000F4A8                            ; ---------------------------------------------------------------------------
0000F4A8 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F4AC 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F4B0 0000                       		dc.w byte_ED73-Map_obj0D
0000F4B2 03                         byte_ED42:	dc.b 3
0000F4B3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F4B8 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F4BD 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4C2 02                         byte_ED52:	dc.b 2
0000F4C3 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F4C8 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4CD 02                         byte_ED5D:	dc.b 2
0000F4CE F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F4D3 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4D8 02                         byte_ED68:	dc.b 2
0000F4D9 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F4DE 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4E3 03                         byte_ED73:	dc.b 3
0000F4E4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F4E9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F4EE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4F4 00                         		even
0000F4F4 00                         		even
0000F4F4                            
0000F4F4                            ; ===========================================================================
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            
0000F4F4                            Obj4C:					; XREF: Obj_Index
0000F4F4 7000                       		moveq	#0,d0
0000F4F6 1028 0024                  		move.b	$24(a0),d0
0000F4FA 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F4FE 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F502 6000 0000                  		bra.w	Obj4D_ChkDel
0000F506                            ; ===========================================================================
0000F506 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F508 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F50A 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F50C 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F50E 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F510 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            Obj4C_Main:				; XREF: Obj4C_Index
0000F512 5428 0024                  		addq.b	#2,$24(a0)
0000F516 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F51E 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F524 117C 0004 0001             		move.b	#4,1(a0)
0000F52A 117C 0001 0018             		move.b	#1,$18(a0)
0000F530 117C 0038 0019             		move.b	#$38,$19(a0)
0000F536 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F53C                            
0000F53C                            loc_EDCC:				; XREF: Obj4C_Index
0000F53C 5368 0032                  		subq.w	#1,$32(a0)
0000F540 6A00                       		bpl.s	locret_EDF0
0000F542 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F548 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F54C 3228 000C                  		move.w	$C(a0),d1
0000F550 B041                       		cmp.w	d1,d0
0000F552 6400                       		bcc.s	locret_EDF0
0000F554 0441 0170                  		subi.w	#$170,d1
0000F558 B041                       		cmp.w	d1,d0
0000F55A 6500                       		bcs.s	locret_EDF0
0000F55C 5428 0024                  		addq.b	#2,$24(a0)
0000F560                            
0000F560                            locret_EDF0:
0000F560 4E75                       		rts	
0000F562                            ; ===========================================================================
0000F562                            
0000F562                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F562 5428 0024                  		addq.b	#2,$24(a0)
0000F566 6100 EC9C                  		bsr.w	SingleObjLoad2
0000F56A 6600                       		bne.s	loc_EE18
0000F56C 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F570 3368 0008 0008             		move.w	8(a0),8(a1)
0000F576 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F57C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F582 2348 003C                  		move.l	a0,$3C(a1)
0000F586                            
0000F586                            loc_EE18:
0000F586 117C 0001 001C             		move.b	#1,$1C(a0)
0000F58C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F590 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F592 117C 0004 001C             		move.b	#4,$1C(a0)
0000F598 6000                       		bra.s	Obj4C_Display
0000F59A                            ; ===========================================================================
0000F59A                            
0000F59A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F59A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F59E 08E9 0001 0022             		bset	#1,$22(a1)
0000F5A4 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F5AA 6000                       		bra.s	Obj4C_Display
0000F5AC                            ; ===========================================================================
0000F5AC                            
0000F5AC                            loc_EE3E:				; XREF: Obj4C_Index
0000F5AC 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5B0 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F5B2 5428 0024                  		addq.b	#2,$24(a0)
0000F5B6 4E75                       		rts	
0000F5B8                            ; ===========================================================================
0000F5B8                            
0000F5B8                            Obj4C_Display:				; XREF: Obj4C_Index
0000F5B8 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F5BE 6100 BA08                  		bsr.w	AnimateSprite
0000F5C2 6100 E77E                  		bsr.w	DisplaySprite
0000F5C6 4E75                       		rts	
0000F5C8                            ; ===========================================================================
0000F5C8                            
0000F5C8                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F5C8 117C 0000 001C             		move.b	#0,$1C(a0)
0000F5CE 117C 0002 0024             		move.b	#2,$24(a0)
0000F5D4 4A28 0028                  		tst.b	$28(a0)
0000F5D8 6700 E7A4                  		beq.w	DeleteObject
0000F5DC 4E75                       		rts	
0000F5DE                            ; ===========================================================================
0000F5DE                            ; ---------------------------------------------------------------------------
0000F5DE                            ; Object 4D - lava geyser / lavafall (MZ)
0000F5DE                            ; ---------------------------------------------------------------------------
0000F5DE                            
0000F5DE                            Obj4D:					; XREF: Obj_Index
0000F5DE 7000                       		moveq	#0,d0
0000F5E0 1028 0024                  		move.b	$24(a0),d0
0000F5E4 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F5E8 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F5EC 6000 E754                  		bra.w	DisplaySprite
0000F5F0                            ; ===========================================================================
0000F5F0 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F5F2 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F5F4 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F5F6 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F5F8                            
0000F5F8 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F5FC                            ; ===========================================================================
0000F5FC                            
0000F5FC                            Obj4D_Main:				; XREF: Obj4D_Index
0000F5FC 5428 0024                  		addq.b	#2,$24(a0)
0000F600 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F606 4A28 0028                  		tst.b	$28(a0)
0000F60A 6700                       		beq.s	loc_EEA4
0000F60C 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F612                            
0000F612                            loc_EEA4:
0000F612 7000                       		moveq	#0,d0
0000F614 1028 0028                  		move.b	$28(a0),d0
0000F618 D040                       		add.w	d0,d0
0000F61A 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F620 2248                       		movea.l	a0,a1
0000F622 7201                       		moveq	#1,d1
0000F624 6100                       		bsr.s	Obj4D_MakeLava
0000F626 6000                       		bra.s	loc_EF10
0000F628                            ; ===========================================================================
0000F628                            
0000F628                            Obj4D_Loop:
0000F628 6100 EBDA                  		bsr.w	SingleObjLoad2
0000F62C 6600                       		bne.s	loc_EF0A
0000F62E                            
0000F62E                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F62E 12BC 004D                  		move.b	#$4D,0(a1)
0000F632 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F63A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F640 137C 0004 0001             		move.b	#4,1(a1)
0000F646 137C 0020 0019             		move.b	#$20,$19(a1)
0000F64C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F652 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F658 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F65E 137C 0001 0018             		move.b	#1,$18(a1)
0000F664 137C 0005 001C             		move.b	#5,$1C(a1)
0000F66A 4A28 0028                  		tst.b	$28(a0)
0000F66E 6700                       		beq.s	loc_EF0A
0000F670 137C 0002 001C             		move.b	#2,$1C(a1)
0000F676                            
0000F676                            loc_EF0A:
0000F676 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F67A 4E75                       		rts	
0000F67C                            ; ===========================================================================
0000F67C                            
0000F67C                            loc_EF10:				; XREF: Obj4D_Main
0000F67C 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F682 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F688 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F68E 137C 0093 0020             		move.b	#$93,$20(a1)
0000F694 137C 0080 0016             		move.b	#$80,$16(a1)
0000F69A 08E9 0004 0001             		bset	#4,1(a1)
0000F6A0 5829 0024                  		addq.b	#4,$24(a1)
0000F6A4 2348 003C                  		move.l	a0,$3C(a1)
0000F6A8 4A28 0028                  		tst.b	$28(a0)
0000F6AC 6700                       		beq.s	Obj4D_PlaySnd
0000F6AE 7200                       		moveq	#0,d1
0000F6B0 6100 FF76                  		bsr.w	Obj4D_Loop
0000F6B4 5429 0024                  		addq.b	#2,$24(a1)
0000F6B8 08E9 0004 0002             		bset	#4,2(a1)
0000F6BE 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F6C4 137C 0000 0018             		move.b	#0,$18(a1)
0000F6CA 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6D0 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F6D6 117C 0000 0028             		move.b	#0,$28(a0)
0000F6DC                            
0000F6DC                            Obj4D_PlaySnd:
0000F6DC 303C 00C8                  		move.w	#$C8,d0
0000F6E0 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6E6                            
0000F6E6                            Obj4D_Action:				; XREF: Obj4D_Index
0000F6E6 7000                       		moveq	#0,d0
0000F6E8 1028 0028                  		move.b	$28(a0),d0
0000F6EC D040                       		add.w	d0,d0
0000F6EE 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F6F2 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F6F6 6100 E630                  		bsr.w	SpeedToPos
0000F6FA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F700 6100 B8C6                  		bsr.w	AnimateSprite
0000F704                            
0000F704                            Obj4D_ChkDel:				; XREF: Obj4C
0000F704 3028 0008                  		move.w	8(a0),d0
0000F708 0240 FF80                  		andi.w	#$FF80,d0
0000F70C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F710 0441 0080                  		subi.w	#$80,d1
0000F714 0241 FF80                  		andi.w	#$FF80,d1
0000F718 9041                       		sub.w	d1,d0
0000F71A 0C40 0280                  		cmpi.w	#$280,d0
0000F71E 6200 E65E                  		bhi.w	DeleteObject
0000F722 4E75                       		rts	
0000F724                            ; ===========================================================================
0000F724 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F726 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F728                            ; ===========================================================================
0000F728                            
0000F728                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F728 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F72E 3028 0030                  		move.w	$30(a0),d0
0000F732 B068 000C                  		cmp.w	$C(a0),d0
0000F736 6400                       		bcc.s	locret_EFDA
0000F738 5828 0024                  		addq.b	#4,$24(a0)
0000F73C 2268 003C                  		movea.l	$3C(a0),a1
0000F740 137C 0003 001C             		move.b	#3,$1C(a1)
0000F746                            
0000F746                            locret_EFDA:
0000F746 4E75                       		rts	
0000F748                            ; ===========================================================================
0000F748                            
0000F748                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F748 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F74E 3028 0030                  		move.w	$30(a0),d0
0000F752 B068 000C                  		cmp.w	$C(a0),d0
0000F756 6400                       		bcc.s	locret_EFFA
0000F758 5828 0024                  		addq.b	#4,$24(a0)
0000F75C 2268 003C                  		movea.l	$3C(a0),a1
0000F760 137C 0001 001C             		move.b	#1,$1C(a1)
0000F766                            
0000F766                            locret_EFFA:
0000F766 4E75                       		rts	
0000F768                            ; ===========================================================================
0000F768                            
0000F768                            loc_EFFC:				; XREF: Obj4D_Index
0000F768 2268 003C                  		movea.l	$3C(a0),a1
0000F76C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F772 6700 0000                  		beq.w	Obj4D_Delete
0000F776 3029 000C                  		move.w	$C(a1),d0
0000F77A 0640 0060                  		addi.w	#$60,d0
0000F77E 3140 000C                  		move.w	d0,$C(a0)
0000F782 9068 0030                  		sub.w	$30(a0),d0
0000F786 4440                       		neg.w	d0
0000F788 7208                       		moveq	#8,d1
0000F78A 0C40 0040                  		cmpi.w	#$40,d0
0000F78E 6C00                       		bge.s	loc_F026
0000F790 720B                       		moveq	#$B,d1
0000F792                            
0000F792                            loc_F026:
0000F792 0C40 0080                  		cmpi.w	#$80,d0
0000F796 6F00                       		ble.s	loc_F02E
0000F798 720E                       		moveq	#$E,d1
0000F79A                            
0000F79A                            loc_F02E:
0000F79A 5328 001E                  		subq.b	#1,$1E(a0)
0000F79E 6A00                       		bpl.s	loc_F04C
0000F7A0 117C 0007 001E             		move.b	#7,$1E(a0)
0000F7A6 5228 001B                  		addq.b	#1,$1B(a0)
0000F7AA 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F7B0 6500                       		bcs.s	loc_F04C
0000F7B2 117C 0000 001B             		move.b	#0,$1B(a0)
0000F7B8                            
0000F7B8                            loc_F04C:
0000F7B8 1028 001B                  		move.b	$1B(a0),d0
0000F7BC D001                       		add.b	d1,d0
0000F7BE 1140 001A                  		move.b	d0,$1A(a0)
0000F7C2 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F7C6                            ; ===========================================================================
0000F7C6                            
0000F7C6                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F7C6 6000 E5B6                  		bra.w	DeleteObject
0000F7CA                            ; ===========================================================================
0000F7CA                            ; ---------------------------------------------------------------------------
0000F7CA                            ; Object 4E - advancing	wall of	lava (MZ)
0000F7CA                            ; ---------------------------------------------------------------------------
0000F7CA                            
0000F7CA                            Obj4E:					; XREF: Obj_Index
0000F7CA 7000                       		moveq	#0,d0
0000F7CC 1028 0024                  		move.b	$24(a0),d0
0000F7D0 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F7D4 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F7D8                            ; ===========================================================================
0000F7D8 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F7DA 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F7DC 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F7DE 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F7E0 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            Obj4E_Main:				; XREF: Obj4E_Index
0000F7E2 5828 0024                  		addq.b	#4,$24(a0)
0000F7E6 2248                       		movea.l	a0,a1
0000F7E8 7201                       		moveq	#1,d1
0000F7EA 6000                       		bra.s	Obj4E_Main2
0000F7EC                            ; ===========================================================================
0000F7EC                            
0000F7EC                            Obj4E_Loop:
0000F7EC 6100 EA16                  		bsr.w	SingleObjLoad2
0000F7F0 6600                       		bne.s	loc_F0C8
0000F7F2                            
0000F7F2                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F7F2 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F7F6 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F7FE 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F804 137C 0004 0001             		move.b	#4,1(a1)
0000F80A 137C 0050 0019             		move.b	#$50,$19(a1)
0000F810 3368 0008 0008             		move.w	8(a0),8(a1)
0000F816 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F81C 137C 0001 0018             		move.b	#1,$18(a1)
0000F822 137C 0000 001C             		move.b	#0,$1C(a1)
0000F828 137C 0094 0020             		move.b	#$94,$20(a1)
0000F82E 2348 003C                  		move.l	a0,$3C(a1)
0000F832                            
0000F832                            loc_F0C8:
0000F832 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F836                            
0000F836 5C29 0024                  		addq.b	#6,$24(a1)
0000F83A 137C 0004 001A             		move.b	#4,$1A(a1)
0000F840                            
0000F840                            Obj4E_Action:				; XREF: Obj4E_Index
0000F840 3038 D008                  		move.w	($FFFFD008).w,d0
0000F844 9068 0008                  		sub.w	8(a0),d0
0000F848 6400                       		bcc.s	Obj4E_ChkSonic
0000F84A 4440                       		neg.w	d0
0000F84C                            
0000F84C                            Obj4E_ChkSonic:
0000F84C 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F850 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F852 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F856 9068 000C                  		sub.w	$C(a0),d0
0000F85A 6400                       		bcc.s	loc_F0F4
0000F85C 4440                       		neg.w	d0
0000F85E                            
0000F85E                            loc_F0F4:
0000F85E 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F862 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F864 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F86A 6000                       		bra.s	Obj4E_Solid
0000F86C                            ; ===========================================================================
0000F86C                            
0000F86C                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F86C 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F870 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F872 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F878 5528 0024                  		subq.b	#2,$24(a0)
0000F87C                            
0000F87C                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F87C 323C 002B                  		move.w	#$2B,d1
0000F880 343C 0018                  		move.w	#$18,d2
0000F884 3602                       		move.w	d2,d3
0000F886 5243                       		addq.w	#1,d3
0000F888 3828 0008                  		move.w	8(a0),d4
0000F88C 1028 0024                  		move.b	$24(a0),d0
0000F890 3F00                       		move.w	d0,-(sp)
0000F892 6100 0000                  		bsr.w	SolidObject
0000F896 301F                       		move.w	(sp)+,d0
0000F898 1140 0024                  		move.b	d0,$24(a0)
0000F89C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F8A2 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F8A4 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F8A8 4228 0036                  		clr.b	$36(a0)
0000F8AC                            
0000F8AC                            Obj4E_Animate:
0000F8AC 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F8B2 6100 B714                  		bsr.w	AnimateSprite
0000F8B6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F8BC 6400                       		bcc.s	Obj4E_ChkDel
0000F8BE 6100 E468                  		bsr.w	SpeedToPos
0000F8C2                            
0000F8C2                            Obj4E_ChkDel:
0000F8C2 6100 E47E                  		bsr.w	DisplaySprite
0000F8C6 4A28 0036                  		tst.b	$36(a0)
0000F8CA 6600                       		bne.s	locret_F17E
0000F8CC 3028 0008                  		move.w	8(a0),d0
0000F8D0 0240 FF80                  		andi.w	#$FF80,d0
0000F8D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8D8 0441 0080                  		subi.w	#$80,d1
0000F8DC 0241 FF80                  		andi.w	#$FF80,d1
0000F8E0 9041                       		sub.w	d1,d0
0000F8E2 0C40 0280                  		cmpi.w	#$280,d0
0000F8E6 6200                       		bhi.s	Obj4E_ChkGone
0000F8E8                            
0000F8E8                            locret_F17E:
0000F8E8 4E75                       		rts	
0000F8EA                            ; ===========================================================================
0000F8EA                            
0000F8EA                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F8EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F8EE 7000                       		moveq	#0,d0
0000F8F0 1028 0023                  		move.b	$23(a0),d0
0000F8F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F8FA 117C 0008 0024             		move.b	#8,$24(a0)
0000F900 4E75                       		rts	
0000F902                            ; ===========================================================================
0000F902                            
0000F902                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F902 2268 003C                  		movea.l	$3C(a0),a1
0000F906 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F90C 6700                       		beq.s	Obj4E_Delete
0000F90E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F914 0468 0080 0008             		subi.w	#$80,8(a0)
0000F91A 6000 E426                  		bra.w	DisplaySprite
0000F91E                            ; ===========================================================================
0000F91E                            
0000F91E                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F91E 6000 E45E                  		bra.w	DeleteObject
0000F922                            ; ===========================================================================
0000F922                            ; ---------------------------------------------------------------------------
0000F922                            ; Object 54 - invisible	lava tag (MZ)
0000F922                            ; ---------------------------------------------------------------------------
0000F922                            
0000F922                            Obj54:					; XREF: Obj_Index
0000F922 7000                       		moveq	#0,d0
0000F924 1028 0024                  		move.b	$24(a0),d0
0000F928 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F92C 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F930                            ; ===========================================================================
0000F930 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F932 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F934                            
0000F934 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F938                            ; ===========================================================================
0000F938                            
0000F938                            Obj54_Main:				; XREF: Obj54_Index
0000F938 5428 0024                  		addq.b	#2,$24(a0)
0000F93C 7000                       		moveq	#0,d0
0000F93E 1028 0028                  		move.b	$28(a0),d0
0000F942 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F948 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F950 117C 0084 0001             		move.b	#$84,1(a0)
0000F956                            
0000F956                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F956 3028 0008                  		move.w	8(a0),d0
0000F95A 0240 FF80                  		andi.w	#$FF80,d0
0000F95E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F962 0441 0080                  		subi.w	#$80,d1
0000F966 0241 FF80                  		andi.w	#$FF80,d1
0000F96A 9041                       		sub.w	d1,d0
0000F96C 6B00 E410                  		bmi.w	DeleteObject
0000F970 0C40 0280                  		cmpi.w	#$280,d0
0000F974 6200 E408                  		bhi.w	DeleteObject
0000F978 4E75                       		rts	
0000F97A                            ; ===========================================================================
0000F97A                            ; ---------------------------------------------------------------------------
0000F97A                            ; Sprite mappings - invisible lava tag (MZ)
0000F97A                            ; ---------------------------------------------------------------------------
0000F97A                            Map_obj54:
0000F97A                            	include "_maps\obj54.asm"
0000F97A                            ; ---------------------------------------------------------------------------
0000F97A                            ; Sprite mappings - invisible lava tag (MZ)
0000F97A                            ; ---------------------------------------------------------------------------
0000F97A 0000                       		dc.w byte_F212-Map_obj54
0000F97C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F97E 00                         		even
0000F97E 00                         		even
0000F97E                            
0000F97E                            Ani_obj4C:
0000F97E                            	include "_anim\obj4C.asm"
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E                            ; Animation script - geyser of lava (MZ)
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E 0000                       		dc.w byte_F220-Ani_obj4C
0000F980 0000                       		dc.w byte_F22A-Ani_obj4C
0000F982 0000                       		dc.w byte_F22E-Ani_obj4C
0000F984 0000                       		dc.w byte_F232-Ani_obj4C
0000F986 0000                       		dc.w byte_F23A-Ani_obj4C
0000F988 0000                       		dc.w byte_F23E-Ani_obj4C
0000F98A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F994 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F998 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F99C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F9A4 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F9A8 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F9AC                            		even
0000F9AC                            		even
0000F9AC                            
0000F9AC                            Ani_obj4E:
0000F9AC                            	include "_anim\obj4E.asm"
0000F9AC                            ; ---------------------------------------------------------------------------
0000F9AC                            ; Animation script - advancing wall of lava (MZ)
0000F9AC                            ; ---------------------------------------------------------------------------
0000F9AC 0000                       		dc.w byte_F244-Ani_obj4E
0000F9AE 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F9B4                            		even
0000F9B4                            		even
0000F9B4                            
0000F9B4                            ; ---------------------------------------------------------------------------
0000F9B4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9B4                            ; ---------------------------------------------------------------------------
0000F9B4                            Map_obj4C:
0000F9B4                            	include "_maps\obj4C.asm"
0000F9B4                            ; ---------------------------------------------------------------------------
0000F9B4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9B4                            ; ---------------------------------------------------------------------------
0000F9B4 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F9B8 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F9BC 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F9C0 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F9C4 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F9C8 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F9CC 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F9D0 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F9D4 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F9D8 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F9DC 02                         byte_F272:	dc.b 2
0000F9DD EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F9E2 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F9E7 02                         byte_F27D:	dc.b 2
0000F9E8 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F9ED EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F9F2 04                         byte_F288:	dc.b 4
0000F9F3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F9F8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F9FD F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA02 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA07 04                         byte_F29D:	dc.b 4
0000FA08 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA0D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA12 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA17 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA1C 06                         byte_F2B2:	dc.b 6
0000FA1D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA22 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA27 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA2C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA31 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA36 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA3B 06                         byte_F2D1:	dc.b 6
0000FA3C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA41 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA46 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA4B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA50 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FA55 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FA5A 02                         byte_F2F0:	dc.b 2
0000FA5B E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FA60 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FA65 02                         byte_F2FB:	dc.b 2
0000FA66 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FA6B E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FA70 0A                         byte_F306:	dc.b $A
0000FA71 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA76 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA7B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA80 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA85 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA8A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA8F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA94 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA99 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA9E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAA3 0A                         byte_F339:	dc.b $A
0000FAA4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FAA9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAAE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAB3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FAB8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FABD D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAC2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FAC7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FACC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FAD1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FAD6 0A                         byte_F36C:	dc.b $A
0000FAD7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FADC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAE1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAE6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FAEB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAF0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAF5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FAFA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FAFF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB04 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB09 06                         byte_F39F:	dc.b 6
0000FB0A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB0F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB14 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB19 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB1E D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB23 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB28 06                         byte_F3BE:	dc.b 6
0000FB29 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB2E 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB33 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB38 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB3D D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB42 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB47 06                         byte_F3DD:	dc.b 6
0000FB48 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB4D 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB52 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB57 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB5C D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB61 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB66 10                         byte_F3FC:	dc.b $10
0000FB67 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB6C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB71 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB76 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB7B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB80 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB85 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB8A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB8F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB94 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB99 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FB9E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FBA3 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FBA8 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FBAD 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FBB2 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FBB7 10                         byte_F44D:	dc.b $10
0000FBB8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBBD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBC2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBC7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBCC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBD1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBD6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBDB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBE0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBE5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBEA 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FBEF 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FBF4 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FBF9 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FBFE 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC03 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC08 10                         byte_F49E:	dc.b $10
0000FC09 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC0E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC13 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC18 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC1D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC22 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC27 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC2C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC31 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC36 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC3B 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC40 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC45 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FC4A 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FC4F 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FC54 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FC59 06                         byte_F4EF:	dc.b 6
0000FC5A E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FC5F E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FC64 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FC69 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FC6E D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FC73 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FC78 06                         byte_F50E:	dc.b 6
0000FC79 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FC7E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FC83 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FC88 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FC8D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FC92 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FC97 00                         byte_F52D:	dc.b 0
0000FC98                            		even
0000FC98                            		even
0000FC98                            
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98                            Map_obj4E:
0000FC98                            	include "_maps\obj4E.asm"
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98 0000                       		dc.w byte_F538-Map_obj4E
0000FC9A 0000                       		dc.w byte_F566-Map_obj4E
0000FC9C 0000                       		dc.w byte_F594-Map_obj4E
0000FC9E 0000                       		dc.w byte_F5C2-Map_obj4E
0000FCA0 0000                       		dc.w byte_F5F0-Map_obj4E
0000FCA2 09                         byte_F538:	dc.b 9
0000FCA3 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FCA8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FCAD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCB2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCB7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCBC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCC1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCC6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCCB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCD0 09                         byte_F566:	dc.b 9
0000FCD1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FCD6 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FCDB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCE0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCE5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCEA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCEF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCF4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCF9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCFE 09                         byte_F594:	dc.b 9
0000FCFF E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD04 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD09 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD0E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD13 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD18 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD1D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD22 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD27 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD2C 09                         byte_F5C2:	dc.b 9
0000FD2D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD32 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD37 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD3C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD41 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD46 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD4B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD50 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD55 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD5A 08                         byte_F5F0:	dc.b 8
0000FD5B E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FD60 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD65 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD6A 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD6F E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD74 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD79 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD7E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD84 00                         		even
0000FD84 00                         		even
0000FD84                            
0000FD84                            ; ===========================================================================
0000FD84                            ; ---------------------------------------------------------------------------
0000FD84                            ; Object 40 - Moto Bug enemy (GHZ)
0000FD84                            ; ---------------------------------------------------------------------------
0000FD84                            
0000FD84                            Obj40:					; XREF: Obj_Index
0000FD84 7000                       		moveq	#0,d0
0000FD86 1028 0024                  		move.b	$24(a0),d0
0000FD8A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FD8E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FD92                            ; ===========================================================================
0000FD92 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FD94 0000                       		dc.w Obj40_Action-Obj40_Index
0000FD96 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FD98 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FD9A                            ; ===========================================================================
0000FD9A                            
0000FD9A                            Obj40_Main:				; XREF: Obj40_Index
0000FD9A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FDA2 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FDA8 117C 0004 0001             		move.b	#4,1(a0)
0000FDAE 117C 0004 0018             		move.b	#4,$18(a0)
0000FDB4 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDBA 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FDBE 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FDC0 117C 000E 0016             		move.b	#$E,$16(a0)
0000FDC6 117C 0008 0017             		move.b	#8,$17(a0)
0000FDCC 117C 000C 0020             		move.b	#$C,$20(a0)
0000FDD2 6100 DF34                  		bsr.w	ObjectFall
0000FDD6 4EB9 0000 0000             		jsr	ObjHitFloor
0000FDDC 4A41                       		tst.w	d1
0000FDDE 6A00                       		bpl.s	locret_F68A
0000FDE0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDE4 317C 0000 0012             		move.w	#0,$12(a0)
0000FDEA 5428 0024                  		addq.b	#2,$24(a0)
0000FDEE 0868 0000 0022             		bchg	#0,$22(a0)
0000FDF4                            
0000FDF4                            locret_F68A:
0000FDF4 4E75                       		rts	
0000FDF6                            ; ===========================================================================
0000FDF6                            
0000FDF6                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FDF6 5828 0024                  		addq.b	#4,$24(a0)
0000FDFA 6000 0000                  		bra.w	Obj40_Animate
0000FDFE                            ; ===========================================================================
0000FDFE                            
0000FDFE                            Obj40_Action:				; XREF: Obj40_Index
0000FDFE 7000                       		moveq	#0,d0
0000FE00 1028 0025                  		move.b	$25(a0),d0
0000FE04 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE08 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE0C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE12 6100 B1B4                  		bsr.w	AnimateSprite
0000FE16                            
0000FE16                            ; ---------------------------------------------------------------------------
0000FE16                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE16                            ; ---------------------------------------------------------------------------
0000FE16                            
0000FE16                            MarkObjGone:
0000FE16 3028 0008                  		move.w	8(a0),d0
0000FE1A 0240 FF80                  		andi.w	#$FF80,d0
0000FE1E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE22 0441 0080                  		subi.w	#$80,d1
0000FE26 0241 FF80                  		andi.w	#$FF80,d1
0000FE2A 9041                       		sub.w	d1,d0
0000FE2C 0C40 0280                  		cmpi.w	#$280,d0
0000FE30 6200 0000                  		bhi.w	Mark_ChkGone
0000FE34 6000 DF0C                  		bra.w	DisplaySprite
0000FE38                            ; ===========================================================================
0000FE38                            
0000FE38                            Mark_ChkGone:
0000FE38 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE3C 7000                       		moveq	#0,d0
0000FE3E 1028 0023                  		move.b	$23(a0),d0
0000FE42 6700                       		beq.s	Mark_Delete
0000FE44 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE4A                            
0000FE4A                            Mark_Delete:
0000FE4A 6000 DF32                  		bra.w	DeleteObject
0000FE4E                            
0000FE4E                            ; ===========================================================================
0000FE4E 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FE50 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FE52                            ; ===========================================================================
0000FE52                            
0000FE52                            Obj40_Move:				; XREF: Obj40_Index2
0000FE52 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE56 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FE58 5428 0025                  		addq.b	#2,$25(a0)
0000FE5C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FE62 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE68 0868 0000 0022             		bchg	#0,$22(a0)
0000FE6E 6600                       		bne.s	locret_F70A
0000FE70 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE74                            
0000FE74                            locret_F70A:
0000FE74 4E75                       		rts	
0000FE76                            ; ===========================================================================
0000FE76                            
0000FE76                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FE76 6100 DEB0                  		bsr.w	SpeedToPos
0000FE7A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE80 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE84 6D00                       		blt.s	Obj40_Pause
0000FE86 0C41 000C                  		cmpi.w	#$C,d1
0000FE8A 6C00                       		bge.s	Obj40_Pause
0000FE8C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE90 5328 0033                  		subq.b	#1,$33(a0)
0000FE94 6A00                       		bpl.s	locret_F756
0000FE96 117C 000F 0033             		move.b	#$F,$33(a0)
0000FE9C 6100 E350                  		bsr.w	SingleObjLoad
0000FEA0 6600                       		bne.s	locret_F756
0000FEA2 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FEA6 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEB2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FEB8 137C 0002 001C             		move.b	#2,$1C(a1)
0000FEBE                            
0000FEBE                            locret_F756:
0000FEBE 4E75                       		rts	
0000FEC0                            ; ===========================================================================
0000FEC0                            
0000FEC0                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FEC0 5528 0025                  		subq.b	#2,$25(a0)
0000FEC4 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FECA 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FED0 117C 0000 001C             		move.b	#0,$1C(a0)
0000FED6 4E75                       		rts	
0000FED8                            ; ===========================================================================
0000FED8                            
0000FED8                            Obj40_Animate:				; XREF: Obj40_Index
0000FED8 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FEDE 6100 B0E8                  		bsr.w	AnimateSprite
0000FEE2 6000 DE5E                  		bra.w	DisplaySprite
0000FEE6                            ; ===========================================================================
0000FEE6                            
0000FEE6                            Obj40_Delete:				; XREF: Obj40_Index
0000FEE6 6000 DE96                  		bra.w	DeleteObject
0000FEEA                            ; ===========================================================================
0000FEEA                            Ani_obj40:
0000FEEA                            	include "_anim\obj40.asm"
0000FEEA                            ; ---------------------------------------------------------------------------
0000FEEA                            ; Animation script - Motobug enemy
0000FEEA                            ; ---------------------------------------------------------------------------
0000FEEA 0000                       		dc.w byte_F788-Ani_obj40
0000FEEC 0000                       		dc.w byte_F78C-Ani_obj40
0000FEEE 0000                       		dc.w byte_F792-Ani_obj40
0000FEF0 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FEF4 0100 0102 01FF             byte_F78C:	dc.b 1,	0, 1, 2, 1, $FF
0000FEFA 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF08                            		even
0000FF08                            		even
0000FF08                            
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            Map_obj40:
0000FF08                            	include "_maps\obj40.asm"
0000FF08                            ; ================================================================================
0000FF08                            ; Sprite Mappings - generated by Flex 2 Sat Jun 23 2018 22:14:54 GMT-0700 (Pacific Daylight Time)
0000FF08                            ; ================================================================================
0000FF08                            
0000FF08                            DATANR777NT90B:
0000FF08 0000 0000                  	dc.w DATANR777NT90B_0-DATANR777NT90B, DATANR777NT90B_1-DATANR777NT90B
0000FF0C 0000 0000                  	dc.w DATANR777NT90B_2-DATANR777NT90B, DATANR777NT90B_3-DATANR777NT90B
0000FF10 0000 0000                  	dc.w DATANR777NT90B_4-DATANR777NT90B, DATANR777NT90B_5-DATANR777NT90B
0000FF14 0000                       	dc.w DATANR777NT90B_6-DATANR777NT90B
0000FF16 09                         DATANR777NT90B_0: dc.b $9
0000FF17 E70D 0000 F8               	dc.b $E7, $D, $0, $0, $F8
0000FF1C F70C 0008 F8               	dc.b $F7, $C, $0, $8, $F8
0000FF21 F701 000C E8               	dc.b $F7, $1, $0, $C, $E8
0000FF26 FF08 000E 00               	dc.b $FF, $8, $0, $E, $0
0000FF2B E703 0011 F0               	dc.b $E7, $3, $0, $11, $F0
0000FF30 FF00 0015 F8               	dc.b $FF, $0, $0, $15, $F8
0000FF35 EA00 001A E8               	dc.b $EA, $0, $0, $1A, $E8
0000FF3A 0705 0016 09               	dc.b $7, $5, $0, $16, $9
0000FF3F 0C04 001B F3               	dc.b $C, $4, $0, $1B, $F3
0000FF44 09                         DATANR777NT90B_1: dc.b $9
0000FF45 E80D 0000 F8               	dc.b $E8, $D, $0, $0, $F8
0000FF4A F80C 0008 F8               	dc.b $F8, $C, $0, $8, $F8
0000FF4F F801 000C E8               	dc.b $F8, $1, $0, $C, $E8
0000FF54 0008 000E 00               	dc.b $0, $8, $0, $E, $0
0000FF59 E803 0011 F0               	dc.b $E8, $3, $0, $11, $F0
0000FF5E 0000 0015 F8               	dc.b $0, $0, $0, $15, $F8
0000FF63 E900 001A E8               	dc.b $E9, $0, $0, $1A, $E8
0000FF68 0805 0016 0B               	dc.b $8, $5, $0, $16, $B
0000FF6D 0E04 001B F2               	dc.b $E, $4, $0, $1B, $F2
0000FF72 09                         DATANR777NT90B_2: dc.b $9
0000FF73 E90D 0000 F8               	dc.b $E9, $D, $0, $0, $F8
0000FF78 F90C 0008 F8               	dc.b $F9, $C, $0, $8, $F8
0000FF7D F901 000C E8               	dc.b $F9, $1, $0, $C, $E8
0000FF82 0108 000E 00               	dc.b $1, $8, $0, $E, $0
0000FF87 E903 0011 F0               	dc.b $E9, $3, $0, $11, $F0
0000FF8C 0100 0015 F8               	dc.b $1, $0, $0, $15, $F8
0000FF91 E900 001A E8               	dc.b $E9, $0, $0, $1A, $E8
0000FF96 0905 0016 0A               	dc.b $9, $5, $0, $16, $A
0000FF9B 0E04 001B EE               	dc.b $E, $4, $0, $1B, $EE
0000FFA0 00                         DATANR777NT90B_3: dc.b $0
0000FFA1 00                         DATANR777NT90B_4: dc.b $0
0000FFA2 00                         DATANR777NT90B_5: dc.b $0
0000FFA3 00                         DATANR777NT90B_6: dc.b $0
0000FFA4                            	even
0000FFA4                            	even
0000FFA4                            
0000FFA4                            ; ===========================================================================
0000FFA4                            ; ---------------------------------------------------------------------------
0000FFA4                            ; Object 4F - blank
0000FFA4                            ; ---------------------------------------------------------------------------
0000FFA4                            
0000FFA4                            Obj4F:					; XREF: Obj_Index
0000FFA4 4E75                       		rts	
0000FFA6                            
0000FFA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFA6                            
0000FFA6                            
0000FFA6                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FFA6 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FFAA D047                       		add.w	d7,d0
0000FFAC 0240 0003                  		andi.w	#3,d0
0000FFB0 6600                       		bne.s	loc_F836
0000FFB2 7600                       		moveq	#0,d3
0000FFB4 1628 0019                  		move.b	$19(a0),d3
0000FFB8 4A68 0010                  		tst.w	$10(a0)
0000FFBC 6B00                       		bmi.s	loc_F82C
0000FFBE 6100 0000                  		bsr.w	ObjHitWallRight
0000FFC2 4A41                       		tst.w	d1
0000FFC4 6A00                       		bpl.s	loc_F836
0000FFC6                            
0000FFC6                            loc_F828:
0000FFC6 7001                       		moveq	#1,d0
0000FFC8 4E75                       		rts	
0000FFCA                            ; ===========================================================================
0000FFCA                            
0000FFCA                            loc_F82C:
0000FFCA 4643                       		not.w	d3
0000FFCC 6100 0000                  		bsr.w	ObjHitWallLeft
0000FFD0 4A41                       		tst.w	d1
0000FFD2 6BF2                       		bmi.s	loc_F828
0000FFD4                            
0000FFD4                            loc_F836:
0000FFD4 7000                       		moveq	#0,d0
0000FFD6 4E75                       		rts	
0000FFD8                            ; End of function Obj50_ChkWall
0000FFD8                            
0000FFD8                            ; ===========================================================================
0000FFD8                            ; ---------------------------------------------------------------------------
0000FFD8                            ; Object 50 - Yadrin enemy (SYZ)
0000FFD8                            ; ---------------------------------------------------------------------------
0000FFD8                            
0000FFD8                            Obj50:					; XREF: Obj_Index
0000FFD8 7000                       		moveq	#0,d0
0000FFDA 1028 0024                  		move.b	$24(a0),d0
0000FFDE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FFE2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FFE6                            ; ===========================================================================
0000FFE6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FFE8 0000                       		dc.w Obj50_Action-Obj50_Index
0000FFEA                            ; ===========================================================================
0000FFEA                            
0000FFEA                            Obj50_Main:				; XREF: Obj50_Index
0000FFEA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FFF2 317C 247B 0002             		move.w	#$247B,2(a0)
0000FFF8 117C 0004 0001             		move.b	#4,1(a0)
0000FFFE 117C 0004 0018             		move.b	#4,$18(a0)
00010004 117C 0014 0019             		move.b	#$14,$19(a0)
0001000A 117C 0011 0016             		move.b	#$11,$16(a0)
00010010 117C 0008 0017             		move.b	#8,$17(a0)
00010016 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001001C 6100 DCEA                  		bsr.w	ObjectFall
00010020 6100 0000                  		bsr.w	ObjHitFloor
00010024 4A41                       		tst.w	d1
00010026 6A00                       		bpl.s	locret_F89E
00010028 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001002C 317C 0000 0012             		move.w	#0,$12(a0)
00010032 5428 0024                  		addq.b	#2,$24(a0)
00010036 0868 0000 0022             		bchg	#0,$22(a0)
0001003C                            
0001003C                            locret_F89E:
0001003C 4E75                       		rts	
0001003E                            ; ===========================================================================
0001003E                            
0001003E                            Obj50_Action:				; XREF: Obj50_Index
0001003E 7000                       		moveq	#0,d0
00010040 1028 0025                  		move.b	$25(a0),d0
00010044 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010048 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001004C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010052 6100 AF74                  		bsr.w	AnimateSprite
00010056 6000 FDBE                  		bra.w	MarkObjGone
0001005A                            ; ===========================================================================
0001005A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001005C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001005E                            ; ===========================================================================
0001005E                            
0001005E                            Obj50_Move:				; XREF: Obj50_Index2
0001005E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010062 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010064 5428 0025                  		addq.b	#2,$25(a0)
00010068 317C FD00 0010             		move.w	#-$300,$10(a0)	; move object
0001006E 117C 0001 001C             		move.b	#1,$1C(a0)
00010074 0868 0000 0022             		bchg	#0,$22(a0)
0001007A 6600                       		bne.s	locret_F8E2
0001007C 4468 0010                  		neg.w	$10(a0)		; change direction
00010080                            
00010080                            locret_F8E2:
00010080 4E75                       		rts	
00010082                            ; ===========================================================================
00010082                            
00010082                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010082 6100 DCA4                  		bsr.w	SpeedToPos
00010086 6100 0000                  		bsr.w	ObjHitFloor
0001008A 0C41 FFF8                  		cmpi.w	#-8,d1
0001008E 6D00                       		blt.s	Obj50_Pause
00010090 0C41 000C                  		cmpi.w	#$C,d1
00010094 6C00                       		bge.s	Obj50_Pause
00010096 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001009A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001009E 6600                       		bne.s	Obj50_Pause
000100A0 4E75                       		rts	
000100A2                            ; ===========================================================================
000100A2                            
000100A2                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000100A2 5528 0025                  		subq.b	#2,$25(a0)
000100A6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000100AC 317C 0000 0010             		move.w	#0,$10(a0)
000100B2 117C 0000 001C             		move.b	#0,$1C(a0)
000100B8 4E75                       		rts	
000100BA                            ; ===========================================================================
000100BA                            Ani_obj50:
000100BA                            	include "_anim\obj50.asm"
000100BA                            ; ---------------------------------------------------------------------------
000100BA                            ; Animation script - Yadrin enemy
000100BA                            ; ---------------------------------------------------------------------------
000100BA 0000                       		dc.w byte_F920-Ani_obj50
000100BC 0000                       		dc.w byte_F924-Ani_obj50
000100BE 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000100C2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000100CC                            		even
000100CC                            		even
000100CC                            
000100CC                            ; ---------------------------------------------------------------------------
000100CC                            ; Sprite mappings - Yadrin enemy (SYZ)
000100CC                            ; ---------------------------------------------------------------------------
000100CC                            Map_obj50:
000100CC                            	include "_maps\obj50.asm"
000100CC                            ; ================================================================================
000100CC                            ; Sprite Mappings - generated by Flex 2 Sun Jul 08 2018 13:32:13 GMT-0700 (Pacific Daylight Time)
000100CC                            ; ================================================================================
000100CC                            
000100CC                            DATAGXN9UGOMTAN:
000100CC 0000 0000                  	dc.w DATAGXN9UGOMTAN_0-DATAGXN9UGOMTAN, DATAGXN9UGOMTAN_1-DATAGXN9UGOMTAN
000100D0 0000 0000                  	dc.w DATAGXN9UGOMTAN_2-DATAGXN9UGOMTAN, DATAGXN9UGOMTAN_3-DATAGXN9UGOMTAN
000100D4 0000 0000                  	dc.w DATAGXN9UGOMTAN_4-DATAGXN9UGOMTAN, DATAGXN9UGOMTAN_5-DATAGXN9UGOMTAN
000100D8 12                         DATAGXN9UGOMTAN_0: dc.b $12
000100D9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100DE F400 0011 0C               	dc.b $F4, $0, $0, $11, $C
000100E3 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000100E8 FC00 0003 EC               	dc.b $FC, $0, $0, $3, $EC
000100ED FC00 0006 F4               	dc.b $FC, $0, $0, $6, $F4
000100F2 FC00 0009 FC               	dc.b $FC, $0, $0, $9, $FC
000100F7 FC00 000C 04               	dc.b $FC, $0, $0, $C, $4
000100FC FC00 0012 0C               	dc.b $FC, $0, $0, $12, $C
00010101 0400 0013 0C               	dc.b $4, $0, $0, $13, $C
00010106 0400 0004 EC               	dc.b $4, $0, $0, $4, $EC
0001010B 0C00 0005 EC               	dc.b $C, $0, $0, $5, $EC
00010110 0400 0007 F4               	dc.b $4, $0, $0, $7, $F4
00010115 0C00 0008 F4               	dc.b $C, $0, $0, $8, $F4
0001011A 0400 000A FC               	dc.b $4, $0, $0, $A, $FC
0001011F 0C00 000B FC               	dc.b $C, $0, $0, $B, $FC
00010124 0400 000D 04               	dc.b $4, $0, $0, $D, $4
00010129 0C00 000E 04               	dc.b $C, $0, $0, $E, $4
0001012E 0509 0037 DA               	dc.b $5, $9, $0, $37, $DA
00010133 12                         DATAGXN9UGOMTAN_1: dc.b $12
00010134 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010139 F400 0011 0C               	dc.b $F4, $0, $0, $11, $C
0001013E F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010143 FC00 0003 EC               	dc.b $FC, $0, $0, $3, $EC
00010148 FC00 0006 F4               	dc.b $FC, $0, $0, $6, $F4
0001014D FC00 0009 FC               	dc.b $FC, $0, $0, $9, $FC
00010152 FC00 000C 04               	dc.b $FC, $0, $0, $C, $4
00010157 FC00 0012 0C               	dc.b $FC, $0, $0, $12, $C
0001015C 0400 0013 0C               	dc.b $4, $0, $0, $13, $C
00010161 0400 0004 EC               	dc.b $4, $0, $0, $4, $EC
00010166 0C00 0005 EC               	dc.b $C, $0, $0, $5, $EC
0001016B 0400 0007 F4               	dc.b $4, $0, $0, $7, $F4
00010170 0C00 0008 F4               	dc.b $C, $0, $0, $8, $F4
00010175 0400 000A FC               	dc.b $4, $0, $0, $A, $FC
0001017A 0C00 000B FC               	dc.b $C, $0, $0, $B, $FC
0001017F 0400 000D 04               	dc.b $4, $0, $0, $D, $4
00010184 0C00 000E 04               	dc.b $C, $0, $0, $E, $4
00010189 0409 0037 D8               	dc.b $4, $9, $0, $37, $D8
0001018E 12                         DATAGXN9UGOMTAN_2: dc.b $12
0001018F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010194 F400 0011 0C               	dc.b $F4, $0, $0, $11, $C
00010199 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001019E FC00 0003 EC               	dc.b $FC, $0, $0, $3, $EC
000101A3 FC00 0006 F4               	dc.b $FC, $0, $0, $6, $F4
000101A8 FC00 0009 FC               	dc.b $FC, $0, $0, $9, $FC
000101AD FC00 000C 04               	dc.b $FC, $0, $0, $C, $4
000101B2 FC00 0012 0C               	dc.b $FC, $0, $0, $12, $C
000101B7 0400 0013 0C               	dc.b $4, $0, $0, $13, $C
000101BC 0400 0004 EC               	dc.b $4, $0, $0, $4, $EC
000101C1 0C00 0005 EC               	dc.b $C, $0, $0, $5, $EC
000101C6 0400 0007 F4               	dc.b $4, $0, $0, $7, $F4
000101CB 0C00 0008 F4               	dc.b $C, $0, $0, $8, $F4
000101D0 0400 000A FC               	dc.b $4, $0, $0, $A, $FC
000101D5 0C00 000B FC               	dc.b $C, $0, $0, $B, $FC
000101DA 0400 000D 04               	dc.b $4, $0, $0, $D, $4
000101DF 0C00 000E 04               	dc.b $C, $0, $0, $E, $4
000101E4 0209 0037 D6               	dc.b $2, $9, $0, $37, $D6
000101E9 12                         DATAGXN9UGOMTAN_3: dc.b $12
000101EA EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101EF F400 0011 0C               	dc.b $F4, $0, $0, $11, $C
000101F4 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101F9 FC00 0003 EC               	dc.b $FC, $0, $0, $3, $EC
000101FE FC00 0006 F4               	dc.b $FC, $0, $0, $6, $F4
00010203 FC00 0009 FC               	dc.b $FC, $0, $0, $9, $FC
00010208 FC00 000C 04               	dc.b $FC, $0, $0, $C, $4
0001020D FC00 0012 0C               	dc.b $FC, $0, $0, $12, $C
00010212 0400 0013 0C               	dc.b $4, $0, $0, $13, $C
00010217 0400 0004 EC               	dc.b $4, $0, $0, $4, $EC
0001021C 0C00 0005 EC               	dc.b $C, $0, $0, $5, $EC
00010221 0400 0007 F4               	dc.b $4, $0, $0, $7, $F4
00010226 0C00 0008 F4               	dc.b $C, $0, $0, $8, $F4
0001022B 0400 000A FC               	dc.b $4, $0, $0, $A, $FC
00010230 0C00 000B FC               	dc.b $C, $0, $0, $B, $FC
00010235 0400 000D 04               	dc.b $4, $0, $0, $D, $4
0001023A 0C00 000E 04               	dc.b $C, $0, $0, $E, $4
0001023F 0009 0037 D6               	dc.b $0, $9, $0, $37, $D6
00010244 12                         DATAGXN9UGOMTAN_4: dc.b $12
00010245 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001024A F400 0011 0C               	dc.b $F4, $0, $0, $11, $C
0001024F F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010254 FC00 0003 EC               	dc.b $FC, $0, $0, $3, $EC
00010259 FC00 0006 F4               	dc.b $FC, $0, $0, $6, $F4
0001025E FC00 0009 FC               	dc.b $FC, $0, $0, $9, $FC
00010263 FC00 000C 04               	dc.b $FC, $0, $0, $C, $4
00010268 FC00 0012 0C               	dc.b $FC, $0, $0, $12, $C
0001026D 0400 0013 0C               	dc.b $4, $0, $0, $13, $C
00010272 0400 0004 EC               	dc.b $4, $0, $0, $4, $EC
00010277 0C00 0005 EC               	dc.b $C, $0, $0, $5, $EC
0001027C 0400 0007 F4               	dc.b $4, $0, $0, $7, $F4
00010281 0C00 0008 F4               	dc.b $C, $0, $0, $8, $F4
00010286 0400 000A FC               	dc.b $4, $0, $0, $A, $FC
0001028B 0C00 000B FC               	dc.b $C, $0, $0, $B, $FC
00010290 0400 000D 04               	dc.b $4, $0, $0, $D, $4
00010295 0C00 000E 04               	dc.b $C, $0, $0, $E, $4
0001029A 0109 0037 D9               	dc.b $1, $9, $0, $37, $D9
0001029F 12                         DATAGXN9UGOMTAN_5: dc.b $12
000102A0 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000102A5 F400 0011 0C               	dc.b $F4, $0, $0, $11, $C
000102AA F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000102AF FC00 0003 EC               	dc.b $FC, $0, $0, $3, $EC
000102B4 FC00 0006 F4               	dc.b $FC, $0, $0, $6, $F4
000102B9 FC00 0009 FC               	dc.b $FC, $0, $0, $9, $FC
000102BE FC00 000C 04               	dc.b $FC, $0, $0, $C, $4
000102C3 FC00 0012 0C               	dc.b $FC, $0, $0, $12, $C
000102C8 0400 0013 0C               	dc.b $4, $0, $0, $13, $C
000102CD 0400 0004 EC               	dc.b $4, $0, $0, $4, $EC
000102D2 0C00 0005 EC               	dc.b $C, $0, $0, $5, $EC
000102D7 0400 0007 F4               	dc.b $4, $0, $0, $7, $F4
000102DC 0C00 0008 F4               	dc.b $C, $0, $0, $8, $F4
000102E1 0400 000A FC               	dc.b $4, $0, $0, $A, $FC
000102E6 0C00 000B FC               	dc.b $C, $0, $0, $B, $FC
000102EB 0400 000D 04               	dc.b $4, $0, $0, $D, $4
000102F0 0C00 000E 04               	dc.b $C, $0, $0, $E, $4
000102F5 0309 0037 D9               	dc.b $3, $9, $0, $37, $D9
000102FA                            	even
000102FA                            	even
000102FA                            
000102FA                            ; ---------------------------------------------------------------------------
000102FA                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000102FA                            ;
000102FA                            ; variables:
000102FA                            ; d1 = width
000102FA                            ; d2 = height /	2 (when	jumping)
000102FA                            ; d3 = height /	2 (when	walking)
000102FA                            ; d4 = x-axis position
000102FA                            ; ---------------------------------------------------------------------------
000102FA                            
000102FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102FA                            
000102FA                            
000102FA                            SolidObject:
000102FA 4A28 0025                  		tst.b	$25(a0)
000102FE 6700 0000                  		beq.w	loc_FAC8
00010302 3401                       		move.w	d1,d2
00010304 D442                       		add.w	d2,d2
00010306 43F8 D000                  		lea	($FFFFD000).w,a1
0001030A 0829 0001 0022             		btst	#1,$22(a1)
00010310 6600                       		bne.s	loc_F9FE
00010312 3029 0008                  		move.w	8(a1),d0
00010316 9068 0008                  		sub.w	8(a0),d0
0001031A D041                       		add.w	d1,d0
0001031C 6B00                       		bmi.s	loc_F9FE
0001031E B042                       		cmp.w	d2,d0
00010320 6500                       		bcs.s	loc_FA12
00010322                            
00010322                            loc_F9FE:
00010322 08A9 0003 0022             		bclr	#3,$22(a1)
00010328 08A8 0003 0022             		bclr	#3,$22(a0)
0001032E 4228 0025                  		clr.b	$25(a0)
00010332 7800                       		moveq	#0,d4
00010334 4E75                       		rts	
00010336                            ; ===========================================================================
00010336                            
00010336                            loc_FA12:
00010336 3404                       		move.w	d4,d2
00010338 4EB9 0000 82C2             		jsr	MvSonicOnPtfm
0001033E 7800                       		moveq	#0,d4
00010340 4E75                       		rts	
00010342                            ; ===========================================================================
00010342                            
00010342                            SolidObject71:				; XREF: Obj71_Solid
00010342 4A28 0025                  		tst.b	$25(a0)
00010346 6700 0000                  		beq.w	loc_FAD0
0001034A 3401                       		move.w	d1,d2
0001034C D442                       		add.w	d2,d2
0001034E 43F8 D000                  		lea	($FFFFD000).w,a1
00010352 0829 0001 0022             		btst	#1,$22(a1)
00010358 6600                       		bne.s	loc_FA44
0001035A 3029 0008                  		move.w	8(a1),d0
0001035E 9068 0008                  		sub.w	8(a0),d0
00010362 D041                       		add.w	d1,d0
00010364 6B00                       		bmi.s	loc_FA44
00010366 B042                       		cmp.w	d2,d0
00010368 6500                       		bcs.s	loc_FA58
0001036A                            
0001036A                            loc_FA44:
0001036A 08A9 0003 0022             		bclr	#3,$22(a1)
00010370 08A8 0003 0022             		bclr	#3,$22(a0)
00010376 4228 0025                  		clr.b	$25(a0)
0001037A 7800                       		moveq	#0,d4
0001037C 4E75                       		rts	
0001037E                            ; ===========================================================================
0001037E                            
0001037E                            loc_FA58:
0001037E 3404                       		move.w	d4,d2
00010380 4EB9 0000 82C2             		jsr	MvSonicOnPtfm
00010386 7800                       		moveq	#0,d4
00010388 4E75                       		rts	
0001038A                            ; ===========================================================================
0001038A                            
0001038A                            SolidObject2F:				; XREF: Obj2F_Solid
0001038A 43F8 D000                  		lea	($FFFFD000).w,a1
0001038E 4A28 0001                  		tst.b	1(a0)
00010392 6A00 0000                  		bpl.w	loc_FB92
00010396 3029 0008                  		move.w	8(a1),d0
0001039A 9068 0008                  		sub.w	8(a0),d0
0001039E D041                       		add.w	d1,d0
000103A0 6B00 0000                  		bmi.w	loc_FB92
000103A4 3601                       		move.w	d1,d3
000103A6 D643                       		add.w	d3,d3
000103A8 B043                       		cmp.w	d3,d0
000103AA 6200 0000                  		bhi.w	loc_FB92
000103AE 3A00                       		move.w	d0,d5
000103B0 0828 0000 0001             		btst	#0,1(a0)
000103B6 6700                       		beq.s	loc_FA94
000103B8 4645                       		not.w	d5
000103BA DA43                       		add.w	d3,d5
000103BC                            
000103BC                            loc_FA94:
000103BC E24D                       		lsr.w	#1,d5
000103BE 7600                       		moveq	#0,d3
000103C0 1632 5000                  		move.b	(a2,d5.w),d3
000103C4 9612                       		sub.b	(a2),d3
000103C6 3A28 000C                  		move.w	$C(a0),d5
000103CA 9A43                       		sub.w	d3,d5
000103CC 1629 0016                  		move.b	$16(a1),d3
000103D0 4883                       		ext.w	d3
000103D2 D443                       		add.w	d3,d2
000103D4 3629 000C                  		move.w	$C(a1),d3
000103D8 9645                       		sub.w	d5,d3
000103DA 5843                       		addq.w	#4,d3
000103DC D642                       		add.w	d2,d3
000103DE 6B00 0000                  		bmi.w	loc_FB92
000103E2 3802                       		move.w	d2,d4
000103E4 D844                       		add.w	d4,d4
000103E6 B644                       		cmp.w	d4,d3
000103E8 6400 0000                  		bcc.w	loc_FB92
000103EC 6000 0000                  		bra.w	loc_FB0E
000103F0                            ; ===========================================================================
000103F0                            
000103F0                            loc_FAC8:
000103F0 4A28 0001                  		tst.b	1(a0)
000103F4 6A00 0000                  		bpl.w	loc_FB92
000103F8                            
000103F8                            loc_FAD0:
000103F8 43F8 D000                  		lea	($FFFFD000).w,a1
000103FC 3029 0008                  		move.w	8(a1),d0
00010400 9068 0008                  		sub.w	8(a0),d0
00010404 D041                       		add.w	d1,d0
00010406 6B00 0000                  		bmi.w	loc_FB92
0001040A 3601                       		move.w	d1,d3
0001040C D643                       		add.w	d3,d3
0001040E B043                       		cmp.w	d3,d0
00010410 6200 0000                  		bhi.w	loc_FB92
00010414 1629 0016                  		move.b	$16(a1),d3
00010418 4883                       		ext.w	d3
0001041A D443                       		add.w	d3,d2
0001041C 3629 000C                  		move.w	$C(a1),d3
00010420 9668 000C                  		sub.w	$C(a0),d3
00010424 5843                       		addq.w	#4,d3
00010426 D642                       		add.w	d2,d3
00010428 6B00 0000                  		bmi.w	loc_FB92
0001042C 3802                       		move.w	d2,d4
0001042E D844                       		add.w	d4,d4
00010430 B644                       		cmp.w	d4,d3
00010432 6400 0000                  		bcc.w	loc_FB92
00010436                            
00010436                            loc_FB0E:
00010436 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001043A 6B00 0000                  		bmi.w	loc_FB92
0001043E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010444 6400 0000                  		bcc.w	loc_FB92
00010448 4A78 FE08                  		tst.w	($FFFFFE08).w
0001044C 6600 0000                  		bne.w	loc_FBAC
00010450 3A00                       		move.w	d0,d5
00010452 B240                       		cmp.w	d0,d1
00010454 6400                       		bcc.s	loc_FB36
00010456 D241                       		add.w	d1,d1
00010458 9041                       		sub.w	d1,d0
0001045A 3A00                       		move.w	d0,d5
0001045C 4445                       		neg.w	d5
0001045E                            
0001045E                            loc_FB36:
0001045E 3203                       		move.w	d3,d1
00010460 B443                       		cmp.w	d3,d2
00010462 6400                       		bcc.s	loc_FB44
00010464 5943                       		subq.w	#4,d3
00010466 9644                       		sub.w	d4,d3
00010468 3203                       		move.w	d3,d1
0001046A 4441                       		neg.w	d1
0001046C                            
0001046C                            loc_FB44:
0001046C BA41                       		cmp.w	d1,d5
0001046E 6200 0000                  		bhi.w	loc_FBB0
00010472 0C41 0004                  		cmpi.w	#4,d1
00010476 6300                       		bls.s	loc_FB8C
00010478 4A40                       		tst.w	d0
0001047A 6700                       		beq.s	loc_FB70
0001047C 6B00                       		bmi.s	loc_FB5E
0001047E 4A69 0010                  		tst.w	$10(a1)
00010482 6B00                       		bmi.s	loc_FB70
00010484 6000                       		bra.s	loc_FB64
00010486                            ; ===========================================================================
00010486                            
00010486                            loc_FB5E:
00010486 4A69 0010                  		tst.w	$10(a1)
0001048A 6A00                       		bpl.s	loc_FB70
0001048C                            
0001048C                            loc_FB64:
0001048C 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010492 337C 0000 0010             		move.w	#0,$10(a1)
00010498                            
00010498                            loc_FB70:
00010498 9169 0008                  		sub.w	d0,8(a1)
0001049C 0829 0001 0022             		btst	#1,$22(a1)
000104A2 6600                       		bne.s	loc_FB8C
000104A4 08E9 0005 0022             		bset	#5,$22(a1)
000104AA 08E8 0005 0022             		bset	#5,$22(a0)
000104B0 7801                       		moveq	#1,d4
000104B2 4E75                       		rts	
000104B4                            ; ===========================================================================
000104B4                            
000104B4                            loc_FB8C:
000104B4 6100                       		bsr.s	loc_FBA0
000104B6 7801                       		moveq	#1,d4
000104B8 4E75                       		rts	
000104BA                            ; ===========================================================================
000104BA                            
000104BA                            loc_FB92:
000104BA 0828 0005 0022             		btst	#5,$22(a0)
000104C0 6700                       		beq.s	loc_FBAC
000104C2 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000104C8                            
000104C8                            loc_FBA0:
000104C8 08A8 0005 0022             		bclr	#5,$22(a0)
000104CE 08A9 0005 0022             		bclr	#5,$22(a1)
000104D4                            
000104D4                            loc_FBAC:
000104D4 7800                       		moveq	#0,d4
000104D6 4E75                       		rts	
000104D8                            ; ===========================================================================
000104D8                            
000104D8                            loc_FBB0:
000104D8 4A43                       		tst.w	d3
000104DA 6B00                       		bmi.s	loc_FBBC
000104DC 0C43 0010                  		cmpi.w	#$10,d3
000104E0 6500                       		bcs.s	loc_FBEE
000104E2 60D6                       		bra.s	loc_FB92
000104E4                            ; ===========================================================================
000104E4                            
000104E4                            loc_FBBC:
000104E4 4A69 0012                  		tst.w	$12(a1)
000104E8 6700                       		beq.s	loc_FBD6
000104EA 6A00                       		bpl.s	loc_FBD2
000104EC 4A43                       		tst.w	d3
000104EE 6A00                       		bpl.s	loc_FBD2
000104F0 9769 000C                  		sub.w	d3,$C(a1)
000104F4 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000104FA                            
000104FA                            loc_FBD2:
000104FA 78FF                       		moveq	#-1,d4
000104FC 4E75                       		rts	
000104FE                            ; ===========================================================================
000104FE                            
000104FE                            loc_FBD6:
000104FE 0829 0001 0022             		btst	#1,$22(a1)
00010504 66F4                       		bne.s	loc_FBD2
00010506 2F08                       		move.l	a0,-(sp)
00010508 2049                       		movea.l	a1,a0
0001050A 4EB9 0000 0000             		jsr	KillSonic
00010510 205F                       		movea.l	(sp)+,a0
00010512 78FF                       		moveq	#-1,d4
00010514 4E75                       		rts	
00010516                            ; ===========================================================================
00010516                            
00010516                            loc_FBEE:
00010516 5943                       		subq.w	#4,d3
00010518 7200                       		moveq	#0,d1
0001051A 1228 0019                  		move.b	$19(a0),d1
0001051E 3401                       		move.w	d1,d2
00010520 D442                       		add.w	d2,d2
00010522 D269 0008                  		add.w	8(a1),d1
00010526 9268 0008                  		sub.w	8(a0),d1
0001052A 6B00                       		bmi.s	loc_FC28
0001052C B242                       		cmp.w	d2,d1
0001052E 6400                       		bcc.s	loc_FC28
00010530 4A69 0012                  		tst.w	$12(a1)
00010534 6B00                       		bmi.s	loc_FC28
00010536 9769 000C                  		sub.w	d3,$C(a1)
0001053A 5369 000C                  		subq.w	#1,$C(a1)
0001053E 6100                       		bsr.s	sub_FC2C
00010540 117C 0002 0025             		move.b	#2,$25(a0)
00010546 08E8 0003 0022             		bset	#3,$22(a0)
0001054C 78FF                       		moveq	#-1,d4
0001054E 4E75                       		rts	
00010550                            ; ===========================================================================
00010550                            
00010550                            loc_FC28:
00010550 7800                       		moveq	#0,d4
00010552 4E75                       		rts	
00010554                            ; End of function SolidObject
00010554                            
00010554                            
00010554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010554                            
00010554                            
00010554                            sub_FC2C:				; XREF: SolidObject
00010554 0829 0003 0022             		btst	#3,$22(a1)
0001055A 6700                       		beq.s	loc_FC4E
0001055C 7000                       		moveq	#0,d0
0001055E 1029 003D                  		move.b	$3D(a1),d0
00010562 ED48                       		lsl.w	#6,d0
00010564 0680 00FF D000             		addi.l	#$FFD000,d0
0001056A 2440                       		movea.l	d0,a2
0001056C 08AA 0003 0022             		bclr	#3,$22(a2)
00010572 422A 0025                  		clr.b	$25(a2)
00010576                            
00010576                            loc_FC4E:
00010576 3008                       		move.w	a0,d0
00010578 0440 D000                  		subi.w	#-$3000,d0
0001057C EC48                       		lsr.w	#6,d0
0001057E 0240 007F                  		andi.w	#$7F,d0
00010582 1340 003D                  		move.b	d0,$3D(a1)
00010586 137C 0000 0026             		move.b	#0,$26(a1)
0001058C 337C 0000 0012             		move.w	#0,$12(a1)
00010592 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010598 0829 0001 0022             		btst	#1,$22(a1)
0001059E 6700                       		beq.s	loc_FC84
000105A0 2F08                       		move.l	a0,-(sp)
000105A2 2049                       		movea.l	a1,a0
000105A4 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000105AA 205F                       		movea.l	(sp)+,a0
000105AC                            
000105AC                            loc_FC84:
000105AC 08E9 0003 0022             		bset	#3,$22(a1)
000105B2 08E8 0003 0022             		bset	#3,$22(a0)
000105B8 4E75                       		rts	
000105BA                            ; End of function sub_FC2C
000105BA                            
000105BA                            ; ===========================================================================
000105BA                            ; ---------------------------------------------------------------------------
000105BA                            ; Object 51 - smashable	green block (MZ)
000105BA                            ; ---------------------------------------------------------------------------
000105BA                            
000105BA                            Obj51:					; XREF: Obj_Index
000105BA 7000                       		moveq	#0,d0
000105BC 1028 0024                  		move.b	$24(a0),d0
000105C0 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000105C4 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000105C8 6000 F84C                  		bra.w	MarkObjGone
000105CC                            ; ===========================================================================
000105CC 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000105CE 0000                       		dc.w Obj51_Solid-Obj51_Index
000105D0 0000                       		dc.w Obj51_Display-Obj51_Index
000105D2                            ; ===========================================================================
000105D2                            
000105D2                            Obj51_Main:				; XREF: Obj51_Index
000105D2 5428 0024                  		addq.b	#2,$24(a0)
000105D6 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000105DE 317C 02B8 0002             		move.w	#$2B8,2(a0)
000105E4 117C 0004 0001             		move.b	#4,1(a0)
000105EA 117C 0010 0019             		move.b	#$10,$19(a0)
000105F0 117C 0004 0018             		move.b	#4,$18(a0)
000105F6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000105FC                            
000105FC                            Obj51_Solid:				; XREF: Obj51_Index
000105FC 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010602 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010608 323C 001B                  		move.w	#$1B,d1
0001060C 343C 0010                  		move.w	#$10,d2
00010610 363C 0011                  		move.w	#$11,d3
00010614 3828 0008                  		move.w	8(a0),d4
00010618 6100 FCE0                  		bsr.w	SolidObject
0001061C 0828 0003 0022             		btst	#3,$22(a0)
00010622 6600                       		bne.s	Obj51_Smash
00010624                            
00010624                            locret_FCFC:
00010624 4E75                       		rts	
00010626                            ; ===========================================================================
00010626                            
00010626                            Obj51_Smash:				; XREF: Obj51_Solid
00010626 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001062C 66F6                       		bne.s	locret_FCFC	; if not, branch
0001062E 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010634 08E9 0002 0022             		bset	#2,$22(a1)
0001063A 137C 000E 0016             		move.b	#$E,$16(a1)
00010640 137C 0007 0017             		move.b	#7,$17(a1)
00010646 137C 0002 001C             		move.b	#2,$1C(a1)
0001064C 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010652 08E9 0001 0022             		bset	#1,$22(a1)
00010658 08A9 0003 0022             		bclr	#3,$22(a1)
0001065E 137C 0002 0024             		move.b	#2,$24(a1)
00010664 08A8 0003 0022             		bclr	#3,$22(a0)
0001066A 4228 0025                  		clr.b	$25(a0)
0001066E 117C 0001 001A             		move.b	#1,$1A(a0)
00010674 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001067A 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001067C 343C 0038                  		move.w	#$38,d2
00010680 6100 D2C6                  		bsr.w	SmashObject
00010684 6100 DB68                  		bsr.w	SingleObjLoad
00010688 6600                       		bne.s	Obj51_Display
0001068A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001068E 3368 0008 0008             		move.w	8(a0),8(a1)
00010694 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001069A 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0001069E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000106A2 0C42 0006                  		cmpi.w	#6,d2
000106A6 6500                       		bcs.s	Obj51_Bonus
000106A8 7406                       		moveq	#6,d2
000106AA                            
000106AA                            Obj51_Bonus:
000106AA 7000                       		moveq	#0,d0
000106AC 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000106B0 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000106B6 6500                       		bcs.s	loc_FD98	; if not, branch
000106B8 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000106BC 740A                       		moveq	#10,d2
000106BE                            
000106BE                            loc_FD98:
000106BE 4EB9 0000 0000             		jsr	AddPoints
000106C4 E24A                       		lsr.w	#1,d2
000106C6 1342 001A                  		move.b	d2,$1A(a1)
000106CA                            
000106CA                            Obj51_Display:				; XREF: Obj51_Index
000106CA 6100 D65C                  		bsr.w	SpeedToPos
000106CE 0668 0038 0012             		addi.w	#$38,$12(a0)
000106D4 6100 D66C                  		bsr.w	DisplaySprite
000106D8 4A28 0001                  		tst.b	1(a0)
000106DC 6A00 D6A0                  		bpl.w	DeleteObject
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000106E6 FF00 FF00                  		dc.w $FF00, $FF00
000106EA 0200 FE00                  		dc.w $200, $FE00
000106EE 0100 FF00                  		dc.w $100, $FF00
000106F2                            
000106F2 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000106FA                            ; ---------------------------------------------------------------------------
000106FA                            ; Sprite mappings - smashable green block (MZ)
000106FA                            ; ---------------------------------------------------------------------------
000106FA                            Map_obj51:
000106FA                            	include "_maps\obj51.asm"
000106FA                            ; ---------------------------------------------------------------------------
000106FA                            ; Sprite mappings - smashable green block (MZ)
000106FA                            ; ---------------------------------------------------------------------------
000106FA 0000                       		dc.w byte_FDD8-Map_obj51
000106FC 0000                       		dc.w byte_FDE3-Map_obj51
000106FE 02                         byte_FDD8:	dc.b 2
000106FF F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010704 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010709 04                         byte_FDE3:	dc.b 4
0001070A F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001070F 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010714 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010719 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001071E                            		even
0001071E                            		even
0001071E                            
0001071E                            ; ===========================================================================
0001071E                            ; ---------------------------------------------------------------------------
0001071E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001071E                            ; ---------------------------------------------------------------------------
0001071E                            
0001071E                            Obj52:					; XREF: Obj_Index
0001071E 7000                       		moveq	#0,d0
00010720 1028 0024                  		move.b	$24(a0),d0
00010724 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010728 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001072C                            ; ===========================================================================
0001072C 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001072E 0000                       		dc.w Obj52_Platform-Obj52_Index
00010730 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010732                            
00010732 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010734 2001                       		dc.b $20, 1
00010736 2002                       		dc.b $20, 2
00010738 4003                       		dc.b $40, 3
0001073A 3004                       		dc.b $30, 4
0001073C                            ; ===========================================================================
0001073C                            
0001073C                            Obj52_Main:				; XREF: Obj52_Index
0001073C 5428 0024                  		addq.b	#2,$24(a0)
00010740 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010748 317C 02B8 0002             		move.w	#$2B8,2(a0)
0001074E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010754 6600                       		bne.s	loc_FE44
00010756 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001075E 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010764 117C 0007 0016             		move.b	#7,$16(a0)
0001076A                            
0001076A                            loc_FE44:
0001076A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010770 6600                       		bne.s	loc_FE60
00010772 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010778 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001077E 6700                       		beq.s	loc_FE60	; if yes, branch
00010780 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010786                            
00010786                            loc_FE60:
00010786 117C 0004 0001             		move.b	#4,1(a0)
0001078C 7000                       		moveq	#0,d0
0001078E 1028 0028                  		move.b	$28(a0),d0
00010792 E648                       		lsr.w	#3,d0
00010794 0240 001E                  		andi.w	#$1E,d0
00010798 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001079C 115A 0019                  		move.b	(a2)+,$19(a0)
000107A0 115A 001A                  		move.b	(a2)+,$1A(a0)
000107A4 117C 0004 0018             		move.b	#4,$18(a0)
000107AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000107B0 3168 000C 0032             		move.w	$C(a0),$32(a0)
000107B6 0228 000F 0028             		andi.b	#$F,$28(a0)
000107BC                            
000107BC                            Obj52_Platform:				; XREF: Obj52_Index
000107BC 6100 0000                  		bsr.w	Obj52_Move
000107C0 7200                       		moveq	#0,d1
000107C2 1228 0019                  		move.b	$19(a0),d1
000107C6 4EB9 0000 7BF0             		jsr	(PlatformObject).l
000107CC 6000                       		bra.s	Obj52_ChkDel
000107CE                            ; ===========================================================================
000107CE                            
000107CE                            Obj52_StandOn:				; XREF: Obj52_Index
000107CE 7200                       		moveq	#0,d1
000107D0 1228 0019                  		move.b	$19(a0),d1
000107D4 4EB9 0000 7D64             		jsr	(ExitPlatform).l
000107DA 3F28 0008                  		move.w	8(a0),-(sp)
000107DE 6100 0000                  		bsr.w	Obj52_Move
000107E2 341F                       		move.w	(sp)+,d2
000107E4 4EB9 0000 82CE             		jsr	(MvSonicOnPtfm2).l
000107EA                            
000107EA                            Obj52_ChkDel:				; XREF: Obj52_Platform
000107EA 3028 0030                  		move.w	$30(a0),d0
000107EE 0240 FF80                  		andi.w	#$FF80,d0
000107F2 3238 F700                  		move.w	($FFFFF700).w,d1
000107F6 0441 0080                  		subi.w	#$80,d1
000107FA 0241 FF80                  		andi.w	#$FF80,d1
000107FE 9041                       		sub.w	d1,d0
00010800 0C40 0280                  		cmpi.w	#$280,d0
00010804 6200 D578                  		bhi.w	DeleteObject
00010808 6000 D538                  		bra.w	DisplaySprite
0001080C                            ; ===========================================================================
0001080C                            
0001080C                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001080C 7000                       		moveq	#0,d0
0001080E 1028 0028                  		move.b	$28(a0),d0
00010812 0240 000F                  		andi.w	#$F,d0
00010816 D040                       		add.w	d0,d0
00010818 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001081C 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010820                            ; ===========================================================================
00010820 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010824 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010828 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001082C 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010830 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010834 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010836                            ; ===========================================================================
00010836                            
00010836                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010836 4E75                       		rts	
00010838                            ; ===========================================================================
00010838                            
00010838                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010838 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001083C 323C 0060                  		move.w	#$60,d1
00010840 0828 0000 0022             		btst	#0,$22(a0)
00010846 6700                       		beq.s	loc_FF26
00010848 4440                       		neg.w	d0
0001084A D041                       		add.w	d1,d0
0001084C                            
0001084C                            loc_FF26:
0001084C 3228 0030                  		move.w	$30(a0),d1
00010850 9240                       		sub.w	d0,d1
00010852 3141 0008                  		move.w	d1,8(a0)
00010856 4E75                       		rts	
00010858                            ; ===========================================================================
00010858                            
00010858                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010858 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001085E 6600                       		bne.s	Obj52_02_Wait
00010860 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010864                            
00010864                            Obj52_02_Wait:
00010864 4E75                       		rts	
00010866                            ; ===========================================================================
00010866                            
00010866                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010866 7600                       		moveq	#0,d3
00010868 1628 0019                  		move.b	$19(a0),d3
0001086C 6100 0000                  		bsr.w	ObjHitWallRight
00010870 4A41                       		tst.w	d1		; has the platform hit a wall?
00010872 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010874 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010878 3168 0008 0030             		move.w	8(a0),$30(a0)
0001087E 4E75                       		rts	
00010880                            ; ===========================================================================
00010880                            
00010880                            Obj52_03_End:
00010880 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010884 4E75                       		rts	
00010886                            ; ===========================================================================
00010886                            
00010886                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010886 7600                       		moveq	#0,d3
00010888 1628 0019                  		move.b	$19(a0),d3
0001088C 6100 0000                  		bsr.w	ObjHitWallRight
00010890 4A41                       		tst.w	d1		; has the platform hit a wall?
00010892 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010894 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010898 3168 0008 0030             		move.w	8(a0),$30(a0)
0001089E 4E75                       		rts	
000108A0                            ; ===========================================================================
000108A0                            
000108A0                            Obj52_05_End:
000108A0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000108A4 4E75                       		rts	
000108A6                            ; ===========================================================================
000108A6                            
000108A6                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000108A6 6100 D480                  		bsr.w	SpeedToPos
000108AA 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000108B0 6100 0000                  		bsr.w	ObjHitFloor
000108B4 4A41                       		tst.w	d1		; has platform hit the floor?
000108B6 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000108BA D368 000C                  		add.w	d1,$C(a0)
000108BE 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000108C2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000108C6                            
000108C6                            locret_FFA0:
000108C6 4E75                       		rts	
000108C8                            ; ===========================================================================
000108C8                            
000108C8                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000108C8 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000108CC 6700                       		beq.s	Obj52_07_ChkDel
000108CE 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000108D2                            
000108D2                            Obj52_07_ChkDel:
000108D2 588F                       		addq.l	#4,sp
000108D4 3028 0030                  		move.w	$30(a0),d0
000108D8 0240 FF80                  		andi.w	#$FF80,d0
000108DC 3238 F700                  		move.w	($FFFFF700).w,d1
000108E0 0441 0080                  		subi.w	#$80,d1
000108E4 0241 FF80                  		andi.w	#$FF80,d1
000108E8 9041                       		sub.w	d1,d0
000108EA 0C40 0280                  		cmpi.w	#$280,d0
000108EE 6200 D48E                  		bhi.w	DeleteObject
000108F2 4E75                       		rts	
000108F4                            ; ===========================================================================
000108F4                            
000108F4                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000108F4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000108F8 323C 0080                  		move.w	#$80,d1
000108FC 0828 0000 0022             		btst	#0,$22(a0)
00010902 6700                       		beq.s	loc_FFE2
00010904 4440                       		neg.w	d0
00010906 D041                       		add.w	d1,d0
00010908                            
00010908                            loc_FFE2:
00010908 3228 0032                  		move.w	$32(a0),d1
0001090C 9240                       		sub.w	d0,d1
0001090E 3141 000C                  		move.w	d1,$C(a0)
00010912 4E75                       		rts	
00010914                            ; ===========================================================================
00010914                            
00010914                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010914 7600                       		moveq	#0,d3
00010916 1628 0019                  		move.b	$19(a0),d3
0001091A D643                       		add.w	d3,d3
0001091C 7208                       		moveq	#8,d1
0001091E 0828 0000 0022             		btst	#0,$22(a0)
00010924 6700                       		beq.s	loc_10004
00010926 4441                       		neg.w	d1
00010928 4443                       		neg.w	d3
0001092A                            
0001092A                            loc_10004:
0001092A 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001092E 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010930 3028 0008                  		move.w	8(a0),d0
00010934 9068 0030                  		sub.w	$30(a0),d0
00010938 B043                       		cmp.w	d3,d0
0001093A 6700                       		beq.s	Obj52_0A_Wait
0001093C D368 0008                  		add.w	d1,8(a0)	; move platform
00010940 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010946 4E75                       		rts	
00010948                            ; ===========================================================================
00010948                            
00010948                            Obj52_0A_Wait:
00010948 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001094C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001094E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010954                            
00010954                            locret_1002E:
00010954 4E75                       		rts	
00010956                            ; ===========================================================================
00010956                            
00010956                            Obj52_0A_Back:
00010956 3028 0008                  		move.w	8(a0),d0
0001095A 9068 0030                  		sub.w	$30(a0),d0
0001095E 6700                       		beq.s	Obj52_0A_Reset
00010960 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010964 4E75                       		rts	
00010966                            ; ===========================================================================
00010966                            
00010966                            Obj52_0A_Reset:
00010966 4268 0036                  		clr.w	$36(a0)
0001096A 5328 0028                  		subq.b	#1,$28(a0)
0001096E 4E75                       		rts	
00010970                            ; ===========================================================================
00010970                            ; ---------------------------------------------------------------------------
00010970                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010970                            ; ---------------------------------------------------------------------------
00010970                            Map_obj52:
00010970                            	include "_maps\obj52mz.asm"
00010970                            ; ---------------------------------------------------------------------------
00010970                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010970                            ; ---------------------------------------------------------------------------
00010970 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010974 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010978 0000                       		dc.w byte_1008F-Map_obj52
0001097A 01                         byte_10054:	dc.b 1
0001097B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010980 02                         byte_1005A:	dc.b 2
00010981 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010986 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001098B 04                         byte_10065:	dc.b 4
0001098C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010991 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010996 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001099B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000109A0 04                         byte_1007A:	dc.b 4
000109A1 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000109A6 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000109AB F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000109B0 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000109B5 03                         byte_1008F:	dc.b 3
000109B6 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000109BB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000109C0 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000109C6 00                         		even
000109C6 00                         		even
000109C6                            
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            ; Sprite mappings - moving block (LZ)
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            Map_obj52a:
000109C6                            	include "_maps\obj52lz.asm"
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            ; Sprite mappings - moving block (LZ)
000109C6                            ; ---------------------------------------------------------------------------
000109C6 0000                       		dc.w byte_100A2-Map_obj52a
000109C8 01                         byte_100A2:	dc.b 1
000109C9 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000109CE                            		even
000109CE                            		even
000109CE                            
000109CE                            ; ===========================================================================
000109CE                            ; ---------------------------------------------------------------------------
000109CE                            ; Object 55 - Basaran enemy (MZ)
000109CE                            ; ---------------------------------------------------------------------------
000109CE                            
000109CE                            Obj55:					; XREF: Obj_Index
000109CE 7000                       		moveq	#0,d0
000109D0 1028 0024                  		move.b	$24(a0),d0
000109D4 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000109D8 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000109DC                            ; ===========================================================================
000109DC 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000109DE 0000                       		dc.w Obj55_Action-Obj55_Index
000109E0                            ; ===========================================================================
000109E0                            
000109E0                            Obj55_Main:				; XREF: Obj55_Index
000109E0 5428 0024                  		addq.b	#2,$24(a0)
000109E4 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000109EC 317C 84B8 0002             		move.w	#$84B8,2(a0)
000109F2 117C 0004 0001             		move.b	#4,1(a0)
000109F8 117C 000C 0016             		move.b	#$C,$16(a0)
000109FE 117C 0002 0018             		move.b	#2,$18(a0)
00010A04 117C 000B 0020             		move.b	#$B,$20(a0)
00010A0A 117C 0010 0019             		move.b	#$10,$19(a0)
00010A10                            
00010A10                            Obj55_Action:				; XREF: Obj55_Index
00010A10 7000                       		moveq	#0,d0
00010A12 1028 0025                  		move.b	$25(a0),d0
00010A16 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010A1A 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010A1E 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010A24 6100 A5A2                  		bsr.w	AnimateSprite
00010A28 6000 F3EC                  		bra.w	MarkObjGone
00010A2C                            ; ===========================================================================
00010A2C 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010A2E 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010A30 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010A32 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010A34                            ; ===========================================================================
00010A34                            
00010A34                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010A34 343C 0080                  		move.w	#$80,d2
00010A38 6100 0000                  		bsr.w	Obj55_ChkSonic
00010A3C 6400                       		bcc.s	Obj55_NoDrop
00010A3E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010A42 3140 0036                  		move.w	d0,$36(a0)
00010A46 9068 000C                  		sub.w	$C(a0),d0
00010A4A 6500                       		bcs.s	Obj55_NoDrop
00010A4C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010A50 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010A52 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010A56 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010A58 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A5C D007                       		add.b	d7,d0
00010A5E 0200 0007                  		andi.b	#7,d0
00010A62 6600                       		bne.s	Obj55_NoDrop
00010A64 117C 0001 001C             		move.b	#1,$1C(a0)
00010A6A 5428 0025                  		addq.b	#2,$25(a0)
00010A6E                            
00010A6E                            Obj55_NoDrop:
00010A6E 4E75                       		rts	
00010A70                            ; ===========================================================================
00010A70                            
00010A70                            Obj55_DropFly:				; XREF: Obj55_Index2
00010A70 6100 D2B6                  		bsr.w	SpeedToPos
00010A74 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010A7A 343C 0080                  		move.w	#$80,d2
00010A7E 6100 0000                  		bsr.w	Obj55_ChkSonic
00010A82 3028 0036                  		move.w	$36(a0),d0
00010A86 9068 000C                  		sub.w	$C(a0),d0
00010A8A 6500                       		bcs.s	Obj55_ChkDel
00010A8C 0C40 0010                  		cmpi.w	#$10,d0
00010A90 6400                       		bcc.s	locret_10180
00010A92 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010A96 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010A9C 117C 0002 001C             		move.b	#2,$1C(a0)
00010AA2 5428 0025                  		addq.b	#2,$25(a0)
00010AA6                            
00010AA6                            locret_10180:
00010AA6 4E75                       		rts	
00010AA8                            ; ===========================================================================
00010AA8                            
00010AA8                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010AA8 4A28 0001                  		tst.b	1(a0)
00010AAC 6A00 D2D0                  		bpl.w	DeleteObject
00010AB0 4E75                       		rts	
00010AB2                            ; ===========================================================================
00010AB2                            
00010AB2                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010AB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010AB6 0200 000F                  		andi.b	#$F,d0
00010ABA 6600                       		bne.s	loc_101A0
00010ABC 303C 00C0                  		move.w	#$C0,d0
00010AC0 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play flapping sound
00010AC6                            
00010AC6                            loc_101A0:
00010AC6 6100 D260                  		bsr.w	SpeedToPos
00010ACA 3038 D008                  		move.w	($FFFFD008).w,d0
00010ACE 9068 0008                  		sub.w	8(a0),d0
00010AD2 6400                       		bcc.s	loc_101B0
00010AD4 4440                       		neg.w	d0
00010AD6                            
00010AD6                            loc_101B0:
00010AD6 0C40 0080                  		cmpi.w	#$80,d0
00010ADA 6500                       		bcs.s	locret_101C6
00010ADC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010AE0 D007                       		add.b	d7,d0
00010AE2 0200 0007                  		andi.b	#7,d0
00010AE6 6600                       		bne.s	locret_101C6
00010AE8 5428 0025                  		addq.b	#2,$25(a0)
00010AEC                            
00010AEC                            locret_101C6:
00010AEC 4E75                       		rts	
00010AEE                            ; ===========================================================================
00010AEE                            
00010AEE                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010AEE 6100 D238                  		bsr.w	SpeedToPos
00010AF2 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010AF8 6100 0000                  		bsr.w	ObjHitCeiling
00010AFC 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010AFE 6A00                       		bpl.s	locret_101F4	; if not, branch
00010B00 9368 000C                  		sub.w	d1,$C(a0)
00010B04 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010B0A 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010B0E 4268 0012                  		clr.w	$12(a0)
00010B12 4228 001C                  		clr.b	$1C(a0)
00010B16 4228 0025                  		clr.b	$25(a0)
00010B1A                            
00010B1A                            locret_101F4:
00010B1A 4E75                       		rts	
00010B1C                            ; ===========================================================================
00010B1C                            
00010B1C                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010B1C 323C 0100                  		move.w	#$100,d1
00010B20 08E8 0000 0022             		bset	#0,$22(a0)
00010B26 3038 D008                  		move.w	($FFFFD008).w,d0
00010B2A 9068 0008                  		sub.w	8(a0),d0
00010B2E 6400                       		bcc.s	loc_10214
00010B30 4440                       		neg.w	d0
00010B32 4441                       		neg.w	d1
00010B34 08A8 0000 0022             		bclr	#0,$22(a0)
00010B3A                            
00010B3A                            loc_10214:
00010B3A B042                       		cmp.w	d2,d0
00010B3C 4E75                       		rts	
00010B3E                            ; ===========================================================================
00010B3E 6100 D1E8                  		bsr.w	SpeedToPos
00010B42 6100 D1FE                  		bsr.w	DisplaySprite
00010B46 4A28 0001                  		tst.b	1(a0)
00010B4A 6A00 D232                  		bpl.w	DeleteObject
00010B4E 4E75                       		rts	
00010B50                            ; ===========================================================================
00010B50                            Ani_obj55:
00010B50                            	include "_anim\obj55.asm"
00010B50                            ; ---------------------------------------------------------------------------
00010B50                            ; Animation script - Basaran enemy
00010B50                            ; ---------------------------------------------------------------------------
00010B50 0000                       		dc.w byte_10230-Ani_obj55
00010B52 0000                       		dc.w byte_10234-Ani_obj55
00010B54 0000                       		dc.w byte_10238-Ani_obj55
00010B56 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010B5A 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010B5E 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010B64                            		even
00010B64                            		even
00010B64                            
00010B64                            ; ---------------------------------------------------------------------------
00010B64                            ; Sprite mappings - Basaran enemy (MZ)
00010B64                            ; ---------------------------------------------------------------------------
00010B64                            Map_obj55:
00010B64                            	include "_maps\obj55.asm"
00010B64                            ; ---------------------------------------------------------------------------
00010B64                            ; Sprite mappings - Basaran enemy (MZ)
00010B64                            ; ---------------------------------------------------------------------------
00010B64 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010B68 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010B6C 01                         byte_10246:	dc.b 1
00010B6D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010B72 03                         byte_1024C:	dc.b 3
00010B73 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010B78 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010B7D 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010B82 04                         byte_1025C:	dc.b 4
00010B83 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010B88 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010B8D 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010B92 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010B97 04                         byte_10271:	dc.b 4
00010B98 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010B9D 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010BA2 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010BA7 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010BAC                            		even
00010BAC                            		even
00010BAC                            
00010BAC                            ; ===========================================================================
00010BAC                            ; ---------------------------------------------------------------------------
00010BAC                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010BAC                            ; ---------------------------------------------------------------------------
00010BAC                            
00010BAC                            Obj56:					; XREF: Obj_Index
00010BAC 7000                       		moveq	#0,d0
00010BAE 1028 0024                  		move.b	$24(a0),d0
00010BB2 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010BB6 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010BBA                            ; ===========================================================================
00010BBA 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010BBC 0000                       		dc.w Obj56_Action-Obj56_Index
00010BBE                            
00010BBE 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010BC0 2020                       		dc.b  $20, $20
00010BC2 1020                       		dc.b  $10, $20
00010BC4 201A                       		dc.b  $20, $1A
00010BC6 1027                       		dc.b  $10, $27
00010BC8 1010                       		dc.b  $10, $10
00010BCA 0820                       		dc.b	8, $20
00010BCC 4010                       		dc.b  $40, $10
00010BCE                            ; ===========================================================================
00010BCE                            
00010BCE                            Obj56_Main:				; XREF: Obj56_Index
00010BCE 5428 0024                  		addq.b	#2,$24(a0)
00010BD2 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010BDA 317C 4000 0002             		move.w	#$4000,2(a0)
00010BE0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010BE6 6600                       		bne.s	loc_102C8
00010BE8 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010BEE                            
00010BEE                            loc_102C8:
00010BEE 117C 0004 0001             		move.b	#4,1(a0)
00010BF4 117C 0003 0018             		move.b	#3,$18(a0)
00010BFA 7000                       		moveq	#0,d0
00010BFC 1028 0028                  		move.b	$28(a0),d0
00010C00 E648                       		lsr.w	#3,d0
00010C02 0240 000E                  		andi.w	#$E,d0
00010C06 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010C0A 115A 0019                  		move.b	(a2)+,$19(a0)
00010C0E 1152 0016                  		move.b	(a2),$16(a0)
00010C12 E248                       		lsr.w	#1,d0
00010C14 1140 001A                  		move.b	d0,$1A(a0)
00010C18 3168 0008 0034             		move.w	8(a0),$34(a0)
00010C1E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010C24 7000                       		moveq	#0,d0
00010C26 1012                       		move.b	(a2),d0
00010C28 D040                       		add.w	d0,d0
00010C2A 3140 003A                  		move.w	d0,$3A(a0)
00010C2E 7000                       		moveq	#0,d0
00010C30 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010C36 6700                       		beq.s	loc_10332
00010C38 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010C3C 0240 000F                  		andi.w	#$F,d0
00010C40 5140                       		subq.w	#8,d0
00010C42 6500                       		bcs.s	loc_10332
00010C44 E548                       		lsl.w	#2,d0
00010C46 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010C4A 45F2 0000                  		lea	(a2,d0.w),a2
00010C4E 4A52                       		tst.w	(a2)
00010C50 6A00                       		bpl.s	loc_10332
00010C52 0868 0000 0022             		bchg	#0,$22(a0)
00010C58                            
00010C58                            loc_10332:
00010C58 1028 0028                  		move.b	$28(a0),d0
00010C5C 6A00                       		bpl.s	Obj56_Action
00010C5E 0200 000F                  		andi.b	#$F,d0
00010C62 1140 003C                  		move.b	d0,$3C(a0)
00010C66 117C 0005 0028             		move.b	#5,$28(a0)
00010C6C 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010C72 6600                       		bne.s	Obj56_ChkGone
00010C74 117C 000C 0028             		move.b	#$C,$28(a0)
00010C7A 317C 0080 003A             		move.w	#$80,$3A(a0)
00010C80                            
00010C80                            Obj56_ChkGone:
00010C80 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C84 7000                       		moveq	#0,d0
00010C86 1028 0023                  		move.b	$23(a0),d0
00010C8A 6700                       		beq.s	Obj56_Action
00010C8C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C92 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010C98 6700                       		beq.s	Obj56_Action
00010C9A 5228 0028                  		addq.b	#1,$28(a0)
00010C9E 4268 003A                  		clr.w	$3A(a0)
00010CA2                            
00010CA2                            Obj56_Action:				; XREF: Obj56_Index
00010CA2 3F28 0008                  		move.w	8(a0),-(sp)
00010CA6 7000                       		moveq	#0,d0
00010CA8 1028 0028                  		move.b	$28(a0),d0	; get object type
00010CAC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010CB0 D040                       		add.w	d0,d0
00010CB2 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010CB6 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010CBA 381F                       		move.w	(sp)+,d4
00010CBC 4A28 0001                  		tst.b	1(a0)
00010CC0 6A00                       		bpl.s	Obj56_ChkDel
00010CC2 7200                       		moveq	#0,d1
00010CC4 1228 0019                  		move.b	$19(a0),d1
00010CC8 0641 000B                  		addi.w	#$B,d1
00010CCC 7400                       		moveq	#0,d2
00010CCE 1428 0016                  		move.b	$16(a0),d2
00010CD2 3602                       		move.w	d2,d3
00010CD4 5243                       		addq.w	#1,d3
00010CD6 6100 F622                  		bsr.w	SolidObject
00010CDA                            
00010CDA                            Obj56_ChkDel:
00010CDA 3028 0034                  		move.w	$34(a0),d0
00010CDE 0240 FF80                  		andi.w	#$FF80,d0
00010CE2 3238 F700                  		move.w	($FFFFF700).w,d1
00010CE6 0441 0080                  		subi.w	#$80,d1
00010CEA 0241 FF80                  		andi.w	#$FF80,d1
00010CEE 9041                       		sub.w	d1,d0
00010CF0 0C40 0280                  		cmpi.w	#$280,d0
00010CF4 6200 D088                  		bhi.w	DeleteObject
00010CF8 6000 D048                  		bra.w	DisplaySprite
00010CFC                            ; ===========================================================================
00010CFC 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010D00 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010D04 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010D08 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010D0C 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010D10 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010D14 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010D18                            ; ===========================================================================
00010D18                            
00010D18                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010D18 4E75                       		rts	
00010D1A                            ; ===========================================================================
00010D1A                            
00010D1A                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010D1A 323C 0040                  		move.w	#$40,d1
00010D1E 7000                       		moveq	#0,d0
00010D20 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010D24 6000                       		bra.s	Obj56_Move_LR
00010D26                            ; ===========================================================================
00010D26                            
00010D26                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010D26 323C 0080                  		move.w	#$80,d1
00010D2A 7000                       		moveq	#0,d0
00010D2C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010D30                            
00010D30                            Obj56_Move_LR:
00010D30 0828 0000 0022             		btst	#0,$22(a0)
00010D36 6700                       		beq.s	loc_10416
00010D38 4440                       		neg.w	d0
00010D3A D041                       		add.w	d1,d0
00010D3C                            
00010D3C                            loc_10416:
00010D3C 3228 0034                  		move.w	$34(a0),d1
00010D40 9240                       		sub.w	d0,d1
00010D42 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010D46 4E75                       		rts	
00010D48                            ; ===========================================================================
00010D48                            
00010D48                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010D48 323C 0040                  		move.w	#$40,d1
00010D4C 7000                       		moveq	#0,d0
00010D4E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010D52 6000                       		bra.s	Obj56_Move_UD
00010D54                            ; ===========================================================================
00010D54                            
00010D54                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010D54 323C 0080                  		move.w	#$80,d1
00010D58 7000                       		moveq	#0,d0
00010D5A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010D5E                            
00010D5E                            Obj56_Move_UD:
00010D5E 0828 0000 0022             		btst	#0,$22(a0)
00010D64 6700                       		beq.s	loc_10444
00010D66 4440                       		neg.w	d0
00010D68 D041                       		add.w	d1,d0
00010D6A                            
00010D6A                            loc_10444:
00010D6A 3228 0030                  		move.w	$30(a0),d1
00010D6E 9240                       		sub.w	d0,d1
00010D70 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010D74 4E75                       		rts	
00010D76                            ; ===========================================================================
00010D76                            
00010D76                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010D76 4A28 0038                  		tst.b	$38(a0)
00010D7A 6600                       		bne.s	loc_104A4
00010D7C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010D82 6600                       		bne.s	loc_1047A	; if not, branch
00010D84 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010D8A 6600                       		bne.s	loc_1047A
00010D8C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010D90 3038 D008                  		move.w	($FFFFD008).w,d0
00010D94 B068 0008                  		cmp.w	8(a0),d0
00010D98 6400                       		bcc.s	loc_1047A
00010D9A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010DA0                            
00010DA0                            loc_1047A:
00010DA0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DA4 7000                       		moveq	#0,d0
00010DA6 1028 003C                  		move.b	$3C(a0),d0
00010DAA 0832 0000 0000             		btst	#0,(a2,d0.w)
00010DB0 6700                       		beq.s	loc_104AE
00010DB2 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010DB8 6600                       		bne.s	loc_1049E	; if not, branch
00010DBA 0C00 0003                  		cmpi.b	#3,d0
00010DBE 6600                       		bne.s	loc_1049E
00010DC0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010DC4                            
00010DC4                            loc_1049E:
00010DC4 117C 0001 0038             		move.b	#1,$38(a0)
00010DCA                            
00010DCA                            loc_104A4:
00010DCA 4A68 003A                  		tst.w	$3A(a0)
00010DCE 6700                       		beq.s	loc_104C8
00010DD0 5568 003A                  		subq.w	#2,$3A(a0)
00010DD4                            
00010DD4                            loc_104AE:
00010DD4 3028 003A                  		move.w	$3A(a0),d0
00010DD8 0828 0000 0022             		btst	#0,$22(a0)
00010DDE 6700                       		beq.s	loc_104BC
00010DE0 4440                       		neg.w	d0
00010DE2                            
00010DE2                            loc_104BC:
00010DE2 3228 0030                  		move.w	$30(a0),d1
00010DE6 D240                       		add.w	d0,d1
00010DE8 3141 000C                  		move.w	d1,$C(a0)
00010DEC 4E75                       		rts	
00010DEE                            ; ===========================================================================
00010DEE                            
00010DEE                            loc_104C8:
00010DEE 5228 0028                  		addq.b	#1,$28(a0)
00010DF2 4228 0038                  		clr.b	$38(a0)
00010DF6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DFA 7000                       		moveq	#0,d0
00010DFC 1028 0023                  		move.b	$23(a0),d0
00010E00 67D2                       		beq.s	loc_104AE
00010E02 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010E08 60CA                       		bra.s	loc_104AE
00010E0A                            ; ===========================================================================
00010E0A                            
00010E0A                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010E0A 4A28 0038                  		tst.b	$38(a0)
00010E0E 6600                       		bne.s	loc_10500
00010E10 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E14 7000                       		moveq	#0,d0
00010E16 1028 003C                  		move.b	$3C(a0),d0
00010E1A 4A32 0000                  		tst.b	(a2,d0.w)
00010E1E 6A00                       		bpl.s	loc_10512
00010E20 117C 0001 0038             		move.b	#1,$38(a0)
00010E26                            
00010E26                            loc_10500:
00010E26 7000                       		moveq	#0,d0
00010E28 1028 0016                  		move.b	$16(a0),d0
00010E2C D040                       		add.w	d0,d0
00010E2E B068 003A                  		cmp.w	$3A(a0),d0
00010E32 6700                       		beq.s	loc_1052C
00010E34 5468 003A                  		addq.w	#2,$3A(a0)
00010E38                            
00010E38                            loc_10512:
00010E38 3028 003A                  		move.w	$3A(a0),d0
00010E3C 0828 0000 0022             		btst	#0,$22(a0)
00010E42 6700                       		beq.s	loc_10520
00010E44 4440                       		neg.w	d0
00010E46                            
00010E46                            loc_10520:
00010E46 3228 0030                  		move.w	$30(a0),d1
00010E4A D240                       		add.w	d0,d1
00010E4C 3141 000C                  		move.w	d1,$C(a0)
00010E50 4E75                       		rts	
00010E52                            ; ===========================================================================
00010E52                            
00010E52                            loc_1052C:
00010E52 5328 0028                  		subq.b	#1,$28(a0)
00010E56 4228 0038                  		clr.b	$38(a0)
00010E5A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E5E 7000                       		moveq	#0,d0
00010E60 1028 0023                  		move.b	$23(a0),d0
00010E64 67D2                       		beq.s	loc_10512
00010E66 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E6C 60CA                       		bra.s	loc_10512
00010E6E                            ; ===========================================================================
00010E6E                            
00010E6E                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010E6E 4A28 0038                  		tst.b	$38(a0)
00010E72 6600                       		bne.s	loc_1055E
00010E74 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010E78 6700                       		beq.s	locret_10578
00010E7A 117C 0001 0038             		move.b	#1,$38(a0)
00010E80 4268 003A                  		clr.w	$3A(a0)
00010E84                            
00010E84                            loc_1055E:
00010E84 5268 0008                  		addq.w	#1,8(a0)
00010E88 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E8E 5268 003A                  		addq.w	#1,$3A(a0)
00010E92 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010E98 6600                       		bne.s	locret_10578
00010E9A 4228 0028                  		clr.b	$28(a0)
00010E9E                            
00010E9E                            locret_10578:
00010E9E 4E75                       		rts	
00010EA0                            ; ===========================================================================
00010EA0                            
00010EA0                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010EA0 4A28 0038                  		tst.b	$38(a0)
00010EA4 6600                       		bne.s	loc_10598
00010EA6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EAA 7000                       		moveq	#0,d0
00010EAC 1028 003C                  		move.b	$3C(a0),d0
00010EB0 0832 0000 0000             		btst	#0,(a2,d0.w)
00010EB6 6700                       		beq.s	loc_105A2
00010EB8 117C 0001 0038             		move.b	#1,$38(a0)
00010EBE                            
00010EBE                            loc_10598:
00010EBE 4A68 003A                  		tst.w	$3A(a0)
00010EC2 6700                       		beq.s	loc_105C0
00010EC4 5568 003A                  		subq.w	#2,$3A(a0)
00010EC8                            
00010EC8                            loc_105A2:
00010EC8 3028 003A                  		move.w	$3A(a0),d0
00010ECC 0828 0000 0022             		btst	#0,$22(a0)
00010ED2 6700                       		beq.s	loc_105B4
00010ED4 4440                       		neg.w	d0
00010ED6 0640 0080                  		addi.w	#$80,d0
00010EDA                            
00010EDA                            loc_105B4:
00010EDA 3228 0034                  		move.w	$34(a0),d1
00010EDE D240                       		add.w	d0,d1
00010EE0 3141 0008                  		move.w	d1,8(a0)
00010EE4 4E75                       		rts	
00010EE6                            ; ===========================================================================
00010EE6                            
00010EE6                            loc_105C0:
00010EE6 5228 0028                  		addq.b	#1,$28(a0)
00010EEA 4228 0038                  		clr.b	$38(a0)
00010EEE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EF2 7000                       		moveq	#0,d0
00010EF4 1028 0023                  		move.b	$23(a0),d0
00010EF8 67CE                       		beq.s	loc_105A2
00010EFA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010F00 60C6                       		bra.s	loc_105A2
00010F02                            ; ===========================================================================
00010F02                            
00010F02                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010F02 4A28 0038                  		tst.b	$38(a0)
00010F06 6600                       		bne.s	loc_105F8
00010F08 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F0C 7000                       		moveq	#0,d0
00010F0E 1028 003C                  		move.b	$3C(a0),d0
00010F12 4A32 0000                  		tst.b	(a2,d0.w)
00010F16 6A00                       		bpl.s	loc_10606
00010F18 117C 0001 0038             		move.b	#1,$38(a0)
00010F1E                            
00010F1E                            loc_105F8:
00010F1E 303C 0080                  		move.w	#$80,d0
00010F22 B068 003A                  		cmp.w	$3A(a0),d0
00010F26 6700                       		beq.s	loc_10624
00010F28 5468 003A                  		addq.w	#2,$3A(a0)
00010F2C                            
00010F2C                            loc_10606:
00010F2C 3028 003A                  		move.w	$3A(a0),d0
00010F30 0828 0000 0022             		btst	#0,$22(a0)
00010F36 6700                       		beq.s	loc_10618
00010F38 4440                       		neg.w	d0
00010F3A 0640 0080                  		addi.w	#$80,d0
00010F3E                            
00010F3E                            loc_10618:
00010F3E 3228 0034                  		move.w	$34(a0),d1
00010F42 D240                       		add.w	d0,d1
00010F44 3141 0008                  		move.w	d1,8(a0)
00010F48 4E75                       		rts	
00010F4A                            ; ===========================================================================
00010F4A                            
00010F4A                            loc_10624:
00010F4A 5328 0028                  		subq.b	#1,$28(a0)
00010F4E 4228 0038                  		clr.b	$38(a0)
00010F52 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F56 7000                       		moveq	#0,d0
00010F58 1028 0023                  		move.b	$23(a0),d0
00010F5C 67CE                       		beq.s	loc_10606
00010F5E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F64 60C6                       		bra.s	loc_10606
00010F66                            ; ===========================================================================
00010F66                            
00010F66                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010F66 323C 0010                  		move.w	#$10,d1
00010F6A 7000                       		moveq	#0,d0
00010F6C 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010F70 E248                       		lsr.w	#1,d0
00010F72 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010F76 6000                       		bra.s	Obj56_Move_Sqr
00010F78                            ; ===========================================================================
00010F78                            
00010F78                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010F78 323C 0030                  		move.w	#$30,d1
00010F7C 7000                       		moveq	#0,d0
00010F7E 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010F82 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010F86 6000                       		bra.s	Obj56_Move_Sqr
00010F88                            ; ===========================================================================
00010F88                            
00010F88                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010F88 323C 0050                  		move.w	#$50,d1
00010F8C 7000                       		moveq	#0,d0
00010F8E 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010F92 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010F96 6000                       		bra.s	Obj56_Move_Sqr
00010F98                            ; ===========================================================================
00010F98                            
00010F98                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010F98 323C 0070                  		move.w	#$70,d1
00010F9C 7000                       		moveq	#0,d0
00010F9E 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010FA2 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010FA6                            
00010FA6                            Obj56_Move_Sqr:
00010FA6 4A43                       		tst.w	d3
00010FA8 6600                       		bne.s	loc_1068E
00010FAA 5228 0022                  		addq.b	#1,$22(a0)
00010FAE 0228 0003 0022             		andi.b	#3,$22(a0)
00010FB4                            
00010FB4                            loc_1068E:
00010FB4 1428 0022                  		move.b	$22(a0),d2
00010FB8 0202 0003                  		andi.b	#3,d2
00010FBC 6600                       		bne.s	loc_106AE
00010FBE 9041                       		sub.w	d1,d0
00010FC0 D068 0034                  		add.w	$34(a0),d0
00010FC4 3140 0008                  		move.w	d0,8(a0)
00010FC8 4441                       		neg.w	d1
00010FCA D268 0030                  		add.w	$30(a0),d1
00010FCE 3141 000C                  		move.w	d1,$C(a0)
00010FD2 4E75                       		rts	
00010FD4                            ; ===========================================================================
00010FD4                            
00010FD4                            loc_106AE:
00010FD4 5302                       		subq.b	#1,d2
00010FD6 6600                       		bne.s	loc_106CC
00010FD8 5341                       		subq.w	#1,d1
00010FDA 9041                       		sub.w	d1,d0
00010FDC 4440                       		neg.w	d0
00010FDE D068 0030                  		add.w	$30(a0),d0
00010FE2 3140 000C                  		move.w	d0,$C(a0)
00010FE6 5241                       		addq.w	#1,d1
00010FE8 D268 0034                  		add.w	$34(a0),d1
00010FEC 3141 0008                  		move.w	d1,8(a0)
00010FF0 4E75                       		rts	
00010FF2                            ; ===========================================================================
00010FF2                            
00010FF2                            loc_106CC:
00010FF2 5302                       		subq.b	#1,d2
00010FF4 6600                       		bne.s	loc_106EA
00010FF6 5341                       		subq.w	#1,d1
00010FF8 9041                       		sub.w	d1,d0
00010FFA 4440                       		neg.w	d0
00010FFC D068 0034                  		add.w	$34(a0),d0
00011000 3140 0008                  		move.w	d0,8(a0)
00011004 5241                       		addq.w	#1,d1
00011006 D268 0030                  		add.w	$30(a0),d1
0001100A 3141 000C                  		move.w	d1,$C(a0)
0001100E 4E75                       		rts	
00011010                            ; ===========================================================================
00011010                            
00011010                            loc_106EA:
00011010 9041                       		sub.w	d1,d0
00011012 D068 0030                  		add.w	$30(a0),d0
00011016 3140 000C                  		move.w	d0,$C(a0)
0001101A 4441                       		neg.w	d1
0001101C D268 0034                  		add.w	$34(a0),d1
00011020 3141 0008                  		move.w	d1,8(a0)
00011024 4E75                       		rts	
00011026                            ; ===========================================================================
00011026                            ; ---------------------------------------------------------------------------
00011026                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011026                            ; ---------------------------------------------------------------------------
00011026                            Map_obj56:
00011026                            	include "_maps\obj56.asm"
00011026                            ; ---------------------------------------------------------------------------
00011026                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011026                            ; ---------------------------------------------------------------------------
00011026 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001102A 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001102E 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011032 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011036 01                         byte_10710:	dc.b 1
00011037 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001103C 04                         byte_10716:	dc.b 4
0001103D E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011042 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011047 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001104C 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011051 02                         byte_1072B:	dc.b 2
00011052 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011057 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001105C 04                         byte_10736:	dc.b 4
0001105D E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011062 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011067 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001106C 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011071 03                         byte_1074B:	dc.b 3
00011072 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011077 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001107C 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011081 01                         byte_1075B:	dc.b 1
00011082 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011087 02                         byte_10761:	dc.b 2
00011088 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001108D 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011092 04                         byte_1076C:	dc.b 4
00011093 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00011098 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001109D F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000110A2 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000110A8 00                         		even
000110A8 00                         		even
000110A8                            
000110A8                            ; ===========================================================================
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            ; Object 57 - spiked balls (SYZ, LZ)
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            
000110A8                            Obj57:					; XREF: Obj_Index
000110A8 7000                       		moveq	#0,d0
000110AA 1028 0024                  		move.b	$24(a0),d0
000110AE 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000110B2 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000110B6                            ; ===========================================================================
000110B6 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000110B8 0000                       		dc.w Obj57_Move-Obj57_Index
000110BA 0000                       		dc.w Obj57_Display-Obj57_Index
000110BC                            ; ===========================================================================
000110BC                            
000110BC                            Obj57_Main:				; XREF: Obj57_Index
000110BC 5428 0024                  		addq.b	#2,$24(a0)
000110C0 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000110C8 317C 03BA 0002             		move.w	#$3BA,2(a0)
000110CE 117C 0004 0001             		move.b	#4,1(a0)
000110D4 117C 0004 0018             		move.b	#4,$18(a0)
000110DA 117C 0008 0019             		move.b	#8,$19(a0)
000110E0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000110E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000110EC 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000110F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000110F8 6600                       		bne.s	loc_107E8
000110FA 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011100 317C 0310 0002             		move.w	#$310,2(a0)
00011106 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001110E                            
0001110E                            loc_107E8:
0001110E 1228 0028                  		move.b	$28(a0),d1	; get object type
00011112 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011116 4881                       		ext.w	d1
00011118 E741                       		asl.w	#3,d1		; multiply by 8
0001111A 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001111E 1028 0022                  		move.b	$22(a0),d0
00011122 E418                       		ror.b	#2,d0
00011124 0200 00C0                  		andi.b	#-$40,d0
00011128 1140 0026                  		move.b	d0,$26(a0)
0001112C 45E8 0029                  		lea	$29(a0),a2
00011130 1228 0028                  		move.b	$28(a0),d1	; get object type
00011134 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011138 14FC 0000                  		move.b	#0,(a2)+
0001113C 3601                       		move.w	d1,d3
0001113E E94B                       		lsl.w	#4,d3
00011140 1143 003C                  		move.b	d3,$3C(a0)
00011144 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011146 6500                       		bcs.s	loc_10894
00011148 0828 0003 0028             		btst	#3,$28(a0)
0001114E 6700                       		beq.s	Obj57_MakeChain
00011150 5341                       		subq.w	#1,d1
00011152 6500                       		bcs.s	loc_10894
00011154                            
00011154                            Obj57_MakeChain:
00011154 6100 D098                  		bsr.w	SingleObjLoad
00011158 6600                       		bne.s	loc_10894
0001115A 5228 0029                  		addq.b	#1,$29(a0)
0001115E 3A09                       		move.w	a1,d5
00011160 0445 D000                  		subi.w	#-$3000,d5
00011164 EC4D                       		lsr.w	#6,d5
00011166 0245 007F                  		andi.w	#$7F,d5
0001116A 14C5                       		move.b	d5,(a2)+
0001116C 137C 0004 0024             		move.b	#4,$24(a1)
00011172 1290                       		move.b	0(a0),0(a1)
00011174 2368 0004 0004             		move.l	4(a0),4(a1)
0001117A 3368 0002 0002             		move.w	2(a0),2(a1)
00011180 1368 0001 0001             		move.b	1(a0),1(a1)
00011186 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001118C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011192 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011198 0403 0010                  		subi.b	#$10,d3
0001119C 1343 003C                  		move.b	d3,$3C(a1)
000111A0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000111A6 6600                       		bne.s	loc_10890
000111A8 4A03                       		tst.b	d3
000111AA 6600                       		bne.s	loc_10890
000111AC 137C 0002 001A             		move.b	#2,$1A(a1)
000111B2                            
000111B2                            loc_10890:
000111B2 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000111B6                            
000111B6                            loc_10894:
000111B6 3A08                       		move.w	a0,d5
000111B8 0445 D000                  		subi.w	#-$3000,d5
000111BC EC4D                       		lsr.w	#6,d5
000111BE 0245 007F                  		andi.w	#$7F,d5
000111C2 14C5                       		move.b	d5,(a2)+
000111C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000111CA 6600                       		bne.s	Obj57_Move
000111CC 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000111D2 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000111D8                            
000111D8                            Obj57_Move:				; XREF: Obj57_Index
000111D8 6100 0000                  		bsr.w	Obj57_MoveSub
000111DC 6000 0000                  		bra.w	Obj57_ChkDel
000111E0                            ; ===========================================================================
000111E0                            
000111E0                            Obj57_MoveSub:				; XREF: Obj57_Move
000111E0 3028 003E                  		move.w	$3E(a0),d0
000111E4 D168 0026                  		add.w	d0,$26(a0)
000111E8 1028 0026                  		move.b	$26(a0),d0
000111EC 4EB9 0000 2D64             		jsr	(CalcSine).l
000111F2 3428 0038                  		move.w	$38(a0),d2
000111F6 3628 003A                  		move.w	$3A(a0),d3
000111FA 45E8 0029                  		lea	$29(a0),a2
000111FE 7C00                       		moveq	#0,d6
00011200 1C1A                       		move.b	(a2)+,d6
00011202                            
00011202                            Obj57_MoveLoop:
00011202 7800                       		moveq	#0,d4
00011204 181A                       		move.b	(a2)+,d4
00011206 ED4C                       		lsl.w	#6,d4
00011208 0684 00FF D000             		addi.l	#$FFD000,d4
0001120E 2244                       		movea.l	d4,a1
00011210 7800                       		moveq	#0,d4
00011212 1829 003C                  		move.b	$3C(a1),d4
00011216 2A04                       		move.l	d4,d5
00011218 C9C0                       		muls.w	d0,d4
0001121A E084                       		asr.l	#8,d4
0001121C CBC1                       		muls.w	d1,d5
0001121E E085                       		asr.l	#8,d5
00011220 D842                       		add.w	d2,d4
00011222 DA43                       		add.w	d3,d5
00011224 3344 000C                  		move.w	d4,$C(a1)
00011228 3345 0008                  		move.w	d5,8(a1)
0001122C 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011230 4E75                       		rts	
00011232                            ; ===========================================================================
00011232                            
00011232                            Obj57_ChkDel:				; XREF: Obj57_Move
00011232 3028 003A                  		move.w	$3A(a0),d0
00011236 0240 FF80                  		andi.w	#$FF80,d0
0001123A 3238 F700                  		move.w	($FFFFF700).w,d1
0001123E 0441 0080                  		subi.w	#$80,d1
00011242 0241 FF80                  		andi.w	#$FF80,d1
00011246 9041                       		sub.w	d1,d0
00011248 0C40 0280                  		cmpi.w	#$280,d0
0001124C 6200 0000                  		bhi.w	Obj57_Delete
00011250 6000 CAF0                  		bra.w	DisplaySprite
00011254                            ; ===========================================================================
00011254                            
00011254                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011254 7400                       		moveq	#0,d2
00011256 45E8 0029                  		lea	$29(a0),a2
0001125A 141A                       		move.b	(a2)+,d2
0001125C                            
0001125C                            Obj57_DelLoop:
0001125C 7000                       		moveq	#0,d0
0001125E 101A                       		move.b	(a2)+,d0
00011260 ED48                       		lsl.w	#6,d0
00011262 0680 00FF D000             		addi.l	#$FFD000,d0
00011268 2240                       		movea.l	d0,a1
0001126A 6100 CB14                  		bsr.w	DeleteObject2
0001126E 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011272                            
00011272 4E75                       		rts	
00011274                            ; ===========================================================================
00011274                            
00011274                            Obj57_Display:				; XREF: Obj57_Index
00011274 6000 CACC                  		bra.w	DisplaySprite
00011278                            ; ===========================================================================
00011278                            ; ---------------------------------------------------------------------------
00011278                            ; Sprite mappings - chain of spiked balls (SYZ)
00011278                            ; ---------------------------------------------------------------------------
00011278                            Map_obj57:
00011278                            	include "_maps\obj57syz.asm"
00011278                            ; ---------------------------------------------------------------------------
00011278                            ; Sprite mappings - chain of spiked balls (SYZ)
00011278                            ; ---------------------------------------------------------------------------
00011278 0000                       		dc.w byte_10958-Map_obj57
0001127A 01                         byte_10958:	dc.b 1
0001127B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011280                            		even
00011280                            		even
00011280                            
00011280                            ; ---------------------------------------------------------------------------
00011280                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011280                            ; ---------------------------------------------------------------------------
00011280                            Map_obj57a:
00011280                            	include "_maps\obj57lz.asm"
00011280                            ; ---------------------------------------------------------------------------
00011280                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011280                            ; ---------------------------------------------------------------------------
00011280 0000                       		dc.w byte_10964-Map_obj57a
00011282 0000                       		dc.w byte_1096A-Map_obj57a
00011284 0000                       		dc.w byte_10970-Map_obj57a
00011286 01                         byte_10964:	dc.b 1
00011287 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001128C 01                         byte_1096A:	dc.b 1
0001128D F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011292 01                         byte_10970:	dc.b 1
00011293 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011298                            		even
00011298                            		even
00011298                            
00011298                            ; ===========================================================================
00011298                            ; ---------------------------------------------------------------------------
00011298                            ; Object 58 - giant spiked balls (SYZ)
00011298                            ; ---------------------------------------------------------------------------
00011298                            
00011298                            Obj58:					; XREF: Obj_Index
00011298 7000                       		moveq	#0,d0
0001129A 1028 0024                  		move.b	$24(a0),d0
0001129E 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000112A2 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000112A6                            ; ===========================================================================
000112A6 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000112A8 0000                       		dc.w Obj58_Move-Obj58_Index
000112AA                            ; ===========================================================================
000112AA                            
000112AA                            Obj58_Main:				; XREF: Obj58_Index
000112AA 5428 0024                  		addq.b	#2,$24(a0)
000112AE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000112B6 317C 0396 0002             		move.w	#$396,2(a0)
000112BC 117C 0004 0001             		move.b	#4,1(a0)
000112C2 117C 0004 0018             		move.b	#4,$18(a0)
000112C8 117C 0018 0019             		move.b	#$18,$19(a0)
000112CE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112D4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000112DA 117C 0086 0020             		move.b	#$86,$20(a0)
000112E0 1228 0028                  		move.b	$28(a0),d1	; get object type
000112E4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000112E8 4881                       		ext.w	d1
000112EA E741                       		asl.w	#3,d1		; multiply by 8
000112EC 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000112F0 1028 0022                  		move.b	$22(a0),d0
000112F4 E418                       		ror.b	#2,d0
000112F6 0200 00C0                  		andi.b	#$C0,d0
000112FA 1140 0026                  		move.b	d0,$26(a0)
000112FE 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011304                            
00011304                            Obj58_Move:				; XREF: Obj58_Index
00011304 7000                       		moveq	#0,d0
00011306 1028 0028                  		move.b	$28(a0),d0	; get object type
0001130A 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001130E D040                       		add.w	d0,d0
00011310 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011314 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011318 3028 003A                  		move.w	$3A(a0),d0
0001131C 0240 FF80                  		andi.w	#$FF80,d0
00011320 3238 F700                  		move.w	($FFFFF700).w,d1
00011324 0441 0080                  		subi.w	#$80,d1
00011328 0241 FF80                  		andi.w	#$FF80,d1
0001132C 9041                       		sub.w	d1,d0
0001132E 0C40 0280                  		cmpi.w	#$280,d0
00011332 6200 CA4A                  		bhi.w	DeleteObject
00011336 6000 CA0A                  		bra.w	DisplaySprite
0001133A                            ; ===========================================================================
0001133A 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001133C 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001133E 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011340 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011342                            ; ===========================================================================
00011342                            
00011342                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011342 4E75                       		rts	
00011344                            ; ===========================================================================
00011344                            
00011344                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011344 323C 0060                  		move.w	#$60,d1
00011348 7000                       		moveq	#0,d0
0001134A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001134E 0828 0000 0022             		btst	#0,$22(a0)
00011354 6700                       		beq.s	loc_10A38
00011356 4440                       		neg.w	d0
00011358 D041                       		add.w	d1,d0
0001135A                            
0001135A                            loc_10A38:
0001135A 3228 003A                  		move.w	$3A(a0),d1
0001135E 9240                       		sub.w	d0,d1
00011360 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011364 4E75                       		rts	
00011366                            ; ===========================================================================
00011366                            
00011366                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011366 323C 0060                  		move.w	#$60,d1
0001136A 7000                       		moveq	#0,d0
0001136C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011370 0828 0000 0022             		btst	#0,$22(a0)
00011376 6700                       		beq.s	loc_10A5C
00011378 4440                       		neg.w	d0
0001137A 0640 0080                  		addi.w	#$80,d0
0001137E                            
0001137E                            loc_10A5C:
0001137E 3228 0038                  		move.w	$38(a0),d1
00011382 9240                       		sub.w	d0,d1
00011384 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011388 4E75                       		rts	
0001138A                            ; ===========================================================================
0001138A                            
0001138A                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001138A 3028 003E                  		move.w	$3E(a0),d0
0001138E D168 0026                  		add.w	d0,$26(a0)
00011392 1028 0026                  		move.b	$26(a0),d0
00011396 4EB9 0000 2D64             		jsr	(CalcSine).l
0001139C 3428 0038                  		move.w	$38(a0),d2
000113A0 3628 003A                  		move.w	$3A(a0),d3
000113A4 7800                       		moveq	#0,d4
000113A6 1828 003C                  		move.b	$3C(a0),d4
000113AA 2A04                       		move.l	d4,d5
000113AC C9C0                       		muls.w	d0,d4
000113AE E084                       		asr.l	#8,d4
000113B0 CBC1                       		muls.w	d1,d5
000113B2 E085                       		asr.l	#8,d5
000113B4 D842                       		add.w	d2,d4
000113B6 DA43                       		add.w	d3,d5
000113B8 3144 000C                  		move.w	d4,$C(a0)
000113BC 3145 0008                  		move.w	d5,8(a0)
000113C0 4E75                       		rts	
000113C2                            ; ===========================================================================
000113C2                            ; ---------------------------------------------------------------------------
000113C2                            ; Sprite mappings - SBZ	spiked ball on a chain
000113C2                            ; ---------------------------------------------------------------------------
000113C2                            Map_obj15b:
000113C2                            	include "_maps\obj15sbz.asm"
000113C2                            ; ---------------------------------------------------------------------------
000113C2                            ; Sprite mappings - spiked ball on a chain (SBZ)
000113C2                            ; ---------------------------------------------------------------------------
000113C2 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000113C6 0000                       		dc.w byte_10AC6-Map_obj15b
000113C8 05                         byte_10AA6:	dc.b 5
000113C9 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000113CE F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000113D3 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000113D8 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000113DD 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000113E2 01                         byte_10AC0:	dc.b 1
000113E3 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000113E8 02                         byte_10AC6:	dc.b 2
000113E9 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000113EE E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000113F4 00                         		even
000113F4 00                         		even
000113F4                            
000113F4                            ; ===========================================================================
000113F4                            ; ---------------------------------------------------------------------------
000113F4                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000113F4                            ; ---------------------------------------------------------------------------
000113F4                            
000113F4                            Obj59:					; XREF: Obj_Index
000113F4 7000                       		moveq	#0,d0
000113F6 1028 0024                  		move.b	$24(a0),d0
000113FA 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000113FE 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011402 3028 0032                  		move.w	$32(a0),d0
00011406 0240 FF80                  		andi.w	#$FF80,d0
0001140A 3238 F700                  		move.w	($FFFFF700).w,d1
0001140E 0441 0080                  		subi.w	#$80,d1
00011412 0241 FF80                  		andi.w	#$FF80,d1
00011416 9041                       		sub.w	d1,d0
00011418 0C40 0280                  		cmpi.w	#$280,d0
0001141C 6200 C960                  		bhi.w	DeleteObject
00011420 6000 C920                  		bra.w	DisplaySprite
00011424                            ; ===========================================================================
00011424 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011426 0000                       		dc.w Obj59_Platform-Obj59_Index
00011428 0000                       		dc.w Obj59_Action-Obj59_Index
0001142A 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001142C                            
0001142C 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001142E                            
0001142E 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011430 2001                       		dc.b $20, 1
00011432 3401                       		dc.b $34, 1
00011434 1003                       		dc.b $10, 3
00011436 2003                       		dc.b $20, 3
00011438 3403                       		dc.b $34, 3
0001143A 1401                       		dc.b $14, 1
0001143C 2401                       		dc.b $24, 1
0001143E 2C01                       		dc.b $2C, 1
00011440 1403                       		dc.b $14, 3
00011442 2403                       		dc.b $24, 3
00011444 2C03                       		dc.b $2C, 3
00011446 2005                       		dc.b $20, 5
00011448 2007                       		dc.b $20, 7
0001144A 3009                       		dc.b $30, 9
0001144C                            ; ===========================================================================
0001144C                            
0001144C                            Obj59_Main:				; XREF: Obj59_Index
0001144C 5428 0024                  		addq.b	#2,$24(a0)
00011450 7000                       		moveq	#0,d0
00011452 1028 0028                  		move.b	$28(a0),d0
00011456 6A00                       		bpl.s	Obj59_Main2
00011458 5828 0024                  		addq.b	#4,$24(a0)
0001145C 0240 007F                  		andi.w	#$7F,d0
00011460 C0FC 0006                  		mulu.w	#6,d0
00011464 3140 003C                  		move.w	d0,$3C(a0)
00011468 3140 003E                  		move.w	d0,$3E(a0)
0001146C 588F                       		addq.l	#4,sp
0001146E 4E75                       		rts	
00011470                            ; ===========================================================================
00011470                            
00011470                            Obj59_Main2:
00011470 E648                       		lsr.w	#3,d0
00011472 0240 001E                  		andi.w	#$1E,d0
00011476 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001147A 115A 0019                  		move.b	(a2)+,$19(a0)
0001147E 115A 001A                  		move.b	(a2)+,$1A(a0)
00011482 7000                       		moveq	#0,d0
00011484 1028 0028                  		move.b	$28(a0),d0
00011488 D040                       		add.w	d0,d0
0001148A 0240 001E                  		andi.w	#$1E,d0
0001148E 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011492 101A                       		move.b	(a2)+,d0
00011494 E548                       		lsl.w	#2,d0
00011496 3140 003C                  		move.w	d0,$3C(a0)
0001149A 115A 0028                  		move.b	(a2)+,$28(a0)
0001149E 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000114A6 317C 0000 0002             		move.w	#$0000,2(a0)
000114AC 117C 0004 0001             		move.b	#4,1(a0)
000114B2 117C 0004 0018             		move.b	#4,$18(a0)
000114B8 3168 0008 0032             		move.w	8(a0),$32(a0)
000114BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000114C4                            
000114C4                            Obj59_Platform:				; XREF: Obj59_Index
000114C4 7200                       		moveq	#0,d1
000114C6 1228 0019                  		move.b	$19(a0),d1
000114CA 4EB9 0000 7BF0             		jsr	(PlatformObject).l
000114D0 6000 0000                  		bra.w	Obj59_Types
000114D4                            ; ===========================================================================
000114D4                            
000114D4                            Obj59_Action:				; XREF: Obj59_Index
000114D4 7200                       		moveq	#0,d1
000114D6 1228 0019                  		move.b	$19(a0),d1
000114DA 4EB9 0000 7D64             		jsr	(ExitPlatform).l
000114E0 3F28 0008                  		move.w	8(a0),-(sp)
000114E4 6100 0000                  		bsr.w	Obj59_Types
000114E8 341F                       		move.w	(sp)+,d2
000114EA 4A10                       		tst.b	0(a0)
000114EC 6700                       		beq.s	locret_10BD4
000114EE 4EF9 0000 82CE             		jmp	(MvSonicOnPtfm2).l
000114F4                            ; ===========================================================================
000114F4                            
000114F4                            locret_10BD4:
000114F4 4E75                       		rts	
000114F6                            ; ===========================================================================
000114F6                            
000114F6                            Obj59_Types:
000114F6 7000                       		moveq	#0,d0
000114F8 1028 0028                  		move.b	$28(a0),d0
000114FC 0240 000F                  		andi.w	#$F,d0
00011500 D040                       		add.w	d0,d0
00011502 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011506 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001150A                            ; ===========================================================================
0001150A 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001150E 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011512 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011516 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001151A 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001151E                            ; ===========================================================================
0001151E                            
0001151E                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001151E 4E75                       		rts	
00011520                            ; ===========================================================================
00011520                            
00011520                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011520 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011526 6600                       		bne.s	locret_10C0C
00011528 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001152C                            
0001152C                            locret_10C0C:
0001152C 4E75                       		rts	
0001152E                            ; ===========================================================================
0001152E                            
0001152E                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001152E 6100 0000                  		bsr.w	Obj59_Move
00011532 3028 0034                  		move.w	$34(a0),d0
00011536 4440                       		neg.w	d0
00011538 D068 0030                  		add.w	$30(a0),d0
0001153C 3140 000C                  		move.w	d0,$C(a0)
00011540 4E75                       		rts	
00011542                            ; ===========================================================================
00011542                            
00011542                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011542 6100 0000                  		bsr.w	Obj59_Move
00011546 3028 0034                  		move.w	$34(a0),d0
0001154A D068 0030                  		add.w	$30(a0),d0
0001154E 3140 000C                  		move.w	d0,$C(a0)
00011552 4E75                       		rts	
00011554                            ; ===========================================================================
00011554                            
00011554                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011554 6100 0000                  		bsr.w	Obj59_Move
00011558 3028 0034                  		move.w	$34(a0),d0
0001155C E240                       		asr.w	#1,d0
0001155E 4440                       		neg.w	d0
00011560 D068 0030                  		add.w	$30(a0),d0
00011564 3140 000C                  		move.w	d0,$C(a0)
00011568 3028 0034                  		move.w	$34(a0),d0
0001156C D068 0032                  		add.w	$32(a0),d0
00011570 3140 0008                  		move.w	d0,8(a0)
00011574 4E75                       		rts	
00011576                            ; ===========================================================================
00011576                            
00011576                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011576 6100 0000                  		bsr.w	Obj59_Move
0001157A 3028 0034                  		move.w	$34(a0),d0
0001157E E240                       		asr.w	#1,d0
00011580 D068 0030                  		add.w	$30(a0),d0
00011584 3140 000C                  		move.w	d0,$C(a0)
00011588 3028 0034                  		move.w	$34(a0),d0
0001158C 4440                       		neg.w	d0
0001158E D068 0032                  		add.w	$32(a0),d0
00011592 3140 0008                  		move.w	d0,8(a0)
00011596 4E75                       		rts	
00011598                            ; ===========================================================================
00011598                            
00011598                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011598 6100 0000                  		bsr.w	Obj59_Move
0001159C 3028 0034                  		move.w	$34(a0),d0
000115A0 4440                       		neg.w	d0
000115A2 D068 0030                  		add.w	$30(a0),d0
000115A6 3140 000C                  		move.w	d0,$C(a0)
000115AA 4A28 0028                  		tst.b	$28(a0)
000115AE 6700 0000                  		beq.w	loc_10C94
000115B2 4E75                       		rts	
000115B4                            ; ===========================================================================
000115B4                            
000115B4                            loc_10C94:
000115B4 0828 0003 0022             		btst	#3,$22(a0)
000115BA 6700                       		beq.s	Obj59_Delete
000115BC 08E9 0001 0022             		bset	#1,$22(a1)
000115C2 08A9 0003 0022             		bclr	#3,$22(a1)
000115C8 137C 0002 0024             		move.b	#2,$24(a1)
000115CE                            
000115CE                            Obj59_Delete:
000115CE 6000 C7AE                  		bra.w	DeleteObject
000115D2                            
000115D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000115D2                            
000115D2                            
000115D2                            Obj59_Move:				; XREF: Obj59_Type02; et al
000115D2 3028 0038                  		move.w	$38(a0),d0
000115D6 4A28 003A                  		tst.b	$3A(a0)
000115DA 6600                       		bne.s	loc_10CC8
000115DC 0C40 0800                  		cmpi.w	#$800,d0
000115E0 6400                       		bcc.s	loc_10CD0
000115E2 0640 0010                  		addi.w	#$10,d0
000115E6 6000                       		bra.s	loc_10CD0
000115E8                            ; ===========================================================================
000115E8                            
000115E8                            loc_10CC8:
000115E8 4A40                       		tst.w	d0
000115EA 6700                       		beq.s	loc_10CD0
000115EC 0440 0010                  		subi.w	#$10,d0
000115F0                            
000115F0                            loc_10CD0:
000115F0 3140 0038                  		move.w	d0,$38(a0)
000115F4 48C0                       		ext.l	d0
000115F6 E180                       		asl.l	#8,d0
000115F8 D0A8 0034                  		add.l	$34(a0),d0
000115FC 2140 0034                  		move.l	d0,$34(a0)
00011600 4840                       		swap	d0
00011602 3428 003C                  		move.w	$3C(a0),d2
00011606 B042                       		cmp.w	d2,d0
00011608 6300                       		bls.s	loc_10CF0
0001160A 117C 0001 003A             		move.b	#1,$3A(a0)
00011610                            
00011610                            loc_10CF0:
00011610 D442                       		add.w	d2,d2
00011612 B042                       		cmp.w	d2,d0
00011614 6600                       		bne.s	locret_10CFA
00011616 4228 0028                  		clr.b	$28(a0)
0001161A                            
0001161A                            locret_10CFA:
0001161A 4E75                       		rts	
0001161C                            ; End of function Obj59_Move
0001161C                            
0001161C                            ; ===========================================================================
0001161C                            
0001161C                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001161C 5368 003C                  		subq.w	#1,$3C(a0)
00011620 6600                       		bne.s	Obj59_ChkDel
00011622 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011628 6100 CBC4                  		bsr.w	SingleObjLoad
0001162C 6600                       		bne.s	Obj59_ChkDel
0001162E 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011632 3368 0008 0008             		move.w	8(a0),8(a1)
00011638 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001163E 137C 000E 0028             		move.b	#$E,$28(a1)
00011644                            
00011644                            Obj59_ChkDel:
00011644 588F                       		addq.l	#4,sp
00011646 3028 0008                  		move.w	8(a0),d0
0001164A 0240 FF80                  		andi.w	#$FF80,d0
0001164E 3238 F700                  		move.w	($FFFFF700).w,d1
00011652 0441 0080                  		subi.w	#$80,d1
00011656 0241 FF80                  		andi.w	#$FF80,d1
0001165A 9041                       		sub.w	d1,d0
0001165C 0C40 0280                  		cmpi.w	#$280,d0
00011660 6200 C71C                  		bhi.w	DeleteObject
00011664 4E75                       		rts	
00011666                            ; ===========================================================================
00011666                            ; ---------------------------------------------------------------------------
00011666                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011666                            ; ---------------------------------------------------------------------------
00011666                            Map_obj59:
00011666                            	include "_maps\obj59.asm"
00011666                            ; ================================================================================
00011666                            ; Sprite Mappings - generated by Flex 2 Mon Jul 23 2018 09:07:04 GMT-0700 (Pacific Daylight Time)
00011666                            ; ================================================================================
00011666                            
00011666                            DATA64NJH5PW2HK:
00011666 0000                       	dc.w DATA64NJH5PW2HK_0-DATA64NJH5PW2HK
00011668 13                         DATA64NJH5PW2HK_0: dc.b $13
00011669 F804 01C9 D8               	dc.b $F8, $4, $1, $C9, $D8
0001166E F804 09C9 18               	dc.b $F8, $4, $9, $C9, $18
00011673 F800 01CA E8               	dc.b $F8, $0, $1, $CA, $E8
00011678 F800 01CA F0               	dc.b $F8, $0, $1, $CA, $F0
0001167D F800 01CA F8               	dc.b $F8, $0, $1, $CA, $F8
00011682 F800 01CA 00               	dc.b $F8, $0, $1, $CA, $0
00011687 F800 01CA 08               	dc.b $F8, $0, $1, $CA, $8
0001168C F800 01CA 10               	dc.b $F8, $0, $1, $CA, $10
00011691 080C 11CB F8               	dc.b $8, $C, $11, $CB, $F8
00011696 000C 01CB F8               	dc.b $0, $C, $1, $CB, $F8
0001169B 1004 09C9 18               	dc.b $10, $4, $9, $C9, $18
000116A0 1004 01C9 E8               	dc.b $10, $4, $1, $C9, $E8
000116A5 1000 01CA 10               	dc.b $10, $0, $1, $CA, $10
000116AA 1000 01CA 08               	dc.b $10, $0, $1, $CA, $8
000116AF 1000 01CA 00               	dc.b $10, $0, $1, $CA, $0
000116B4 1000 01CA F8               	dc.b $10, $0, $1, $CA, $F8
000116B9 0000 11E7 F0               	dc.b $0, $0, $11, $E7, $F0
000116BE 0800 19E7 18               	dc.b $8, $0, $19, $E7, $18
000116C3 0000 09E7 18               	dc.b $0, $0, $9, $E7, $18
000116C8                            	even
000116C8                            	even
000116C8                            
000116C8                            ; ===========================================================================
000116C8                            ; ---------------------------------------------------------------------------
000116C8                            ; Object 5A - platforms	moving in circles (SLZ)
000116C8                            ; ---------------------------------------------------------------------------
000116C8                            
000116C8                            Obj5A:					; XREF: Obj_Index
000116C8 7000                       		moveq	#0,d0
000116CA 1028 0024                  		move.b	$24(a0),d0
000116CE 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000116D2 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000116D6 3028 0032                  		move.w	$32(a0),d0
000116DA 0240 FF80                  		andi.w	#$FF80,d0
000116DE 3238 F700                  		move.w	($FFFFF700).w,d1
000116E2 0441 0080                  		subi.w	#$80,d1
000116E6 0241 FF80                  		andi.w	#$FF80,d1
000116EA 9041                       		sub.w	d1,d0
000116EC 0C40 0280                  		cmpi.w	#$280,d0
000116F0 6200 C68C                  		bhi.w	DeleteObject
000116F4 6000 C64C                  		bra.w	DisplaySprite
000116F8                            ; ===========================================================================
000116F8 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000116FA 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000116FC 0000                       		dc.w Obj5A_Action-Obj5A_Index
000116FE                            ; ===========================================================================
000116FE                            
000116FE                            Obj5A_Main:				; XREF: Obj5A_Index
000116FE 5428 0024                  		addq.b	#2,$24(a0)
00011702 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001170A 317C 4000 0002             		move.w	#$4000,2(a0)
00011710 117C 0004 0001             		move.b	#4,1(a0)
00011716 117C 0004 0018             		move.b	#4,$18(a0)
0001171C 117C 0018 0019             		move.b	#$18,$19(a0)
00011722 3168 0008 0032             		move.w	8(a0),$32(a0)
00011728 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001172E                            
0001172E                            Obj5A_Platform:				; XREF: Obj5A_Index
0001172E 7200                       		moveq	#0,d1
00011730 1228 0019                  		move.b	$19(a0),d1
00011734 4EB9 0000 7BF0             		jsr	(PlatformObject).l
0001173A 6000 0000                  		bra.w	Obj5A_Types
0001173E                            ; ===========================================================================
0001173E                            
0001173E                            Obj5A_Action:				; XREF: Obj5A_Index
0001173E 7200                       		moveq	#0,d1
00011740 1228 0019                  		move.b	$19(a0),d1
00011744 4EB9 0000 7D64             		jsr	(ExitPlatform).l
0001174A 3F28 0008                  		move.w	8(a0),-(sp)
0001174E 6100 0000                  		bsr.w	Obj5A_Types
00011752 341F                       		move.w	(sp)+,d2
00011754 4EF9 0000 82CE             		jmp	(MvSonicOnPtfm2).l
0001175A                            ; ===========================================================================
0001175A                            
0001175A                            Obj5A_Types:
0001175A 7000                       		moveq	#0,d0
0001175C 1028 0028                  		move.b	$28(a0),d0
00011760 0240 000C                  		andi.w	#$C,d0
00011764 E248                       		lsr.w	#1,d0
00011766 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001176A 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001176E                            ; ===========================================================================
0001176E 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011770 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011772                            ; ===========================================================================
00011772                            
00011772                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011772 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011776 0401 0050                  		subi.b	#$50,d1
0001177A 4881                       		ext.w	d1
0001177C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011780 0402 0050                  		subi.b	#$50,d2
00011784 4882                       		ext.w	d2
00011786 0828 0000 0028             		btst	#0,$28(a0)
0001178C 6700                       		beq.s	loc_10E24
0001178E 4441                       		neg.w	d1
00011790 4442                       		neg.w	d2
00011792                            
00011792                            loc_10E24:
00011792 0828 0001 0028             		btst	#1,$28(a0)
00011798 6700                       		beq.s	loc_10E30
0001179A 4441                       		neg.w	d1
0001179C C342                       		exg	d1,d2
0001179E                            
0001179E                            loc_10E30:
0001179E D268 0032                  		add.w	$32(a0),d1
000117A2 3141 0008                  		move.w	d1,8(a0)
000117A6 D468 0030                  		add.w	$30(a0),d2
000117AA 3142 000C                  		move.w	d2,$C(a0)
000117AE 4E75                       		rts	
000117B0                            ; ===========================================================================
000117B0                            
000117B0                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000117B0 1238 FE80                  		move.b	($FFFFFE80).w,d1
000117B4 0401 0050                  		subi.b	#$50,d1
000117B8 4881                       		ext.w	d1
000117BA 1438 FE84                  		move.b	($FFFFFE84).w,d2
000117BE 0402 0050                  		subi.b	#$50,d2
000117C2 4882                       		ext.w	d2
000117C4 0828 0000 0028             		btst	#0,$28(a0)
000117CA 6700                       		beq.s	loc_10E62
000117CC 4441                       		neg.w	d1
000117CE 4442                       		neg.w	d2
000117D0                            
000117D0                            loc_10E62:
000117D0 0828 0001 0028             		btst	#1,$28(a0)
000117D6 6700                       		beq.s	loc_10E6E
000117D8 4441                       		neg.w	d1
000117DA C342                       		exg	d1,d2
000117DC                            
000117DC                            loc_10E6E:
000117DC 4441                       		neg.w	d1
000117DE D268 0032                  		add.w	$32(a0),d1
000117E2 3141 0008                  		move.w	d1,8(a0)
000117E6 D468 0030                  		add.w	$30(a0),d2
000117EA 3142 000C                  		move.w	d2,$C(a0)
000117EE 4E75                       		rts	
000117F0                            ; ===========================================================================
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            Map_obj5A:
000117F0                            	include "_maps\obj5A.asm"
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000117F0                            ; ---------------------------------------------------------------------------
000117F0 0000                       		dc.w byte_10E84-Map_obj5A
000117F2 02                         byte_10E84:	dc.b 2
000117F3 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000117F8 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000117FE 00                         		even
000117FE 00                         		even
000117FE                            
000117FE                            ; ===========================================================================
000117FE                            ; ---------------------------------------------------------------------------
000117FE                            ; Object 5B - blocks that form a staircase (SLZ)
000117FE                            ; ---------------------------------------------------------------------------
000117FE                            
000117FE                            Obj5B:					; XREF: Obj_Index
000117FE 7000                       		moveq	#0,d0
00011800 1028 0024                  		move.b	$24(a0),d0
00011804 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011808 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001180C 3028 0030                  		move.w	$30(a0),d0
00011810 0240 FF80                  		andi.w	#$FF80,d0
00011814 3238 F700                  		move.w	($FFFFF700).w,d1
00011818 0441 0080                  		subi.w	#$80,d1
0001181C 0241 FF80                  		andi.w	#$FF80,d1
00011820 9041                       		sub.w	d1,d0
00011822 0C40 0280                  		cmpi.w	#$280,d0
00011826 6200 C556                  		bhi.w	DeleteObject
0001182A 6000 C516                  		bra.w	DisplaySprite
0001182E                            ; ===========================================================================
0001182E 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011830 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011832 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011834                            ; ===========================================================================
00011834                            
00011834                            Obj5B_Main:				; XREF: Obj5B_Index
00011834 5428 0024                  		addq.b	#2,$24(a0)
00011838 7638                       		moveq	#$38,d3
0001183A 7801                       		moveq	#1,d4
0001183C 0828 0000 0022             		btst	#0,$22(a0)
00011842 6700                       		beq.s	loc_10EDA
00011844 763B                       		moveq	#$3B,d3
00011846 78FF                       		moveq	#-1,d4
00011848                            
00011848                            loc_10EDA:
00011848 3428 0008                  		move.w	8(a0),d2
0001184C 2248                       		movea.l	a0,a1
0001184E 7203                       		moveq	#3,d1
00011850 6000                       		bra.s	Obj5B_MakeBlocks
00011852                            ; ===========================================================================
00011852                            
00011852                            Obj5B_Loop:
00011852 6100 C9B0                  		bsr.w	SingleObjLoad2
00011856 6600 0000                  		bne.w	Obj5B_Move
0001185A 137C 0004 0024             		move.b	#4,$24(a1)
00011860                            
00011860                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011860 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011864 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001186C 337C 4000 0002             		move.w	#$4000,2(a1)
00011872 137C 0004 0001             		move.b	#4,1(a1)
00011878 137C 0003 0018             		move.b	#3,$18(a1)
0001187E 137C 0010 0019             		move.b	#$10,$19(a1)
00011884 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001188A 3342 0008                  		move.w	d2,8(a1)
0001188E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011894 3368 0008 0030             		move.w	8(a0),$30(a1)
0001189A 3369 000C 0032             		move.w	$C(a1),$32(a1)
000118A0 0642 0020                  		addi.w	#$20,d2
000118A4 1343 0037                  		move.b	d3,$37(a1)
000118A8 2348 003C                  		move.l	a0,$3C(a1)
000118AC D604                       		add.b	d4,d3
000118AE 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000118B2                            
000118B2                            Obj5B_Move:				; XREF: Obj5B_Index
000118B2 7000                       		moveq	#0,d0
000118B4 1028 0028                  		move.b	$28(a0),d0
000118B8 0240 0007                  		andi.w	#7,d0
000118BC D040                       		add.w	d0,d0
000118BE 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000118C2 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000118C6                            
000118C6                            Obj5B_Solid:				; XREF: Obj5B_Index
000118C6 2468 003C                  		movea.l	$3C(a0),a2
000118CA 7000                       		moveq	#0,d0
000118CC 1028 0037                  		move.b	$37(a0),d0
000118D0 1032 0000                  		move.b	(a2,d0.w),d0
000118D4 D068 0032                  		add.w	$32(a0),d0
000118D8 3140 000C                  		move.w	d0,$C(a0)
000118DC 7200                       		moveq	#0,d1
000118DE 1228 0019                  		move.b	$19(a0),d1
000118E2 0641 000B                  		addi.w	#$B,d1
000118E6 343C 0010                  		move.w	#$10,d2
000118EA 363C 0011                  		move.w	#$11,d3
000118EE 3828 0008                  		move.w	8(a0),d4
000118F2 6100 EA06                  		bsr.w	SolidObject
000118F6 4A04                       		tst.b	d4
000118F8 6A00                       		bpl.s	loc_10F92
000118FA 1544 0036                  		move.b	d4,$36(a2)
000118FE                            
000118FE                            loc_10F92:
000118FE 0828 0003 0022             		btst	#3,$22(a0)
00011904 6700                       		beq.s	locret_10FA0
00011906 157C 0001 0036             		move.b	#1,$36(a2)
0001190C                            
0001190C                            locret_10FA0:
0001190C 4E75                       		rts	
0001190E                            ; ===========================================================================
0001190E 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011910 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011912 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011914 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011916                            ; ===========================================================================
00011916                            
00011916                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011916 4A68 0034                  		tst.w	$34(a0)
0001191A 6600                       		bne.s	loc_10FC0
0001191C 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011922 6600                       		bne.s	locret_10FBE
00011924 317C 001E 0034             		move.w	#$1E,$34(a0)
0001192A                            
0001192A                            locret_10FBE:
0001192A 4E75                       		rts	
0001192C                            ; ===========================================================================
0001192C                            
0001192C                            loc_10FC0:
0001192C 5368 0034                  		subq.w	#1,$34(a0)
00011930 66F8                       		bne.s	locret_10FBE
00011932 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011936 4E75                       		rts	
00011938                            ; ===========================================================================
00011938                            
00011938                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011938 4A68 0034                  		tst.w	$34(a0)
0001193C 6600                       		bne.s	loc_10FE0
0001193E 4A28 0036                  		tst.b	$36(a0)
00011942 6A00                       		bpl.s	locret_10FDE
00011944 317C 003C 0034             		move.w	#$3C,$34(a0)
0001194A                            
0001194A                            locret_10FDE:
0001194A 4E75                       		rts	
0001194C                            ; ===========================================================================
0001194C                            
0001194C                            loc_10FE0:
0001194C 5368 0034                  		subq.w	#1,$34(a0)
00011950 6600                       		bne.s	loc_10FEC
00011952 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011956 4E75                       		rts	
00011958                            ; ===========================================================================
00011958                            
00011958                            loc_10FEC:
00011958 43E8 0038                  		lea	$38(a0),a1
0001195C 3028 0034                  		move.w	$34(a0),d0
00011960 E408                       		lsr.b	#2,d0
00011962 0200 0001                  		andi.b	#1,d0
00011966 12C0                       		move.b	d0,(a1)+
00011968 0A00 0001                  		eori.b	#1,d0
0001196C 12C0                       		move.b	d0,(a1)+
0001196E 0A00 0001                  		eori.b	#1,d0
00011972 12C0                       		move.b	d0,(a1)+
00011974 0A00 0001                  		eori.b	#1,d0
00011978 12C0                       		move.b	d0,(a1)+
0001197A 4E75                       		rts	
0001197C                            ; ===========================================================================
0001197C                            
0001197C                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001197C 43E8 0038                  		lea	$38(a0),a1
00011980 0C11 0080                  		cmpi.b	#$80,(a1)
00011984 6700                       		beq.s	locret_11038
00011986 5211                       		addq.b	#1,(a1)
00011988 7200                       		moveq	#0,d1
0001198A 1219                       		move.b	(a1)+,d1
0001198C 4841                       		swap	d1
0001198E E289                       		lsr.l	#1,d1
00011990 2401                       		move.l	d1,d2
00011992 E289                       		lsr.l	#1,d1
00011994 2601                       		move.l	d1,d3
00011996 D682                       		add.l	d2,d3
00011998 4841                       		swap	d1
0001199A 4842                       		swap	d2
0001199C 4843                       		swap	d3
0001199E 12C3                       		move.b	d3,(a1)+
000119A0 12C2                       		move.b	d2,(a1)+
000119A2 12C1                       		move.b	d1,(a1)+
000119A4                            
000119A4                            locret_11038:
000119A4 4E75                       		rts	
000119A6 4E75                       		rts	
000119A8                            ; ===========================================================================
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            Map_obj5B:
000119A8                            	include "_maps\obj5B.asm"
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000119A8                            ; ---------------------------------------------------------------------------
000119A8 0000                       		dc.w byte_1103E-Map_obj5B
000119AA 01                         byte_1103E:	dc.b 1
000119AB F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000119B0                            		even
000119B0                            		even
000119B0                            
000119B0                            ; ===========================================================================
000119B0                            ; ---------------------------------------------------------------------------
000119B0                            ; Object 5C - metal girders in foreground (SLZ)
000119B0                            ; ---------------------------------------------------------------------------
000119B0                            
000119B0                            Obj5C:					; XREF: Obj_Index
000119B0 7000                       		moveq	#0,d0
000119B2 1028 0024                  		move.b	$24(a0),d0
000119B6 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000119BA 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000119BE                            ; ===========================================================================
000119BE 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000119C0 0000                       		dc.w Obj5C_Display-Obj5C_Index
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Obj5C_Main:				; XREF: Obj5C_Index
000119C2 5428 0024                  		addq.b	#2,$24(a0)
000119C6 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000119CE 317C 83CC 0002             		move.w	#$83CC,2(a0)
000119D4 117C 0010 0019             		move.b	#$10,$19(a0)
000119DA                            
000119DA                            Obj5C_Display:				; XREF: Obj5C_Index
000119DA 2238 F700                  		move.l	($FFFFF700).w,d1
000119DE D281                       		add.l	d1,d1
000119E0 4841                       		swap	d1
000119E2 4441                       		neg.w	d1
000119E4 3141 0008                  		move.w	d1,8(a0)
000119E8 2238 F704                  		move.l	($FFFFF704).w,d1
000119EC D281                       		add.l	d1,d1
000119EE 4841                       		swap	d1
000119F0 0241 003F                  		andi.w	#$3F,d1
000119F4 4441                       		neg.w	d1
000119F6 0641 0100                  		addi.w	#$100,d1
000119FA 3141 000A                  		move.w	d1,$A(a0)
000119FE 6000 C342                  		bra.w	DisplaySprite
00011A02                            ; ===========================================================================
00011A02                            ; ---------------------------------------------------------------------------
00011A02                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A02                            ; ---------------------------------------------------------------------------
00011A02                            Map_obj5C:
00011A02                            	include "_maps\obj5C.asm"
00011A02                            ; ---------------------------------------------------------------------------
00011A02                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A02                            ; ---------------------------------------------------------------------------
00011A02 0000                       		dc.w byte_11098-Map_obj5C
00011A04 09                         byte_11098:	dc.b 9
00011A05 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011A0A A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011A0F C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011A14 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011A19 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011A1E 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011A23 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011A28 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011A2D 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011A32                            		even
00011A32                            		even
00011A32                            
00011A32                            ; ===========================================================================
00011A32                            ; ---------------------------------------------------------------------------
00011A32                            ; Object 1B - water surface (LZ)
00011A32                            ; ---------------------------------------------------------------------------
00011A32                            
00011A32                            Obj1B:					; XREF: Obj_Index
00011A32 7000                       		moveq	#0,d0
00011A34 1028 0024                  		move.b	$24(a0),d0
00011A38 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011A3C 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011A40                            ; ===========================================================================
00011A40 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011A42 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011A44                            ; ===========================================================================
00011A44                            
00011A44                            Obj1B_Main:				; XREF: Obj1B_Index
00011A44 5428 0024                  		addq.b	#2,$24(a0)
00011A48 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011A50 317C C300 0002             		move.w	#$C300,2(a0)
00011A56 117C 0004 0001             		move.b	#4,1(a0)
00011A5C 117C 0080 0019             		move.b	#$80,$19(a0)
00011A62 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A68                            
00011A68                            Obj1B_Action:				; XREF: Obj1B_Index
00011A68 3238 F700                  		move.w	($FFFFF700).w,d1
00011A6C 0241 FFE0                  		andi.w	#$FFE0,d1
00011A70 D268 0030                  		add.w	$30(a0),d1
00011A74 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011A7A 6700                       		beq.s	loc_11114
00011A7C 0641 0020                  		addi.w	#$20,d1
00011A80                            
00011A80                            loc_11114:
00011A80 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011A84 3238 F646                  		move.w	($FFFFF646).w,d1
00011A88 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011A8C 4A28 0032                  		tst.b	$32(a0)
00011A90 6600                       		bne.s	Obj1B_Animate
00011A92 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011A98 6700                       		beq.s	loc_1114A	; if not, branch
00011A9A 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011A9E 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011AA4 6000                       		bra.s	Obj1B_Display
00011AA6                            ; ===========================================================================
00011AA6                            
00011AA6                            Obj1B_Animate:				; XREF: loc_11114
00011AA6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011AAA 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011AAC 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011AB2 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011AB6                            
00011AB6                            loc_1114A:				; XREF: loc_11114
00011AB6 5328 001E                  		subq.b	#1,$1E(a0)
00011ABA 6A00                       		bpl.s	Obj1B_Display
00011ABC 117C 0007 001E             		move.b	#7,$1E(a0)
00011AC2 5228 001A                  		addq.b	#1,$1A(a0)
00011AC6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011ACC 6500                       		bcs.s	Obj1B_Display
00011ACE 117C 0000 001A             		move.b	#0,$1A(a0)
00011AD4                            
00011AD4                            Obj1B_Display:
00011AD4 6000 C26C                  		bra.w	DisplaySprite
00011AD8                            ; ===========================================================================
00011AD8                            ; ---------------------------------------------------------------------------
00011AD8                            ; Sprite mappings - water surface (LZ)
00011AD8                            ; ---------------------------------------------------------------------------
00011AD8                            Map_obj1B:
00011AD8                            	include "_maps\obj1B.asm"
00011AD8                            ; ---------------------------------------------------------------------------
00011AD8                            ; Sprite mappings - water surface (LZ)
00011AD8                            ; ---------------------------------------------------------------------------
00011AD8 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011ADC 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011AE0 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011AE4 03                         byte_11178:	dc.b 3
00011AE5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011AEA FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011AEF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011AF4 03                         byte_11188:	dc.b 3
00011AF5 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011AFA FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011AFF FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011B04 03                         byte_11198:	dc.b 3
00011B05 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011B0A FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011B0F FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011B14 06                         byte_111A8:	dc.b 6
00011B15 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B1A FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011B1F FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B24 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011B29 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011B2E FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011B33 06                         byte_111C7:	dc.b 6
00011B34 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011B39 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011B3E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011B43 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011B48 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011B4D FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011B52 06                         byte_111E6:	dc.b 6
00011B53 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011B58 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011B5D FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011B62 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011B67 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011B6C FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011B72 00                         		even
00011B72 00                         		even
00011B72                            
00011B72                            ; ===========================================================================
00011B72                            ; ---------------------------------------------------------------------------
00011B72                            ; Object 0B - pole that	breaks (LZ)
00011B72                            ; ---------------------------------------------------------------------------
00011B72                            
00011B72                            Obj0B:					; XREF: Obj_Index
00011B72 7000                       		moveq	#0,d0
00011B74 1028 0024                  		move.b	$24(a0),d0
00011B78 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011B7C 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011B80                            ; ===========================================================================
00011B80 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011B82 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011B84 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011B86                            ; ===========================================================================
00011B86                            
00011B86                            Obj0B_Main:				; XREF: Obj0B_Index
00011B86 5428 0024                  		addq.b	#2,$24(a0)
00011B8A 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011B92 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011B98 117C 0004 0001             		move.b	#4,1(a0)
00011B9E 117C 0008 0019             		move.b	#8,$19(a0)
00011BA4 117C 0004 0018             		move.b	#4,$18(a0)
00011BAA 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011BB0 7000                       		moveq	#0,d0
00011BB2 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BB6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011BBA 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011BBE                            
00011BBE                            Obj0B_Action:				; XREF: Obj0B_Index
00011BBE 4A28 0032                  		tst.b	$32(a0)
00011BC2 6700                       		beq.s	Obj0B_Grab
00011BC4 4A68 0030                  		tst.w	$30(a0)
00011BC8 6700                       		beq.s	Obj0B_MoveUp
00011BCA 5368 0030                  		subq.w	#1,$30(a0)
00011BCE 6600                       		bne.s	Obj0B_MoveUp
00011BD0 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011BD6 6000                       		bra.s	Obj0B_Release
00011BD8                            ; ===========================================================================
00011BD8                            
00011BD8                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011BD8 43F8 D000                  		lea	($FFFFD000).w,a1
00011BDC 3028 000C                  		move.w	$C(a0),d0
00011BE0 0440 0018                  		subi.w	#$18,d0
00011BE4 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011BEA 6700                       		beq.s	Obj0B_MoveDown
00011BEC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011BF0 B069 000C                  		cmp.w	$C(a1),d0
00011BF4 6500                       		bcs.s	Obj0B_MoveDown
00011BF6 3340 000C                  		move.w	d0,$C(a1)
00011BFA                            
00011BFA                            Obj0B_MoveDown:
00011BFA 0640 0024                  		addi.w	#$24,d0
00011BFE 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011C04 6700                       		beq.s	Obj0B_LetGo
00011C06 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011C0A B069 000C                  		cmp.w	$C(a1),d0
00011C0E 6400                       		bcc.s	Obj0B_LetGo
00011C10 3340 000C                  		move.w	d0,$C(a1)
00011C14                            
00011C14                            Obj0B_LetGo:
00011C14 1038 F603                  		move.b	($FFFFF603).w,d0
00011C18 0240 0070                  		andi.w	#$70,d0
00011C1C 6700                       		beq.s	Obj0B_Display
00011C1E                            
00011C1E                            Obj0B_Release:				; XREF: Obj0B_Action
00011C1E 4228 0020                  		clr.b	$20(a0)
00011C22 5428 0024                  		addq.b	#2,$24(a0)
00011C26 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011C2A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011C2E 4228 0032                  		clr.b	$32(a0)
00011C32 6000                       		bra.s	Obj0B_Display
00011C34                            ; ===========================================================================
00011C34                            
00011C34                            Obj0B_Grab:				; XREF: Obj0B_Action
00011C34 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011C38 6700                       		beq.s	Obj0B_Display	; if not, branch
00011C3A 43F8 D000                  		lea	($FFFFD000).w,a1
00011C3E 3028 0008                  		move.w	8(a0),d0
00011C42 0640 0014                  		addi.w	#$14,d0
00011C46 B069 0008                  		cmp.w	8(a1),d0
00011C4A 6400                       		bcc.s	Obj0B_Display
00011C4C 4228 0021                  		clr.b	$21(a0)
00011C50 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011C56 6400                       		bcc.s	Obj0B_Display
00011C58 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011C5C 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011C60 3028 0008                  		move.w	8(a0),d0
00011C64 0640 0014                  		addi.w	#$14,d0
00011C68 3340 0008                  		move.w	d0,8(a1)
00011C6C 08A9 0000 0022             		bclr	#0,$22(a1)
00011C72 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011C78 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011C7E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011C84 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011C8A                            
00011C8A                            Obj0B_Display:				; XREF: Obj0B_Index
00011C8A 6000 E18A                  		bra.w	MarkObjGone
00011C8E                            ; ===========================================================================
00011C8E                            ; ---------------------------------------------------------------------------
00011C8E                            ; Sprite mappings - pole that breaks (LZ)
00011C8E                            ; ---------------------------------------------------------------------------
00011C8E                            Map_obj0B:
00011C8E                            	include "_maps\obj0B.asm"
00011C8E                            ; ---------------------------------------------------------------------------
00011C8E                            ; Sprite mappings - pole that breaks (LZ)
00011C8E                            ; ---------------------------------------------------------------------------
00011C8E 0000                       		dc.w byte_11326-Map_obj0B
00011C90 0000                       		dc.w byte_11331-Map_obj0B
00011C92 02                         byte_11326:	dc.b 2			; normal pole
00011C93 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011C98 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011C9D 04                         byte_11331:	dc.b 4			; broken pole
00011C9E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011CA3 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011CA8 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011CAD 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011CB2                            		even
00011CB2                            		even
00011CB2                            
00011CB2                            ; ===========================================================================
00011CB2                            ; ---------------------------------------------------------------------------
00011CB2                            ; Object 0C - flapping door (LZ)
00011CB2                            ; ---------------------------------------------------------------------------
00011CB2                            
00011CB2                            Obj0C:					; XREF: Obj_Index
00011CB2 7000                       		moveq	#0,d0
00011CB4 1028 0024                  		move.b	$24(a0),d0
00011CB8 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011CBC 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011CC0                            ; ===========================================================================
00011CC0 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011CC2 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011CC4                            ; ===========================================================================
00011CC4                            
00011CC4                            Obj0C_Main:				; XREF: Obj0C_Index
00011CC4 5428 0024                  		addq.b	#2,$24(a0)
00011CC8 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011CD0 317C 4328 0002             		move.w	#$4328,2(a0)
00011CD6 0028 0004 0001             		ori.b	#4,1(a0)
00011CDC 117C 0028 0019             		move.b	#$28,$19(a0)
00011CE2 7000                       		moveq	#0,d0
00011CE4 1028 0028                  		move.b	$28(a0),d0	; get object type
00011CE8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011CEC 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011CF0                            
00011CF0                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011CF0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011CF4 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011CF6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011CFC 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011D02 4A28 0001                  		tst.b	1(a0)
00011D06 6A00                       		bpl.s	Obj0C_Solid
00011D08 303C 00BB                  		move.w	#$BB,d0
00011D0C 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play door sound
00011D12                            
00011D12                            Obj0C_Solid:
00011D12 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011D18 6100 92AE                  		bsr.w	AnimateSprite
00011D1C 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011D20 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011D24 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011D26 3038 D008                  		move.w	($FFFFD008).w,d0
00011D2A B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011D2E 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011D30 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D36 323C 0013                  		move.w	#$13,d1
00011D3A 343C 0020                  		move.w	#$20,d2
00011D3E 3602                       		move.w	d2,d3
00011D40 5243                       		addq.w	#1,d3
00011D42 3828 0008                  		move.w	8(a0),d4
00011D46 6100 E5B2                  		bsr.w	SolidObject	; make the door	solid
00011D4A                            
00011D4A                            Obj0C_Display:
00011D4A 6000 E0CA                  		bra.w	MarkObjGone
00011D4E                            ; ===========================================================================
00011D4E                            Ani_obj0C:
00011D4E                            	include "_anim\obj0C.asm"
00011D4E                            ; ---------------------------------------------------------------------------
00011D4E                            ; Animation script - flapping door (LZ)
00011D4E                            ; ---------------------------------------------------------------------------
00011D4E 0000                       		dc.w byte_113E6-Ani_obj0C
00011D50 0000                       		dc.w byte_113EC-Ani_obj0C
00011D52 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011D58 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011D5E                            		even
00011D5E                            		even
00011D5E                            
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E                            ; Sprite mappings - flapping door (LZ)
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E                            Map_obj0C:
00011D5E                            	include "_maps\obj0C.asm"
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E                            ; Sprite mappings - flapping door (LZ)
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E 0000                       		dc.w byte_113F8-Map_obj0C
00011D60 0000                       		dc.w byte_11403-Map_obj0C
00011D62 0000                       		dc.w byte_1140E-Map_obj0C
00011D64 02                         byte_113F8:	dc.b 2
00011D65 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011D6A 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011D6F 02                         byte_11403:	dc.b 2
00011D70 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011D75 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011D7A 02                         byte_1140E:	dc.b 2
00011D7B D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011D80 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011D86 00                         		even
00011D86 00                         		even
00011D86                            
00011D86                            ; ===========================================================================
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            ; Object 71 - invisible	solid blocks
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            
00011D86                            Obj71:					; XREF: Obj_Index
00011D86 7000                       		moveq	#0,d0
00011D88 1028 0024                  		move.b	$24(a0),d0
00011D8C 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011D90 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011D94                            ; ===========================================================================
00011D94 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011D96 0000                       		dc.w Obj71_Solid-Obj71_Index
00011D98                            ; ===========================================================================
00011D98                            
00011D98                            Obj71_Main:				; XREF: Obj71_Index
00011D98 5428 0024                  		addq.b	#2,$24(a0)
00011D9C 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011DA4 317C 8680 0002             		move.w	#$8680,2(a0)
00011DAA 0028 0004 0001             		ori.b	#4,1(a0)
00011DB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00011DB4 1200                       		move.b	d0,d1
00011DB6 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011DBA 0640 0010                  		addi.w	#$10,d0
00011DBE E248                       		lsr.w	#1,d0
00011DC0 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011DC4 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011DC8 5241                       		addq.w	#1,d1
00011DCA E749                       		lsl.w	#3,d1
00011DCC 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011DD0                            
00011DD0                            Obj71_Solid:				; XREF: Obj71_Index
00011DD0 6100 C1EC                  		bsr.w	ChkObjOnScreen
00011DD4 6600                       		bne.s	Obj71_ChkDel
00011DD6 7200                       		moveq	#0,d1
00011DD8 1228 0019                  		move.b	$19(a0),d1
00011DDC 0641 000B                  		addi.w	#$B,d1
00011DE0 7400                       		moveq	#0,d2
00011DE2 1428 0016                  		move.b	$16(a0),d2
00011DE6 3602                       		move.w	d2,d3
00011DE8 5243                       		addq.w	#1,d3
00011DEA 3828 0008                  		move.w	8(a0),d4
00011DEE 6100 E552                  		bsr.w	SolidObject71
00011DF2                            
00011DF2                            Obj71_ChkDel:
00011DF2 3028 0008                  		move.w	8(a0),d0
00011DF6 0240 FF80                  		andi.w	#$FF80,d0
00011DFA 3238 F700                  		move.w	($FFFFF700).w,d1
00011DFE 0441 0080                  		subi.w	#$80,d1
00011E02 0241 FF80                  		andi.w	#$FF80,d1
00011E06 9041                       		sub.w	d1,d0
00011E08 0C40 0280                  		cmpi.w	#$280,d0
00011E0C 6200                       		bhi.s	Obj71_Delete
00011E0E 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011E12 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011E14 4EFA BF2C                  		jmp	DisplaySprite	; if yes, display the object
00011E18                            ; ===========================================================================
00011E18                            
00011E18                            Obj71_NoDisplay:
00011E18 4E75                       		rts	
00011E1A                            ; ===========================================================================
00011E1A                            
00011E1A                            Obj71_Delete:
00011E1A 4EFA BF62                  		jmp	DeleteObject
00011E1E                            ; ===========================================================================
00011E1E                            ; ---------------------------------------------------------------------------
00011E1E                            ; Sprite mappings - invisible solid blocks
00011E1E                            ; ---------------------------------------------------------------------------
00011E1E                            Map_obj71:
00011E1E                            	include "_maps\obj71.asm"
00011E1E                            ; ---------------------------------------------------------------------------
00011E1E                            ; Sprite mappings - invisible solid blocks
00011E1E                            ; ---------------------------------------------------------------------------
00011E1E 0000                       		dc.w byte_114BC-Map_obj71
00011E20 0000                       		dc.w byte_114D1-Map_obj71
00011E22 0000                       		dc.w byte_114E6-Map_obj71
00011E24 04                         byte_114BC:	dc.b 4
00011E25 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011E2A F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011E2F 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011E34 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011E39 04                         byte_114D1:	dc.b 4
00011E3A E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011E3F E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011E44 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011E49 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011E4E 04                         byte_114E6:	dc.b 4
00011E4F E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011E54 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011E59 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011E5E 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011E64 00                         		even
00011E64 00                         		even
00011E64                            
00011E64                            ; ===========================================================================
00011E64                            ; ---------------------------------------------------------------------------
00011E64                            ; Object 5D - fans (SLZ)
00011E64                            ; ---------------------------------------------------------------------------
00011E64                            
00011E64                            Obj5D:					; XREF: Obj_Index
00011E64 7000                       		moveq	#0,d0
00011E66 1028 0024                  		move.b	$24(a0),d0
00011E6A 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011E6E 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011E72                            ; ===========================================================================
00011E72 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011E74 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011E76                            ; ===========================================================================
00011E76                            
00011E76                            Obj5D_Main:				; XREF: Obj5D_Index
00011E76 5428 0024                  		addq.b	#2,$24(a0)
00011E7A 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011E82 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011E88 0028 0004 0001             		ori.b	#4,1(a0)
00011E8E 117C 0010 0019             		move.b	#$10,$19(a0)
00011E94 117C 0004 0018             		move.b	#4,$18(a0)
00011E9A                            
00011E9A                            Obj5D_Delay:				; XREF: Obj5D_Index
00011E9A 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011EA0 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011EA2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011EA6 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011EA8 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011EAE 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011EB4 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011EB6 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011EBC                            
00011EBC                            Obj5D_Blow:
00011EBC 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011EC0 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011EC4 43F8 D000                  		lea	($FFFFD000).w,a1
00011EC8 3029 0008                  		move.w	8(a1),d0
00011ECC 9068 0008                  		sub.w	8(a0),d0
00011ED0 0828 0000 0022             		btst	#0,$22(a0)
00011ED6 6600                       		bne.s	Obj5D_ChkSonic
00011ED8 4440                       		neg.w	d0
00011EDA                            
00011EDA                            Obj5D_ChkSonic:
00011EDA 0640 0050                  		addi.w	#$50,d0
00011EDE 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011EE2 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011EE4 3229 000C                  		move.w	$C(a1),d1
00011EE8 0641 0060                  		addi.w	#$60,d1
00011EEC 9268 000C                  		sub.w	$C(a0),d1
00011EF0 6500                       		bcs.s	Obj5D_Animate
00011EF2 0C41 0070                  		cmpi.w	#$70,d1
00011EF6 6400                       		bcc.s	Obj5D_Animate
00011EF8 0440 0050                  		subi.w	#$50,d0
00011EFC 6400                       		bcc.s	loc_1159A
00011EFE 4640                       		not.w	d0
00011F00 D040                       		add.w	d0,d0
00011F02                            
00011F02                            loc_1159A:
00011F02 0640 0060                  		addi.w	#$60,d0
00011F06 0828 0000 0022             		btst	#0,$22(a0)
00011F0C 6600                       		bne.s	loc_115A8
00011F0E 4440                       		neg.w	d0
00011F10                            
00011F10                            loc_115A8:
00011F10 4400                       		neg.b	d0
00011F12 E840                       		asr.w	#4,d0
00011F14 0828 0000 0028             		btst	#0,$28(a0)
00011F1A 6700                       		beq.s	Obj5D_MoveSonic
00011F1C 4440                       		neg.w	d0
00011F1E                            
00011F1E                            Obj5D_MoveSonic:
00011F1E D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011F22                            
00011F22                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011F22 5328 001E                  		subq.b	#1,$1E(a0)
00011F26 6A00                       		bpl.s	Obj5D_ChkDel
00011F28 117C 0000 001E             		move.b	#0,$1E(a0)
00011F2E 5228 001B                  		addq.b	#1,$1B(a0)
00011F32 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011F38 6500                       		bcs.s	loc_115D8
00011F3A 117C 0000 001B             		move.b	#0,$1B(a0)
00011F40                            
00011F40                            loc_115D8:
00011F40 7000                       		moveq	#0,d0
00011F42 0828 0000 0028             		btst	#0,$28(a0)
00011F48 6700                       		beq.s	loc_115E4
00011F4A 7002                       		moveq	#2,d0
00011F4C                            
00011F4C                            loc_115E4:
00011F4C D028 001B                  		add.b	$1B(a0),d0
00011F50 1140 001A                  		move.b	d0,$1A(a0)
00011F54                            
00011F54                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011F54 6100 BDEC                  		bsr.w	DisplaySprite
00011F58 3028 0008                  		move.w	8(a0),d0
00011F5C 0240 FF80                  		andi.w	#$FF80,d0
00011F60 3238 F700                  		move.w	($FFFFF700).w,d1
00011F64 0441 0080                  		subi.w	#$80,d1
00011F68 0241 FF80                  		andi.w	#$FF80,d1
00011F6C 9041                       		sub.w	d1,d0
00011F6E 0C40 0280                  		cmpi.w	#$280,d0
00011F72 6200 BE0A                  		bhi.w	DeleteObject
00011F76 4E75                       		rts	
00011F78                            ; ===========================================================================
00011F78                            ; ---------------------------------------------------------------------------
00011F78                            ; Sprite mappings - fans (SLZ)
00011F78                            ; ---------------------------------------------------------------------------
00011F78                            Map_obj5D:
00011F78                            	include "_maps\obj5D.asm"
00011F78                            ; ---------------------------------------------------------------------------
00011F78                            ; Sprite mappings - fans (SLZ)
00011F78                            ; ---------------------------------------------------------------------------
00011F78 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011F7C 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011F80 0000                       		dc.w byte_1161A-Map_obj5D
00011F82 02                         byte_1161A:	dc.b 2
00011F83 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011F88 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011F8D 02                         byte_11625:	dc.b 2
00011F8E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011F93 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011F98 02                         byte_11630:	dc.b 2
00011F99 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011F9E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011FA4 00                         		even
00011FA4 00                         		even
00011FA4                            
00011FA4                            ; ===========================================================================
00011FA4                            ; ---------------------------------------------------------------------------
00011FA4                            ; Object 5E - seesaws (SLZ)
00011FA4                            ; ---------------------------------------------------------------------------
00011FA4                            
00011FA4                            Obj5E:					; XREF: Obj_Index
00011FA4 7000                       		moveq	#0,d0
00011FA6 1028 0024                  		move.b	$24(a0),d0
00011FAA 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011FAE 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011FB2 3028 0030                  		move.w	$30(a0),d0
00011FB6 0240 FF80                  		andi.w	#$FF80,d0
00011FBA 3238 F700                  		move.w	($FFFFF700).w,d1
00011FBE 0441 0080                  		subi.w	#$80,d1
00011FC2 0241 FF80                  		andi.w	#$FF80,d1
00011FC6 9041                       		sub.w	d1,d0
00011FC8 6B00 BDB4                  		bmi.w	DeleteObject
00011FCC 0C40 0280                  		cmpi.w	#$280,d0
00011FD0 6200 BDAC                  		bhi.w	DeleteObject
00011FD4 6000 BD6C                  		bra.w	DisplaySprite
00011FD8                            ; ===========================================================================
00011FD8 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011FDA 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011FDC 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011FDE 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011FE0 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011FE2 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011FE4                            ; ===========================================================================
00011FE4                            
00011FE4                            Obj5E_Main:				; XREF: Obj5E_Index
00011FE4 5428 0024                  		addq.b	#2,$24(a0)
00011FE8 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011FF0 317C 0374 0002             		move.w	#$374,2(a0)
00011FF6 0028 0004 0001             		ori.b	#4,1(a0)
00011FFC 117C 0004 0018             		move.b	#4,$18(a0)
00012002 117C 0030 0019             		move.b	#$30,$19(a0)
00012008 3168 0008 0030             		move.w	8(a0),$30(a0)
0001200E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012012 6600                       		bne.s	loc_116D2	; if not, branch
00012014 6100 C1EE                  		bsr.w	SingleObjLoad2
00012018 6600                       		bne.s	loc_116D2
0001201A 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001201E 5C29 0024                  		addq.b	#6,$24(a1)
00012022 3368 0008 0008             		move.w	8(a0),8(a1)
00012028 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001202E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012034 2348 003C                  		move.l	a0,$3C(a1)
00012038                            
00012038                            loc_116D2:
00012038 0828 0000 0022             		btst	#0,$22(a0)
0001203E 6700                       		beq.s	loc_116E0
00012040 117C 0002 001A             		move.b	#2,$1A(a0)
00012046                            
00012046                            loc_116E0:
00012046 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001204C                            
0001204C                            Obj5E_Slope:				; XREF: Obj5E_Index
0001204C 1228 003A                  		move.b	$3A(a0),d1
00012050 6100 0000                  		bsr.w	loc_11766
00012054 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001205A 0828 0000 001A             		btst	#0,$1A(a0)
00012060 6700                       		beq.s	loc_11702
00012062 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012068                            
00012068                            loc_11702:
00012068 43F8 D000                  		lea	($FFFFD000).w,a1
0001206C 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012072 323C 0030                  		move.w	#$30,d1
00012076 4EB9 0000 7CC4             		jsr	(SlopeObject).l
0001207C 4E75                       		rts	
0001207E                            ; ===========================================================================
0001207E                            
0001207E                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001207E 6100 0000                  		bsr.w	loc_1174A
00012082 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012088 0828 0000 001A             		btst	#0,$1A(a0)
0001208E 6700                       		beq.s	loc_11730
00012090 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012096                            
00012096                            loc_11730:
00012096 323C 0030                  		move.w	#$30,d1
0001209A 4EB9 0000 7D64             		jsr	(ExitPlatform).l
000120A0 323C 0030                  		move.w	#$30,d1
000120A4 3428 0008                  		move.w	8(a0),d2
000120A8 4EB9 0000 8D6A             		jsr	SlopeObject2
000120AE 4E75                       		rts	
000120B0                            ; ===========================================================================
000120B0                            
000120B0                            loc_1174A:				; XREF: Obj5E_Slope2
000120B0 7202                       		moveq	#2,d1
000120B2 43F8 D000                  		lea	($FFFFD000).w,a1
000120B6 3028 0008                  		move.w	8(a0),d0
000120BA 9069 0008                  		sub.w	8(a1),d0
000120BE 6400                       		bcc.s	loc_1175E
000120C0 4440                       		neg.w	d0
000120C2 7200                       		moveq	#0,d1
000120C4                            
000120C4                            loc_1175E:
000120C4 0C40 0008                  		cmpi.w	#8,d0
000120C8 6400                       		bcc.s	loc_11766
000120CA 7201                       		moveq	#1,d1
000120CC                            
000120CC                            loc_11766:
000120CC 1028 001A                  		move.b	$1A(a0),d0
000120D0 B001                       		cmp.b	d1,d0
000120D2 6700                       		beq.s	locret_11790
000120D4 6400                       		bcc.s	loc_11772
000120D6 5400                       		addq.b	#2,d0
000120D8                            
000120D8                            loc_11772:
000120D8 5300                       		subq.b	#1,d0
000120DA 1140 001A                  		move.b	d0,$1A(a0)
000120DE 1141 003A                  		move.b	d1,$3A(a0)
000120E2 08A8 0000 0001             		bclr	#0,1(a0)
000120E8 0828 0001 001A             		btst	#1,$1A(a0)
000120EE 6700                       		beq.s	locret_11790
000120F0 08E8 0000 0001             		bset	#0,1(a0)
000120F6                            
000120F6                            locret_11790:
000120F6 4E75                       		rts	
000120F8                            ; ===========================================================================
000120F8                            
000120F8                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000120F8 5428 0024                  		addq.b	#2,$24(a0)
000120FC 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012104 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001210A 0028 0004 0001             		ori.b	#4,1(a0)
00012110 117C 0004 0018             		move.b	#4,$18(a0)
00012116 117C 008B 0020             		move.b	#$8B,$20(a0)
0001211C 117C 000C 0019             		move.b	#$C,$19(a0)
00012122 3168 0008 0030             		move.w	8(a0),$30(a0)
00012128 0668 0028 0008             		addi.w	#$28,8(a0)
0001212E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012134 117C 0001 001A             		move.b	#1,$1A(a0)
0001213A 0828 0000 0022             		btst	#0,$22(a0)
00012140 6700                       		beq.s	Obj5E_MoveSpike
00012142 0468 0050 0008             		subi.w	#$50,8(a0)
00012148 117C 0002 003A             		move.b	#2,$3A(a0)
0001214E                            
0001214E                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001214E 2268 003C                  		movea.l	$3C(a0),a1
00012152 7000                       		moveq	#0,d0
00012154 1028 003A                  		move.b	$3A(a0),d0
00012158 9029 003A                  		sub.b	$3A(a1),d0
0001215C 6700                       		beq.s	loc_1183E
0001215E 6400                       		bcc.s	loc_117FC
00012160 4400                       		neg.b	d0
00012162                            
00012162                            loc_117FC:
00012162 323C F7E8                  		move.w	#-$818,d1
00012166 343C FEEC                  		move.w	#-$114,d2
0001216A 0C00 0001                  		cmpi.b	#1,d0
0001216E 6700                       		beq.s	loc_11822
00012170 323C F510                  		move.w	#-$AF0,d1
00012174 343C FF34                  		move.w	#-$CC,d2
00012178 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001217E 6D00                       		blt.s	loc_11822
00012180 323C F200                  		move.w	#-$E00,d1
00012184 343C FF60                  		move.w	#-$A0,d2
00012188                            
00012188                            loc_11822:
00012188 3141 0012                  		move.w	d1,$12(a0)
0001218C 3142 0010                  		move.w	d2,$10(a0)
00012190 3028 0008                  		move.w	8(a0),d0
00012194 9068 0030                  		sub.w	$30(a0),d0
00012198 6400                       		bcc.s	loc_11838
0001219A 4468 0010                  		neg.w	$10(a0)
0001219E                            
0001219E                            loc_11838:
0001219E 5428 0024                  		addq.b	#2,$24(a0)
000121A2 6000                       		bra.s	Obj5E_SpikeFall
000121A4                            ; ===========================================================================
000121A4                            
000121A4                            loc_1183E:				; XREF: Obj5E_MoveSpike
000121A4 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000121AA 7000                       		moveq	#0,d0
000121AC 1029 001A                  		move.b	$1A(a1),d0
000121B0 343C 0028                  		move.w	#$28,d2
000121B4 3228 0008                  		move.w	8(a0),d1
000121B8 9268 0030                  		sub.w	$30(a0),d1
000121BC 6400                       		bcc.s	loc_1185C
000121BE 4442                       		neg.w	d2
000121C0 5440                       		addq.w	#2,d0
000121C2                            
000121C2                            loc_1185C:
000121C2 D040                       		add.w	d0,d0
000121C4 3228 0034                  		move.w	$34(a0),d1
000121C8 D272 0000                  		add.w	(a2,d0.w),d1
000121CC 3141 000C                  		move.w	d1,$C(a0)
000121D0 D468 0030                  		add.w	$30(a0),d2
000121D4 3142 0008                  		move.w	d2,8(a0)
000121D8 4268 000E                  		clr.w	$E(a0)
000121DC 4268 000A                  		clr.w	$A(a0)
000121E0 4E75                       		rts	
000121E2                            ; ===========================================================================
000121E2                            
000121E2                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000121E2 4A68 0012                  		tst.w	$12(a0)
000121E6 6A00                       		bpl.s	loc_1189A
000121E8 6100 BB1E                  		bsr.w	ObjectFall
000121EC 3028 0034                  		move.w	$34(a0),d0
000121F0 0440 002F                  		subi.w	#$2F,d0
000121F4 B068 000C                  		cmp.w	$C(a0),d0
000121F8 6E00                       		bgt.s	locret_11898
000121FA 6100 BB0C                  		bsr.w	ObjectFall
000121FE                            
000121FE                            locret_11898:
000121FE 4E75                       		rts	
00012200                            ; ===========================================================================
00012200                            
00012200                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012200 6100 BB06                  		bsr.w	ObjectFall
00012204 2268 003C                  		movea.l	$3C(a0),a1
00012208 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001220E 7000                       		moveq	#0,d0
00012210 1029 001A                  		move.b	$1A(a1),d0
00012214 3228 0008                  		move.w	8(a0),d1
00012218 9268 0030                  		sub.w	$30(a0),d1
0001221C 6400                       		bcc.s	loc_118BA
0001221E 5440                       		addq.w	#2,d0
00012220                            
00012220                            loc_118BA:
00012220 D040                       		add.w	d0,d0
00012222 3228 0034                  		move.w	$34(a0),d1
00012226 D272 0000                  		add.w	(a2,d0.w),d1
0001222A B268 000C                  		cmp.w	$C(a0),d1
0001222E 6E00                       		bgt.s	locret_11938
00012230 2268 003C                  		movea.l	$3C(a0),a1
00012234 7202                       		moveq	#2,d1
00012236 4A68 0010                  		tst.w	$10(a0)
0001223A 6B00                       		bmi.s	Obj5E_Spring
0001223C 7200                       		moveq	#0,d1
0001223E                            
0001223E                            Obj5E_Spring:
0001223E 1341 003A                  		move.b	d1,$3A(a1)
00012242 1141 003A                  		move.b	d1,$3A(a0)
00012246 B229 001A                  		cmp.b	$1A(a1),d1
0001224A 6700                       		beq.s	loc_1192C
0001224C 08A9 0003 0022             		bclr	#3,$22(a1)
00012252 6700                       		beq.s	loc_1192C
00012254 4229 0025                  		clr.b	$25(a1)
00012258 137C 0002 0024             		move.b	#2,$24(a1)
0001225E 45F8 D000                  		lea	($FFFFD000).w,a2
00012262 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012268 446A 0012                  		neg.w	$12(a2)
0001226C 08EA 0001 0022             		bset	#1,$22(a2)
00012272 08AA 0003 0022             		bclr	#3,$22(a2)
00012278 422A 003C                  		clr.b	$3C(a2)
0001227C 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012282 157C 0002 0024             		move.b	#2,$24(a2)
00012288 303C 00CC                  		move.w	#$CC,d0
0001228C 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play spring sound
00012292                            
00012292                            loc_1192C:
00012292 4268 0010                  		clr.w	$10(a0)
00012296 4268 0012                  		clr.w	$12(a0)
0001229A 5528 0024                  		subq.b	#2,$24(a0)
0001229E                            
0001229E                            locret_11938:
0001229E 4E75                       		rts	
000122A0                            ; ===========================================================================
000122A0 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000122AA                            
000122AA                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000122DA                            		even
000122DA                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001230A                            		even
0001230A                            ; ---------------------------------------------------------------------------
0001230A                            ; Sprite mappings - seesaws (SLZ)
0001230A                            ; ---------------------------------------------------------------------------
0001230A                            Map_obj5E:
0001230A                            	include "_maps\obj5E.asm"
0001230A                            ; ---------------------------------------------------------------------------
0001230A                            ; Sprite mappings - seesaws (SLZ)
0001230A                            ; ---------------------------------------------------------------------------
0001230A 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001230E 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012312 07                         byte_119AC:	dc.b 7
00012313 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012318 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001231D E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012322 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012327 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001232C F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012331 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012336 04                         byte_119D0:	dc.b 4
00012337 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001233C E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012341 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012346 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001234C 00                         		even
0001234C 00                         		even
0001234C                            
0001234C                            ; ---------------------------------------------------------------------------
0001234C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001234C                            ; ---------------------------------------------------------------------------
0001234C                            Map_obj5Ea:
0001234C                            	include "_maps\obj5Eballs.asm"
0001234C                            ; ---------------------------------------------------------------------------
0001234C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001234C                            ; ---------------------------------------------------------------------------
0001234C 0000                       		dc.w byte_119EA-Map_obj5Ea
0001234E 0000                       		dc.w byte_119F0-Map_obj5Ea
00012350 01                         byte_119EA:	dc.b 1
00012351 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012356 01                         byte_119F0:	dc.b 1
00012357 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001235C                            		even
0001235C                            		even
0001235C                            
0001235C                            ; ===========================================================================
0001235C                            ; ---------------------------------------------------------------------------
0001235C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001235C                            ; ---------------------------------------------------------------------------
0001235C                            
0001235C                            Obj5F:					; XREF: Obj_Index
0001235C 7000                       		moveq	#0,d0
0001235E 1028 0024                  		move.b	$24(a0),d0
00012362 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012366 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001236A                            ; ===========================================================================
0001236A 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001236C 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001236E 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012370 0000                       		dc.w Obj5F_End-Obj5F_Index
00012372                            ; ===========================================================================
00012372                            
00012372                            Obj5F_Main:				; XREF: Obj5F_Index
00012372 5428 0024                  		addq.b	#2,$24(a0)
00012376 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001237E 317C 0400 0002             		move.w	#$400,2(a0)
00012384 0028 0004 0001             		ori.b	#4,1(a0)
0001238A 117C 0003 0018             		move.b	#3,$18(a0)
00012390 117C 000C 0019             		move.b	#$C,$19(a0)
00012396 1028 0028                  		move.b	$28(a0),d0
0001239A 6700                       		beq.s	loc_11A3C
0001239C 1140 0024                  		move.b	d0,$24(a0)
000123A0 4E75                       		rts	
000123A2                            ; ===========================================================================
000123A2                            
000123A2                            loc_11A3C:
000123A2 117C 009A 0020             		move.b	#$9A,$20(a0)
000123A8 0868 0000 0022             		bchg	#0,$22(a0)
000123AE                            
000123AE                            Obj5F_Action:				; XREF: Obj5F_Index
000123AE 7000                       		moveq	#0,d0
000123B0 1028 0025                  		move.b	$25(a0),d0
000123B4 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000123B8 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000123BC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123C2 6100 8C04                  		bsr.w	AnimateSprite
000123C6 6000 DA4E                  		bra.w	MarkObjGone
000123CA                            ; ===========================================================================
000123CA 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000123CC 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000123CE 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000123D0                            ; ===========================================================================
000123D0                            
000123D0                            Obj5F_Walk:				; XREF: Obj5F_Index2
000123D0 6100 0000                  		bsr.w	Obj5F_ChkSonic
000123D4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000123D8 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000123DA 5428 0025                  		addq.b	#2,$25(a0)
000123DE 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000123E4 317C 0010 0010             		move.w	#$10,$10(a0)
000123EA 117C 0001 001C             		move.b	#1,$1C(a0)
000123F0 0868 0000 0022             		bchg	#0,$22(a0)
000123F6 6700                       		beq.s	locret_11A96
000123F8 4468 0010                  		neg.w	$10(a0)		; change direction
000123FC                            
000123FC                            locret_11A96:
000123FC 4E75                       		rts	
000123FE                            ; ===========================================================================
000123FE                            
000123FE                            Obj5F_Wait:				; XREF: Obj5F_Index2
000123FE 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012402 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012406 6B00                       		bmi.s	loc_11AA8
00012408 6100 B91E                  		bsr.w	SpeedToPos
0001240C 4E75                       		rts	
0001240E                            ; ===========================================================================
0001240E                            
0001240E                            loc_11AA8:
0001240E 5528 0025                  		subq.b	#2,$25(a0)
00012412 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012418 4268 0010                  		clr.w	$10(a0)		; stop walking
0001241C 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012422 4E75                       		rts	
00012424                            ; ===========================================================================
00012424                            
00012424                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012424 5368 0030                  		subq.w	#1,$30(a0)
00012428 6A00                       		bpl.s	locret_11AD0
0001242A 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001242E 117C 0000 0024             		move.b	#0,$24(a0)
00012434                            
00012434                            locret_11AD0:
00012434 4E75                       		rts	
00012436                            ; ===========================================================================
00012436                            
00012436                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012436 3038 D008                  		move.w	($FFFFD008).w,d0
0001243A 9068 0008                  		sub.w	8(a0),d0
0001243E 6400                       		bcc.s	loc_11ADE
00012440 4440                       		neg.w	d0
00012442                            
00012442                            loc_11ADE:
00012442 0C40 0060                  		cmpi.w	#$60,d0
00012446 6400                       		bcc.s	locret_11B5E
00012448 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001244C 9068 000C                  		sub.w	$C(a0),d0
00012450 6400                       		bcc.s	Obj5F_MakeFuse
00012452 4440                       		neg.w	d0
00012454                            
00012454                            Obj5F_MakeFuse:
00012454 0C40 0060                  		cmpi.w	#$60,d0
00012458 6400                       		bcc.s	locret_11B5E
0001245A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001245E 6600                       		bne.s	locret_11B5E
00012460 117C 0004 0025             		move.b	#4,$25(a0)
00012466 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001246C 4268 0010                  		clr.w	$10(a0)
00012470 117C 0002 001C             		move.b	#2,$1C(a0)
00012476 6100 BD8C                  		bsr.w	SingleObjLoad2
0001247A 6600                       		bne.s	locret_11B5E
0001247C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012480 3368 0008 0008             		move.w	8(a0),8(a1)
00012486 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001248C 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012492 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012498 137C 0004 0028             		move.b	#4,$28(a1)
0001249E 137C 0003 001C             		move.b	#3,$1C(a1)
000124A4 337C 0010 0012             		move.w	#$10,$12(a1)
000124AA 0828 0001 0022             		btst	#1,$22(a0)
000124B0 6700                       		beq.s	loc_11B54
000124B2 4469 0012                  		neg.w	$12(a1)
000124B6                            
000124B6                            loc_11B54:
000124B6 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000124BC 2348 003C                  		move.l	a0,$3C(a1)
000124C0                            
000124C0                            locret_11B5E:
000124C0 4E75                       		rts	
000124C2                            ; ===========================================================================
000124C2                            
000124C2                            Obj5F_Display:				; XREF: Obj5F_Index
000124C2 6100                       		bsr.s	loc_11B70
000124C4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000124CA 6100 8AFC                  		bsr.w	AnimateSprite
000124CE 6000 D946                  		bra.w	MarkObjGone
000124D2                            ; ===========================================================================
000124D2                            
000124D2                            loc_11B70:
000124D2 5368 0030                  		subq.w	#1,$30(a0)
000124D6 6B00                       		bmi.s	loc_11B7C
000124D8 6100 B84E                  		bsr.w	SpeedToPos
000124DC 4E75                       		rts	
000124DE                            ; ===========================================================================
000124DE                            
000124DE                            loc_11B7C:
000124DE 4268 0030                  		clr.w	$30(a0)
000124E2 4228 0024                  		clr.b	$24(a0)
000124E6 3168 0034 000C             		move.w	$34(a0),$C(a0)
000124EC 7203                       		moveq	#3,d1
000124EE 2248                       		movea.l	a0,a1
000124F0 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000124F6 6000                       		bra.s	Obj5F_MakeShrap
000124F8                            ; ===========================================================================
000124F8                            
000124F8                            Obj5F_Loop:
000124F8 6100 BD0A                  		bsr.w	SingleObjLoad2
000124FC 6600                       		bne.s	loc_11BCE
000124FE                            
000124FE                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000124FE 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012502 3368 0008 0008             		move.w	8(a0),8(a1)
00012508 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001250E 137C 0006 0028             		move.b	#6,$28(a1)
00012514 137C 0004 001C             		move.b	#4,$1C(a1)
0001251A 335A 0010                  		move.w	(a2)+,$10(a1)
0001251E 335A 0012                  		move.w	(a2)+,$12(a1)
00012522 137C 0098 0020             		move.b	#$98,$20(a1)
00012528 08E9 0007 0001             		bset	#7,1(a1)
0001252E                            
0001252E                            loc_11BCE:
0001252E 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012532                            
00012532 117C 0006 0024             		move.b	#6,$24(a0)
00012538                            
00012538                            Obj5F_End:				; XREF: Obj5F_Index
00012538 6100 B7EE                  		bsr.w	SpeedToPos
0001253C 0668 0018 0012             		addi.w	#$18,$12(a0)
00012542 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012548 6100 8A7E                  		bsr.w	AnimateSprite
0001254C 4A28 0001                  		tst.b	1(a0)
00012550 6A00 B82C                  		bpl.w	DeleteObject
00012554 6000 B7EC                  		bra.w	DisplaySprite
00012558                            ; ===========================================================================
00012558 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012568                            
00012568                            Ani_obj5F:
00012568                            	include "_anim\obj5F.asm"
00012568                            ; ---------------------------------------------------------------------------
00012568                            ; Animation script - Bomb enemy
00012568                            ; ---------------------------------------------------------------------------
00012568 0000                       		dc.w byte_11C12-Ani_obj5F
0001256A 0000                       		dc.w byte_11C16-Ani_obj5F
0001256C 0000                       		dc.w byte_11C1C-Ani_obj5F
0001256E 0000                       		dc.w byte_11C20-Ani_obj5F
00012570 0000                       		dc.w byte_11C24-Ani_obj5F
00012572 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012576 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001257C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012580 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012584 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012588                            		even
00012588                            		even
00012588                            
00012588                            ; ---------------------------------------------------------------------------
00012588                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012588                            ; ---------------------------------------------------------------------------
00012588                            Map_obj5F:
00012588                            	include "_maps\obj5F.asm"
00012588                            ; ================================================================================
00012588                            ; Sprite Mappings - generated by Flex 2 Mon Jul 09 2018 12:13:44 GMT-0700 (Pacific Daylight Time)
00012588                            ; ================================================================================
00012588                            
00012588                            DATA6JW42Z3S7HT:
00012588 0000 0000                  	dc.w DATA6JW42Z3S7HT_0-DATA6JW42Z3S7HT, DATA6JW42Z3S7HT_1-DATA6JW42Z3S7HT
0001258C 0000 0000                  	dc.w DATA6JW42Z3S7HT_2-DATA6JW42Z3S7HT, DATA6JW42Z3S7HT_3-DATA6JW42Z3S7HT
00012590 0000 0000                  	dc.w DATA6JW42Z3S7HT_4-DATA6JW42Z3S7HT, DATA6JW42Z3S7HT_5-DATA6JW42Z3S7HT
00012594 0000 0000                  	dc.w DATA6JW42Z3S7HT_6-DATA6JW42Z3S7HT, DATA6JW42Z3S7HT_7-DATA6JW42Z3S7HT
00012598 0000 0000                  	dc.w DATA6JW42Z3S7HT_8-DATA6JW42Z3S7HT, DATA6JW42Z3S7HT_9-DATA6JW42Z3S7HT
0001259C 0000 0000                  	dc.w DATA6JW42Z3S7HT_A-DATA6JW42Z3S7HT, DATA6JW42Z3S7HT_B-DATA6JW42Z3S7HT
000125A0 03                         DATA6JW42Z3S7HT_0: dc.b $3
000125A1 F10A 0000 F4               	dc.b $F1, $A, $0, $0, $F4
000125A6 0908 0012 F4               	dc.b $9, $8, $0, $12, $F4
000125AB E701 0021 FC               	dc.b $E7, $1, $0, $21, $FC
000125B0 03                         DATA6JW42Z3S7HT_1: dc.b $3
000125B1 F10A 0009 F4               	dc.b $F1, $A, $0, $9, $F4
000125B6 0908 0012 F4               	dc.b $9, $8, $0, $12, $F4
000125BB E701 0021 FC               	dc.b $E7, $1, $0, $21, $FC
000125C0 03                         DATA6JW42Z3S7HT_2: dc.b $3
000125C1 F00A 0000 F4               	dc.b $F0, $A, $0, $0, $F4
000125C6 0808 0015 F4               	dc.b $8, $8, $0, $15, $F4
000125CB E601 0021 FC               	dc.b $E6, $1, $0, $21, $FC
000125D0 03                         DATA6JW42Z3S7HT_3: dc.b $3
000125D1 F10A 0009 F4               	dc.b $F1, $A, $0, $9, $F4
000125D6 0908 0018 F4               	dc.b $9, $8, $0, $18, $F4
000125DB E701 0021 FC               	dc.b $E7, $1, $0, $21, $FC
000125E0 03                         DATA6JW42Z3S7HT_4: dc.b $3
000125E1 F00A 0000 F4               	dc.b $F0, $A, $0, $0, $F4
000125E6 0808 001B F4               	dc.b $8, $8, $0, $1B, $F4
000125EB E601 0021 FC               	dc.b $E6, $1, $0, $21, $FC
000125F0 03                         DATA6JW42Z3S7HT_5: dc.b $3
000125F1 F10A 0009 F4               	dc.b $F1, $A, $0, $9, $F4
000125F6 0908 001E F4               	dc.b $9, $8, $0, $1E, $F4
000125FB E701 0021 FC               	dc.b $E7, $1, $0, $21, $FC
00012600 02                         DATA6JW42Z3S7HT_6: dc.b $2
00012601 F10A 0000 F4               	dc.b $F1, $A, $0, $0, $F4
00012606 0908 0012 F4               	dc.b $9, $8, $0, $12, $F4
0001260B 02                         DATA6JW42Z3S7HT_7: dc.b $2
0001260C F10A 0009 F4               	dc.b $F1, $A, $0, $9, $F4
00012611 0908 0012 F4               	dc.b $9, $8, $0, $12, $F4
00012616 01                         DATA6JW42Z3S7HT_8: dc.b $1
00012617 E701 0023 FC               	dc.b $E7, $1, $0, $23, $FC
0001261C 01                         DATA6JW42Z3S7HT_9: dc.b $1
0001261D E701 0025 FC               	dc.b $E7, $1, $0, $25, $FC
00012622 01                         DATA6JW42Z3S7HT_A: dc.b $1
00012623 FC00 0027 FC               	dc.b $FC, $0, $0, $27, $FC
00012628 01                         DATA6JW42Z3S7HT_B: dc.b $1
00012629 FC00 0028 FC               	dc.b $FC, $0, $0, $28, $FC
0001262E                            	even
0001262E                            	even
0001262E                            
0001262E                            ; ===========================================================================
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            
0001262E                            Obj60:					; XREF: Obj_Index
0001262E 7000                       		moveq	#0,d0
00012630 1028 0024                  		move.b	$24(a0),d0
00012634 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012638 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001263C                            ; ===========================================================================
0001263C 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001263E 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012640 0000                       		dc.w Obj60_Display-Obj60_Index
00012642 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012644 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012646                            ; ===========================================================================
00012646                            
00012646                            Obj60_Main:				; XREF: Obj60_Index
00012646 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001264E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012654 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001265A 6700                       		beq.s	loc_11D02
0001265C 317C 0429 0002             		move.w	#$429,2(a0)	; SLZ specific code
00012662                            
00012662                            loc_11D02:
00012662 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012668 6600                       		bne.s	loc_11D10
0001266A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012670                            
00012670                            loc_11D10:
00012670 0028 0004 0001             		ori.b	#4,1(a0)
00012676 117C 0004 0018             		move.b	#4,$18(a0)
0001267C 117C 000B 0020             		move.b	#$B,$20(a0)
00012682 117C 000C 0019             		move.b	#$C,$19(a0)
00012688 7400                       		moveq	#0,d2
0001268A 45E8 0037                  		lea	$37(a0),a2
0001268E 264A                       		movea.l	a2,a3
00012690 524A                       		addq.w	#1,a2
00012692 7207                       		moveq	#7,d1
00012694                            
00012694                            Obj60_MakeOrbs:
00012694 6100 BB6E                  		bsr.w	SingleObjLoad2
00012698 6600                       		bne.s	loc_11D90
0001269A 5213                       		addq.b	#1,(a3)
0001269C 3A09                       		move.w	a1,d5
0001269E 0445 D000                  		subi.w	#-$3000,d5
000126A2 EC4D                       		lsr.w	#6,d5
000126A4 0245 007F                  		andi.w	#$7F,d5
000126A8 14C5                       		move.b	d5,(a2)+
000126AA 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000126AC 137C 0006 0024             		move.b	#6,$24(a1)
000126B2 2368 0004 0004             		move.l	4(a0),4(a1)
000126B8 3368 0002 0002             		move.w	2(a0),2(a1)
000126BE 0029 0004 0001             		ori.b	#4,1(a1)
000126C4 137C 0004 0018             		move.b	#4,$18(a1)
000126CA 137C 0008 0019             		move.b	#8,$19(a1)
000126D0 137C 0003 001A             		move.b	#3,$1A(a1)
000126D6 137C 0098 0020             		move.b	#$98,$20(a1)
000126DC 1342 0026                  		move.b	d2,$26(a1)
000126E0 0602 0020                  		addi.b	#$20,d2
000126E4 2348 003C                  		move.l	a0,$3C(a1)
000126E8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000126EC                            
000126EC                            loc_11D90:
000126EC 7001                       		moveq	#1,d0
000126EE 0828 0000 0022             		btst	#0,$22(a0)
000126F4 6700                       		beq.s	Obj60_Move
000126F6 4440                       		neg.w	d0
000126F8                            
000126F8                            Obj60_Move:
000126F8 1140 0036                  		move.b	d0,$36(a0)
000126FC 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012702 5428 0024                  		addq.b	#2,$24(a0)
00012706 317C FF70 0010             		move.w	#-$90,$10(a0)	; move orbinaut	to the left
0001270C 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012712 6700                       		beq.s	locret_11DBC	; if not, branch
00012714 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012718                            
00012718                            locret_11DBC:
00012718 4E75                       		rts	
0001271A                            ; ===========================================================================
0001271A                            
0001271A                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001271A 3038 D008                  		move.w	($FFFFD008).w,d0
0001271E 9068 0008                  		sub.w	8(a0),d0
00012722 6400                       		bcc.s	loc_11DCA
00012724 4440                       		neg.w	d0
00012726                            
00012726                            loc_11DCA:
00012726 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001272A 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001272C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012730 9068 000C                  		sub.w	$C(a0),d0
00012734 6400                       		bcc.s	loc_11DDC
00012736 4440                       		neg.w	d0
00012738                            
00012738                            loc_11DDC:
00012738 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001273C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001273E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012742 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012744 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001274A                            
0001274A                            Obj60_Animate:
0001274A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012750 6100 8876                  		bsr.w	AnimateSprite
00012754 6000 0000                  		bra.w	Obj60_ChkDel
00012758                            ; ===========================================================================
00012758                            
00012758                            Obj60_Display:				; XREF: Obj60_Index
00012758 6100 B5CE                  		bsr.w	SpeedToPos
0001275C                            
0001275C                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001275C 3028 0008                  		move.w	8(a0),d0
00012760 0240 FF80                  		andi.w	#$FF80,d0
00012764 3238 F700                  		move.w	($FFFFF700).w,d1
00012768 0441 0080                  		subi.w	#$80,d1
0001276C 0241 FF80                  		andi.w	#$FF80,d1
00012770 9041                       		sub.w	d1,d0
00012772 0C40 0280                  		cmpi.w	#$280,d0
00012776 6200 0000                  		bhi.w	Obj60_ChkGone
0001277A 6000 B5C6                  		bra.w	DisplaySprite
0001277E                            ; ===========================================================================
0001277E                            
0001277E                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001277E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012782 7000                       		moveq	#0,d0
00012784 1028 0023                  		move.b	$23(a0),d0
00012788 6700                       		beq.s	loc_11E34
0001278A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012790                            
00012790                            loc_11E34:
00012790 45E8 0037                  		lea	$37(a0),a2
00012794 7400                       		moveq	#0,d2
00012796 141A                       		move.b	(a2)+,d2
00012798 5342                       		subq.w	#1,d2
0001279A 6500                       		bcs.s	Obj60_Delete
0001279C                            
0001279C                            loc_11E40:
0001279C 7000                       		moveq	#0,d0
0001279E 101A                       		move.b	(a2)+,d0
000127A0 ED48                       		lsl.w	#6,d0
000127A2 0680 00FF D000             		addi.l	#$FFD000,d0
000127A8 2240                       		movea.l	d0,a1
000127AA 6100 B5D4                  		bsr.w	DeleteObject2
000127AE 51CA FFEC                  		dbf	d2,loc_11E40
000127B2                            
000127B2                            Obj60_Delete:
000127B2 6000 B5CA                  		bra.w	DeleteObject
000127B6                            ; ===========================================================================
000127B6                            
000127B6                            Obj60_MoveOrb:				; XREF: Obj60_Index
000127B6 2268 003C                  		movea.l	$3C(a0),a1
000127BA 0C11 0060                  		cmpi.b	#$60,0(a1)
000127BE 6600 B5BE                  		bne.w	DeleteObject
000127C2 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000127C8 6600                       		bne.s	Obj60_Circle
000127CA 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000127D0 6600                       		bne.s	Obj60_Circle
000127D2 5428 0024                  		addq.b	#2,$24(a0)
000127D6 5329 0037                  		subq.b	#1,$37(a1)
000127DA 6600                       		bne.s	Obj60_FireOrb
000127DC 5429 0024                  		addq.b	#2,$24(a1)
000127E0                            
000127E0                            Obj60_FireOrb:
000127E0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move orb to the left (quickly)
000127E6 0829 0000 0022             		btst	#0,$22(a1)
000127EC 6700                       		beq.s	Obj60_Display2
000127EE 4468 0010                  		neg.w	$10(a0)
000127F2                            
000127F2                            Obj60_Display2:
000127F2 6000 B54E                  		bra.w	DisplaySprite
000127F6                            ; ===========================================================================
000127F6                            
000127F6                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000127F6 1028 0026                  		move.b	$26(a0),d0
000127FA 4EB9 0000 2D64             		jsr	(CalcSine).l
00012800 E441                       		asr.w	#2,d1
00012802 D269 0008                  		add.w	8(a1),d1
00012806 3141 0008                  		move.w	d1,8(a0)
0001280A E840                       		asr.w	#4,d0
0001280C D069 000C                  		add.w	$C(a1),d0
00012810 3140 000C                  		move.w	d0,$C(a0)
00012814 1029 0036                  		move.b	$36(a1),d0
00012818 D128 0026                  		add.b	d0,$26(a0)
0001281C 6000 B524                  		bra.w	DisplaySprite
00012820                            ; ===========================================================================
00012820                            
00012820                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012820 6100 B506                  		bsr.w	SpeedToPos
00012824 4A28 0001                  		tst.b	1(a0)
00012828 6A00 B554                  		bpl.w	DeleteObject
0001282C 6000 B514                  		bra.w	DisplaySprite
00012830                            ; ===========================================================================
00012830                            Ani_obj60:
00012830                            	include "_anim\obj60.asm"
00012830                            ; ---------------------------------------------------------------------------
00012830                            ; Animation script - Orbinaut enemy
00012830                            ; ---------------------------------------------------------------------------
00012830 0000                       		dc.w byte_11EDA-Ani_obj60
00012832 0000                       		dc.w byte_11EDE-Ani_obj60
00012834 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012838 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001283E                            		even
0001283E                            		even
0001283E                            
0001283E                            ; ---------------------------------------------------------------------------
0001283E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001283E                            ; ---------------------------------------------------------------------------
0001283E                            Map_obj60:
0001283E                            	include "_maps\obj60.asm"
0001283E                            ; ================================================================================
0001283E                            ; Sprite Mappings - generated by Flex 2 Sat Jul 07 2018 22:17:10 GMT-0700 (Pacific Daylight Time)
0001283E                            ; ================================================================================
0001283E                            
0001283E                            DATAP0DRQAN1UV:
0001283E 0000 0000                  	dc.w DATAP0DRQAN1UV_0-DATAP0DRQAN1UV, DATAP0DRQAN1UV_1-DATAP0DRQAN1UV
00012842 0000 0000                  	dc.w DATAP0DRQAN1UV_2-DATAP0DRQAN1UV, DATAP0DRQAN1UV_3-DATAP0DRQAN1UV
00012846 01                         DATAP0DRQAN1UV_0: dc.b $1
00012847 F40A 0000 F4               	dc.b $F4, $A, $0, $0, $F4
0001284C 01                         DATAP0DRQAN1UV_1: dc.b $1
0001284D F40A 2009 F4               	dc.b $F4, $A, $20, $9, $F4
00012852 01                         DATAP0DRQAN1UV_2: dc.b $1
00012853 F40A 0012 F4               	dc.b $F4, $A, $0, $12, $F4
00012858 01                         DATAP0DRQAN1UV_3: dc.b $1
00012859 F805 001B F8               	dc.b $F8, $5, $0, $1B, $F8
0001285E                            	even
0001285E                            	even
0001285E                            
0001285E                            ; ===========================================================================
0001285E                            ; ---------------------------------------------------------------------------
0001285E                            ; Object 16 - harpoon (LZ)
0001285E                            ; ---------------------------------------------------------------------------
0001285E                            
0001285E                            Obj16:					; XREF: Obj_Index
0001285E 7000                       		moveq	#0,d0
00012860 1028 0024                  		move.b	$24(a0),d0
00012864 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012868 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001286C                            ; ===========================================================================
0001286C 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001286E 0000                       		dc.w Obj16_Move-Obj16_Index
00012870 0000                       		dc.w Obj16_Wait-Obj16_Index
00012872                            ; ===========================================================================
00012872                            
00012872                            Obj16_Main:				; XREF: Obj16_Index
00012872 5428 0024                  		addq.b	#2,$24(a0)
00012876 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001287E 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012884 0028 0004 0001             		ori.b	#4,1(a0)
0001288A 117C 0004 0018             		move.b	#4,$18(a0)
00012890 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012896 117C 0014 0019             		move.b	#$14,$19(a0)
0001289C 317C 003C 0030             		move.w	#60,$30(a0)
000128A2                            
000128A2                            Obj16_Move:				; XREF: Obj16_Index
000128A2 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000128A8 6100 871E                  		bsr.w	AnimateSprite
000128AC 7000                       		moveq	#0,d0
000128AE 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000128B2 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000128B8 6000 D55C                  		bra.w	MarkObjGone
000128BC                            ; ===========================================================================
000128BC 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000128C2                            ; ===========================================================================
000128C2                            
000128C2                            Obj16_Wait:				; XREF: Obj16_Index
000128C2 5368 0030                  		subq.w	#1,$30(a0)
000128C6 6A00                       		bpl.s	Obj16_ChkDel
000128C8 317C 003C 0030             		move.w	#60,$30(a0)
000128CE 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000128D2 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000128D8                            
000128D8                            Obj16_ChkDel:
000128D8 6000 D53C                  		bra.w	MarkObjGone
000128DC                            ; ===========================================================================
000128DC                            Ani_obj16:
000128DC                            	include "_anim\obj16.asm"
000128DC                            ; ---------------------------------------------------------------------------
000128DC                            ; Animation script - harpoon (LZ)
000128DC                            ; ---------------------------------------------------------------------------
000128DC 0000                       		dc.w byte_11F8A-Ani_obj16
000128DE 0000                       		dc.w byte_11F8E-Ani_obj16
000128E0 0000                       		dc.w byte_11F92-Ani_obj16
000128E2 0000                       		dc.w byte_11F96-Ani_obj16
000128E4 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000128E8 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000128EC 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000128F0 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000128F4                            		even
000128F4                            		even
000128F4                            
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            ; Sprite mappings - harpoon (LZ)
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            Map_obj16:
000128F4                            	include "_maps\obj16.asm"
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            ; Sprite mappings - harpoon (LZ)
000128F4                            ; ---------------------------------------------------------------------------
000128F4 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000128F8 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000128FC 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012900 01                         byte_11FA6:	dc.b 1
00012901 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012906 01                         byte_11FAC:	dc.b 1
00012907 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001290C 02                         byte_11FB2:	dc.b 2
0001290D FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012912 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012917 01                         byte_11FBD:	dc.b 1
00012918 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001291D 01                         byte_11FC3:	dc.b 1
0001291E E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012923 02                         byte_11FC9:	dc.b 2
00012924 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012929 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001292E                            		even
0001292E                            		even
0001292E                            
0001292E                            ; ===========================================================================
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            ; Object 61 - blocks (LZ)
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            
0001292E                            Obj61:					; XREF: Obj_Index
0001292E 7000                       		moveq	#0,d0
00012930 1028 0024                  		move.b	$24(a0),d0
00012934 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012938 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001293C                            ; ===========================================================================
0001293C 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001293E 0000                       		dc.w Obj61_Action-Obj61_Index
00012940                            
00012940 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012942 200C                       		dc.b $20, $C
00012944 1010                       		dc.b $10, $10
00012946 1010                       		dc.b $10, $10
00012948                            ; ===========================================================================
00012948                            
00012948                            Obj61_Main:				; XREF: Obj61_Index
00012948 5428 0024                  		addq.b	#2,$24(a0)
0001294C 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012954 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001295A 117C 0004 0001             		move.b	#4,1(a0)
00012960 117C 0003 0018             		move.b	#3,$18(a0)
00012966 7000                       		moveq	#0,d0
00012968 1028 0028                  		move.b	$28(a0),d0
0001296C E648                       		lsr.w	#3,d0
0001296E 0240 000E                  		andi.w	#$E,d0
00012972 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012976 115A 0019                  		move.b	(a2)+,$19(a0)
0001297A 1152 0016                  		move.b	(a2),$16(a0)
0001297E E248                       		lsr.w	#1,d0
00012980 1140 001A                  		move.b	d0,$1A(a0)
00012984 3168 0008 0034             		move.w	8(a0),$34(a0)
0001298A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012990 1028 0028                  		move.b	$28(a0),d0
00012994 0200 000F                  		andi.b	#$F,d0
00012998 6700                       		beq.s	Obj61_Action
0001299A 0C00 0007                  		cmpi.b	#7,d0
0001299E 6700                       		beq.s	Obj61_Action
000129A0 117C 0001 0038             		move.b	#1,$38(a0)
000129A6                            
000129A6                            Obj61_Action:				; XREF: Obj61_Index
000129A6 3F28 0008                  		move.w	8(a0),-(sp)
000129AA 7000                       		moveq	#0,d0
000129AC 1028 0028                  		move.b	$28(a0),d0
000129B0 0240 000F                  		andi.w	#$F,d0
000129B4 D040                       		add.w	d0,d0
000129B6 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000129BA 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000129BE 381F                       		move.w	(sp)+,d4
000129C0 4A28 0001                  		tst.b	1(a0)
000129C4 6A00                       		bpl.s	Obj61_ChkDel
000129C6 7200                       		moveq	#0,d1
000129C8 1228 0019                  		move.b	$19(a0),d1
000129CC 0641 000B                  		addi.w	#$B,d1
000129D0 7400                       		moveq	#0,d2
000129D2 1428 0016                  		move.b	$16(a0),d2
000129D6 3602                       		move.w	d2,d3
000129D8 5243                       		addq.w	#1,d3
000129DA 6100 D91E                  		bsr.w	SolidObject
000129DE 1144 003F                  		move.b	d4,$3F(a0)
000129E2 6100 0000                  		bsr.w	loc_12180
000129E6                            
000129E6                            Obj61_ChkDel:
000129E6 3028 0034                  		move.w	$34(a0),d0
000129EA 0240 FF80                  		andi.w	#$FF80,d0
000129EE 3238 F700                  		move.w	($FFFFF700).w,d1
000129F2 0441 0080                  		subi.w	#$80,d1
000129F6 0241 FF80                  		andi.w	#$FF80,d1
000129FA 9041                       		sub.w	d1,d0
000129FC 0C40 0280                  		cmpi.w	#$280,d0
00012A00 6200 B37C                  		bhi.w	DeleteObject
00012A04 6000 B33C                  		bra.w	DisplaySprite
00012A08                            ; ===========================================================================
00012A08 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A0C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A10 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012A14 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012A18                            ; ===========================================================================
00012A18                            
00012A18                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012A18 4E75                       		rts	
00012A1A                            ; ===========================================================================
00012A1A                            
00012A1A                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012A1A 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012A1E 6600                       		bne.s	loc_120D6	; if yes, branch
00012A20 0828 0003 0022             		btst	#3,$22(a0)
00012A26 6700                       		beq.s	locret_120D4
00012A28 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00012A2E                            
00012A2E                            locret_120D4:
00012A2E 4E75                       		rts	
00012A30                            ; ===========================================================================
00012A30                            
00012A30                            loc_120D6:
00012A30 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012A34 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012A36 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012A3A 4228 0038                  		clr.b	$38(a0)
00012A3E 4E75                       		rts	
00012A40                            ; ===========================================================================
00012A40                            
00012A40                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012A40 6100 B2E6                  		bsr.w	SpeedToPos
00012A44 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012A48 6100 0000                  		bsr.w	ObjHitFloor
00012A4C 4A41                       		tst.w	d1
00012A4E 6A00 0000                  		bpl.w	locret_12106
00012A52 5241                       		addq.w	#1,d1
00012A54 D368 000C                  		add.w	d1,$C(a0)
00012A58 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012A5C 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012A60                            
00012A60                            locret_12106:
00012A60 4E75                       		rts	
00012A62                            ; ===========================================================================
00012A62                            
00012A62                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012A62 6100 B2C4                  		bsr.w	SpeedToPos
00012A66 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012A6A 6100 0000                  		bsr.w	ObjHitCeiling
00012A6E 4A41                       		tst.w	d1
00012A70 6A00 0000                  		bpl.w	locret_12126
00012A74 9368 000C                  		sub.w	d1,$C(a0)
00012A78 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012A7C 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012A80                            
00012A80                            locret_12126:
00012A80 4E75                       		rts	
00012A82                            ; ===========================================================================
00012A82                            
00012A82                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012A82 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012A88 6600                       		bne.s	locret_12138	; if not, branch
00012A8A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012A8E 4228 0038                  		clr.b	$38(a0)
00012A92                            
00012A92                            locret_12138:
00012A92 4E75                       		rts	
00012A94                            ; ===========================================================================
00012A94                            
00012A94                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012A94 3038 F646                  		move.w	($FFFFF646).w,d0
00012A98 9068 000C                  		sub.w	$C(a0),d0
00012A9C 6700                       		beq.s	locret_1217E
00012A9E 6400                       		bcc.s	loc_12162
00012AA0 0C40 FFFE                  		cmpi.w	#-2,d0
00012AA4 6C00                       		bge.s	loc_1214E
00012AA6 70FE                       		moveq	#-2,d0
00012AA8                            
00012AA8                            loc_1214E:
00012AA8 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012AAC 6100 0000                  		bsr.w	ObjHitCeiling
00012AB0 4A41                       		tst.w	d1
00012AB2 6A00 0000                  		bpl.w	locret_12160
00012AB6 9368 000C                  		sub.w	d1,$C(a0)
00012ABA                            
00012ABA                            locret_12160:
00012ABA 4E75                       		rts	
00012ABC                            ; ===========================================================================
00012ABC                            
00012ABC                            loc_12162:				; XREF: Obj61_Type07
00012ABC 0C40 0002                  		cmpi.w	#2,d0
00012AC0 6F00                       		ble.s	loc_1216A
00012AC2 7002                       		moveq	#2,d0
00012AC4                            
00012AC4                            loc_1216A:
00012AC4 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012AC8 6100 0000                  		bsr.w	ObjHitFloor
00012ACC 4A41                       		tst.w	d1
00012ACE 6A00 0000                  		bpl.w	locret_1217E
00012AD2 5241                       		addq.w	#1,d1
00012AD4 D368 000C                  		add.w	d1,$C(a0)
00012AD8                            
00012AD8                            locret_1217E:
00012AD8 4E75                       		rts	
00012ADA                            ; ===========================================================================
00012ADA                            
00012ADA                            loc_12180:				; XREF: Obj61_Action
00012ADA 4A28 0038                  		tst.b	$38(a0)
00012ADE 6700                       		beq.s	locret_121C0
00012AE0 0828 0003 0022             		btst	#3,$22(a0)
00012AE6 6600                       		bne.s	loc_1219A
00012AE8 4A28 003E                  		tst.b	$3E(a0)
00012AEC 6700                       		beq.s	locret_121C0
00012AEE 5928 003E                  		subq.b	#4,$3E(a0)
00012AF2 6000                       		bra.s	loc_121A6
00012AF4                            ; ===========================================================================
00012AF4                            
00012AF4                            loc_1219A:
00012AF4 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012AFA 6700                       		beq.s	locret_121C0
00012AFC 5828 003E                  		addq.b	#4,$3E(a0)
00012B00                            
00012B00                            loc_121A6:
00012B00 1028 003E                  		move.b	$3E(a0),d0
00012B04 4EB9 0000 2D64             		jsr	(CalcSine).l
00012B0A 323C 0400                  		move.w	#$400,d1
00012B0E C1C1                       		muls.w	d1,d0
00012B10 4840                       		swap	d0
00012B12 D068 0030                  		add.w	$30(a0),d0
00012B16 3140 000C                  		move.w	d0,$C(a0)
00012B1A                            
00012B1A                            locret_121C0:
00012B1A 4E75                       		rts	
00012B1C                            ; ===========================================================================
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C                            ; Sprite mappings - blocks (LZ)
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C                            Map_obj61:
00012B1C                            	include "_maps\obj61.asm"
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C                            ; Sprite mappings - blocks (LZ)
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012B20 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012B24 01                         byte_121CA:	dc.b 1
00012B25 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012B2A 02                         byte_121D0:	dc.b 2
00012B2B F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012B30 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012B35 01                         byte_121DB:	dc.b 1
00012B36 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012B3B 01                         byte_121E1:	dc.b 1
00012B3C F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012B42 00                         		even
00012B42 00                         		even
00012B42                            
00012B42                            ; ===========================================================================
00012B42                            ; ---------------------------------------------------------------------------
00012B42                            ; Object 62 - gargoyle head (LZ)
00012B42                            ; ---------------------------------------------------------------------------
00012B42                            
00012B42                            Obj62:					; XREF: Obj_Index
00012B42 7000                       		moveq	#0,d0
00012B44 1028 0024                  		move.b	$24(a0),d0
00012B48 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012B4C 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012B50 6000 D2C4                  		bra.w	MarkObjGone
00012B54                            ; ===========================================================================
00012B54 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012B56 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012B58 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012B5A 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012B5C                            
00012B5C 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012B64                            ; ===========================================================================
00012B64                            
00012B64                            Obj62_Main:				; XREF: Obj62_Index
00012B64 5428 0024                  		addq.b	#2,$24(a0)
00012B68 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012B70 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012B76 0028 0004 0001             		ori.b	#4,1(a0)
00012B7C 117C 0003 0018             		move.b	#3,$18(a0)
00012B82 117C 0010 0019             		move.b	#$10,$19(a0)
00012B88 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B8C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012B90 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012B96 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012B9C 0228 000F 0028             		andi.b	#$F,$28(a0)
00012BA2                            
00012BA2                            Obj62_MakeFire:				; XREF: Obj62_Index
00012BA2 5328 001E                  		subq.b	#1,$1E(a0)
00012BA6 6600                       		bne.s	Obj62_NoFire
00012BA8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012BAE 6100 B40E                  		bsr.w	ChkObjOnScreen
00012BB2 6600                       		bne.s	Obj62_NoFire
00012BB4 6100 B638                  		bsr.w	SingleObjLoad
00012BB8 6600                       		bne.s	Obj62_NoFire
00012BBA 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012BBE 5829 0024                  		addq.b	#4,$24(a1)
00012BC2 3368 0008 0008             		move.w	8(a0),8(a1)
00012BC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012BCE 1368 0001 0001             		move.b	1(a0),1(a1)
00012BD4 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012BDA                            
00012BDA                            Obj62_NoFire:
00012BDA 4E75                       		rts	
00012BDC                            ; ===========================================================================
00012BDC                            
00012BDC                            Obj62_FireBall:				; XREF: Obj62_Index
00012BDC 5428 0024                  		addq.b	#2,$24(a0)
00012BE0 117C 0008 0016             		move.b	#8,$16(a0)
00012BE6 117C 0008 0017             		move.b	#8,$17(a0)
00012BEC 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012BF4 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012BFA 0028 0004 0001             		ori.b	#4,1(a0)
00012C00 117C 0004 0018             		move.b	#4,$18(a0)
00012C06 117C 0098 0020             		move.b	#$98,$20(a0)
00012C0C 117C 0008 0019             		move.b	#8,$19(a0)
00012C12 117C 0002 001A             		move.b	#2,$1A(a0)
00012C18 5068 000C                  		addq.w	#8,$C(a0)
00012C1C 317C 0200 0010             		move.w	#$200,$10(a0)
00012C22 0828 0000 0022             		btst	#0,$22(a0)
00012C28 6600                       		bne.s	Obj62_Sound
00012C2A 4468 0010                  		neg.w	$10(a0)
00012C2E                            
00012C2E                            Obj62_Sound:
00012C2E 303C 00AE                  		move.w	#$AE,d0
00012C32 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012C38                            
00012C38                            Obj62_AniFire:				; XREF: Obj62_Index
00012C38 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012C3C 0200 0007                  		andi.b	#7,d0
00012C40 6600                       		bne.s	Obj62_StopFire
00012C42 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012C48                            
00012C48                            Obj62_StopFire:
00012C48 6100 B0DE                  		bsr.w	SpeedToPos
00012C4C 0828 0000 0022             		btst	#0,$22(a0)
00012C52 6600                       		bne.s	Obj62_StopFire2
00012C54 76F8                       		moveq	#-8,d3
00012C56 6100 0000                  		bsr.w	ObjHitWallLeft
00012C5A 4A41                       		tst.w	d1
00012C5C 6B00 B120                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012C60 4E75                       		rts	
00012C62                            ; ===========================================================================
00012C62                            
00012C62                            Obj62_StopFire2:
00012C62 7608                       		moveq	#8,d3
00012C64 6100 0000                  		bsr.w	ObjHitWallRight
00012C68 4A41                       		tst.w	d1
00012C6A 6B00 B112                  		bmi.w	DeleteObject
00012C6E 4E75                       		rts	
00012C70                            ; ===========================================================================
00012C70                            ; ---------------------------------------------------------------------------
00012C70                            ; Sprite mappings - gargoyle head (LZ)
00012C70                            ; ---------------------------------------------------------------------------
00012C70                            Map_obj62:
00012C70                            	include "_maps\obj62.asm"
00012C70                            ; ---------------------------------------------------------------------------
00012C70                            ; Sprite mappings - gargoyle head (LZ)
00012C70                            ; ---------------------------------------------------------------------------
00012C70 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012C74 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012C78 03                         byte_12320:	dc.b 3
00012C79 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012C7E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012C83 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012C88 01                         byte_12330:	dc.b 1
00012C89 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012C8E 01                         byte_12336:	dc.b 1
00012C8F FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012C94                            		even
00012C94                            		even
00012C94                            
00012C94                            ; ===========================================================================
00012C94                            ; ---------------------------------------------------------------------------
00012C94                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012C94                            ; ---------------------------------------------------------------------------
00012C94                            
00012C94                            Obj63:					; XREF: Obj_Index
00012C94 7000                       		moveq	#0,d0
00012C96 1028 0024                  		move.b	$24(a0),d0
00012C9A 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012C9E 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012CA2 3028 0030                  		move.w	$30(a0),d0
00012CA6 0240 FF80                  		andi.w	#$FF80,d0
00012CAA 3238 F700                  		move.w	($FFFFF700).w,d1
00012CAE 0441 0080                  		subi.w	#$80,d1
00012CB2 0241 FF80                  		andi.w	#$FF80,d1
00012CB6 9041                       		sub.w	d1,d0
00012CB8 0C40 0280                  		cmpi.w	#$280,d0
00012CBC 6200                       		bhi.s	loc_1236A
00012CBE                            
00012CBE                            Obj63_Display:				; XREF: loc_1236A
00012CBE 6000 B082                  		bra.w	DisplaySprite
00012CC2                            ; ===========================================================================
00012CC2                            
00012CC2                            loc_1236A:				; XREF: Obj63
00012CC2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012CC8 6600                       		bne.s	loc_12378
00012CCA 0C40 FF80                  		cmpi.w	#-$80,d0
00012CCE 64EE                       		bcc.s	Obj63_Display
00012CD0                            
00012CD0                            loc_12378:
00012CD0 1028 002F                  		move.b	$2F(a0),d0
00012CD4 6A00 B0A8                  		bpl.w	DeleteObject
00012CD8 0240 007F                  		andi.w	#$7F,d0
00012CDC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012CE0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012CE6 6000 B096                  		bra.w	DeleteObject
00012CEA                            ; ===========================================================================
00012CEA 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012CEC 0000                       		dc.w loc_124B2-Obj63_Index
00012CEE 0000                       		dc.w loc_124C2-Obj63_Index
00012CF0 0000                       		dc.w loc_124DE-Obj63_Index
00012CF2                            ; ===========================================================================
00012CF2                            
00012CF2                            Obj63_Main:				; XREF: Obj63_Index
00012CF2 1028 0028                  		move.b	$28(a0),d0
00012CF6 6B00 0000                  		bmi.w	loc_12460
00012CFA 5428 0024                  		addq.b	#2,$24(a0)
00012CFE 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012D06 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012D0C 0028 0004 0001             		ori.b	#4,1(a0)
00012D12 117C 0010 0019             		move.b	#$10,$19(a0)
00012D18 117C 0004 0018             		move.b	#4,$18(a0)
00012D1E 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012D24 6600                       		bne.s	loc_123E2
00012D26 5828 0024                  		addq.b	#4,$24(a0)
00012D2A 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012D30 117C 0001 0018             		move.b	#1,$18(a0)
00012D36 6000 0000                  		bra.w	loc_124DE
00012D3A                            ; ===========================================================================
00012D3A                            
00012D3A                            loc_123E2:
00012D3A 117C 0004 001A             		move.b	#4,$1A(a0)
00012D40 7000                       		moveq	#0,d0
00012D42 1028 0028                  		move.b	$28(a0),d0
00012D46 3200                       		move.w	d0,d1
00012D48 E648                       		lsr.w	#3,d0
00012D4A 0240 001E                  		andi.w	#$1E,d0
00012D4E 45FA 0000                  		lea	Obj63_Data(pc),a2
00012D52 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012D56 315A 0038                  		move.w	(a2)+,$38(a0)
00012D5A 315A 0030                  		move.w	(a2)+,$30(a0)
00012D5E 214A 003C                  		move.l	a2,$3C(a0)
00012D62 0241 000F                  		andi.w	#$F,d1
00012D66 E549                       		lsl.w	#2,d1
00012D68 1141 0038                  		move.b	d1,$38(a0)
00012D6C 117C 0004 003A             		move.b	#4,$3A(a0)
00012D72 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012D76 6700                       		beq.s	loc_1244C
00012D78 117C 0001 003B             		move.b	#1,$3B(a0)
00012D7E 4428 003A                  		neg.b	$3A(a0)
00012D82 7200                       		moveq	#0,d1
00012D84 1228 0038                  		move.b	$38(a0),d1
00012D88 D228 003A                  		add.b	$3A(a0),d1
00012D8C B228 0039                  		cmp.b	$39(a0),d1
00012D90 6500                       		bcs.s	loc_12448
00012D92 1001                       		move.b	d1,d0
00012D94 7200                       		moveq	#0,d1
00012D96 4A00                       		tst.b	d0
00012D98 6A00                       		bpl.s	loc_12448
00012D9A 1228 0039                  		move.b	$39(a0),d1
00012D9E 5901                       		subq.b	#4,d1
00012DA0                            
00012DA0                            loc_12448:
00012DA0 1141 0038                  		move.b	d1,$38(a0)
00012DA4                            
00012DA4                            loc_1244C:
00012DA4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012DAA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012DB0 6100 0000                  		bsr.w	Obj63_ChangeDir
00012DB4 6000 0000                  		bra.w	loc_124B2
00012DB8                            ; ===========================================================================
00012DB8                            
00012DB8                            loc_12460:				; XREF: Obj63_Main
00012DB8 4E75                       		rts
00012DBA 1140 002F                  		move.b	d0,$2F(a0)
00012DBE 0240 007F                  		andi.w	#$7F,d0
00012DC2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012DC6 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012DCC 6600 AFB0                  		bne.w	DeleteObject
00012DD0 D040                       		add.w	d0,d0
00012DD2 0240 001E                  		andi.w	#$1E,d0
00012DD6 0640 0070                  		addi.w	#$70,d0
00012DDA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012DE0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012DE4 321A                       		move.w	(a2)+,d1
00012DE6 2248                       		movea.l	a0,a1
00012DE8 6000                       		bra.s	Obj63_MakePtfms
00012DEA                            ; ===========================================================================
00012DEA                            
00012DEA                            Obj63_Loop:
00012DEA 6100 B402                  		bsr.w	SingleObjLoad
00012DEE 6600                       		bne.s	loc_124AA
00012DF0                            
00012DF0                            Obj63_MakePtfms:			; XREF: loc_12460
00012DF0 12BC 0063                  		move.b	#$63,0(a1)
00012DF4 335A 0008                  		move.w	(a2)+,8(a1)
00012DF8 335A 000C                  		move.w	(a2)+,$C(a1)
00012DFC 301A                       		move.w	(a2)+,d0
00012DFE 1340 0028                  		move.b	d0,$28(a1)
00012E02                            
00012E02                            loc_124AA:
00012E02 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012E06                            
00012E06 588F                       		addq.l	#4,sp
00012E08 4E75                       		rts	
00012E0A                            ; ===========================================================================
00012E0A                            
00012E0A                            loc_124B2:				; XREF: Obj63_Index
00012E0A 7200                       		moveq	#0,d1
00012E0C 1228 0019                  		move.b	$19(a0),d1
00012E10 4EB9 0000 7BF0             		jsr	(PlatformObject).l
00012E16 6000 0000                  		bra.w	sub_12502
00012E1A                            ; ===========================================================================
00012E1A                            
00012E1A                            loc_124C2:				; XREF: Obj63_Index
00012E1A 7200                       		moveq	#0,d1
00012E1C 1228 0019                  		move.b	$19(a0),d1
00012E20 4EB9 0000 7D64             		jsr	(ExitPlatform).l
00012E26 3F28 0008                  		move.w	8(a0),-(sp)
00012E2A 6100 0000                  		bsr.w	sub_12502
00012E2E 341F                       		move.w	(sp)+,d2
00012E30 4EF9 0000 82CE             		jmp	(MvSonicOnPtfm2).l
00012E36                            ; ===========================================================================
00012E36                            
00012E36                            loc_124DE:				; XREF: Obj63_Index
00012E36 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012E3A 0240 0003                  		andi.w	#3,d0
00012E3E 6600                       		bne.s	loc_124FC
00012E40 7201                       		moveq	#1,d1
00012E42 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012E46 6700                       		beq.s	loc_124F2
00012E48 4401                       		neg.b	d1
00012E4A                            
00012E4A                            loc_124F2:
00012E4A D328 001A                  		add.b	d1,$1A(a0)
00012E4E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012E54                            
00012E54                            loc_124FC:
00012E54 588F                       		addq.l	#4,sp
00012E56 6000 CFBE                  		bra.w	MarkObjGone
00012E5A                            
00012E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E5A                            
00012E5A                            
00012E5A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012E5A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012E5E 6700                       		beq.s	loc_12520
00012E60 4A28 003B                  		tst.b	$3B(a0)
00012E64 6600                       		bne.s	loc_12520
00012E66 117C 0001 003B             		move.b	#1,$3B(a0)
00012E6C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012E72 4428 003A                  		neg.b	$3A(a0)
00012E76 6000                       		bra.s	loc_12534
00012E78                            ; ===========================================================================
00012E78                            
00012E78                            loc_12520:
00012E78 3028 0008                  		move.w	8(a0),d0
00012E7C B068 0034                  		cmp.w	$34(a0),d0
00012E80 6600                       		bne.s	loc_1256A
00012E82 3028 000C                  		move.w	$C(a0),d0
00012E86 B068 0036                  		cmp.w	$36(a0),d0
00012E8A 6600                       		bne.s	loc_1256A
00012E8C                            
00012E8C                            loc_12534:
00012E8C 7200                       		moveq	#0,d1
00012E8E 1228 0038                  		move.b	$38(a0),d1
00012E92 D228 003A                  		add.b	$3A(a0),d1
00012E96 B228 0039                  		cmp.b	$39(a0),d1
00012E9A 6500                       		bcs.s	loc_12552
00012E9C 1001                       		move.b	d1,d0
00012E9E 7200                       		moveq	#0,d1
00012EA0 4A00                       		tst.b	d0
00012EA2 6A00                       		bpl.s	loc_12552
00012EA4 1228 0039                  		move.b	$39(a0),d1
00012EA8 5901                       		subq.b	#4,d1
00012EAA                            
00012EAA                            loc_12552:
00012EAA 1141 0038                  		move.b	d1,$38(a0)
00012EAE 2268 003C                  		movea.l	$3C(a0),a1
00012EB2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012EB8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012EBE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012EC2                            
00012EC2                            loc_1256A:
00012EC2 6100 AE64                  		bsr.w	SpeedToPos
00012EC6 4E75                       		rts	
00012EC8                            ; End of function sub_12502
00012EC8                            
00012EC8                            
00012EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EC8                            
00012EC8                            
00012EC8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012EC8 7000                       		moveq	#0,d0
00012ECA 343C FF00                  		move.w	#-$100,d2
00012ECE 3028 0008                  		move.w	8(a0),d0
00012ED2 9068 0034                  		sub.w	$34(a0),d0
00012ED6 6400                       		bcc.s	loc_12584
00012ED8 4440                       		neg.w	d0
00012EDA 4442                       		neg.w	d2
00012EDC                            
00012EDC                            loc_12584:
00012EDC 7200                       		moveq	#0,d1
00012EDE 363C FF00                  		move.w	#-$100,d3
00012EE2 3228 000C                  		move.w	$C(a0),d1
00012EE6 9268 0036                  		sub.w	$36(a0),d1
00012EEA 6400                       		bcc.s	loc_12598
00012EEC 4441                       		neg.w	d1
00012EEE 4443                       		neg.w	d3
00012EF0                            
00012EF0                            loc_12598:
00012EF0 B240                       		cmp.w	d0,d1
00012EF2 6500                       		bcs.s	loc_125C2
00012EF4 3028 0008                  		move.w	8(a0),d0
00012EF8 9068 0034                  		sub.w	$34(a0),d0
00012EFC 6700                       		beq.s	loc_125AE
00012EFE 48C0                       		ext.l	d0
00012F00 E180                       		asl.l	#8,d0
00012F02 81C1                       		divs.w	d1,d0
00012F04 4440                       		neg.w	d0
00012F06                            
00012F06                            loc_125AE:
00012F06 3140 0010                  		move.w	d0,$10(a0)
00012F0A 3143 0012                  		move.w	d3,$12(a0)
00012F0E 4840                       		swap	d0
00012F10 3140 000A                  		move.w	d0,$A(a0)
00012F14 4268 000E                  		clr.w	$E(a0)
00012F18 4E75                       		rts	
00012F1A                            ; ===========================================================================
00012F1A                            
00012F1A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012F1A 3228 000C                  		move.w	$C(a0),d1
00012F1E 9268 0036                  		sub.w	$36(a0),d1
00012F22 6700                       		beq.s	loc_125D4
00012F24 48C1                       		ext.l	d1
00012F26 E181                       		asl.l	#8,d1
00012F28 83C0                       		divs.w	d0,d1
00012F2A 4441                       		neg.w	d1
00012F2C                            
00012F2C                            loc_125D4:
00012F2C 3141 0012                  		move.w	d1,$12(a0)
00012F30 3142 0010                  		move.w	d2,$10(a0)
00012F34 4841                       		swap	d1
00012F36 3141 000E                  		move.w	d1,$E(a0)
00012F3A 4268 000A                  		clr.w	$A(a0)
00012F3E 4E75                       		rts	
00012F40                            ; End of function Obj63_ChangeDir
00012F40                            
00012F40                            ; ===========================================================================
00012F40 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012F42 0000                       		dc.w word_12610-Obj63_Data
00012F44 0000                       		dc.w word_12628-Obj63_Data
00012F46 0000                       		dc.w word_1263C-Obj63_Data
00012F48 0000                       		dc.w word_12650-Obj63_Data
00012F4A 0000                       		dc.w word_12668-Obj63_Data
00012F4C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012F5C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012F68 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012F78 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012F80 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012F94 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012FA8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012FC0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012FD4                            
00012FD4                            ; ---------------------------------------------------------------------------
00012FD4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012FD4                            ; ---------------------------------------------------------------------------
00012FD4                            Map_obj63:
00012FD4                            	include "_maps\obj63.asm"
00012FD4                            ; ---------------------------------------------------------------------------
00012FD4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012FD4                            ; ---------------------------------------------------------------------------
00012FD4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012FD8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012FDC 0000                       		dc.w byte_1269E-Map_obj63
00012FDE 01                         byte_12686:	dc.b 1
00012FDF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012FE4 01                         byte_1268C:	dc.b 1
00012FE5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012FEA 01                         byte_12692:	dc.b 1
00012FEB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012FF0 01                         byte_12698:	dc.b 1
00012FF1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012FF6 01                         byte_1269E:	dc.b 1
00012FF7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012FFC                            		even
00012FFC                            		even
00012FFC                            
00012FFC                            ; ===========================================================================
00012FFC                            ; ---------------------------------------------------------------------------
00012FFC                            ; Object 64 - bubbles (LZ)
00012FFC                            ; ---------------------------------------------------------------------------
00012FFC                            
00012FFC                            Obj64:					; XREF: Obj_Index
00012FFC 7000                       		moveq	#0,d0
00012FFE 1028 0024                  		move.b	$24(a0),d0
00013002 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013006 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001300A                            ; ===========================================================================
0001300A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001300C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001300E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013010 0000                       		dc.w Obj64_Display2-Obj64_Index
00013012 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013014 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013016                            ; ===========================================================================
00013016                            
00013016                            Obj64_Main:				; XREF: Obj64_Index
00013016 5428 0024                  		addq.b	#2,$24(a0)
0001301A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013022 317C 8348 0002             		move.w	#$8348,2(a0)
00013028 117C 0084 0001             		move.b	#$84,1(a0)
0001302E 117C 0010 0019             		move.b	#$10,$19(a0)
00013034 117C 0001 0018             		move.b	#1,$18(a0)
0001303A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001303E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013040 5028 0024                  		addq.b	#8,$24(a0)
00013044 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013048 1140 0032                  		move.b	d0,$32(a0)
0001304C 1140 0033                  		move.b	d0,$33(a0)
00013050 117C 0006 001C             		move.b	#6,$1C(a0)
00013056 6000 0000                  		bra.w	Obj64_BblMaker
0001305A                            ; ===========================================================================
0001305A                            
0001305A                            Obj64_Bubble:				; XREF: Obj64_Main
0001305A 1140 001C                  		move.b	d0,$1C(a0)
0001305E 3168 0008 0030             		move.w	8(a0),$30(a0)
00013064 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001306A 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00013070 1140 0026                  		move.b	d0,$26(a0)
00013074                            
00013074                            Obj64_Animate:				; XREF: Obj64_Index
00013074 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001307A 4EB9 0000 AFC8             		jsr	AnimateSprite
00013080 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013086 6600                       		bne.s	Obj64_ChkWater
00013088 117C 0001 002E             		move.b	#1,$2E(a0)
0001308E                            
0001308E                            Obj64_ChkWater:				; XREF: Obj64_Index
0001308E 3038 F646                  		move.w	($FFFFF646).w,d0
00013092 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013096 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013098                            
00013098                            Obj64_Burst:				; XREF: Obj64_Wobble
00013098 117C 0006 0024             		move.b	#6,$24(a0)
0001309E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000130A2 6000 0000                  		bra.w	Obj64_Display2
000130A6                            ; ===========================================================================
000130A6                            
000130A6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000130A6 1028 0026                  		move.b	$26(a0),d0
000130AA 5228 0026                  		addq.b	#1,$26(a0)
000130AE 0240 007F                  		andi.w	#$7F,d0
000130B2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000130B8 1031 0000                  		move.b	(a1,d0.w),d0
000130BC 4880                       		ext.w	d0
000130BE D068 0030                  		add.w	$30(a0),d0
000130C2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000130C6 4A28 002E                  		tst.b	$2E(a0)
000130CA 6700                       		beq.s	Obj64_Display
000130CC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000130D0 6700                       		beq.s	Obj64_Display	; if not, branch
000130D2                            
000130D2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000130D6 303C 00AD                  		move.w	#$AD,d0
000130DA 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000130E0 43F8 D000                  		lea	($FFFFD000).w,a1
000130E4 4269 0010                  		clr.w	$10(a1)
000130E8 4269 0012                  		clr.w	$12(a1)
000130EC 4269 0014                  		clr.w	$14(a1)
000130F0 137C 0015 001C             		move.b	#$15,$1C(a1)
000130F6 337C 0023 003E             		move.w	#$23,$3E(a1)
000130FC 137C 0000 003C             		move.b	#0,$3C(a1)
00013102 08A9 0005 0022             		bclr	#5,$22(a1)
00013108 08A9 0004 0022             		bclr	#4,$22(a1)
0001310E 0829 0002 0022             		btst	#2,$22(a1)
00013114 6700 FF82                  		beq.w	Obj64_Burst
00013118 08A9 0002 0022             		bclr	#2,$22(a1)
0001311E 137C 0013 0016             		move.b	#$13,$16(a1)
00013124 137C 0009 0017             		move.b	#9,$17(a1)
0001312A 5B69 000C                  		subq.w	#5,$C(a1)
0001312E 6000 FF68                  		bra.w	Obj64_Burst
00013132                            ; ===========================================================================
00013132                            
00013132                            Obj64_Display:				; XREF: Obj64_Wobble
00013132 6100 ABF4                  		bsr.w	SpeedToPos
00013136 4A28 0001                  		tst.b	1(a0)
0001313A 6A00                       		bpl.s	Obj64_Delete
0001313C 4EFA AC04                  		jmp	DisplaySprite
00013140                            ; ===========================================================================
00013140                            
00013140                            Obj64_Delete:
00013140 4EFA AC3C                  		jmp	DeleteObject
00013144                            ; ===========================================================================
00013144                            
00013144                            Obj64_Display2:				; XREF: Obj64_Index
00013144 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001314A 4EB9 0000 AFC8             		jsr	AnimateSprite
00013150 4A28 0001                  		tst.b	1(a0)
00013154 6A00                       		bpl.s	Obj64_Delete2
00013156 4EFA ABEA                  		jmp	DisplaySprite
0001315A                            ; ===========================================================================
0001315A                            
0001315A                            Obj64_Delete2:
0001315A 4EFA AC22                  		jmp	DeleteObject
0001315E                            ; ===========================================================================
0001315E                            
0001315E                            Obj64_Delete3:				; XREF: Obj64_Index
0001315E 6000 AC1E                  		bra.w	DeleteObject
00013162                            ; ===========================================================================
00013162                            
00013162                            Obj64_BblMaker:				; XREF: Obj64_Index
00013162 4A68 0036                  		tst.w	$36(a0)
00013166 6600                       		bne.s	loc_12874
00013168 3038 F646                  		move.w	($FFFFF646).w,d0
0001316C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013170 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013174 4A28 0001                  		tst.b	1(a0)
00013178 6A00 0000                  		bpl.w	Obj64_ChkDel
0001317C 5368 0038                  		subq.w	#1,$38(a0)
00013180 6A00 0000                  		bpl.w	loc_12914
00013184 317C 0001 0036             		move.w	#1,$36(a0)
0001318A                            
0001318A                            loc_1283A:
0001318A 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00013190 3200                       		move.w	d0,d1
00013192 0240 0007                  		andi.w	#7,d0
00013196 0C40 0006                  		cmpi.w	#6,d0
0001319A 64EE                       		bcc.s	loc_1283A
0001319C                            
0001319C 1140 0034                  		move.b	d0,$34(a0)
000131A0 0241 000C                  		andi.w	#$C,d1
000131A4 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000131AA D2C1                       		adda.w	d1,a1
000131AC 2149 003C                  		move.l	a1,$3C(a0)
000131B0 5328 0032                  		subq.b	#1,$32(a0)
000131B4 6A00                       		bpl.s	loc_12872
000131B6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000131BC 08E8 0007 0036             		bset	#7,$36(a0)
000131C2                            
000131C2                            loc_12872:
000131C2 6000                       		bra.s	loc_1287C
000131C4                            ; ===========================================================================
000131C4                            
000131C4                            loc_12874:				; XREF: Obj64_BblMaker
000131C4 5368 0038                  		subq.w	#1,$38(a0)
000131C8 6A00 0000                  		bpl.w	loc_12914
000131CC                            
000131CC                            loc_1287C:
000131CC 4EB9 0000 2D3E             		jsr	(RandomNumber).l
000131D2 0240 001F                  		andi.w	#$1F,d0
000131D6 3140 0038                  		move.w	d0,$38(a0)
000131DA 6100 B012                  		bsr.w	SingleObjLoad
000131DE 6600                       		bne.s	loc_128F8
000131E0 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000131E4 3368 0008 0008             		move.w	8(a0),8(a1)
000131EA 4EB9 0000 2D3E             		jsr	(RandomNumber).l
000131F0 0240 000F                  		andi.w	#$F,d0
000131F4 5140                       		subq.w	#8,d0
000131F6 D169 0008                  		add.w	d0,8(a1)
000131FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013200 7000                       		moveq	#0,d0
00013202 1028 0034                  		move.b	$34(a0),d0
00013206 2468 003C                  		movea.l	$3C(a0),a2
0001320A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013210 0828 0007 0036             		btst	#7,$36(a0)
00013216 6700                       		beq.s	loc_128F8
00013218 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001321E 0240 0003                  		andi.w	#3,d0
00013222 6600                       		bne.s	loc_128E4
00013224 08E8 0006 0036             		bset	#6,$36(a0)
0001322A 6600                       		bne.s	loc_128F8
0001322C 137C 0002 0028             		move.b	#2,$28(a1)
00013232                            
00013232                            loc_128E4:
00013232 4A28 0034                  		tst.b	$34(a0)
00013236 6600                       		bne.s	loc_128F8
00013238 08E8 0006 0036             		bset	#6,$36(a0)
0001323E 6600                       		bne.s	loc_128F8
00013240 137C 0002 0028             		move.b	#2,$28(a1)
00013246                            
00013246                            loc_128F8:
00013246 5328 0034                  		subq.b	#1,$34(a0)
0001324A 6A00                       		bpl.s	loc_12914
0001324C 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00013252 0240 007F                  		andi.w	#$7F,d0
00013256 0640 0080                  		addi.w	#$80,d0
0001325A D168 0038                  		add.w	d0,$38(a0)
0001325E 4268 0036                  		clr.w	$36(a0)
00013262                            
00013262                            loc_12914:
00013262 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013268 4EB9 0000 AFC8             		jsr	AnimateSprite
0001326E                            
0001326E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001326E 3028 0008                  		move.w	8(a0),d0
00013272 0240 FF80                  		andi.w	#$FF80,d0
00013276 3238 F700                  		move.w	($FFFFF700).w,d1
0001327A 0441 0080                  		subi.w	#$80,d1
0001327E 0241 FF80                  		andi.w	#$FF80,d1
00013282 9041                       		sub.w	d1,d0
00013284 0C40 0280                  		cmpi.w	#$280,d0
00013288 6200 AAF4                  		bhi.w	DeleteObject
0001328C 3038 F646                  		move.w	($FFFFF646).w,d0
00013290 B068 000C                  		cmp.w	$C(a0),d0
00013294 6500 AAAC                  		bcs.w	DisplaySprite
00013298 4E75                       		rts	
0001329A                            ; ===========================================================================
0001329A                            ; bubble production sequence
0001329A                            
0001329A                            ; 0 = small bubble, 1 =	large bubble
0001329A                            
0001329A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000132AC                            
000132AC                            ; ===========================================================================
000132AC                            
000132AC                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000132AC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000132B0 6B00                       		bmi.s	loc_12998
000132B2 43F8 D000                  		lea	($FFFFD000).w,a1
000132B6 3029 0008                  		move.w	8(a1),d0
000132BA 3228 0008                  		move.w	8(a0),d1
000132BE 0441 0010                  		subi.w	#$10,d1
000132C2 B240                       		cmp.w	d0,d1
000132C4 6400                       		bcc.s	loc_12998
000132C6 0641 0020                  		addi.w	#$20,d1
000132CA B240                       		cmp.w	d0,d1
000132CC 6500                       		bcs.s	loc_12998
000132CE 3029 000C                  		move.w	$C(a1),d0
000132D2 3228 000C                  		move.w	$C(a0),d1
000132D6 B240                       		cmp.w	d0,d1
000132D8 6400                       		bcc.s	loc_12998
000132DA 0641 0010                  		addi.w	#$10,d1
000132DE B240                       		cmp.w	d0,d1
000132E0 6500                       		bcs.s	loc_12998
000132E2 7001                       		moveq	#1,d0
000132E4 4E75                       		rts	
000132E6                            ; ===========================================================================
000132E6                            
000132E6                            loc_12998:
000132E6 7000                       		moveq	#0,d0
000132E8 4E75                       		rts	
000132EA                            ; ===========================================================================
000132EA                            Ani_obj64:
000132EA                            	include "_anim\obj64.asm"
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            ; Animation script - bubbles (LZ)
000132EA                            ; ---------------------------------------------------------------------------
000132EA 0000                       		dc.w byte_129AA-Ani_obj64
000132EC 0000                       		dc.w byte_129B0-Ani_obj64
000132EE 0000                       		dc.w byte_129B6-Ani_obj64
000132F0 0000                       		dc.w byte_129BE-Ani_obj64
000132F2 0000                       		dc.w byte_129BE-Ani_obj64
000132F4 0000                       		dc.w byte_129C0-Ani_obj64
000132F6 0000                       		dc.w byte_129C6-Ani_obj64
000132F8 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000132FE 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013304 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001330C 04FC                       byte_129BE:	dc.b 4,	$FC
0001330E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013314 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001331A 00                         		even
0001331A 00                         		even
0001331A                            
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            ; Sprite mappings - bubbles (LZ)
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            Map_obj64:
0001331A                            	include "_maps\obj64.asm"
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            ; Sprite mappings - bubbles (LZ)
0001331A                            ; ---------------------------------------------------------------------------
0001331A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001331E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013322 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013326 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001332A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001332E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013332 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013336 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001333A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001333E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013342 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013346 0000                       		dc.w byte_12A9C-Map_obj64
00013348 01                         byte_129FA:	dc.b 1
00013349 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001334E 01                         byte_12A00:	dc.b 1
0001334F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013354 01                         byte_12A06:	dc.b 1
00013355 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001335A 01                         byte_12A0C:	dc.b 1
0001335B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013360 01                         byte_12A12:	dc.b 1
00013361 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013366 01                         byte_12A18:	dc.b 1
00013367 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001336C 01                         byte_12A1E:	dc.b 1
0001336D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013372 04                         byte_12A24:	dc.b 4
00013373 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013378 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001337D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013382 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013387 04                         byte_12A39:	dc.b 4
00013388 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001338D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013392 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013397 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001339C 01                         byte_12A4E:	dc.b 1
0001339D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000133A2 01                         byte_12A54:	dc.b 1
000133A3 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000133A8 01                         byte_12A5A:	dc.b 1
000133A9 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000133AE 01                         byte_12A60:	dc.b 1
000133AF F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000133B4 01                         byte_12A66:	dc.b 1
000133B5 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000133BA 01                         byte_12A6C:	dc.b 1
000133BB F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000133C0 01                         byte_12A72:	dc.b 1
000133C1 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000133C6 01                         byte_12A78:	dc.b 1
000133C7 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000133CC 01                         byte_12A7E:	dc.b 1
000133CD F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000133D2 01                         byte_12A84:	dc.b 1
000133D3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000133D8 01                         byte_12A8A:	dc.b 1
000133D9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000133DE 01                         byte_12A90:	dc.b 1
000133DF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000133E4 01                         byte_12A96:	dc.b 1
000133E5 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000133EA 00                         byte_12A9C:	dc.b 0
000133EC 00                         		even
000133EC 00                         		even
000133EC                            
000133EC                            ; ===========================================================================
000133EC                            ; ---------------------------------------------------------------------------
000133EC                            ; Object 65 - waterfalls (LZ)
000133EC                            ; ---------------------------------------------------------------------------
000133EC                            
000133EC                            Obj65:					; XREF: Obj_Index
000133EC 7000                       		moveq	#0,d0
000133EE 1028 0024                  		move.b	$24(a0),d0
000133F2 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000133F6 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000133FA                            ; ===========================================================================
000133FA 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000133FC 0000                       		dc.w Obj65_Animate-Obj65_Index
000133FE 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013400 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013402 0000                       		dc.w loc_12B36-Obj65_Index
00013404                            ; ===========================================================================
00013404                            
00013404                            Obj65_Main:				; XREF: Obj65_Index
00013404 5828 0024                  		addq.b	#4,$24(a0)
00013408 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013410 317C 4259 0002             		move.w	#$4259,2(a0)
00013416 0028 0004 0001             		ori.b	#4,1(a0)
0001341C 117C 0018 0019             		move.b	#$18,$19(a0)
00013422 117C 0001 0018             		move.b	#1,$18(a0)
00013428 1028 0028                  		move.b	$28(a0),d0	; get object type
0001342C 6A00                       		bpl.s	loc_12AE6
0001342E 08E8 0007 0002             		bset	#7,2(a0)
00013434                            
00013434                            loc_12AE6:
00013434 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013438 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001343C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013440 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013442 4228 0018                  		clr.b	$18(a0)
00013446 5528 0024                  		subq.b	#2,$24(a0)
0001344A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013450 6700                       		beq.s	loc_12B0A	; if not, branch
00013452 117C 0006 0024             		move.b	#6,$24(a0)
00013458                            
00013458                            loc_12B0A:
00013458 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001345E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013460 117C 0008 0024             		move.b	#8,$24(a0)
00013466                            
00013466                            Obj65_Animate:				; XREF: Obj65_Index
00013466 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001346C 4EB9 0000 AFC8             		jsr	AnimateSprite
00013472                            
00013472                            Obj65_ChkDel:				; XREF: Obj65_Index
00013472 6000 C9A2                  		bra.w	MarkObjGone
00013476                            ; ===========================================================================
00013476                            
00013476                            Obj65_FixHeight:			; XREF: Obj65_Index
00013476 3038 F646                  		move.w	($FFFFF646).w,d0
0001347A 0440 0010                  		subi.w	#$10,d0
0001347E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013482 60E2                       		bra.s	Obj65_Animate
00013484                            ; ===========================================================================
00013484                            
00013484                            loc_12B36:				; XREF: Obj65_Index
00013484 08A8 0007 0002             		bclr	#7,2(a0)
0001348A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013490 6600                       		bne.s	Obj65_Animate2
00013492 08E8 0007 0002             		bset	#7,2(a0)
00013498                            
00013498                            Obj65_Animate2:
00013498 60CC                       		bra.s	Obj65_Animate
0001349A                            ; ===========================================================================
0001349A                            Ani_obj65:
0001349A                            	include "_anim\obj65.asm"
0001349A                            ; ---------------------------------------------------------------------------
0001349A                            ; Animation script - waterfall (LZ)
0001349A                            ; ---------------------------------------------------------------------------
0001349A 0000                       		dc.w byte_12B4E-Ani_obj65
0001349C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000134A2 00                         		even
000134A2 00                         		even
000134A2                            
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Sprite mappings - waterfalls (LZ)
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            Map_obj65:
000134A2                            	include "_maps\obj65.asm"
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Sprite mappings - waterfalls (LZ)
000134A2                            ; ---------------------------------------------------------------------------
000134A2 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000134A6 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000134AA 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000134AE 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000134B2 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000134B6 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000134BA 01                         byte_12B6C:	dc.b 1
000134BB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000134C0 02                         byte_12B72:	dc.b 2
000134C1 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000134C6 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000134CB 02                         byte_12B7D:	dc.b 2
000134CC F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000134D1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000134D6 01                         byte_12B88:	dc.b 1
000134D7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000134DC 02                         byte_12B8E:	dc.b 2
000134DD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000134E2 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000134E7 01                         byte_12B99:	dc.b 1
000134E8 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000134ED 01                         byte_12B9F:	dc.b 1
000134EE F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000134F3 01                         byte_12BA5:	dc.b 1
000134F4 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000134F9 02                         byte_12BAB:	dc.b 2
000134FA F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000134FF 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013504 02                         byte_12BB6:	dc.b 2
00013505 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001350A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001350F 02                         byte_12BC1:	dc.b 2
00013510 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013515 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001351A 02                         byte_12BCC:	dc.b 2
0001351B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013520 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013526 00                         		even
00013526 00                         		even
00013526                            
00013526                            ; ===========================================================================
00013526                            ; ---------------------------------------------------------------------------
00013526                            ; Object 01 - Sonic
00013526                            ; ---------------------------------------------------------------------------
00013526                            
00013526                            Obj01:					; XREF: Obj_Index
00013526 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001352A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001352C 4EF9 0000 0000             		jmp	DebugMode
00013532                            ; ===========================================================================
00013532                            
00013532                            Obj01_Normal:
00013532 7000                       		moveq	#0,d0
00013534 1028 0024                  		move.b	$24(a0),d0
00013538 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001353C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013540                            ; ===========================================================================
00013540 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013542 0000                       		dc.w Obj01_Control-Obj01_Index
00013544 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013546 0000                       		dc.w Obj01_Death-Obj01_Index
00013548 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001354A                            ; ===========================================================================
0001354A                            
0001354A                            Obj01_Main:				; XREF: Obj01_Index
0001354A 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
00013550 5428 0024                  		addq.b	#2,$24(a0)
00013554 117C 0013 0016             		move.b	#$13,$16(a0)
0001355A 117C 0009 0017             		move.b	#9,$17(a0)
00013560 0C38 0001 FFF9             		cmpi.b	#$01, ($FFFFFFF9).w	; is the multiple character flag set to $01?
00013566 6600                       		bne.s	PepsimanMapLoad		; if not, load Sonic's art
00013568 217C 0000 0000 0004        		move.l	#Map_Pepsi,4(a0)
00013570 317C 0780 0002             		move.w	#$780,2(a0)
00013576 4EF9 0000 0000             		jmp	Obj01Cont
0001357C                            
0001357C                            PepsimanMapLoad:
0001357C 0C38 0003 FFF9             		cmpi.b	#$03, ($FFFFFFF9).w	; is the multiple character flag set to $01?
00013582 6600                       		bne.s	SonicMapLoad		; if not, load Sonic's art
00013584 217C 0000 0000 0004        		move.l	#Map_Pepsiman,4(a0)
0001358C 317C 0780 0002             		move.w	#$780,2(a0)
00013592 4EF9 0000 0000             		jmp	Obj01Cont
00013598                            		
00013598                            SonicMapLoad:
00013598 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000135A0 317C 0780 0002             		move.w	#$780,2(a0)
000135A6                            
000135A6                            Obj01Cont:		
000135A6 117C 0002 0018             		move.b	#2,$18(a0)
000135AC 117C 0018 0019             		move.b	#$18,$19(a0)
000135B2 117C 0004 0001             		move.b	#4,1(a0)
000135B8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000135BE 31FC 0017 F762             		move.w	#$17,($FFFFF762).w ; Sonic's acceleration
000135C4 31FC 008A F764             		move.w	#$8A,($FFFFF764).w ; Sonic's deceleration
000135CA                            
000135CA                            Obj01_Control:				; XREF: Obj01_Index
000135CA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000135CE 6700                       		beq.s	loc_12C58	; if not, branch
000135D0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000135D6 6700                       		beq.s	loc_12C58	; if not, branch
000135D8 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000135DE 4238 F7CC                  		clr.b	($FFFFF7CC).w
000135E2 4E75                       		rts	
000135E4                            ; ===========================================================================
000135E4                            
000135E4                            loc_12C58:
000135E4 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000135E8 6600                       		bne.s	loc_12C64	; if yes, branch
000135EA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000135F0                            
000135F0                            loc_12C64:
000135F0 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000135F6 6600                       		bne.s	loc_12C7E	; if yes, branch
000135F8 7000                       		moveq	#0,d0
000135FA 1028 0022                  		move.b	$22(a0),d0
000135FE 0240 0006                  		andi.w	#6,d0
00013602 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013606 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001360A                            
0001360A                            loc_12C7E:
0001360A 6100                       		bsr.s	Sonic_Display
0001360C 6100 0000                  		bsr.w	Sonic_RecordPos
00013610 6100 0000                  		bsr.w	Sonic_Water
00013614 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001361A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013620 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013624 6700                       		beq.s	loc_12CA6
00013626 4A28 001C                  		tst.b	$1C(a0)
0001362A 6600                       		bne.s	loc_12CA6
0001362C 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013632                            
00013632                            loc_12CA6:
00013632 6100 0000                  		bsr.w	Sonic_Animate
00013636 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001363A 6B00                       		bmi.s	loc_12CB6
0001363C 4EB9 0000 0000             		jsr	TouchResponse
00013642                            
00013642                            loc_12CB6:
00013642 6100 0000                  		bsr.w	Sonic_Loops
00013646 6100 0000                  		bsr.w	LoadSonicDynPLC
0001364A 4E75                       		rts	
0001364C                            ; ===========================================================================
0001364C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001364E 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013650 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013652 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013654                            ; ---------------------------------------------------------------------------
00013654                            ; Music	to play	after invincibility wears off
00013654                            ; ---------------------------------------------------------------------------
00013654                            MusicList2:	incbin	misc\muslist2.bin
0001365E 00                         		even
0001365E                            ; ===========================================================================
0001365E                            
0001365E                            Sonic_Display:				; XREF: loc_12C7E
0001365E 3028 0030                  		move.w	$30(a0),d0
00013662 6700                       		beq.s	Obj01_Display
00013664 5368 0030                  		subq.w	#1,$30(a0)
00013668 E648                       		lsr.w	#3,d0
0001366A 6400                       		bcc.s	Obj01_ChkInvin
0001366C                            
0001366C                            Obj01_Display:
0001366C 4EBA A6D4                  		jsr	DisplaySprite
00013670                            
00013670                            Obj01_ChkInvin:
00013670 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013674 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00013676 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001367A 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001367C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013680 6600                       		bne.s	Obj01_ChkShoes
00013682 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013686 6600                       		bne.s	Obj01_RmvInvin
00013688 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001368E 6500                       		bcs.s	Obj01_RmvInvin
00013690 7000                       		moveq	#0,d0
00013692 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013696 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
0001369C 6600                       		bne.s	Obj01_PlayMusic
0001369E 7005                       		moveq	#5,d0		; play SBZ music
000136A0                            
000136A0                            Obj01_PlayMusic:
000136A0 43F9 0000 3C72             		lea    (MusicList).l,a1     ; load standard music playlist
000136A6 0C38 0001 FE2A             		cmp.b #1,($FFFFFE2A).w                ; is this RAM address actually 1?
000136AC 6600                       		bne.s @loaderoni2                        ; if not, branch
000136AE 43F9 0001 3654             		lea    (MusicList2).l,a1    ; otherwise, load alternate music playlist
000136B4                            @loaderoni2:
000136B4 1031 0000                  		move.b    (a1,d0.w),d0                ; get the index
000136B8 4EB9 0000 11AE             		jsr	(PlaySound).l	; play normal music
000136BE                            
000136BE                            Obj01_RmvInvin:
000136BE 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000136C4                            
000136C4                            Obj01_ChkShoes:
000136C4 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000136C8 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000136CA 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000136CE 6700                       		beq.s	Obj01_ExitChk
000136D0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000136D4 6600                       		bne.s	Obj01_ExitChk
000136D6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000136DC 31FC 0017 F762             		move.w	#$17,($FFFFF762).w ; restore Sonic's acceleration
000136E2 31FC 008A F764             		move.w	#$8A,($FFFFF764).w ; restore Sonic's deceleration
000136E8 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000136EE 303C 00E3                  		move.w	#$E3,d0
000136F2 4EF9 0000 11AE             		jmp	(PlaySound).l	; run music at normal speed
000136F8                            ; ===========================================================================
000136F8                            
000136F8                            Obj01_ExitChk:
000136F8 4E75                       		rts	
000136FA                            
000136FA                            ; ---------------------------------------------------------------------------
000136FA                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000136FA                            ; ---------------------------------------------------------------------------
000136FA                            
000136FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136FA                            
000136FA                            
000136FA                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000136FA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000136FE 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013702 43F1 0000                  		lea	(a1,d0.w),a1
00013706 32E8 0008                  		move.w	8(a0),(a1)+
0001370A 32E8 000C                  		move.w	$C(a0),(a1)+
0001370E 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013712 4E75                       		rts	
00013714                            ; End of function Sonic_RecordPos
00013714                            
00013714                            ; ---------------------------------------------------------------------------
00013714                            ; Subroutine for Sonic when he's underwater
00013714                            ; ---------------------------------------------------------------------------
00013714                            
00013714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013714                            
00013714                            
00013714                            Sonic_Water:				; XREF: loc_12C7E
00013714 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001371A 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001371C                            
0001371C                            locret_12D80:
0001371C 4E75                       		rts	
0001371E                            ; ===========================================================================
0001371E                            
0001371E                            Obj01_InWater:
0001371E 3038 F646                  		move.w	($FFFFF646).w,d0
00013722 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013726 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013728 08E8 0006 0022             		bset	#6,$22(a0)
0001372E 66EC                       		bne.s	locret_12D80
00013730 6100 0000                  		bsr.w	ResumeMusic
00013734 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001373A 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013740 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013746 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001374C 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013752 E0E8 0010                  		asr	$10(a0)
00013756 E0E8 0012                  		asr	$12(a0)
0001375A E0E8 0012                  		asr	$12(a0)
0001375E 67BC                       		beq.s	locret_12D80
00013760 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013766 303C 00AA                  		move.w	#$AA,d0
0001376A 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play splash sound
00013770                            ; ===========================================================================
00013770                            
00013770                            Obj01_OutWater:
00013770 08A8 0006 0022             		bclr	#6,$22(a0)
00013776 67A4                       		beq.s	locret_12D80
00013778 6100 0000                  		bsr.w	ResumeMusic
0001377C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013782 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013788 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001378E E1E8 0012                  		asl	$12(a0)
00013792 6700 FF88                  		beq.w	locret_12D80
00013796 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001379C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000137A2 6E00                       		bgt.s	loc_12E0E
000137A4 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000137AA                            
000137AA                            loc_12E0E:
000137AA 303C 00AA                  		move.w	#$AA,d0
000137AE 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play splash sound
000137B4                            ; End of function Sonic_Water
000137B4                            
000137B4                            ; ===========================================================================
000137B4                            ; ---------------------------------------------------------------------------
000137B4                            ; Modes	for controlling	Sonic
000137B4                            ; ---------------------------------------------------------------------------
000137B4                            
000137B4                            Obj01_MdNormal:				; XREF: Obj01_Modes
000137B4 4EB9 0000 0000             		jsr	Sonic_SpinDash
000137BA 6100 0000                  		bsr.w	Sonic_Jump
000137BE 6100 0000                  		bsr.w	Sonic_SlopeResist
000137C2 6100 0000                  		bsr.w	Sonic_Move
000137C6 6100 0000                  		bsr.w	Sonic_Roll
000137CA 6100 0000                  		bsr.w	Sonic_LevelBound
000137CE 4EBA A558                  		jsr	SpeedToPos
000137D2 6100 0000                  		bsr.w	Sonic_AnglePos
000137D6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000137DA 4E75                       		rts	
000137DC                            ; ===========================================================================
000137DC                            
000137DC                            Obj01_MdJump:				; XREF: Obj01_Modes
000137DC 6100 0000                  		bsr.w Sonic_DropMove
000137E0 6100 0000                  		bsr.w Sonic_DoubleJump
000137E4 6100 0000                  		bsr.w Sonic_Jumpdash
000137E8 6100 0000                  		bsr.w	Sonic_JumpHeight
000137EC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000137F0 6100 0000                  		bsr.w	Sonic_LevelBound
000137F4 4EBA A512                  		jsr	ObjectFall
000137F8 0828 0006 0022             		btst	#6,$22(a0)
000137FE 6700                       		beq.s	loc_12E5C
00013800 0468 0028 0012             		subi.w	#$28,$12(a0)
00013806                            
00013806                            loc_12E5C:
00013806 0C68 1000 0012             		cmpi.w    #$1000,$12(a0)	; epic falling speed cap
0001380C 6D00                       		blt.s    sonicswallowsabiglargebanana
0001380E 317C 1000 0012             		move.w    #$1000,$12(a0)
00013814                            
00013814                            sonicswallowsabiglargebanana:
00013814 6100 0000                  		bsr.w	Sonic_JumpAngle
00013818 6100 0000                  		bsr.w	Sonic_Floor
0001381C 4E75                       		rts	
0001381E                            ; ===========================================================================
0001381E                            
0001381E                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001381E 6100 0000                  		bsr.w	Sonic_Jump
00013822 6100 0000                  		bsr.w	Sonic_RollRepel
00013826 6100 0000                  		bsr.w	Sonic_RollSpeed
0001382A 6100 0000                  		bsr.w	Sonic_LevelBound
0001382E 4EBA A4F8                  		jsr	SpeedToPos
00013832 6100 0000                  		bsr.w	Sonic_AnglePos
00013836 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001383A 4E75                       		rts	
0001383C                            ; ===========================================================================
0001383C                            
0001383C                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001383C 6100 0000                  		bsr.w Sonic_DropDash
00013840 6100 0000                  		bsr.w Sonic_DropMove
00013844 6100 0000                  		bsr.w Sonic_DoubleJump
00013848 6100 0000                  		bsr.w Sonic_Jumpdash
0001384C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013850 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013854 6100 0000                  		bsr.w	Sonic_LevelBound
00013858 4EBA A4AE                  		jsr	ObjectFall
0001385C 0828 0006 0022             		btst	#6,$22(a0)
00013862 6700                       		beq.s	loc_12EA6
00013864 0468 0028 0012             		subi.w	#$28,$12(a0)
0001386A                            
0001386A                            loc_12EA6:
0001386A 0C68 1000 0012             		cmpi.w    #$1000,$12(a0)
00013870 6D00                       		blt.s    helloguysandwelcometogametheroy
00013872 317C 1000 0012             		move.w    #$1000,$12(a0)
00013878                            
00013878                            helloguysandwelcometogametheroy:		
00013878 6100 0000                  		bsr.w	Sonic_JumpAngle
0001387C 6100 0000                  		bsr.w	Sonic_Floor
00013880 4E75                       		rts	
00013882                            ; ---------------------------------------------------------------------------
00013882                            ; Subroutine to	make Sonic walk/run
00013882                            ; ---------------------------------------------------------------------------
00013882                            
00013882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013882                            
00013882                            
00013882                            Sonic_Move:				; XREF: Obj01_MdNormal
00013882 3C38 F760                  		move.w	($FFFFF760).w,d6
00013886 3A38 F762                  		move.w	($FFFFF762).w,d5
0001388A 3838 F764                  		move.w	($FFFFF764).w,d4
0001388E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013892 6600 0000                  		bne.w	loc_12FEE
00013896 4A68 003E                  		tst.w	$3E(a0)
0001389A 6600 0000                  		bne.w	Obj01_ResetScr
0001389E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138A4 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000138A6 6100 0000                  		bsr.w	Sonic_MoveLeft
000138AA                            
000138AA                            Obj01_NotLeft:
000138AA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138B0 6700                       		beq.s	Obj01_NotRight	; if not, branch
000138B2 6100 0000                  		bsr.w	Sonic_MoveRight
000138B6                            
000138B6                            Obj01_NotRight:
000138B6 1028 0026                  		move.b	$26(a0),d0
000138BA 0600 0020                  		addi.b	#$20,d0
000138BE 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000138C2 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000138C6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000138CA 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000138CE 08A8 0005 0022             		bclr	#5,$22(a0)
000138D4 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000138DA 0828 0003 0022             		btst	#3,$22(a0)
000138E0 6700                       		beq.s	Sonic_Balance
000138E2 7000                       		moveq	#0,d0
000138E4 1028 003D                  		move.b	$3D(a0),d0
000138E8 ED48                       		lsl.w	#6,d0
000138EA 43F8 D000                  		lea	($FFFFD000).w,a1
000138EE 43F1 0000                  		lea	(a1,d0.w),a1
000138F2 4A29 0022                  		tst.b	$22(a1)
000138F6 6B00                       		bmi.s	Sonic_LookUp
000138F8 7200                       		moveq	#0,d1
000138FA 1229 0019                  		move.b	$19(a1),d1
000138FE 3401                       		move.w	d1,d2
00013900 D442                       		add.w	d2,d2
00013902 5942                       		subq.w	#4,d2
00013904 D268 0008                  		add.w	8(a0),d1
00013908 9269 0008                  		sub.w	8(a1),d1
0001390C 0C41 0004                  		cmpi.w	#4,d1
00013910 6D00                       		blt.s	loc_12F6A
00013912 B242                       		cmp.w	d2,d1
00013914 6C00                       		bge.s	loc_12F5A
00013916 6000                       		bra.s	Sonic_LookUp
00013918                            ; ===========================================================================
00013918                            
00013918                            Sonic_Balance:
00013918 4EB9 0000 0000             		jsr	ObjHitFloor
0001391E 0C41 000C                  		cmpi.w	#$C,d1
00013922 6D00                       		blt.s	Sonic_LookUp
00013924 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001392A 6600                       		bne.s	loc_12F62
0001392C                            
0001392C                            loc_12F5A:
0001392C 08A8 0000 0022             		bclr	#0,$22(a0)
00013932 6000                       		bra.s	loc_12F70
00013934                            ; ===========================================================================
00013934                            
00013934                            loc_12F62:
00013934 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001393A 6600                       		bne.s	Sonic_LookUp
0001393C                            
0001393C                            loc_12F6A:
0001393C 08E8 0000 0022             		bset	#0,$22(a0)
00013942                            
00013942                            loc_12F70:
00013942 117C 0005 001C             		move.b	#5,$1C(a0)	; use "balancing" animation
00013948 6000                       		bra.s	Obj01_ResetScr
0001394A                            ; ===========================================================================
0001394A                            
0001394A                            Sonic_LookUp:
0001394A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013950 6700                       		beq.s	Sonic_Duck	; if not, branch
00013952 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013958 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001395E 6700                       		beq.s	loc_12FC2
00013960 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013964 6000                       		bra.s	loc_12FC2
00013966                            ; ===========================================================================
00013966                            
00013966                            Sonic_Duck:
00013966 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001396C 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001396E 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013974 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001397A 6700                       		beq.s	loc_12FC2
0001397C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013980 6000                       		bra.s	loc_12FC2
00013982                            ; ===========================================================================
00013982                            
00013982                            Obj01_ResetScr:
00013982 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013988 6700                       		beq.s	loc_12FC2	; if yes, branch
0001398A 6400                       		bcc.s	loc_12FBE
0001398C 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013990                            
00013990                            loc_12FBE:
00013990 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013994                            
00013994                            loc_12FC2:
00013994 1038 F602                  		move.b	($FFFFF602).w,d0
00013998 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001399C 6600                       		bne.s	loc_12FEE	; if yes, branch
0001399E 3028 0014                  		move.w	$14(a0),d0
000139A2 6700                       		beq.s	loc_12FEE
000139A4 6B00                       		bmi.s	loc_12FE2
000139A6 9045                       		sub.w	d5,d0
000139A8 6400                       		bcc.s	loc_12FDC
000139AA 303C 0000                  		move.w	#0,d0
000139AE                            
000139AE                            loc_12FDC:
000139AE 3140 0014                  		move.w	d0,$14(a0)
000139B2 6000                       		bra.s	loc_12FEE
000139B4                            ; ===========================================================================
000139B4                            
000139B4                            loc_12FE2:
000139B4 D045                       		add.w	d5,d0
000139B6 6400                       		bcc.s	loc_12FEA
000139B8 303C 0000                  		move.w	#0,d0
000139BC                            
000139BC                            loc_12FEA:
000139BC 3140 0014                  		move.w	d0,$14(a0)
000139C0                            
000139C0                            loc_12FEE:
000139C0 1028 0026                  		move.b	$26(a0),d0
000139C4 4EB9 0000 2D64             		jsr	(CalcSine).l
000139CA C3E8 0014                  		muls.w	$14(a0),d1
000139CE E081                       		asr.l	#8,d1
000139D0 3141 0010                  		move.w	d1,$10(a0)
000139D4 C1E8 0014                  		muls.w	$14(a0),d0
000139D8 E080                       		asr.l	#8,d0
000139DA 3140 0012                  		move.w	d0,$12(a0)
000139DE                            
000139DE                            loc_1300C:
000139DE 1028 0026                  		move.b	$26(a0),d0
000139E2 0600 0040                  		addi.b	#$40,d0
000139E6 6B00                       		bmi.s	locret_1307C
000139E8 123C 0040                  		move.b	#$40,d1
000139EC 4A68 0014                  		tst.w	$14(a0)
000139F0 6700                       		beq.s	locret_1307C
000139F2 6B00                       		bmi.s	loc_13024
000139F4 4441                       		neg.w	d1
000139F6                            
000139F6                            loc_13024:
000139F6 1028 0026                  		move.b	$26(a0),d0
000139FA D001                       		add.b	d1,d0
000139FC 3F00                       		move.w	d0,-(sp)
000139FE 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A02 301F                       		move.w	(sp)+,d0
00013A04 4A41                       		tst.w	d1
00013A06 6A00                       		bpl.s	locret_1307C
00013A08 E141                       		asl.w	#8,d1
00013A0A 0600 0020                  		addi.b	#$20,d0
00013A0E 0200 00C0                  		andi.b	#$C0,d0
00013A12 6700                       		beq.s	loc_13078
00013A14 0C00 0040                  		cmpi.b	#$40,d0
00013A18 6700                       		beq.s	loc_13066
00013A1A 0C00 0080                  		cmpi.b	#$80,d0
00013A1E 6700                       		beq.s	loc_13060
00013A20 D368 0010                  		add.w	d1,$10(a0)
00013A24 08E8 0005 0022             		bset	#5,$22(a0)
00013A2A 317C 0000 0014             		move.w	#0,$14(a0)
00013A30 4E75                       		rts	
00013A32                            ; ===========================================================================
00013A32                            
00013A32                            loc_13060:
00013A32 9368 0012                  		sub.w	d1,$12(a0)
00013A36 4E75                       		rts	
00013A38                            ; ===========================================================================
00013A38                            
00013A38                            loc_13066:
00013A38 9368 0010                  		sub.w	d1,$10(a0)
00013A3C 08E8 0005 0022             		bset	#5,$22(a0)
00013A42 317C 0000 0014             		move.w	#0,$14(a0)
00013A48 4E75                       		rts	
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            loc_13078:
00013A4A D368 0012                  		add.w	d1,$12(a0)
00013A4E                            
00013A4E                            locret_1307C:
00013A4E 4E75                       		rts	
00013A50                            ; End of function Sonic_Move
00013A50                            
00013A50                            
00013A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A50                            
00013A50                            
00013A50                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013A50 3028 0014                  		move.w	$14(a0),d0
00013A54 6700                       		beq.s	loc_13086
00013A56 6A00                       		bpl.s	loc_130B2
00013A58                            
00013A58                            loc_13086:
00013A58 08E8 0000 0022             		bset	#0,$22(a0)
00013A5E 6600                       		bne.s	loc_1309A
00013A60 08A8 0005 0022             		bclr	#5,$22(a0)
00013A66 117C 0001 001D             		move.b	#1,$1D(a0)
00013A6C                            
00013A6C                            loc_1309A:
00013A6C 9045                       		sub.w	d5,d0
00013A6E 3206                       		move.w	d6,d1
00013A70 4441                       		neg.w	d1
00013A72 B041                       		cmp.w	d1,d0
00013A74 6E00                       		bgt.s	loc_130A6
00013A76 D045                       		add.w	d5,d0
00013A78 B041                       		cmp.w	d1,d0
00013A7A 6F00                       		ble.s	loc_130A6
00013A7C 3001                       		move.w	d1,d0
00013A7E                            
00013A7E                            loc_130A6:
00013A7E 3140 0014                  		move.w	d0,$14(a0)
00013A82 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013A88 4E75                       		rts
00013A8A                            ; ===========================================================================
00013A8A                            
00013A8A                            loc_130B2:				; XREF: Sonic_MoveLeft
00013A8A 9044                       		sub.w	d4,d0
00013A8C 6400                       		bcc.s	loc_130BA
00013A8E 303C FF80                  		move.w	#-$80,d0
00013A92                            
00013A92                            loc_130BA:
00013A92 3140 0014                  		move.w	d0,$14(a0)
00013A96 1028 0026                  		move.b	$26(a0),d0
00013A9A 0600 0020                  		addi.b	#$20,d0
00013A9E 0200 00C0                  		andi.b	#$C0,d0
00013AA2 6600                       		bne.s	locret_130E8
00013AA4 0C40 0400                  		cmpi.w	#$400,d0
00013AA8 6D00                       		blt.s	locret_130E8
00013AAA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013AB0 08A8 0000 0022             		bclr	#0,$22(a0)
00013AB6 303C 00A4                  		move.w	#$A4,d0
00013ABA 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play stopping sound
00013AC0                            
00013AC0                            locret_130E8:
00013AC0 4E75                       		rts	
00013AC2                            ; End of function Sonic_MoveLeft
00013AC2                            
00013AC2                            
00013AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC2                            
00013AC2                            
00013AC2                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013AC2 3028 0014                  		move.w	$14(a0),d0
00013AC6 6B00                       		bmi.s	loc_13118
00013AC8 08A8 0000 0022             		bclr	#0,$22(a0)
00013ACE 6700                       		beq.s	loc_13104
00013AD0 08A8 0005 0022             		bclr	#5,$22(a0)
00013AD6 117C 0001 001D             		move.b	#1,$1D(a0)
00013ADC                            
00013ADC                            loc_13104:
00013ADC D045                       		add.w	d5,d0
00013ADE B046                       		cmp.w	d6,d0
00013AE0 6D00                       		blt.s	loc_1310C
00013AE2 9045                       		sub.w	d5,d0
00013AE4 B046                       		cmp.w	d6,d0
00013AE6 6C00                       		bge.s	loc_1310C
00013AE8 3006                       		move.w	d6,d0
00013AEA                            
00013AEA                            loc_1310C:
00013AEA 3140 0014                  		move.w	d0,$14(a0)
00013AEE 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013AF4 4E75                       		rts
00013AF6                            ; ===========================================================================
00013AF6                            
00013AF6                            loc_13118:				; XREF: Sonic_MoveRight
00013AF6 D044                       		add.w	d4,d0
00013AF8 6400                       		bcc.s	loc_13120
00013AFA 303C 0080                  		move.w	#$80,d0
00013AFE                            
00013AFE                            loc_13120:
00013AFE 3140 0014                  		move.w	d0,$14(a0)
00013B02 1028 0026                  		move.b	$26(a0),d0
00013B06 0600 0020                  		addi.b	#$20,d0
00013B0A 0200 00C0                  		andi.b	#$C0,d0
00013B0E 6600                       		bne.s	locret_1314E
00013B10 0C40 FC00                  		cmpi.w	#-$400,d0
00013B14 6E00                       		bgt.s	locret_1314E
00013B16 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B1C 08E8 0000 0022             		bset	#0,$22(a0)
00013B22 303C 00A4                  		move.w	#$A4,d0
00013B26 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B2C                            
00013B2C                            locret_1314E:
00013B2C 4E75                       		rts	
00013B2E                            ; End of function Sonic_MoveRight
00013B2E                            
00013B2E                            ; ---------------------------------------------------------------------------
00013B2E                            ; Subroutine to	change Sonic's speed as he rolls
00013B2E                            ; ---------------------------------------------------------------------------
00013B2E                            
00013B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B2E                            
00013B2E                            
00013B2E                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013B2E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B32 E346                       		asl.w	#1,d6
00013B34 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B38 E245                       		asr.w	#1,d5
00013B3A 3838 F764                  		move.w	($FFFFF764).w,d4
00013B3E E444                       		asr.w	#2,d4
00013B40 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B44 6600 0000                  		bne.w	loc_131CC
00013B48 4A68 003E                  		tst.w	$3E(a0)
00013B4C 6600                       		bne.s	loc_13188
00013B4E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B54 6700                       		beq.s	loc_1317C	; if not, branch
00013B56 6100 0000                  		bsr.w	Sonic_RollLeft
00013B5A                            
00013B5A                            loc_1317C:
00013B5A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B60 6700                       		beq.s	loc_13188	; if not, branch
00013B62 6100 0000                  		bsr.w	Sonic_RollRight
00013B66                            
00013B66                            loc_13188:
00013B66 3028 0014                  		move.w	$14(a0),d0
00013B6A 6700                       		beq.s	loc_131AA
00013B6C 6B00                       		bmi.s	loc_1319E
00013B6E 9045                       		sub.w	d5,d0
00013B70 6400                       		bcc.s	loc_13198
00013B72 303C 0000                  		move.w	#0,d0
00013B76                            
00013B76                            loc_13198:
00013B76 3140 0014                  		move.w	d0,$14(a0)
00013B7A 6000                       		bra.s	loc_131AA
00013B7C                            ; ===========================================================================
00013B7C                            
00013B7C                            loc_1319E:				; XREF: Sonic_RollSpeed
00013B7C D045                       		add.w	d5,d0
00013B7E 6400                       		bcc.s	loc_131A6
00013B80 303C 0000                  		move.w	#0,d0
00013B84                            
00013B84                            loc_131A6:
00013B84 3140 0014                  		move.w	d0,$14(a0)
00013B88                            
00013B88                            loc_131AA:
00013B88 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013B8C 6600                       		bne.s	loc_131CC	; if yes, branch
00013B8E 08A8 0002 0022             		bclr	#2,$22(a0)
00013B94 117C 0013 0016             		move.b	#$13,$16(a0)
00013B9A 117C 0009 0017             		move.b	#9,$17(a0)
00013BA0 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013BA6 5B68 000C                  		subq.w	#5,$C(a0)
00013BAA                            
00013BAA                            loc_131CC:
00013BAA 1028 0026                  		move.b	$26(a0),d0
00013BAE 4EB9 0000 2D64             		jsr	(CalcSine).l
00013BB4 C1E8 0014                  		muls.w	$14(a0),d0
00013BB8 E080                       		asr.l	#8,d0
00013BBA 3140 0012                  		move.w	d0,$12(a0)
00013BBE C3E8 0014                  		muls.w	$14(a0),d1
00013BC2 E081                       		asr.l	#8,d1
00013BC4 0C41 1000                  		cmpi.w	#$1000,d1
00013BC8 6F00                       		ble.s	loc_131F0
00013BCA 323C 1000                  		move.w	#$1000,d1
00013BCE                            
00013BCE                            loc_131F0:
00013BCE 0C41 F000                  		cmpi.w	#-$1000,d1
00013BD2 6C00                       		bge.s	loc_131FA
00013BD4 323C F000                  		move.w	#-$1000,d1
00013BD8                            
00013BD8                            loc_131FA:
00013BD8 3141 0010                  		move.w	d1,$10(a0)
00013BDC 6000 FE00                  		bra.w	loc_1300C
00013BE0                            ; End of function Sonic_RollSpeed
00013BE0                            
00013BE0                            
00013BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BE0                            
00013BE0                            
00013BE0                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013BE0 3028 0014                  		move.w	$14(a0),d0
00013BE4 6700                       		beq.s	loc_1320A
00013BE6 6A00                       		bpl.s	loc_13218
00013BE8                            
00013BE8                            loc_1320A:
00013BE8 08E8 0000 0022             		bset	#0,$22(a0)
00013BEE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013BF4 4E75                       		rts	
00013BF6                            ; ===========================================================================
00013BF6                            
00013BF6                            loc_13218:
00013BF6 9044                       		sub.w	d4,d0
00013BF8 6400                       		bcc.s	loc_13220
00013BFA 303C FF80                  		move.w	#-$80,d0
00013BFE                            
00013BFE                            loc_13220:
00013BFE 3140 0014                  		move.w	d0,$14(a0)
00013C02 4E75                       		rts	
00013C04                            ; End of function Sonic_RollLeft
00013C04                            
00013C04                            
00013C04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C04                            
00013C04                            
00013C04                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013C04 3028 0014                  		move.w	$14(a0),d0
00013C08 6B00                       		bmi.s	loc_1323A
00013C0A 08A8 0000 0022             		bclr	#0,$22(a0)
00013C10 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C16 4E75                       		rts	
00013C18                            ; ===========================================================================
00013C18                            
00013C18                            loc_1323A:
00013C18 D044                       		add.w	d4,d0
00013C1A 6400                       		bcc.s	loc_13242
00013C1C 303C 0080                  		move.w	#$80,d0
00013C20                            
00013C20                            loc_13242:
00013C20 3140 0014                  		move.w	d0,$14(a0)
00013C24 4E75                       		rts	
00013C26                            ; End of function Sonic_RollRight
00013C26                            
00013C26                            ; ---------------------------------------------------------------------------
00013C26                            ; Subroutine to	change Sonic's direction while jumping
00013C26                            ; ---------------------------------------------------------------------------
00013C26                            
00013C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C26                            
00013C26                            
00013C26                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013C26 3C38 F760                  		move.w	($FFFFF760).w,d6
00013C2A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013C2E E345                       		asl.w	#1,d5
00013C30                            ;		btst	#4,$22(a0)
00013C30                            ;		bne.s	Obj01_ResetScr2	
00013C30 3028 0010                  		move.w	$10(a0),d0	
00013C34 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013C3A 6700                       		beq.s	loc_13278; if not, branch	
00013C3C 08E8 0000 0022             		bset	#0,$22(a0)	
00013C42 9045                       		sub.w	d5,d0	
00013C44 3206                       		move.w	d6,d1	
00013C46 4441                       		neg.w	d1	
00013C48 B041                       		cmp.w	d1,d0	
00013C4A 6E00                       		bgt.s	loc_13278	
00013C4C D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013C4E B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013C50 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013C52 3001                       		move.w	d1,d0
00013C54                            
00013C54                            loc_13278:
00013C54 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013C5A 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013C5C 08A8 0000 0022             		bclr	#0,$22(a0)	
00013C62 D045                       		add.w	d5,d0	
00013C64 B046                       		cmp.w	d6,d0	
00013C66 6D00                       		blt.s	Obj01_JumpMove
00013C68 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013C6A B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013C6C 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013C6E 3006                       		move.w	d6,d0
00013C70                            
00013C70                            Obj01_JumpMove:
00013C70 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013C74                            
00013C74                            Obj01_ResetScr2:
00013C74 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013C7A 6700                       		beq.s	loc_132A4	; if yes, branch
00013C7C 6400                       		bcc.s	loc_132A0
00013C7E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013C82                            
00013C82                            loc_132A0:
00013C82 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013C86                            
00013C86                            loc_132A4:
00013C86 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013C8C 6500                       		bcs.s	locret_132D2	; if yes, branch
00013C8E 3028 0010                  		move.w	$10(a0),d0
00013C92 3200                       		move.w	d0,d1
00013C94 EA41                       		asr.w	#5,d1
00013C96 6700                       		beq.s	locret_132D2
00013C98 6B00                       		bmi.s	loc_132C6
00013C9A 9041                       		sub.w	d1,d0
00013C9C 6400                       		bcc.s	loc_132C0
00013C9E 303C 0000                  		move.w	#0,d0
00013CA2                            
00013CA2                            loc_132C0:
00013CA2 3140 0010                  		move.w	d0,$10(a0)
00013CA6 4E75                       		rts	
00013CA8                            ; ===========================================================================
00013CA8                            
00013CA8                            loc_132C6:
00013CA8 9041                       		sub.w	d1,d0
00013CAA 6500                       		bcs.s	loc_132CE
00013CAC 303C 0000                  		move.w	#0,d0
00013CB0                            
00013CB0                            loc_132CE:
00013CB0 3140 0010                  		move.w	d0,$10(a0)
00013CB4                            
00013CB4                            locret_132D2:
00013CB4 4E75                       		rts	
00013CB6                            ; End of function Sonic_ChgJumpDir
00013CB6                            
00013CB6                            ; ===========================================================================
00013CB6                            ; ---------------------------------------------------------------------------
00013CB6                            ; Unused subroutine to squash Sonic
00013CB6                            ; ---------------------------------------------------------------------------
00013CB6 1028 0026                  		move.b	$26(a0),d0
00013CBA 0600 0020                  		addi.b	#$20,d0
00013CBE 0200 00C0                  		andi.b	#$C0,d0
00013CC2 6600                       		bne.s	locret_13302
00013CC4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CC8 4A41                       		tst.w	d1
00013CCA 6A00                       		bpl.s	locret_13302
00013CCC 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013CD2 317C 0000 0010             		move.w	#0,$10(a0)
00013CD8 317C 0000 0012             		move.w	#0,$12(a0)
00013CDE 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013CE4                            
00013CE4                            locret_13302:
00013CE4 4E75                       		rts	
00013CE6                            ; ---------------------------------------------------------------------------
00013CE6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013CE6                            ; ---------------------------------------------------------------------------
00013CE6                            
00013CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CE6                            
00013CE6                            
00013CE6                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013CE6 2228 0008                  		move.l	8(a0),d1
00013CEA 3028 0010                  		move.w	$10(a0),d0
00013CEE 48C0                       		ext.l	d0
00013CF0 E180                       		asl.l	#8,d0
00013CF2 D280                       		add.l	d0,d1
00013CF4 4841                       		swap	d1
00013CF6 3038 F728                  		move.w	($FFFFF728).w,d0
00013CFA 0640 0010                  		addi.w	#$10,d0
00013CFE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013D00 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013D02 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013D06 0640 0128                  		addi.w	#$128,d0
00013D0A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013D0E 6600                       		bne.s	loc_13332
00013D10 0640 0040                  		addi.w	#$40,d0
00013D14                            
00013D14                            loc_13332:
00013D14 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013D16 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013D18                            
00013D18                            loc_13336:
00013D18 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013D1C 0640 00E0                  		addi.w	#$E0,d0
00013D20 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013D24 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013D26 4E75                       		rts	
00013D28                            ; ===========================================================================
00013D28                            
00013D28                            Boundary_Bottom:
00013D28 4EF9 0000 0000             		jmp	KillSonic
00013D2E                            ;		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013D2E                            ;		bne.w	KillSonic	; if not, kill Sonic
00013D2E                            ;		cmpi.w	#$2000,($FFFFD008).w
00013D2E                            ;		bcs.w	KillSonic
00013D2E                            ;		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013D2E                            ;		move.w	#1,($FFFFFE02).w ; restart the level
00013D2E                            ;		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013D2E 4E75                       		rts	
00013D30                            ; ===========================================================================
00013D30                            
00013D30                            Boundary_Sides:
00013D30 3140 0008                  		move.w	d0,8(a0)
00013D34 317C 0000 000A             		move.w	#0,$A(a0)
00013D3A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013D40 317C 0000 0014             		move.w	#0,$14(a0)
00013D46 60D0                       		bra.s	loc_13336
00013D48                            ; End of function Sonic_LevelBound
00013D48                            
00013D48                            ; ---------------------------------------------------------------------------
00013D48                            ; Drop Dash
00013D48                            ; ---------------------------------------------------------------------------
00013D48                            
00013D48                            ; Taken from SSRG Free Assets Thread by LuigiXHero. I'm too lazy and don't like hacking enough to actually do this myself
00013D48                            
00013D48                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00013D48                            
00013D48                            Sonic_DropDash:
00013D48 0C28 0002 001C             		cmpi.b	#2,$1C(a0)    		; EB: is the current animation rolling?
00013D4E 6600                       		bne.s	@return		        ; EB:  if not, branch
00013D50 0828 0007 0022             		btst	#7,$22(a0)		; EB: read if DoubleJump flag was set
00013D56 6600                       		bne.s	@return		        ; EB: was it set? if not, branch
00013D58 1038 F605                  		move.b	($FFFFF605).w,d0        ; EB: read the controller
00013D5C 0200 0020                  		andi.b	#$20,d0			; EB: was A,B or C pressed?-
00013D60 6600                       		bne.s	@dothing		        ; EB: if yes, branch
00013D62                            
00013D62 08A8 0007 0022             		bclr	#7,$22(a0)		; EB: clear DoubleJump flag
00013D68 11FC 0000 FFFD             		move.b	#$0,($FFFFFFFD).w	; puts a 0 in this flag
00013D6E                            
00013D6E                            @return:
00013D6E 4E75                                       rts 
00013D70                            
00013D70                            @dothing:
00013D70 08E8 0007 0022             		bset	#7,$22(a0)		; EB: set DoubleJump flag
00013D76 11FC 0001 FFFD             		move.b	#$1,($FFFFFFFD).w	; puts a 1 in this flag
00013D7C 303C 00D1                  		move.w	#$D1,d0
00013D80 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play rolling sound
00013D86                             ;               rts                             ; EB: return
00013D86                            
00013D86                            ; ---------------------------------------------------------------------------
00013D86                            ; Subroutine allowing Sonic to roll when he's moving
00013D86                            ; ---------------------------------------------------------------------------
00013D86                            
00013D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D86                            
00013D86                            
00013D86                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013D86 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D8A 6600                       		bne.s	Obj01_NoRoll
00013D8C 3028 0014                  		move.w	$14(a0),d0
00013D90 6A00                       		bpl.s	loc_13392
00013D92 4440                       		neg.w	d0
00013D94                            
00013D94                            loc_13392:
00013D94 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013D98 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013D9A 1038 F602                  		move.b	($FFFFF602).w,d0
00013D9E 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013DA2 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013DA4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013DAA 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013DAC                            
00013DAC                            Obj01_NoRoll:
00013DAC 4E75                       		rts	
00013DAE                            ; ===========================================================================
00013DAE                            
00013DAE                            Obj01_ChkRoll:
00013DAE 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013DB4 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013DB6 4E75                       		rts	
00013DB8                            ; ===========================================================================
00013DB8                            
00013DB8                            Obj01_DoRoll:
00013DB8 08E8 0002 0022             		bset	#2,$22(a0)
00013DBE 117C 000E 0016             		move.b	#$E,$16(a0)
00013DC4 117C 0007 0017             		move.b	#7,$17(a0)
00013DCA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013DD0 5A68 000C                  		addq.w	#5,$C(a0)
00013DD4 303C 00BE                  		move.w	#$BE,d0
00013DD8 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play rolling sound
00013DDE 4A68 0014                  		tst.w	$14(a0)
00013DE2 6600                       		bne.s	locret_133E8
00013DE4 317C 0200 0014             		move.w	#$200,$14(a0)
00013DEA                            
00013DEA                            locret_133E8:
00013DEA 4E75                       		rts	
00013DEC                            ; End of function Sonic_Roll
00013DEC                            
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                             ; Subroutine to perform a double jump
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            
00013DEC                            
00013DEC                            Sonic_DoubleJump:
00013DEC 1038 F603                  		move.b ($FFFFF603).w,d0 ; was A pressed? (part 1)
00013DF0 0200 0040                  		andi.b #$40,d0 ; was A pressed? (part 2)
00013DF4 6700 0000                  		beq.w JP_End ; if not, branch
00013DF8 4A38 FFDF                  		tst.b ($FFFFFFDF).w ; was double jump flag set?
00013DFC 6600 0000                  		bne.w JP_End ; if yes, branch
00013E00 11FC 0001 FFDF             		move.b #1,($FFFFFFDF).w ; if not, set double jump flag
00013E06 103C 00A9                  		move.b #$A9,d0 ; set double jump sound
00013E0A 4EB9 0000 11B4             		jsr (PlaySound_Special).l ; play double jump sound
00013E10 08A8 0004 0022             		bclr #4,$22(a0) ; clear double jump flag
00013E16 303C 0800                  		move.w #$800,d0 ; set normal double jump speed
00013E1A 0C38 0000 FFF9             		cmpi.b	#$00, ($FFFFFFF9).w	; is the multiple character flag set to $00 (Sonic)?
00013E20 6600                       		bne.s JP_ChkDirection ; if not, branch
00013E22 303C 0370                  		move.w #$370,d0 ; set Sonic's double jump speed
00013E26                            
00013E26                            JP_ChkDirection:
00013E26 4440                       		neg.w d0
00013E28                            		
00013E28                            JP_Move:
00013E28 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013E2E 3140 0012                  		move.w d0,$12(a0)
00013E32                            ;		clr.w $10(a0)
00013E32                            
00013E32                            JP_End:
00013E32 4E75                       	rts ; return
00013E34                            
00013E34                            ; End of function Sonic_DoubleJump
00013E34                            
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            ; Subroutine to perform a jumpdash (this time instead of being an awful edit of Selbi's guide it's just straight up the jumpdash guide)
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            
00013E34                            Sonic_Jumpdash:
00013E34 1038 F603                  		move.b ($FFFFF603).w,d0 ; was B pressed? (part 1)
00013E38 0200 0010                  		andi.b #$10,d0 ; was B pressed? (part 2)
00013E3C 6700 0000                  		beq.w JD_End ; if not, branch
00013E40 4A38 FFEB                  		tst.b ($FFFFFFEB).w ; was jumpdash flag set?
00013E44 6600 0000                  		bne.w JD_End ; if yes, branch
00013E48 11FC 0001 FFEB             		move.b #1,($FFFFFFEB).w ; if not, set jumpdash flag
00013E4E 103C 00BC                  		move.b #$BC,d0 ; set jumpdash sound
00013E52 4EB9 0000 11B4             		jsr (PlaySound_Special).l ; play jumpdash sound
00013E58 08A8 0004 0022             		bclr #4,$22(a0) ; clear jumpdash flag
00013E5E 303C 0500                  		move.w #$500,d0 ; set normal jumpdash speed
00013E62 0C38 0000 FFF9             		cmpi.b	#$00, ($FFFFFFF9).w	; is the multiple character flag set to $00 (Sonic)?
00013E68 6600                       		bne.s JD_ChkDirection ; if not, branch
00013E6A 303C 0800                  		move.w #$800,d0 ; set Sonic's double jump speed
00013E6E                            
00013E6E                            JD_ChkDirection:
00013E6E 0828 0000 0022             		btst	#0,$22(a0)	; is sonic facing left?
00013E74 6700                       		beq.s	JD_Move	; if yes, branch
00013E76 4440                       		neg.w d0
00013E78                            		
00013E78                            JD_Move:
00013E78 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013E7E 3140 0010                  		move.w d0,$10(a0)
00013E82 4268 0012                  		clr.w $12(a0)
00013E86                            
00013E86                            JD_End:
00013E86 4E75                       	rts ; return
00013E88                            	
00013E88                            ; ---------------------------------------------------------------------------
00013E88                             ; Subroutine to perform a Pepsi Drop Move
00013E88                            ; ---------------------------------------------------------------------------
00013E88                            
00013E88                            
00013E88                            Sonic_DropMove:
00013E88 1038 F603                  		move.b ($FFFFF603).w,d0 ; was C pressed? (part 1)
00013E8C 0200 0020                  		andi.b #$20,d0 ; was C pressed? (part 2)
00013E90 6700 0000                  		beq.w DM_End ; if not, branch
00013E94 0C38 0001 FFF9             		cmpi.b	#$01, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Pepsi)?
00013E9A 6600                       		bne.s DM_End ; if not, branch
00013E9C 4A38 FFE9                  		tst.b ($FFFFFFE9).w ; was double jump flag set?
00013EA0 6600 0000                  		bne.w DM_End ; if yes, branch
00013EA4 11FC 0001 FFE9             		move.b #1,($FFFFFFE9).w ; if not, set double jump flag
00013EAA 103C 00B8                  		move.b #$B8,d0 ; set double jump sound
00013EAE 4EB9 0000 11B4             		jsr (PlaySound_Special).l ; play double jump sound
00013EB4 08A8 0004 0022             		bclr #4,$22(a0) ; clear double jump flag
00013EBA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013EC0 303C 0800                  		move.w #$800,d0 ; set normal double jump speed
00013EC4                            		
00013EC4                            DM_Move:
00013EC4 3140 0012                  		move.w d0,$12(a0)
00013EC8                            ;		clr.w $10(a0)
00013EC8                            
00013EC8                            DM_End:
00013EC8 4E75                       	rts ; return
00013ECA                            
00013ECA                            ; End of function Sonic_DoubleJump
00013ECA                            
00013ECA                            ; ---------------------------------------------------------------------------
00013ECA                            ; Subroutine allowing Sonic to jump
00013ECA                            ; ---------------------------------------------------------------------------
00013ECA                            
00013ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ECA                            
00013ECA                            
00013ECA                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013ECA 1038 F603                  		move.b	($FFFFF603).w,d0
00013ECE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013ED2 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013ED6 7000                       		moveq	#0,d0
00013ED8 1028 0026                  		move.b	$26(a0),d0
00013EDC 0600 0080                  		addi.b	#$80,d0
00013EE0 6100 0000                  		bsr.w	sub_14D48
00013EE4 0C41 0006                  		cmpi.w	#6,d1
00013EE8 6D00 0000                  		blt.w	locret_1348E
00013EEC 343C 0680                  		move.w	#$680,d2
00013EF0 0828 0006 0022             		btst	#6,$22(a0)
00013EF6 6700                       		beq.s	loc_1341C
00013EF8 343C 0380                  		move.w	#$380,d2
00013EFC                            
00013EFC                            loc_1341C:
00013EFC 7000                       		moveq	#0,d0
00013EFE 1028 0026                  		move.b	$26(a0),d0
00013F02 0400 0040                  		subi.b	#$40,d0
00013F06 4EB9 0000 2D64             		jsr	(CalcSine).l
00013F0C C3C2                       		muls.w	d2,d1
00013F0E E081                       		asr.l	#8,d1
00013F10 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013F14 C1C2                       		muls.w	d2,d0
00013F16 E080                       		asr.l	#8,d0
00013F18 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013F1C 08E8 0001 0022             		bset	#1,$22(a0)
00013F22 08A8 0005 0022             		bclr	#5,$22(a0)
00013F28 588F                       		addq.l	#4,sp
00013F2A 117C 0001 003C             		move.b	#1,$3C(a0)
00013F30 4228 0038                  		clr.b	$38(a0)
00013F34 303C 00A0                  		move.w	#$A0,d0
00013F38 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play jumping sound
00013F3E 117C 0013 0016             		move.b	#$13,$16(a0)
00013F44 117C 0009 0017             		move.b	#9,$17(a0)
00013F4A 0828 0002 0022             		btst	#2,$22(a0)
00013F50 6600                       		bne.s	loc_13490
00013F52 117C 000E 0016             		move.b	#$E,$16(a0)
00013F58 117C 0007 0017             		move.b	#7,$17(a0)
00013F5E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F64 08E8 0002 0022             		bset	#2,$22(a0)
00013F6A 5A68 000C                  		addq.w	#5,$C(a0)
00013F6E                            
00013F6E                            locret_1348E:
00013F6E 4E75                       		rts	
00013F70                            
00013F70                            ; ===========================================================================
00013F70                            
00013F70                            loc_13490:
00013F70 08E8 0004 0022             		bset	#4,$22(a0)
00013F76 4E75                       		rts	
00013F78                            ; End of function Sonic_Jump
00013F78                            
00013F78                            
00013F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F78                            
00013F78                            
00013F78                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F78 4A28 003C                  		tst.b	$3C(a0)
00013F7C 6700                       		beq.s	loc_134C4
00013F7E 323C FC00                  		move.w	#-$400,d1
00013F82 0828 0006 0022             		btst	#6,$22(a0)
00013F88 6700                       		beq.s	loc_134AE
00013F8A 323C FE00                  		move.w	#-$200,d1
00013F8E                            
00013F8E                            loc_134AE:
00013F8E B268 0012                  		cmp.w	$12(a0),d1
00013F92 6F00                       		ble.s	locret_134C2
00013F94 1038 F602                  		move.b	($FFFFF602).w,d0
00013F98 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013F9C 6600                       		bne.s	locret_134C2	; if yes, branch
00013F9E 3141 0012                  		move.w	d1,$12(a0)
00013FA2                            
00013FA2                            locret_134C2:
00013FA2 4E75                       		rts	
00013FA4                            ; ===========================================================================
00013FA4                            
00013FA4                            loc_134C4:
00013FA4 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013FAA 6C00                       		bge.s	locret_134D2
00013FAC 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013FB2                            
00013FB2                            locret_134D2:
00013FB2 4E75                       		rts	
00013FB4                            ; End of function Sonic_JumpHeight
00013FB4                            
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            ; Subroutine to make Sonic perform a spindash
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            
00013FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FB4                            
00013FB4                            
00013FB4                            Sonic_SpinDash:
00013FB4 0828 0000 0039             		btst   	#0,$39(a0)		; already Spin Dashing?
00013FBA 6600 0000                  		bne.w	loc_1AC8E		; if set, branch
00013FBE 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
00013FC4 6600                       		bne.s	locret_1AC8C		; if not, return
00013FC6 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00013FCA 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00013FCE 6700 0000                  		beq.w	locret_1AC8C		; if not, return
00013FD2                            
00013FD2                            Dropdash_To_Spindash:
00013FD2 117C 0002 001C             		move.b	#$2,$1C(a0)		; set Spin Dash anim (9 in s2)
00013FD8 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
00013FDC 4EB9 0000 11B4             		jsr	(PlaySound_Special).l	; play spin sound
00013FE2 588F                       		addq.l	#4,sp			; increment stack ptr
00013FE4 08E8 0000 0039             		bset 	#0,$39(a0)		; set Spin Dash flag
00013FEA 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00013FF0                            ;		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00013FF0                            ;		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2
00013FF0                             
00013FF0                            loc_1AC84:
00013FF0 4EBA FCF4                  		jsr	Sonic_LevelBound
00013FF4 4EB9 0000 0000             		jsr	Sonic_AnglePos
00013FFA                             
00013FFA                            locret_1AC8C:
00013FFA 4E75                       		rts	
00013FFC                            
00013FFC                            Dropdash_Activate:
00013FFC 0C38 0001 FFF9             		cmpi.b	#$01, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Pepsi)?
00014002 67F6                       		beq.s	locret_1AC8C ; if yes, branch
00014004 1038 F604                  		move.b	($FFFFF604).w,d0	; read controller
00014008 0200 0020                  		andi.b	#$20,d0			; pressing C ?
0001400C 6700 FFEC                  		beq.w	locret_1AC8C		; if not, return
00014010 588F                       		addq.l	#4,sp			; increment stack ptr
00014012 08E8 0000 0039             		bset 	#0,$39(a0)		; set Spin Dash flag
00014018 317C 0008 003A             		move.w	#8,$3A(a0)		; set charge count to 0
0001401E                            ;		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
0001401E 60D0                       		bra.s 	loc_1AC84
00014020                            
00014020                            ; ---------------------------------------------------------------------------
00014020                            
00014020                            loc_1AC8E:
00014020 1038 F602                  		move.b	($FFFFF602).w,d0
00014024 0800 0001                  		btst	#1,d0
00014028 6600 0000                  		bne.w	loc_1AD30
0001402C 117C 000E 0016             		move.b	#$E,$16(a0)
00014032 117C 0007 0017             		move.b	#7,$17(a0)
00014038 117C 0002 001C             		move.b	#2,$1C(a0)
0001403E 5A68 000C                  		addq.w	#5,$C(a0)
00014042 117C 0000 0039             		move.b	#0,$39(a0)
00014048 7000                       		moveq	#0,d0
0001404A 1028 003A                  		move.b	$3A(a0),d0
0001404E D040                       		add.w	d0,d0
00014050 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0)
00014056 3028 0014                  		move.w	$14(a0),d0
0001405A 0440 0800                  		subi.w	#$800,d0
0001405E D040                       		add.w	d0,d0
00014060 0240 1F00                  		andi.w	#$1F00,d0
00014064 4440                       		neg.w	d0
00014066 0640 2000                  		addi.w	#$2000,d0
0001406A 31C0 EED0                  		move.w	d0,($FFFFEED0).w
0001406E 0828 0000 0022             		btst	#0,$22(a0)
00014074 6700                       		beq.s	loc_1ACF4
00014076 4468 0014                  		neg.w	$14(a0)
0001407A                            
0001407A                            loc_1ACF4:
0001407A 08E8 0002 0022             		bset	#2,$22(a0)
00014080 11FC 0000 D11C             		move.b	#0,($FFFFD11C).w
00014086 303C 00BC                  		move.w	#$BC,d0
0001408A 4EB9 0000 11B4             		jsr	(PlaySound_Special).l
00014090 6000                       		bra.s	loc_1AD78
00014092                            ; ===========================================================================
00014092 0800                       Dash_Speeds:	dc.w  $800		; 0
00014094 0980                       		dc.w  $980		; 1
00014096 0A00                       		dc.w  $A00		; 2
00014098 0A80                       		dc.w  $A80		; 3
0001409A 0B00                       		dc.w  $B00		; 4
0001409C 0B80                       		dc.w  $B80		; 5
0001409E 0C00                       		dc.w  $C00		; 6
000140A0 0C80                       		dc.w  $C80		; 7
000140A2 0D00                       		dc.w  $D00		; 8
000140A4                            ; ===========================================================================
000140A4                            
000140A4                            loc_1AD30:				; If still charging the dash...
000140A4 4A68 003A                  		tst.w	$3A(a0)
000140A8 6700                       		beq.s	loc_1AD48
000140AA 3028 003A                  		move.w	$3A(a0),d0
000140AE EA48                       		lsr.w	#5,d0
000140B0 9168 003A                  		sub.w	d0,$3A(a0)
000140B4 6400                       		bcc.s	loc_1AD48
000140B6 317C 0000 003A             		move.w	#0,$3A(a0)
000140BC                            
000140BC                            loc_1AD48:
000140BC 1038 F603                  		move.b	($FFFFF603).w,d0
000140C0 0200 0070                  		andi.b	#$70,d0	; 'p'
000140C4 6700 0000                  		beq.w	loc_1AD78
000140C8                            ;		move.w	#$900,$1C(a0)
000140C8 303C 00D1                  		move.w	#$D1,d0	; 'à'
000140CC 4EB9 0000 11B4             		jsr	(PlaySound_Special).l
000140D2 0668 0200 003A             		addi.w	#$200,$3A(a0)
000140D8 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)
000140DE 6500                       		bcs.s	loc_1AD78
000140E0 317C 0800 003A             		move.w	#$800,$3A(a0)
000140E6                            
000140E6                            loc_1AD78:
000140E6 588F                       		addq.l	#4,sp
000140E8 0C78 0060 EED8             		cmpi.w	#$60,($FFFFEED8).w
000140EE 6700                       		beq.s	loc_1AD8C
000140F0 6400                       		bcc.s	loc_1AD88
000140F2 5878 EED8                  		addq.w	#4,($FFFFEED8).w
000140F6                            
000140F6                            loc_1AD88:
000140F6 5578 EED8                  		subq.w	#2,($FFFFEED8).w
000140FA                            
000140FA                            loc_1AD8C:
000140FA 6100 FBEA                  		bsr.w	Sonic_LevelBound
000140FE 6100 0000                  		bsr.w	Sonic_AnglePos
00014102 31FC 0060 F73E             		move.w	#$60,($FFFFF73E).w	; reset looking up/down
00014108 4E75                       		rts
0001410A                            ; End of subroutine Sonic_SpinDash
0001410A                            
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            ; Subroutine to	slow Sonic walking up a	slope
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            
0001410A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001410A                            
0001410A                            
0001410A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001410A 1028 0026                  		move.b	$26(a0),d0
0001410E 0600 0010                  		addi.b	#$10,d0
00014112 0C00 00C0                  		cmpi.b	#$C0,d0
00014116 6400                       		bcc.s	locret_13508
00014118 1028 0026                  		move.b	$26(a0),d0
0001411C 4EB9 0000 2D64             		jsr	(CalcSine).l
00014122 C1FC 0010                  		muls.w	#$10,d0
00014126 E080                       		asr.l	#8,d0
00014128 4A68 0014                  		tst.w	$14(a0)
0001412C 6700                       		beq.s	locret_13508
0001412E 6B00                       		bmi.s	loc_13504
00014130 4A28 0026                  		tst.b	$26(a0)		; Is Sonic moving up a slope?
00014134 6A00 0000                  		bpl.w	notmovingupright	; If not, branch
00014138                            ;	novedicus is the best uwu		
00014138                            notmovingupright:
00014138 4A40                       		tst.w	d0
0001413A 6700 0000                  		beq.w	locret_13502
0001413E D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00014142                            
00014142                            locret_13502:
00014142 4E75                       		rts	
00014144                            ; ===========================================================================
00014144                            
00014144                            loc_13504:
00014144 4A28 0026                  		tst.b	$26(a0)		; Is Sonic moving up a slope?
00014148 6A00 0000                  		bpl.w	notmovingupleft	; If not, branch
0001414C                            		
0001414C                            notmovingupleft:		
0001414C D168 0014                  		add.w	d0,$14(a0)
00014150                            
00014150                            locret_13508:
00014150 4E75                       		rts	
00014152                            ; End of function Sonic_SlopeResist
00014152                            
00014152                            ; ---------------------------------------------------------------------------
00014152                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014152                            ; ---------------------------------------------------------------------------
00014152                            
00014152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014152                            
00014152                            
00014152                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014152 1028 0026                  		move.b	$26(a0),d0
00014156 0600 0060                  		addi.b	#$60,d0
0001415A 0C00 00C0                  		cmpi.b	#-$40,d0
0001415E 6400                       		bcc.s	locret_13544
00014160 1028 0026                  		move.b	$26(a0),d0
00014164 4EB9 0000 2D64             		jsr	(CalcSine).l
0001416A C1FC 0050                  		muls.w	#$50,d0
0001416E E080                       		asr.l	#8,d0
00014170 4A68 0014                  		tst.w	$14(a0)
00014174 6B00                       		bmi.s	loc_1353A
00014176 4A40                       		tst.w	d0
00014178 6A00                       		bpl.s	loc_13534
0001417A E480                       		asr.l	#2,d0
0001417C                            
0001417C                            loc_13534:
0001417C D168 0014                  		add.w	d0,$14(a0)
00014180 4E75                       		rts	
00014182                            ; ===========================================================================
00014182                            
00014182                            loc_1353A:
00014182 4A40                       		tst.w	d0
00014184 6B00                       		bmi.s	loc_13540
00014186 E480                       		asr.l	#2,d0
00014188                            
00014188                            loc_13540:
00014188 D168 0014                  		add.w	d0,$14(a0)
0001418C                            
0001418C                            locret_13544:
0001418C 4E75                       		rts	
0001418E                            ; End of function Sonic_RollRepel
0001418E                            
0001418E                            ; ---------------------------------------------------------------------------
0001418E                            ; Subroutine to	push Sonic down	a slope
0001418E                            ; ---------------------------------------------------------------------------
0001418E                            
0001418E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001418E                            
0001418E                            
0001418E                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001418E 4E71                       		nop	
00014190 4A28 0038                  		tst.b	$38(a0)
00014194 6600                       		bne.s	locret_13580
00014196 4A68 003E                  		tst.w	$3E(a0)
0001419A 6600                       		bne.s	loc_13582
0001419C 1028 0026                  		move.b	$26(a0),d0
000141A0 0600 0020                  		addi.b	#$20,d0
000141A4 0200 00C0                  		andi.b	#$C0,d0
000141A8 6700                       		beq.s	locret_13580
000141AA 3028 0014                  		move.w	$14(a0),d0
000141AE 6A00                       		bpl.s	loc_1356A
000141B0 4440                       		neg.w	d0
000141B2                            
000141B2                            loc_1356A:
000141B2 0C40 0280                  		cmpi.w	#$280,d0
000141B6 6400                       		bcc.s	locret_13580
000141B8 4268 0014                  		clr.w	$14(a0)
000141BC 08E8 0001 0022             		bset	#1,$22(a0)
000141C2 317C 001E 003E             		move.w	#$1E,$3E(a0)
000141C8                            
000141C8                            locret_13580:
000141C8 4E75                       		rts	
000141CA                            ; ===========================================================================
000141CA                            
000141CA                            loc_13582:
000141CA 5368 003E                  		subq.w	#1,$3E(a0)
000141CE 4E75                       		rts	
000141D0                            ; End of function Sonic_SlopeRepel
000141D0                            
000141D0                            ; ---------------------------------------------------------------------------
000141D0                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000141D0                            ; ---------------------------------------------------------------------------
000141D0                            
000141D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141D0                            
000141D0                            
000141D0                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000141D0 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000141D4 6700                       		beq.s	locret_135A2	; if already 0,	branch
000141D6 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000141D8                            
000141D8 5400                       		addq.b	#2,d0		; increase angle
000141DA 6400                       		bcc.s	loc_13596
000141DC 7000                       		moveq	#0,d0
000141DE                            
000141DE                            loc_13596:
000141DE 6000                       		bra.s	loc_1359E
000141E0                            ; ===========================================================================
000141E0                            
000141E0                            loc_13598:
000141E0 5500                       		subq.b	#2,d0		; decrease angle
000141E2 6400                       		bcc.s	loc_1359E
000141E4 7000                       		moveq	#0,d0
000141E6                            
000141E6                            loc_1359E:
000141E6 1140 0026                  		move.b	d0,$26(a0)
000141EA                            
000141EA                            locret_135A2:
000141EA 4E75                       		rts	
000141EC                            ; End of function Sonic_JumpAngle
000141EC                            
000141EC                            ; ---------------------------------------------------------------------------
000141EC                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000141EC                            ; ---------------------------------------------------------------------------
000141EC                            
000141EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141EC                            
000141EC                            
000141EC                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000141EC 3228 0010                  		move.w	$10(a0),d1
000141F0 3428 0012                  		move.w	$12(a0),d2
000141F4 4EB9 0000 3032             		jsr	(CalcAngle).l
000141FA 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000141FE 0400 0020                  		subi.b	#$20,d0
00014202 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014206 0200 00C0                  		andi.b	#$C0,d0
0001420A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001420E 0C00 0040                  		cmpi.b	#$40,d0
00014212 6700 0000                  		beq.w	loc_13680
00014216 0C00 0080                  		cmpi.b	#$80,d0
0001421A 6700 0000                  		beq.w	loc_136E2
0001421E 0C00 00C0                  		cmpi.b	#-$40,d0
00014222 6700 0000                  		beq.w	loc_1373E
00014226 6100 0000                  		bsr.w	Sonic_HitWall
0001422A 4A41                       		tst.w	d1
0001422C 6A00                       		bpl.s	loc_135F0
0001422E 9368 0008                  		sub.w	d1,8(a0)
00014232 317C 0000 0010             		move.w	#0,$10(a0)
00014238                            
00014238                            loc_135F0:
00014238 6100 0000                  		bsr.w	sub_14EB4
0001423C 4A41                       		tst.w	d1
0001423E 6A00                       		bpl.s	loc_13602
00014240 D368 0008                  		add.w	d1,8(a0)
00014244 317C 0000 0010             		move.w	#0,$10(a0)
0001424A                            
0001424A                            loc_13602:
0001424A 6100 0000                  		bsr.w	Sonic_HitFloor
0001424E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014252 4A41                       		tst.w	d1
00014254 6A00                       		bpl.s	locret_1367E
00014256 1428 0012                  		move.b	$12(a0),d2
0001425A 5002                       		addq.b	#8,d2
0001425C 4402                       		neg.b	d2
0001425E B202                       		cmp.b	d2,d1
00014260 6C00                       		bge.s	loc_1361E
00014262 B002                       		cmp.b	d2,d0
00014264 6D00                       		blt.s	locret_1367E
00014266                            
00014266                            loc_1361E:
00014266 D368 000C                  		add.w	d1,$C(a0)
0001426A 1143 0026                  		move.b	d3,$26(a0)
0001426E 0828 0007 0022             		btst	#7,$22(a0)		; EB: read if DoubleJump flag was set
00014274 6700                       		beq.s	loc_1361E_cont		        ; EB: was it set? if so, branch
00014276 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001427C                            
0001427C                            loc_1361E_cont:
0001427C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014280 1003                       		move.b	d3,d0
00014282 0600 0020                  		addi.b	#$20,d0
00014286 0200 0040                  		andi.b	#$40,d0
0001428A 6600                       		bne.s	loc_1365C
0001428C 1003                       		move.b	d3,d0
0001428E 0600 0010                  		addi.b	#$10,d0
00014292 0200 0020                  		andi.b	#$20,d0
00014296 6700                       		beq.s	loc_1364E
00014298 E0E8 0012                  		asr	$12(a0)
0001429C 6000                       		bra.s	loc_13670
0001429E                            ; ===========================================================================
0001429E                            
0001429E                            loc_1364E:
0001429E 317C 0000 0012             		move.w	#0,$12(a0)
000142A4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000142AA 4E75                       		rts	
000142AC                            ; ===========================================================================
000142AC                            
000142AC                            loc_1365C:
000142AC 317C 0000 0010             		move.w	#0,$10(a0)
000142B2 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000142B8 6F00                       		ble.s	loc_13670
000142BA 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000142C0                            
000142C0                            loc_13670:
000142C0 3168 0012 0014             		move.w	$12(a0),$14(a0)
000142C6 4A03                       		tst.b	d3
000142C8 6A00                       		bpl.s	locret_1367E
000142CA 4468 0014                  		neg.w	$14(a0)
000142CE                            
000142CE                            locret_1367E:
000142CE 4E75                       		rts	
000142D0                            ; ===========================================================================
000142D0                            
000142D0                            loc_13680:
000142D0 6100 0000                  		bsr.w	Sonic_HitWall
000142D4 4A41                       		tst.w	d1
000142D6 6A00                       		bpl.s	loc_1369A
000142D8 9368 0008                  		sub.w	d1,8(a0)
000142DC 317C 0000 0010             		move.w	#0,$10(a0)
000142E2 3168 0012 0014             		move.w	$12(a0),$14(a0)
000142E8 4E75                       		rts	
000142EA                            ; ===========================================================================
000142EA                            
000142EA                            loc_1369A:
000142EA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000142EE 4A41                       		tst.w	d1
000142F0 6A00                       		bpl.s	loc_136B4
000142F2 9368 000C                  		sub.w	d1,$C(a0)
000142F6 4A68 0012                  		tst.w	$12(a0)
000142FA 6A00                       		bpl.s	locret_136B2
000142FC 317C 0000 0012             		move.w	#0,$12(a0)
00014302                            
00014302                            locret_136B2:
00014302 4E75                       		rts	
00014304                            ; ===========================================================================
00014304                            
00014304                            loc_136B4:
00014304 4A68 0012                  		tst.w	$12(a0)
00014308 6B00                       		bmi.s	locret_136E0
0001430A 6100 0000                  		bsr.w	Sonic_HitFloor
0001430E 4A41                       		tst.w	d1
00014310 6A00                       		bpl.s	locret_136E0
00014312 D368 000C                  		add.w	d1,$C(a0)
00014316 1143 0026                  		move.b	d3,$26(a0)
0001431A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001431E 117C 0000 001C             		move.b	#0,$1C(a0)
00014324 317C 0000 0012             		move.w	#0,$12(a0)
0001432A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014330                            
00014330                            locret_136E0:
00014330 4E75                       		rts	
00014332                            ; ===========================================================================
00014332                            
00014332                            loc_136E2:
00014332 6100 0000                  		bsr.w	Sonic_HitWall
00014336 4A41                       		tst.w	d1
00014338 6A00                       		bpl.s	loc_136F4
0001433A 9368 0008                  		sub.w	d1,8(a0)
0001433E 317C 0000 0010             		move.w	#0,$10(a0)
00014344                            
00014344                            loc_136F4:
00014344 6100 0000                  		bsr.w	sub_14EB4
00014348 4A41                       		tst.w	d1
0001434A 6A00                       		bpl.s	loc_13706
0001434C D368 0008                  		add.w	d1,8(a0)
00014350 317C 0000 0010             		move.w	#0,$10(a0)
00014356                            
00014356                            loc_13706:
00014356 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001435A 4A41                       		tst.w	d1
0001435C 6A00                       		bpl.s	locret_1373C
0001435E 9368 000C                  		sub.w	d1,$C(a0)
00014362 1003                       		move.b	d3,d0
00014364 0600 0020                  		addi.b	#$20,d0
00014368 0200 0040                  		andi.b	#$40,d0
0001436C 6600                       		bne.s	loc_13726
0001436E 317C 0000 0012             		move.w	#0,$12(a0)
00014374 4E75                       		rts	
00014376                            ; ===========================================================================
00014376                            
00014376                            loc_13726:
00014376 1143 0026                  		move.b	d3,$26(a0)
0001437A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001437E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014384 4A03                       		tst.b	d3
00014386 6A00                       		bpl.s	locret_1373C
00014388 4468 0014                  		neg.w	$14(a0)
0001438C                            
0001438C                            locret_1373C:
0001438C 4E75                       		rts	
0001438E                            ; ===========================================================================
0001438E                            
0001438E                            loc_1373E:
0001438E 6100 0000                  		bsr.w	sub_14EB4
00014392 4A41                       		tst.w	d1
00014394 6A00                       		bpl.s	loc_13758
00014396 D368 0008                  		add.w	d1,8(a0)
0001439A 317C 0000 0010             		move.w	#0,$10(a0)
000143A0 3168 0012 0014             		move.w	$12(a0),$14(a0)
000143A6 4E75                       		rts	
000143A8                            ; ===========================================================================
000143A8                            
000143A8                            loc_13758:
000143A8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000143AC 4A41                       		tst.w	d1
000143AE 6A00                       		bpl.s	loc_13772
000143B0 9368 000C                  		sub.w	d1,$C(a0)
000143B4 4A68 0012                  		tst.w	$12(a0)
000143B8 6A00                       		bpl.s	locret_13770
000143BA 317C 0000 0012             		move.w	#0,$12(a0)
000143C0                            
000143C0                            locret_13770:
000143C0 4E75                       		rts	
000143C2                            ; ===========================================================================
000143C2                            
000143C2                            loc_13772:
000143C2 4A68 0012                  		tst.w	$12(a0)
000143C6 6B00                       		bmi.s	locret_1379E
000143C8 6100 0000                  		bsr.w	Sonic_HitFloor
000143CC 4A41                       		tst.w	d1
000143CE 6A00                       		bpl.s	locret_1379E
000143D0 D368 000C                  		add.w	d1,$C(a0)
000143D4 1143 0026                  		move.b	d3,$26(a0)
000143D8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000143DC 117C 0000 001C             		move.b	#0,$1C(a0)
000143E2 317C 0000 0012             		move.w	#0,$12(a0)
000143E8 3168 0010 0014             		move.w	$10(a0),$14(a0)
000143EE                            
000143EE                            locret_1379E:
000143EE 4E75                       		rts	
000143F0                            ; End of function Sonic_Floor
000143F0                            
000143F0                            ; ---------------------------------------------------------------------------
000143F0                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000143F0                            ; ---------------------------------------------------------------------------
000143F0                            
000143F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143F0                            
000143F0                            Branch_to_DropDash:
000143F0 6100 FC0A                  		bsr.w 	Dropdash_Activate
000143F4 6000                       		bra.s 	Sonic_ResetOnFloor_cont
000143F6                            
000143F6                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000143F6 4238 FFDF                  		clr.b ($FFFFFFDF).w ; clear double jump flag
000143FA 4238 FFEB                  		clr.b ($FFFFFFEB).w ; clear jumpdash flag
000143FE 4238 FFE9                  		clr.b ($FFFFFFE9).w ; clear Pepsi drop move flag
00014402 4A38 FFFD                  		tst.b	($FFFFFFFD).w	; is flag set?
00014406 6700                       		beq.s	Sonic_ResetOnFloor_cont	; if not, branch
00014408 11FC 0000 FFFD             		move.b	#$0,($FFFFFFFD).w	; puts a 0 in this flag
0001440E 1238 F604                  		move.b	($FFFFF604).w,d1
00014412 0801 0001                  		btst	#1,d1		; is down pressed?
00014416 6700 FFD8                  		beq.w	Branch_to_DropDash	; if not, branch
0001441A 6100 FBB6                  		bsr.w 	Dropdash_To_Spindash
0001441E                            
0001441E                            Sonic_ResetOnFloor_cont:
0001441E 0828 0004 0022             		btst	#4,$22(a0)
00014424 6700                       		beq.s	loc_137AE
00014426 4E71                       		nop	
00014428 4E71                       		nop	
0001442A 4E71                       		nop	
0001442C                            
0001442C                            loc_137AE:
0001442C 08A8 0005 0022             		bclr	#5,$22(a0)
00014432 08A8 0001 0022             		bclr	#1,$22(a0)
00014438 08A8 0004 0022             		bclr	#4,$22(a0)
0001443E 0828 0002 0022             		btst	#2,$22(a0)
00014444 6700                       		beq.s	loc_137E4
00014446 08A8 0002 0022             		bclr	#2,$22(a0)
0001444C 117C 0013 0016             		move.b	#$13,$16(a0)
00014452 117C 0009 0017             		move.b	#9,$17(a0)
00014458 0828 0007 0022             		btst	#7,$22(a0)		; EB: read if DoubleJump flag was set
0001445E 6700                       		beq.s	loc_137AE_cont		        ; EB: was it set? if so, branch
00014460 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014466                            
00014466                            loc_137AE_cont:
00014466 08A8 0007 0022             		bclr	#7,$22(a0)
0001446C 5B68 000C                  		subq.w	#5,$C(a0)
00014470                            
00014470                            loc_137E4:
00014470 117C 0000 003C             		move.b	#0,$3C(a0)
00014476 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001447C 4E75                       		rts	
0001447E                            ; End of function Sonic_ResetOnFloor
0001447E                            
0001447E                            ; ===========================================================================
0001447E                            ; ---------------------------------------------------------------------------
0001447E                            ; Sonic	when he	gets hurt
0001447E                            ; ---------------------------------------------------------------------------
0001447E                            
0001447E                            Obj01_Hurt:				; XREF: Obj01_Index
0001447E 4EBA 98A8                  		jsr	SpeedToPos
00014482 0668 0030 0012             		addi.w	#$30,$12(a0)
00014488 0828 0006 0022             		btst	#6,$22(a0)
0001448E 6700                       		beq.s	loc_1380C
00014490 0468 0020 0012             		subi.w	#$20,$12(a0)
00014496                            
00014496                            loc_1380C:
00014496 6100 0000                  		bsr.w	Sonic_HurtStop
0001449A 6100 F84A                  		bsr.w	Sonic_LevelBound
0001449E 6100 F25A                  		bsr.w	Sonic_RecordPos
000144A2 6100 0000                  		bsr.w	Sonic_Animate
000144A6 6100 0000                  		bsr.w	LoadSonicDynPLC
000144AA 4EFA 9896                  		jmp	DisplaySprite
000144AE                            
000144AE                            ; ---------------------------------------------------------------------------
000144AE                            ; Subroutine to	stop Sonic falling after he's been hurt
000144AE                            ; ---------------------------------------------------------------------------
000144AE                            
000144AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144AE                            
000144AE                            
000144AE                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000144AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000144B2 0640 00E0                  		addi.w	#$E0,d0
000144B6 B068 000C                  		cmp.w	$C(a0),d0
000144BA 6500 0000                  		bcs.w	KillSonic
000144BE 6100 FD2C                  		bsr.w	Sonic_Floor
000144C2 0828 0001 0022             		btst	#1,$22(a0)
000144C8 6600                       		bne.s	locret_13860
000144CA 7000                       		moveq	#0,d0
000144CC 3140 0012                  		move.w	d0,$12(a0)
000144D0 3140 0010                  		move.w	d0,$10(a0)
000144D4 3140 0014                  		move.w	d0,$14(a0)
000144D8 117C 0000 001C             		move.b	#0,$1C(a0)
000144DE 5528 0024                  		subq.b	#2,$24(a0)
000144E2 317C 0078 0030             		move.w	#$78,$30(a0)
000144E8                            
000144E8                            locret_13860:
000144E8 4E75                       		rts	
000144EA                            ; End of function Sonic_HurtStop
000144EA                            
000144EA                            ; ===========================================================================
000144EA                            ; ---------------------------------------------------------------------------
000144EA                            ; Sonic	when he	dies
000144EA                            ; ---------------------------------------------------------------------------
000144EA                            
000144EA                            Obj01_Death:				; XREF: Obj01_Index
000144EA 6100 0000                  		bsr.w	GameOver
000144EE 4EBA 9818                  		jsr	ObjectFall
000144F2 6100 F206                  		bsr.w	Sonic_RecordPos
000144F6 6100 0000                  		bsr.w	Sonic_Animate
000144FA 6100 0000                  		bsr.w	LoadSonicDynPLC
000144FE 4EFA 9842                  		jmp	DisplaySprite
00014502                            
00014502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014502                            
00014502                            
00014502                            GameOver:				; XREF: Obj01_Death
00014502 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014506 0640 0100                  		addi.w	#$100,d0
0001450A B068 000C                  		cmp.w	$C(a0),d0
0001450E 6400 0000                  		bcc.w	locret_13900
00014512 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014518 5428 0024                  		addq.b	#2,$24(a0)
0001451C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014520 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014524                            ;		subq.b	#0,($FFFFFE12).w ; subtract 1 from number of lives
00014524 6600                       		bne.s	loc_138D4
00014526 317C 0000 003A             		move.w	#0,$3A(a0)
0001452C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014532 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014538 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001453E 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014542                            
00014542                            loc_138C2:
00014542 303C 008F                  		move.w	#$8F,d0
00014546 4EB9 0000 11AE             		jsr	(PlaySound).l	; play game over music
0001454C 7003                       		moveq	#3,d0
0001454E 4EF9 0000 13B6             		jmp	(LoadPLC).l	; load game over patterns
00014554                            ; ===========================================================================
00014554                            
00014554                            loc_138D4:
00014554 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001455A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001455E 6700                       		beq.s	locret_13900	; if not, branch
00014560 317C 0000 003A             		move.w	#0,$3A(a0)
00014566 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001456C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014572 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014578 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001457E 60C2                       		bra.s	loc_138C2
00014580                            ; ===========================================================================
00014580                            
00014580                            locret_13900:
00014580 4E75                       		rts	
00014582                            ; End of function GameOver
00014582                            
00014582                            ; ===========================================================================
00014582                            ; ---------------------------------------------------------------------------
00014582                            ; Sonic	when the level is restarted
00014582                            ; ---------------------------------------------------------------------------
00014582                            
00014582                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014582 4A68 003A                  		tst.w	$3A(a0)
00014586 6700                       		beq.s	locret_13914
00014588 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001458C 6600                       		bne.s	locret_13914
0001458E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014594                            
00014594                            locret_13914:
00014594 4E75                       		rts	
00014596                            
00014596                            ; ---------------------------------------------------------------------------
00014596                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014596                            ; ---------------------------------------------------------------------------
00014596                            
00014596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014596                            
00014596                            
00014596                            Sonic_Loops:				; XREF: Obj01_Control
00014596                            	;	cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?	; MJ: Commented out, we don't want SLZ having any rolling chunks =P
00014596                            	;	beq.s	loc_13926	; if yes, branch
00014596 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001459A 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001459E                            
0001459E                            loc_13926:
0001459E 3028 000C                  		move.w	$0C(a0),d0				; MJ: Load Y position
000145A2 3228 0008                  		move.w	$08(a0),d1				; MJ: Load X position
000145A6 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
000145AA E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
000145AC EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
000145AE 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
000145B2 D041                       		add.w	d1,d0					; MJ: add together
000145B4 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: Load address of layout
000145B8 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct 128x128 chunk ID based on the position of Sonic
000145BC                            
000145BC                            	;	cmp.b	#$75,d1					; MJ: is the chunk 75 (Top top left S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$76,d1					; MJ: is the chunk 76 (Top top right S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$77,d1					; MJ: is the chunk 77 (Top bottom left S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$78,d1					; MJ: is the chunk 78 (Top bottom right S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$79,d1					; MJ: is the chunk 79 (Bottom top left S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$7A,d1					; MJ: is the chunk 7A (Bottom top right S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$7B,d1					; MJ: is the chunk 7B (Bottom bottom left S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            	;	cmp.b	#$7C,d1					; MJ: is the chunk 7C (Bottom bottom right S Bend)
000145BC                            	;	beq.w	Obj01_ChkRoll				; MJ: if so, branch
000145BC                            
000145BC                            	;	cmp.b	($FFFFF7AE).w,d1			; MJ: this shit is commented out as it's used for loops (Which will be delt with by pathswappers)
000145BC                            	;	beq.w	Obj01_ChkRoll
000145BC                            	;	cmp.b	($FFFFF7AF).w,d1
000145BC                            	;	beq.w	Obj01_ChkRoll
000145BC                            	;	cmp.b	($FFFFF7AC).w,d1
000145BC                            	;	beq.s	loc_13976
000145BC                            	;	cmp.b	($FFFFF7AD).w,d1
000145BC                            	;	beq.s	loc_13966
000145BC 08A8 0006 0001             		bclr	#6,1(a0)
000145C2 4E75                       		rts	
000145C4                            ; ===========================================================================
000145C4                            
000145C4                            loc_13966:
000145C4 0828 0001 0022             		btst	#1,$22(a0)
000145CA 6700                       		beq.s	loc_13976
000145CC 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000145D2 4E75                       		rts	
000145D4                            ; ===========================================================================
000145D4                            
000145D4                            loc_13976:
000145D4 3428 0008                  		move.w	8(a0),d2
000145D8 0C02 002C                  		cmpi.b	#$2C,d2
000145DC 6400                       		bcc.s	loc_13988
000145DE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000145E4 4E75                       		rts	
000145E6                            ; ===========================================================================
000145E6                            
000145E6                            loc_13988:
000145E6 0C02 00E0                  		cmpi.b	#-$20,d2
000145EA 6500                       		bcs.s	loc_13996
000145EC 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000145F2 4E75                       		rts	
000145F4                            ; ===========================================================================
000145F4                            
000145F4                            loc_13996:
000145F4 0828 0006 0001             		btst	#6,1(a0)
000145FA 6600                       		bne.s	loc_139B2
000145FC 1228 0026                  		move.b	$26(a0),d1
00014600 6700                       		beq.s	locret_139C2
00014602 0C01 0080                  		cmpi.b	#-$80,d1
00014606 6200                       		bhi.s	locret_139C2
00014608 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001460E 4E75                       		rts	
00014610                            ; ===========================================================================
00014610                            
00014610                            loc_139B2:
00014610 1228 0026                  		move.b	$26(a0),d1
00014614 0C01 0080                  		cmpi.b	#-$80,d1
00014618 6300                       		bls.s	locret_139C2
0001461A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014620                            
00014620                            locret_139C2:
00014620 4E75                       		rts	
00014622                            ; End of function Sonic_Loops
00014622                            
00014622                            ; ---------------------------------------------------------------------------
00014622                            ; Subroutine to	animate	Sonic's sprites
00014622                            ; ---------------------------------------------------------------------------
00014622                            
00014622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014622                            
00014622                            
00014622                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014622 43F9 0000 0000             		lea	(SonicAniData).l,a1
00014628 7000                       		moveq	#0,d0
0001462A 1028 001C                  		move.b	$1C(a0),d0
0001462E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014632 6700                       		beq.s	SAnim_Do	; if not, branch
00014634 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014638 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001463E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014644                            
00014644                            SAnim_Do:
00014644 D040                       		add.w	d0,d0
00014646 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001464A 1011                       		move.b	(a1),d0
0001464C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001464E 1228 0022                  		move.b	$22(a0),d1
00014652 0201 0001                  		andi.b	#1,d1
00014656 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001465C 8328 0001                  		or.b	d1,1(a0)
00014660 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014664 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014666 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001466A                            
0001466A                            SAnim_Do2:
0001466A 7200                       		moveq	#0,d1
0001466C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014670 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014674 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014676                            
00014676                            SAnim_Next:
00014676 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001467A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001467E                            
0001467E                            SAnim_Delay:
0001467E 4E75                       		rts	
00014680                            ; ===========================================================================
00014680                            
00014680                            SAnim_End_FF:
00014680 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014682 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014684 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001468A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001468E 60E6                       		bra.s	SAnim_Next
00014690                            ; ===========================================================================
00014690                            
00014690                            SAnim_End_FE:
00014690 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014692 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014694 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014698 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001469C 9200                       		sub.b	d0,d1
0001469E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000146A2 60D2                       		bra.s	SAnim_Next
000146A4                            ; ===========================================================================
000146A4                            
000146A4                            SAnim_End_FD:
000146A4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000146A6 6600                       		bne.s	SAnim_End	; if not, branch
000146A8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000146AE                            
000146AE                            SAnim_End:
000146AE 4E75                       		rts	
000146B0                            ; ===========================================================================
000146B0                            
000146B0                            SAnim_WalkRun:				; XREF: SAnim_Do
000146B0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000146B4 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000146B6 5200                       		addq.b	#1,d0		; is animation walking/running?
000146B8 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000146BC 7200                       		moveq	#0,d1
000146BE 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000146C2 1428 0022                  		move.b	$22(a0),d2
000146C6 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000146CA 6600                       		bne.s	loc_13A70	; if yes, branch
000146CC 4600                       		not.b	d0		; reverse angle
000146CE                            
000146CE                            loc_13A70:
000146CE 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000146D2 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000146D4 7203                       		moveq	#3,d1
000146D6                            
000146D6                            loc_13A78:
000146D6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000146DC B302                       		eor.b	d1,d2
000146DE 8528 0001                  		or.b	d2,1(a0)
000146E2 0828 0005 0022             		btst	#5,$22(a0)
000146E8 6600 0000                  		bne.w	SAnim_Push
000146EC E808                       		lsr.b	#4,d0		; divide angle by $10
000146EE 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000146F2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000146F6 6A00                       		bpl.s	loc_13A9C
000146F8 4442                       		neg.w	d2
000146FA                            
000146FA                            loc_13A9C:
000146FA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014700 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014704 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014706 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001470C 1200                       		move.b	d0,d1
0001470E E209                       		lsr.b	#1,d1
00014710 D001                       		add.b	d1,d0
00014712                            
00014712                            loc_13AB4:
00014712 D000                       		add.b	d0,d0
00014714 1600                       		move.b	d0,d3
00014716 4442                       		neg.w	d2
00014718 0642 0800                  		addi.w	#$800,d2
0001471C 6A00                       		bpl.s	loc_13AC2
0001471E 7400                       		moveq	#0,d2
00014720                            
00014720                            loc_13AC2:
00014720 E04A                       		lsr.w	#8,d2
00014722 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014726 6100 FF42                  		bsr.w	SAnim_Do2
0001472A D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001472E 4E75                       		rts	
00014730                            ; ===========================================================================
00014730                            
00014730                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014730 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014732 6600                       		bne.s	SAnim_Push	; if not, branch
00014734 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014738 6A00                       		bpl.s	loc_13ADE
0001473A 4442                       		neg.w	d2
0001473C                            
0001473C                            loc_13ADE:
0001473C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014742 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014746 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014748 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001474E                            
0001474E                            loc_13AF0:
0001474E 4442                       		neg.w	d2
00014750 0642 0400                  		addi.w	#$400,d2
00014754 6A00                       		bpl.s	loc_13AFA
00014756 7400                       		moveq	#0,d2
00014758                            
00014758                            loc_13AFA:
00014758 E04A                       		lsr.w	#8,d2
0001475A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001475E 1228 0022                  		move.b	$22(a0),d1
00014762 0201 0001                  		andi.b	#1,d1
00014766 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001476C 8328 0001                  		or.b	d1,1(a0)
00014770 6000 FEF8                  		bra.w	SAnim_Do2
00014774                            ; ===========================================================================
00014774                            
00014774                            SAnim_Push:				; XREF: SAnim_RollJump
00014774 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014778 6B00                       		bmi.s	loc_13B1E
0001477A 4442                       		neg.w	d2
0001477C                            
0001477C                            loc_13B1E:
0001477C 0642 0800                  		addi.w	#$800,d2
00014780 6A00                       		bpl.s	loc_13B26
00014782 7400                       		moveq	#0,d2
00014784                            
00014784                            loc_13B26:
00014784 EC4A                       		lsr.w	#6,d2
00014786 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001478A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014790 1228 0022                  		move.b	$22(a0),d1
00014794 0201 0001                  		andi.b	#1,d1
00014798 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001479E 8328 0001                  		or.b	d1,1(a0)
000147A2 6000 FEC6                  		bra.w	SAnim_Do2
000147A6                            ; End of function Sonic_Animate
000147A6                            
000147A6                            ; ===========================================================================
000147A6                            SonicAniData:
000147A6                            	include "_anim\Sonic.asm"
000147A6                            ; ---------------------------------------------------------------------------
000147A6                            ; Animation script - Sonic
000147A6                            ; ---------------------------------------------------------------------------
000147A6 0000                       		dc.w SonAni_Walk-SonicAniData
000147A8 0000                       		dc.w SonAni_Run-SonicAniData
000147AA 0000                       		dc.w SonAni_Roll-SonicAniData
000147AC 0000                       		dc.w SonAni_Roll2-SonicAniData
000147AE 0000                       		dc.w SonAni_Push-SonicAniData
000147B0 0000                       		dc.w SonAni_Wait-SonicAniData
000147B2 0000                       		dc.w SonAni_Balance-SonicAniData
000147B4 0000                       		dc.w SonAni_LookUp-SonicAniData
000147B6 0000                       		dc.w SonAni_Duck-SonicAniData
000147B8 0000                       		dc.w SonAni_Warp1-SonicAniData
000147BA 0000                       		dc.w SonAni_Warp2-SonicAniData
000147BC 0000                       		dc.w SonAni_Warp3-SonicAniData
000147BE 0000                       		dc.w SonAni_Warp4-SonicAniData
000147C0 0000                       		dc.w SonAni_Stop-SonicAniData
000147C2 0000                       		dc.w SonAni_Float1-SonicAniData
000147C4 0000                       		dc.w SonAni_Float2-SonicAniData
000147C6 0000                       		dc.w SonAni_Spring-SonicAniData
000147C8 0000                       		dc.w SonAni_LZHang-SonicAniData
000147CA 0000                       		dc.w SonAni_Leap1-SonicAniData
000147CC 0000                       		dc.w SonAni_Leap2-SonicAniData
000147CE 0000                       		dc.w SonAni_Surf-SonicAniData
000147D0 0000                       		dc.w SonAni_Bubble-SonicAniData
000147D2 0000                       		dc.w SonAni_Death1-SonicAniData
000147D4 0000                       		dc.w SonAni_Drown-SonicAniData
000147D6 0000                       		dc.w SonAni_Death2-SonicAniData
000147D8 0000                       		dc.w SonAni_Shrink-SonicAniData
000147DA 0000                       		dc.w SonAni_Hurt-SonicAniData
000147DC 0000                       		dc.w SonAni_LZSlide-SonicAniData
000147DE 0000                       		dc.w SonAni_Blank-SonicAniData
000147E0 0000                       		dc.w SonAni_Float3-SonicAniData
000147E2 0000                       		dc.w SonAni_Float4-SonicAniData
000147E4 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
000147EC FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000147F4 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000147FC FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014804 FD01 0101 01FF FFFF        SonAni_Push:	dc.b $FD, 1, 1, 1, 1, $FF, $FF,	$FF
0001480C 3F01 FF00                  SonAni_Wait:	dc.b $3F, 1, $FF, 0
00014810 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00014814 3F01 FF00                  SonAni_LookUp:	dc.b $3F, 1, $FF, 0
00014818 3F01 FF00                  SonAni_Duck:	dc.b $3F, 1, $FF, 0
0001481C 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014820 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014824 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014828 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001482C 0738 38FF                  SonAni_Stop:	dc.b 7,	$38, $38, $FF
00014830 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014834 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001483C 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014840 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014844 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001484A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014850 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014854 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001485C 2F4C FF00                  SonAni_Death1:	dc.b $2F, $4C, $FF, 0
00014860 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014864 034C FF00                  SonAni_Death2:	dc.b 3,	$4C, $FF, 0
00014868 034C 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4C, $4F, $50, $51, $52, 0, $FE, 1, 0
00014872 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00014876 0755 55FF                  SonAni_LZSlide:	dc.b 7, $55, $55, $FF
0001487A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001487E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014886 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001488A                            		even
0001488A                            		even
0001488A                            
0001488A                            ; ---------------------------------------------------------------------------
0001488A                            ; Sonic	pattern	loading	subroutine
0001488A                            ; ---------------------------------------------------------------------------
0001488A                            
0001488A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001488A                            
0001488A                            
0001488A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001488A 7000                               moveq   #0,d0
0001488C 1028 001A                          move.b  $1A(a0),d0      ; load frame number
00014890 B038 F766                          cmp.b   ($FFFFF766).w,d0
00014894 6700 0000                          beq.w   locret_13C96
00014898 11C0 F766                          move.b  d0,($FFFFF766).w
0001489C 0C38 0001 FFF9             		cmpi.b	#$01, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Pepsi)?
000148A2 6600                       		bne.s	PepsimanPLCLoad		; if not, load Pepsiman's PLC
000148A4 45F9 0000 0000             		lea	(PepsiDynPLC).l,a2	; load Pepsi's PLC
000148AA 4EF9 0000 0000             		jmp	ContLoadGAY		; branch to rest of code	
000148B0                            
000148B0                            PepsimanPLCLoad:
000148B0 0C38 0003 FFF9             		cmpi.b	#$03, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Pepsi)?
000148B6 6600                       		bne.s	SonicPLCLoad		; if not, load Sonic's PLC
000148B8 45F9 0000 0000                     lea     (PepsimanDynPLC).l,a2
000148BE 4EF9 0000 0000             		jmp   ContLoadGAY		
000148C4                            		
000148C4                            SonicPLCLoad:
000148C4 45F9 0000 0000                     lea     (SonicDynPLC).l,a2
000148CA 4EF9 0000 0000             		jmp   ContLoadGAY
000148D0                            		
000148D0                            ContLoadGAY:
000148D0 D040                               add.w   d0,d0
000148D2 D4F2 0000                          adda.w  (a2,d0.w),a2
000148D6 7A00                               moveq   #0,d5
000148D8 1A1A                               move.b  (a2)+,d5
000148DA 5345                               subq.w  #1,d5
000148DC 6B00                               bmi.s   locret_13C96
000148DE 383C F000                          move.w  #$F000,d4
000148E2 0C38 0001 FFF9             		cmpi.b	#$01, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Pepsi)?
000148E8 6600                       		bne.s	KnucklesArtLoad		; if not, load Sonic's art
000148EA 2C3C 0000 0000             		move.l  #Art_Pepsi,d6		; load Pepsi's art
000148F0 4EF9 0000 0000             		jmp	SPLC_ReadEntry
000148F6                            		
000148F6                            KnucklesArtLoad:
000148F6 0C38 0002 FFF9             		cmpi.b	#$02, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Knuckles)?
000148FC 6600                       		bne.s	PepsimanArtLoad		; if not, load Sonic's art
000148FE 2C3C 0000 0000             		move.l  #Art_Knuckles,d6		; load Pepsi's art
00014904 4EF9 0000 0000             		jmp	SPLC_ReadEntry
0001490A                            				
0001490A                            PepsimanArtLoad:
0001490A 0C38 0003 FFF9             		cmpi.b	#$03, ($FFFFFFF9).w	; is the multiple character flag set to $01 (Knuckles)?
00014910 6600                       		bne.s	SonicArtLoad		; if not, load Sonic's art
00014912 2C3C 0000 0000             		move.l  #Art_Pepsiman,d6
00014918 4EF9 0000 0000             		jmp	SPLC_ReadEntry
0001491E                            		
0001491E                            SonicArtLoad:
0001491E 2C3C 0000 0000                     move.l  #Art_Sonic,d6
00014924                             
00014924                            SPLC_ReadEntry:
00014924 7200                                       moveq   #0,d1
00014926 121A                                       move.b  (a2)+,d1
00014928 E149                                       lsl.w   #8,d1
0001492A 121A                                       move.b  (a2)+,d1
0001492C 3601                                       move.w  d1,d3
0001492E E04B                                       lsr.w   #8,d3
00014930 0243 00F0                                  andi.w  #$F0,d3
00014934 0643 0010                                  addi.w  #$10,d3
00014938 0241 0FFF                                  andi.w  #$FFF,d1
0001493C EB89                                       lsl.l   #5,d1
0001493E D286                                       add.l   d6,d1
00014940 3404                                       move.w  d4,d2
00014942 D843                                       add.w   d3,d4
00014944 D843                               add.w   d3,d4
00014946 4EB9 0000 4E9A                     jsr     (QueueDMATransfer).l
0001494C 51CD FFD6                          dbf     d5,SPLC_ReadEntry       ; repeat for number of entries
00014950                             
00014950                            locret_13C96:
00014950 4E75                               rts     
00014952                            ; End of function LoadSonicDynPLC
00014952                            
00014952                            ; ===========================================================================
00014952                            ; ---------------------------------------------------------------------------
00014952                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014952                            ; ---------------------------------------------------------------------------
00014952                            
00014952                            Obj0A:					; XREF: Obj_Index
00014952 7000                       		moveq	#0,d0
00014954 1028 0024                  		move.b	$24(a0),d0
00014958 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001495C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014960                            ; ===========================================================================
00014960 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014964 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014968 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001496C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014970 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014972                            ; ===========================================================================
00014972                            
00014972                            Obj0A_Main:				; XREF: Obj0A_Index
00014972 5428 0024                  		addq.b	#2,$24(a0)
00014976 217C 0001 331A 0004        		move.l	#Map_obj64,4(a0)
0001497E 317C 8348 0002             		move.w	#$8348,2(a0)
00014984 117C 0084 0001             		move.b	#$84,1(a0)
0001498A 117C 0010 0019             		move.b	#$10,$19(a0)
00014990 117C 0001 0018             		move.b	#1,$18(a0)
00014996 1028 0028                  		move.b	$28(a0),d0
0001499A 6A00                       		bpl.s	loc_13D00
0001499C 5028 0024                  		addq.b	#8,$24(a0)
000149A0 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000149A8 317C 0440 0002             		move.w	#$440,2(a0)
000149AE 0240 007F                  		andi.w	#$7F,d0
000149B2 1140 0033                  		move.b	d0,$33(a0)
000149B6 6000 0000                  		bra.w	Obj0A_Countdown
000149BA                            ; ===========================================================================
000149BA                            
000149BA                            loc_13D00:
000149BA 1140 001C                  		move.b	d0,$1C(a0)
000149BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000149C4 317C FF78 0012             		move.w	#-$88,$12(a0)
000149CA                            
000149CA                            Obj0A_Animate:				; XREF: Obj0A_Index
000149CA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000149D0 4EB9 0000 AFC8             		jsr	AnimateSprite
000149D6                            
000149D6                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000149D6 3038 F646                  		move.w	($FFFFF646).w,d0
000149DA B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000149DE 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000149E0 117C 0006 0024             		move.b	#6,$24(a0)
000149E6 5E28 001C                  		addq.b	#7,$1C(a0)
000149EA 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000149F0 6700                       		beq.s	Obj0A_Display
000149F2 6000                       		bra.s	Obj0A_Display
000149F4                            ; ===========================================================================
000149F4                            
000149F4                            Obj0A_Wobble:
000149F4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000149F8 6700                       		beq.s	loc_13D44
000149FA 5868 0030                  		addq.w	#4,$30(a0)
000149FE                            
000149FE                            loc_13D44:
000149FE 1028 0026                  		move.b	$26(a0),d0
00014A02 5228 0026                  		addq.b	#1,$26(a0)
00014A06 0240 007F                  		andi.w	#$7F,d0
00014A0A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014A10 1031 0000                  		move.b	(a1,d0.w),d0
00014A14 4880                       		ext.w	d0
00014A16 D068 0030                  		add.w	$30(a0),d0
00014A1A 3140 0008                  		move.w	d0,8(a0)
00014A1E 6100                       		bsr.s	Obj0A_ShowNumber
00014A20 4EBA 9306                  		jsr	SpeedToPos
00014A24 4A28 0001                  		tst.b	1(a0)
00014A28 6A00                       		bpl.s	Obj0A_Delete
00014A2A 4EFA 9316                  		jmp	DisplaySprite
00014A2E                            ; ===========================================================================
00014A2E                            
00014A2E                            Obj0A_Delete:
00014A2E 4EFA 934E                  		jmp	DeleteObject
00014A32                            ; ===========================================================================
00014A32                            
00014A32                            Obj0A_Display:				; XREF: Obj0A_Index
00014A32 6100                       		bsr.s	Obj0A_ShowNumber
00014A34 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014A3A 4EB9 0000 AFC8             		jsr	AnimateSprite
00014A40 4EFA 9300                  		jmp	DisplaySprite
00014A44                            ; ===========================================================================
00014A44                            
00014A44                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014A44 4EFA 9338                  		jmp	DeleteObject
00014A48                            ; ===========================================================================
00014A48                            
00014A48                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014A48 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014A4E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014A50 5368 0038                  		subq.w	#1,$38(a0)
00014A54 6600                       		bne.s	Obj0A_Display2
00014A56 117C 000E 0024             		move.b	#$E,$24(a0)
00014A5C 5E28 001C                  		addq.b	#7,$1C(a0)
00014A60 60D0                       		bra.s	Obj0A_Display
00014A62                            ; ===========================================================================
00014A62                            
00014A62                            Obj0A_Display2:
00014A62 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014A68 4EB9 0000 AFC8             		jsr	AnimateSprite
00014A6E 4A28 0001                  		tst.b	1(a0)
00014A72 6A00                       		bpl.s	Obj0A_Delete3
00014A74 4EFA 92CC                  		jmp	DisplaySprite
00014A78                            ; ===========================================================================
00014A78                            
00014A78                            Obj0A_Delete3:
00014A78 4EFA 9304                  		jmp	DeleteObject
00014A7C                            ; ===========================================================================
00014A7C                            
00014A7C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014A7C 4A68 0038                  		tst.w	$38(a0)
00014A80 6700                       		beq.s	locret_13E1A
00014A82 5368 0038                  		subq.w	#1,$38(a0)
00014A86 6600                       		bne.s	locret_13E1A
00014A88 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014A8E 6400                       		bcc.s	locret_13E1A
00014A90 317C 000F 0038             		move.w	#$F,$38(a0)
00014A96 4268 0012                  		clr.w	$12(a0)
00014A9A 117C 0080 0001             		move.b	#$80,1(a0)
00014AA0 3028 0008                  		move.w	8(a0),d0
00014AA4 9078 F700                  		sub.w	($FFFFF700).w,d0
00014AA8 0640 0080                  		addi.w	#$80,d0
00014AAC 3140 0008                  		move.w	d0,8(a0)
00014AB0 3028 000C                  		move.w	$C(a0),d0
00014AB4 9078 F704                  		sub.w	($FFFFF704).w,d0
00014AB8 0640 0080                  		addi.w	#$80,d0
00014ABC 3140 000A                  		move.w	d0,$A(a0)
00014AC0 117C 000C 0024             		move.b	#$C,$24(a0)
00014AC6                            
00014AC6                            locret_13E1A:
00014AC6 4E75                       		rts	
00014AC8                            ; ===========================================================================
00014AC8                            Obj0A_WobbleData:
00014AC8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014AD9 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014AEA 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014AFB 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014B0B FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014B18 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014B25 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014B32 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014B3F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014B48                            ; ===========================================================================
00014B48                            
00014B48                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014B48 4A68 002C                  		tst.w	$2C(a0)
00014B4C 6600 0000                  		bne.w	loc_13F86
00014B50 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014B56 6400 0000                  		bcc.w	locret_1408C
00014B5A 0838 0006 D022             		btst	#6,($FFFFD022).w
00014B60 6700 0000                  		beq.w	locret_1408C
00014B64 5368 0038                  		subq.w	#1,$38(a0)
00014B68 6A00 0000                  		bpl.w	loc_13FAC
00014B6C 317C 003B 0038             		move.w	#59,$38(a0)
00014B72 317C 0001 0036             		move.w	#1,$36(a0)
00014B78 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00014B7E 0240 0001                  		andi.w	#1,d0
00014B82 1140 0034                  		move.b	d0,$34(a0)
00014B86 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014B8A 0C40 0019                  		cmpi.w	#$19,d0
00014B8E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014B90 0C40 0014                  		cmpi.w	#$14,d0
00014B94 6700                       		beq.s	Obj0A_WarnSound
00014B96 0C40 000F                  		cmpi.w	#$F,d0
00014B9A 6700                       		beq.s	Obj0A_WarnSound
00014B9C 0C40 000C                  		cmpi.w	#$C,d0
00014BA0 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014BA2 6600                       		bne.s	loc_13F02
00014BA4 303C 0092                  		move.w	#$92,d0
00014BA8 4EB9 0000 11AE             		jsr	(PlaySound).l	; play countdown music
00014BAE                            
00014BAE                            loc_13F02:
00014BAE 5328 0032                  		subq.b	#1,$32(a0)
00014BB2 6A00                       		bpl.s	Obj0A_ReduceAir
00014BB4 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014BBA 08E8 0007 0036             		bset	#7,$36(a0)
00014BC0 6000                       		bra.s	Obj0A_ReduceAir
00014BC2                            ; ===========================================================================
00014BC2                            
00014BC2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014BC2 303C 00C2                  		move.w	#$C2,d0
00014BC6 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014BCC                            
00014BCC                            Obj0A_ReduceAir:
00014BCC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014BD0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014BD4 6100 0000                  		bsr.w	ResumeMusic
00014BD8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014BDE 303C 00B2                  		move.w	#$B2,d0
00014BE2 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play drowning sound
00014BE8 117C 000A 0034             		move.b	#$A,$34(a0)
00014BEE 317C 0001 0036             		move.w	#1,$36(a0)
00014BF4 317C 0078 002C             		move.w	#$78,$2C(a0)
00014BFA 2F08                       		move.l	a0,-(sp)
00014BFC 41F8 D000                  		lea	($FFFFD000).w,a0
00014C00 6100 F7F4                  		bsr.w	Sonic_ResetOnFloor
00014C04 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014C0A 08E8 0001 0022             		bset	#1,$22(a0)
00014C10 08E8 0007 0002             		bset	#7,2(a0)
00014C16 317C 0000 0012             		move.w	#0,$12(a0)
00014C1C 317C 0000 0010             		move.w	#0,$10(a0)
00014C22 317C 0000 0014             		move.w	#0,$14(a0)
00014C28 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014C2E 205F                       		movea.l	(sp)+,a0
00014C30 4E75                       		rts	
00014C32                            ; ===========================================================================
00014C32                            
00014C32                            loc_13F86:
00014C32 5368 002C                  		subq.w	#1,$2C(a0)
00014C36 6600                       		bne.s	loc_13F94
00014C38 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014C3E 4E75                       		rts	
00014C40                            ; ===========================================================================
00014C40                            
00014C40                            loc_13F94:
00014C40 2F08                       		move.l	a0,-(sp)
00014C42 41F8 D000                  		lea	($FFFFD000).w,a0
00014C46 4EBA 90E0                  		jsr	SpeedToPos
00014C4A 0668 0010 0012             		addi.w	#$10,$12(a0)
00014C50 205F                       		movea.l	(sp)+,a0
00014C52 6000                       		bra.s	loc_13FAC
00014C54                            ; ===========================================================================
00014C54                            
00014C54                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014C54 6000                       		bra.s	Obj0A_MakeItem
00014C56                            ; ===========================================================================
00014C56                            
00014C56                            loc_13FAC:
00014C56 4A68 0036                  		tst.w	$36(a0)
00014C5A 6700 0000                  		beq.w	locret_1408C
00014C5E 5368 003A                  		subq.w	#1,$3A(a0)
00014C62 6A00 0000                  		bpl.w	locret_1408C
00014C66                            
00014C66                            Obj0A_MakeItem:
00014C66 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00014C6C 0240 000F                  		andi.w	#$F,d0
00014C70 3140 003A                  		move.w	d0,$3A(a0)
00014C74 4EBA 9578                  		jsr	SingleObjLoad
00014C78 6600 0000                  		bne.w	locret_1408C
00014C7C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014C80 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014C86 7006                       		moveq	#6,d0
00014C88 0838 0000 D022             		btst	#0,($FFFFD022).w
00014C8E 6700                       		beq.s	loc_13FF2
00014C90 4440                       		neg.w	d0
00014C92 137C 0040 0026             		move.b	#$40,$26(a1)
00014C98                            
00014C98                            loc_13FF2:
00014C98 D169 0008                  		add.w	d0,8(a1)
00014C9C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014CA2 137C 0006 0028             		move.b	#6,$28(a1)
00014CA8 4A68 002C                  		tst.w	$2C(a0)
00014CAC 6700 0000                  		beq.w	loc_1403E
00014CB0 0268 0007 003A             		andi.w	#7,$3A(a0)
00014CB6 0668 0000 003A             		addi.w	#0,$3A(a0)
00014CBC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014CC0 0440 000C                  		subi.w	#$C,d0
00014CC4 3340 000C                  		move.w	d0,$C(a1)
00014CC8 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00014CCE 1340 0026                  		move.b	d0,$26(a1)
00014CD2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014CD6 0200 0003                  		andi.b	#3,d0
00014CDA 6600                       		bne.s	loc_14082
00014CDC 137C 000E 0028             		move.b	#$E,$28(a1)
00014CE2 6000                       		bra.s	loc_14082
00014CE4                            ; ===========================================================================
00014CE4                            
00014CE4                            loc_1403E:
00014CE4 0828 0007 0036             		btst	#7,$36(a0)
00014CEA 6700                       		beq.s	loc_14082
00014CEC 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014CF0 E24A                       		lsr.w	#1,d2
00014CF2 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00014CF8 0240 0003                  		andi.w	#3,d0
00014CFC 6600                       		bne.s	loc_1406A
00014CFE 08E8 0006 0036             		bset	#6,$36(a0)
00014D04 6600                       		bne.s	loc_14082
00014D06 1342 0028                  		move.b	d2,$28(a1)
00014D0A 337C 001C 0038             		move.w	#$1C,$38(a1)
00014D10                            
00014D10                            loc_1406A:
00014D10 4A28 0034                  		tst.b	$34(a0)
00014D14 6600                       		bne.s	loc_14082
00014D16 08E8 0006 0036             		bset	#6,$36(a0)
00014D1C 6600                       		bne.s	loc_14082
00014D1E 1342 0028                  		move.b	d2,$28(a1)
00014D22 337C 001C 0038             		move.w	#$1C,$38(a1)
00014D28                            
00014D28                            loc_14082:
00014D28 5328 0034                  		subq.b	#1,$34(a0)
00014D2C 6A00                       		bpl.s	locret_1408C
00014D2E 4268 0036                  		clr.w	$36(a0)
00014D32                            
00014D32                            locret_1408C:
00014D32 4E75                       		rts	
00014D34                            
00014D34                            ; ---------------------------------------------------------------------------
00014D34                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014D34                            ; ---------------------------------------------------------------------------
00014D34                            
00014D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D34                            
00014D34                            
00014D34                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014D34 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014D3A 6200                       		bhi.s	loc_140AC
00014D3C 303C 0082                  		move.w	#$82,d0		; play LZ music
00014D40 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00014D46 6600                       		bne.s	loc_140A6
00014D48 303C 0086                  		move.w	#$86,d0		; play SBZ music
00014D4C                            
00014D4C                            loc_140A6:
00014D4C 4EB9 0000 11AE             		jsr	(PlaySound).l
00014D52                            
00014D52                            loc_140AC:
00014D52 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014D58 4238 D372                  		clr.b	($FFFFD372).w
00014D5C 4E75                       		rts	
00014D5E                            ; End of function ResumeMusic
00014D5E                            
00014D5E                            ; ===========================================================================
00014D5E                            Ani_obj0A:
00014D5E                            	include "_anim\obj0A.asm"
00014D5E                            ; ---------------------------------------------------------------------------
00014D5E                            ; Animation script - countdown numbers and bubbles (LZ)
00014D5E                            ; ---------------------------------------------------------------------------
00014D5E 0000                       		dc.w byte_140D6-Ani_obj0A
00014D60 0000                       		dc.w byte_140E0-Ani_obj0A
00014D62 0000                       		dc.w byte_140EA-Ani_obj0A
00014D64 0000                       		dc.w byte_140F4-Ani_obj0A
00014D66 0000                       		dc.w byte_140FE-Ani_obj0A
00014D68 0000                       		dc.w byte_14108-Ani_obj0A
00014D6A 0000                       		dc.w byte_14112-Ani_obj0A
00014D6C 0000                       		dc.w byte_14118-Ani_obj0A
00014D6E 0000                       		dc.w byte_14120-Ani_obj0A
00014D70 0000                       		dc.w byte_14128-Ani_obj0A
00014D72 0000                       		dc.w byte_14130-Ani_obj0A
00014D74 0000                       		dc.w byte_14138-Ani_obj0A
00014D76 0000                       		dc.w byte_14140-Ani_obj0A
00014D78 0000                       		dc.w byte_14148-Ani_obj0A
00014D7A 0000                       		dc.w byte_1414A-Ani_obj0A
00014D7C 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014D86 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014D90 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014D9A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014DA4 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014DAE 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014DB8 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014DBE 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014DC6 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014DCE 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014DD6 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014DDE 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014DE6 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014DEE 0EFC                       byte_14148:	dc.b $E, $FC
00014DF0 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014DF6                            		even
00014DF6                            		even
00014DF6                            
00014DF6                            ; ---------------------------------------------------------------------------
00014DF6                            ; Sprite mappings - drowning countdown numbers (LZ)
00014DF6                            ; ---------------------------------------------------------------------------
00014DF6                            Map_obj0A:
00014DF6                            	include "_maps\obj0A.asm"
00014DF6                            ; ---------------------------------------------------------------------------
00014DF6                            ; Sprite mappings - drowning countdown numbers (LZ)
00014DF6                            ; ---------------------------------------------------------------------------
00014DF6 0000                       		dc.w byte_14152-Map_obj0A
00014DF8 01                         byte_14152:	dc.b 1
00014DF9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014DFE                            		even
00014DFE                            		even
00014DFE                            
00014DFE                            ; ===========================================================================
00014DFE                            ; ---------------------------------------------------------------------------
00014DFE                            ; Object 38 - shield and invincibility stars
00014DFE                            ; ---------------------------------------------------------------------------
00014DFE                            
00014DFE                            Obj38:                                  ; XREF: Obj_Index
00014DFE 223C 0000 0000                             move.l  #UnC_Shield,d1                          ; Call for Regular Shield Art
00014E04 343C A820                                  move.w  #$A820,d2                               ; Load Art from this location (VRAM location*20)
00014E08                                                                                            ; In this case, VRAM = $541*20
00014E08 363C 0200                                  move.w  #$200,d3
00014E0C 4EB9 0000 4E9A                             jsr     (QueueDMATransfer).l
00014E12                            ; ---------------------------------------------------------------------------           
00014E12                            ShieldObj_Main: 
00014E12 7000                                       moveq   #0,d0
00014E14 1028 0024                                  move.b  $24(a0),d0
00014E18 323B 0000                                  move.w  Shield_Index(pc,d0.w),d1
00014E1C 4EFB 1000                                  jmp     Shield_Index(pc,d1.w)
00014E20                            ; ===========================================================================           
00014E20                            Shield_Index:                 
00014E20 0000                                       dc.w    Shield_Init-Shield_Index                
00014E22 0000                                       dc.w    ShieldChecks-Shield_Index
00014E24                            ; ===========================================================================           
00014E24                            Shield_Init:
00014E24 5428 0024                                  addq.b  #2,$24(a0)
00014E28 217C 0000 0000 0004                        move.l  #Map_Obj38, $0004(A0)                   ; Load Shield Map into place    
00014E30 117C 0004 0001                             move.b  #4,1(a0)                                                
00014E36 117C 0001 0018                             move.b  #1,$18(a0)
00014E3C 117C 0018 0019                             move.b  #$18,$19(a0)
00014E42 317C 0541 0002                             move.w  #$541,2(a0)                             ; Set VRAM location
00014E48 0838 0007 D002                             btst    #7,($FFFFD002).w
00014E4E 6700                                       beq.s   ShieldChecks
00014E50 08E8 0007 0002                             bset    #7,2(a0)
00014E56                            ; ---------------------------------------------------------------------------           
00014E56                            ShieldChecks:
00014E56 4A38 FE2D                                  tst.b   ($FFFFFE2D).w                           ; Test if Sonic has a shield
00014E5A 6600                                       bne.s   SonicHasShield                          ; If so, branch to do nothing
00014E5C 4A38 FE2C                                  tst.b   ($FFFFFE2C).w                           ; Test if Sonic got invisibility
00014E60 6700                                       beq.s   jmp_DeleteObj38                         ; If so, delete object temporarily
00014E62                            ShieldProperties:               
00014E62 3178 D008 0008                             move.w  ($FFFFD008).w,8(a0)                     ; Load Main Character X-position
00014E68 3178 D00C 000C                             move.w  ($FFFFD00C).w,$C(a0)                    ; Load Main Character Y-position
00014E6E 1178 D022 0022                             move.b  ($FFFFD022).w,$22(a0)                   ; Something about Character status
00014E74 43F9 0000 0000                             lea     (Ani_obj38).l, a1                       ; Load Animation Scripts into a1        
00014E7A 4EB9 0000 AFC8                             jsr     AnimateSprite                           
00014E80 4EFA 8EC0                                  jmp     DisplaySprite                           
00014E84                            SonicHasShield:
00014E84 4E75                                       rts    
00014E86                            jmp_DeleteObj38: ; loc_12648:
00014E86 4EFA 8EF6                                  jmp     DeleteObject 
00014E8A                            ; ===========================================================================
00014E8A                            
00014E8A                            
00014E8A                            ; ---------------------------------------------------------------------------
00014E8A                            ; Object 4A - New Invincibility Object
00014E8A                            ; ---------------------------------------------------------------------------
00014E8A                            
00014E8A                            Obj4A:                                  ; XREF: Obj_Index
00014E8A 223C 0000 0000                             move.l  #UnC_Stars,d1
00014E90 343C A820                                  move.w  #$A820,d2
00014E94 363C 0200                                  move.w  #$200,d3
00014E98 4EB9 0000 4E9A                             jsr     (QueueDMATransfer).l
00014E9E                            Invincibility_Main:
00014E9E 7000                                       moveq   #0,d0
00014EA0 1028 0024                                  move.b  $24(a0),d0
00014EA4                            Invincibility_Init:             
00014EA4 5428 0024                                  addq.b  #2,$24(a0)
00014EA8 217C 0000 0000 0004                        move.l  #Map_obj38,4(a0)        ; loads mapping
00014EB0 117C 0004 0001                             move.b  #4,1(a0)
00014EB6 117C 0001 0018                             move.b  #1,$18(a0)
00014EBC 117C 0010 0019                             move.b  #$10,$19(a0)
00014EC2 317C 0541 0002                             move.w  #$541,2(a0)     ; shield specific code
00014EC8                            ; ===========================================================================
00014EC8                            
00014EC8                            Obj4A_Stars:                            ; XREF: Obj38_Index
00014EC8 4A38 FE2D                                  tst.b   ($FFFFFE2D).w   ; does Sonic have invincibility?
00014ECC 6700                                       beq.s   Obj4A_Delete2   ; if not, branch
00014ECE 3038 F7A8                                  move.w  ($FFFFF7A8).w,d0
00014ED2 1228 001C                                  move.b  $1C(a0),d1
00014ED6 5301                                       subq.b  #1,d1
00014ED8 6000                                       bra.s   Obj4A_StarTrail
00014EDA                            ; ===========================================================================
00014EDA E909                                       lsl.b   #4,d1
00014EDC 5801                                       addq.b  #4,d1
00014EDE 9001                                       sub.b   d1,d0
00014EE0 1228 0030                                  move.b  $30(a0),d1
00014EE4 9001                                       sub.b   d1,d0
00014EE6 5801                                       addq.b  #4,d1
00014EE8 0201 000F                                  andi.b  #$F,d1
00014EEC 1141 0030                                  move.b  d1,$30(a0)
00014EF0 6000                                       bra.s   Obj4A_StarTrail2a
00014EF2                            ; ===========================================================================
00014EF2                            
00014EF2                            Obj4A_StarTrail:                        ; XREF: Obj4A_Stars
00014EF2 E709                                       lsl.b   #3,d1
00014EF4 1401                                       move.b  d1,d2
00014EF6 D201                                       add.b   d1,d1
00014EF8 D202                                       add.b   d2,d1
00014EFA 5801                                       addq.b  #4,d1
00014EFC 9001                                       sub.b   d1,d0
00014EFE 1228 0030                                  move.b  $30(a0),d1
00014F02 9001                                       sub.b   d1,d0
00014F04 5801                                       addq.b  #4,d1
00014F06 0C01 0018                                  cmpi.b  #$18,d1
00014F0A 6500                                       bcs.s   Obj4A_StarTrail2
00014F0C 7200                                       moveq   #0,d1
00014F0E                            
00014F0E                            Obj4A_StarTrail2:
00014F0E 1141 0030                                  move.b  d1,$30(a0)
00014F12                            
00014F12                            Obj4A_StarTrail2a:
00014F12 43F8 CB00                                  lea     ($FFFFCB00).w,a1
00014F16 43F1 0000                                  lea     (a1,d0.w),a1
00014F1A 3159 0008                                  move.w  (a1)+,8(a0)
00014F1E 3159 000C                                  move.w  (a1)+,$C(a0)
00014F22 1178 D022 0022                             move.b  ($FFFFD022).w,$22(a0)
00014F28 43F9 0000 0000                             lea     (Ani_obj38).l,a1
00014F2E 4EB9 0000 AFC8                             jsr     (AnimateSprite).l
00014F34 4EF9 0000 DD42                             jmp     (DisplaySprite).l
00014F3A                            ; ===========================================================================
00014F3A                            
00014F3A                            Obj4A_Delete2:                          ; XREF: Obj4A_Stars
00014F3A 4EF9 0000 DD7E                             jmp     (DeleteObject).l          
00014F40                            ; ===========================================================================
00014F40                            ; ---------------------------------------------------------------------------
00014F40                            ; Object 08 - water splash (LZ)
00014F40                            ; ---------------------------------------------------------------------------
00014F40                            
00014F40                            Obj08:					; XREF: Obj_Index
00014F40 7000                       		moveq	#0,d0
00014F42 1028 0024                  		move.b	$24(a0),d0
00014F46 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014F4A 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014F4E                            ; ===========================================================================
00014F4E 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014F50 0000                       		dc.w Obj08_Display-Obj08_Index
00014F52 0000                       		dc.w Obj08_Delete-Obj08_Index
00014F54                            ; ===========================================================================
00014F54                            
00014F54                            Obj08_Main:				; XREF: Obj08_Index
00014F54 5428 0024                  		addq.b	#2,$24(a0)
00014F58 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014F60 0028 0004 0001             		ori.b	#4,1(a0)
00014F66 117C 0001 0018             		move.b	#1,$18(a0)
00014F6C 117C 0010 0019             		move.b	#$10,$19(a0)
00014F72 317C 4259 0002             		move.w	#$4259,2(a0)
00014F78 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014F7E                            
00014F7E                            Obj08_Display:				; XREF: Obj08_Index
00014F7E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014F84 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014F8A 4EB9 0000 AFC8             		jsr	AnimateSprite
00014F90 4EFA 8DB0                  		jmp	DisplaySprite
00014F94                            ; ===========================================================================
00014F94                            
00014F94                            Obj08_Delete:				; XREF: Obj08_Index
00014F94 4EFA 8DE8                  		jmp	DeleteObject	; delete when animation	is complete
00014F98                            ; ===========================================================================
00014F98                            Ani_obj38:
00014F98                            	include "_anim\obj38.asm"
00014F98                            ; ---------------------------------------------------------------------------
00014F98                            ; Animation script - shield and invincibility stars
00014F98                            ; ---------------------------------------------------------------------------
00014F98 0000                       		dc.w byte_14356-Ani_obj38
00014F9A 0000                       		dc.w byte_1435E-Ani_obj38
00014F9C 0000                       		dc.w byte_14364-Ani_obj38
00014F9E 0000                       		dc.w byte_1437E-Ani_obj38
00014FA0 0000                       		dc.w byte_14398-Ani_obj38
00014FA2 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014FAA 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014FB0 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014FC1 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014FCA 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014FDB 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014FE4 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014FF5 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014FFE                            		even
00014FFE                            		even
00014FFE                            
00014FFE                            ; ---------------------------------------------------------------------------
00014FFE                            ; Sprite mappings - shield and invincibility stars
00014FFE                            ; ---------------------------------------------------------------------------
00014FFE                            Map_obj38:
00014FFE                            	include "_maps\obj38.asm"
00014FFE                            ; ---------------------------------------------------------------------------
00014FFE                            ; Sprite mappings - shield and invincibility stars
00014FFE                            ; ---------------------------------------------------------------------------
00014FFE 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015002 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015006 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001500A 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001500E 04                         byte_143C2:	dc.b 4
0001500F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015014 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015019 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001501E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015023 04                         byte_143D7:	dc.b 4
00015024 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015029 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001502E 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015033 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015038 04                         byte_143EC:	dc.b 4
00015039 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001503E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015043 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015048 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001504D 04                         byte_14401:	dc.b 4
0001504E E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015053 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015058 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001505D 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015062 04                         byte_14416:	dc.b 4
00015063 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015068 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001506D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015072 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015077 04                         byte_1442B:	dc.b 4
00015078 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001507D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015082 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015087 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001508C 04                         byte_14440:	dc.b 4
0001508D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015092 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015097 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001509C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000150A2 00                         		even
000150A2 00                         		even
000150A2                            
000150A2                            Ani_obj4A:
000150A2                            	include "_anim\obj4A.asm"
000150A2                            ; ---------------------------------------------------------------------------
000150A2                            ; Animation script - special stage entry effect from beta
000150A2                            ; ---------------------------------------------------------------------------
000150A2 0000                       		dc.w byte_14458-Ani_obj4A
000150A4 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000150B8                            		even
000150B8                            		even
000150B8                            
000150B8                            ; ---------------------------------------------------------------------------
000150B8                            ; Sprite mappings - special stage entry	from beta
000150B8                            ; ---------------------------------------------------------------------------
000150B8                            Map_obj4A:
000150B8                            	include "_maps\obj4A.asm"
000150B8                            ; ---------------------------------------------------------------------------
000150B8                            ; Sprite mappings - special stage entry	from beta
000150B8                            ; ---------------------------------------------------------------------------
000150B8 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000150BC 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000150C0 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000150C4 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000150C8 03                         byte_1447C:	dc.b 3
000150C9 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000150CE 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000150D3 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000150D8 03                         byte_1448C:	dc.b 3
000150D9 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000150DE 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000150E3 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000150E8 05                         byte_1449C:	dc.b 5
000150E9 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000150EE EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000150F3 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000150F8 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000150FD 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015102 09                         byte_144B6:	dc.b 9
00015103 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015108 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001510D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015112 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015117 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001511C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015121 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015126 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001512B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015130 12                         byte_144E4:	dc.b $12
00015131 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015136 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001513B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015140 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015145 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001514A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001514F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015154 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015159 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001515E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015163 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015168 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001516D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015172 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015177 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001517C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015181 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015186 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001518B 11                         byte_1453F:	dc.b $11
0001518C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015191 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015196 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001519B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000151A0 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000151A5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000151AA 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000151AF F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000151B4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000151B9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000151BE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000151C3 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000151C8 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000151CD 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000151D2 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000151D7 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000151DC 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000151E1 09                         byte_14595:	dc.b 9
000151E2 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000151E7 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000151EC 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000151F1 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000151F6 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000151FB FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015200 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015205 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001520A 04                         		dc.b 4
0001520B 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015210                            		even
00015210                            		even
00015210                            
00015210                            Ani_obj08:
00015210                            	include "_anim\obj08.asm"
00015210                            ; ---------------------------------------------------------------------------
00015210                            ; Animation script - water splash (LZ)
00015210                            ; ---------------------------------------------------------------------------
00015210 0000                       		dc.w byte_145C6-Ani_obj08
00015212 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015218                            		even
00015218                            		even
00015218                            
00015218                            ; ---------------------------------------------------------------------------
00015218                            ; Sprite mappings - water splash (LZ)
00015218                            ; ---------------------------------------------------------------------------
00015218                            Map_obj08:
00015218                            	include "_maps\obj08.asm"
00015218                            ; ---------------------------------------------------------------------------
00015218                            ; Sprite mappings - water splash (LZ)
00015218                            ; ---------------------------------------------------------------------------
00015218 0000                       		dc.w byte_145D2-Map_obj08
0001521A 0000                       		dc.w byte_145DD-Map_obj08
0001521C 0000                       		dc.w byte_145E8-Map_obj08
0001521E 02                         byte_145D2:	dc.b 2
0001521F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015224 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015229 02                         byte_145DD:	dc.b 2
0001522A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001522F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015234 01                         byte_145E8:	dc.b 1
00015235 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001523A                            		even
0001523A                            		even
0001523A                            
0001523A                            
0001523A                            
0001523A                            
0001523A                            
0001523A                            
0001523A                            ; ===========================================================================
0001523A                            ; ---------------------------------------------------------------------------
0001523A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001523A                            ; ---------------------------------------------------------------------------
0001523A                            
0001523A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001523A                            
0001523A                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001523A 21F8 FFD0 F796             		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
00015240 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
00015244 6700                       		beq.s	SAP_First				; MJ: if not, branch
00015246 21F8 FFD4 F796             		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
0001524C                            
0001524C                            SAP_First:
0001524C 0828 0003 0022             		btst	#3,$22(a0)
00015252 6700                       		beq.s	loc_14602
00015254 7000                       		moveq	#0,d0
00015256 11C0 F768                  		move.b	d0,($FFFFF768).w
0001525A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001525E 4E75                       		rts	
00015260                            ; ===========================================================================
00015260                            
00015260                            loc_14602:
00015260 7003                       		moveq	#3,d0
00015262 11C0 F768                  		move.b	d0,($FFFFF768).w
00015266 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001526A 1028 0026                  		move.b	$26(a0),d0
0001526E 0600 0020                  		addi.b	#$20,d0
00015272 6A00                       		bpl.s	loc_14624
00015274 1028 0026                  		move.b	$26(a0),d0
00015278 6A00                       		bpl.s	loc_1461E
0001527A 5300                       		subq.b	#1,d0
0001527C                            
0001527C                            loc_1461E:
0001527C 0600 0020                  		addi.b	#$20,d0
00015280 6000                       		bra.s	loc_14630
00015282                            ; ===========================================================================
00015282                            
00015282                            loc_14624:
00015282 1028 0026                  		move.b	$26(a0),d0
00015286 6A00                       		bpl.s	loc_1462C
00015288 5200                       		addq.b	#1,d0
0001528A                            
0001528A                            loc_1462C:
0001528A 0600 001F                  		addi.b	#$1F,d0
0001528E                            
0001528E                            loc_14630:
0001528E 0200 00C0                  		andi.b	#$C0,d0
00015292 0C00 0040                  		cmpi.b	#$40,d0
00015296 6700 0000                  		beq.w	Sonic_WalkVertL
0001529A 0C00 0080                  		cmpi.b	#$80,d0
0001529E 6700 0000                  		beq.w	Sonic_WalkCeiling
000152A2 0C00 00C0                  		cmpi.b	#$C0,d0
000152A6 6700 0000                  		beq.w	Sonic_WalkVertR
000152AA 3428 000C                  		move.w	$C(a0),d2
000152AE 3628 0008                  		move.w	8(a0),d3
000152B2 7000                       		moveq	#0,d0
000152B4 1028 0016                  		move.b	$16(a0),d0
000152B8 4880                       		ext.w	d0
000152BA D440                       		add.w	d0,d2
000152BC 1028 0017                  		move.b	$17(a0),d0
000152C0 4880                       		ext.w	d0
000152C2 D640                       		add.w	d0,d3
000152C4 49F8 F768                  		lea	($FFFFF768).w,a4
000152C8 367C 0010                  		movea.w	#$10,a3
000152CC 3C3C 0000                  		move.w	#0,d6
000152D0 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000152D2 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000152D6 3F01                       		move.w	d1,-(sp)
000152D8 3428 000C                  		move.w	$C(a0),d2
000152DC 3628 0008                  		move.w	8(a0),d3
000152E0 7000                       		moveq	#0,d0
000152E2 1028 0016                  		move.b	$16(a0),d0
000152E6 4880                       		ext.w	d0
000152E8 D440                       		add.w	d0,d2
000152EA 1028 0017                  		move.b	$17(a0),d0
000152EE 4880                       		ext.w	d0
000152F0 4440                       		neg.w	d0
000152F2 D640                       		add.w	d0,d3
000152F4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152F8 367C 0010                  		movea.w	#$10,a3
000152FC 3C3C 0000                  		move.w	#0,d6
00015300 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015302 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00015306 301F                       		move.w	(sp)+,d0
00015308 6100 0000                  		bsr.w	Sonic_Angle
0001530C 4A41                       		tst.w	d1
0001530E 6700                       		beq.s	locret_146BE
00015310 6A00                       		bpl.s	loc_146C0
00015312 0C41 FFF2                  		cmpi.w	#-$E,d1
00015316 6D00                       		blt.s	locret_146E6
00015318 D368 000C                  		add.w	d1,$C(a0)
0001531C                            
0001531C                            locret_146BE:
0001531C 4E75                       		rts	
0001531E                            ; ===========================================================================
0001531E                            
0001531E                            loc_146C0:
0001531E 0C41 000E                  		cmpi.w	#$E,d1
00015322 6E00                       		bgt.s	loc_146CC
00015324                            
00015324                            loc_146C6:
00015324 D368 000C                  		add.w	d1,$C(a0)
00015328 4E75                       		rts	
0001532A                            ; ===========================================================================
0001532A                            
0001532A                            loc_146CC:
0001532A 4A28 0038                  		tst.b	$38(a0)
0001532E 66F4                       		bne.s	loc_146C6
00015330 08E8 0001 0022             		bset	#1,$22(a0)
00015336 08A8 0005 0022             		bclr	#5,$22(a0)
0001533C 117C 0001 001D             		move.b	#1,$1D(a0)
00015342 4E75                       		rts	
00015344                            ; ===========================================================================
00015344                            
00015344                            locret_146E6:
00015344 4E75                       		rts	
00015346                            ; End of function Sonic_AnglePos
00015346                            
00015346                            ; ===========================================================================
00015346 2428 0008                  		move.l	8(a0),d2
0001534A 3028 0010                  		move.w	$10(a0),d0
0001534E 48C0                       		ext.l	d0
00015350 E180                       		asl.l	#8,d0
00015352 9480                       		sub.l	d0,d2
00015354 2142 0008                  		move.l	d2,8(a0)
00015358 303C 0038                  		move.w	#$38,d0
0001535C 48C0                       		ext.l	d0
0001535E E180                       		asl.l	#8,d0
00015360 9680                       		sub.l	d0,d3
00015362 2143 000C                  		move.l	d3,$C(a0)
00015366 4E75                       		rts	
00015368                            ; ===========================================================================
00015368                            
00015368                            locret_1470A:
00015368 4E75                       		rts	
0001536A                            ; ===========================================================================
0001536A 2628 000C                  		move.l	$C(a0),d3
0001536E 3028 0012                  		move.w	$12(a0),d0
00015372 0440 0038                  		subi.w	#$38,d0
00015376 3140 0012                  		move.w	d0,$12(a0)
0001537A 48C0                       		ext.l	d0
0001537C E180                       		asl.l	#8,d0
0001537E 9680                       		sub.l	d0,d3
00015380 2143 000C                  		move.l	d3,$C(a0)
00015384 4E75                       		rts	
00015386 4E75                       		rts	
00015388                            ; ===========================================================================
00015388 2428 0008                  		move.l	8(a0),d2
0001538C 2628 000C                  		move.l	$C(a0),d3
00015390 3028 0010                  		move.w	$10(a0),d0
00015394 48C0                       		ext.l	d0
00015396 E180                       		asl.l	#8,d0
00015398 9480                       		sub.l	d0,d2
0001539A 3028 0012                  		move.w	$12(a0),d0
0001539E 48C0                       		ext.l	d0
000153A0 E180                       		asl.l	#8,d0
000153A2 9680                       		sub.l	d0,d3
000153A4 2142 0008                  		move.l	d2,8(a0)
000153A8 2143 000C                  		move.l	d3,$C(a0)
000153AC 4E75                       		rts	
000153AE                            
000153AE                            ; ---------------------------------------------------------------------------
000153AE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000153AE                            ; ---------------------------------------------------------------------------
000153AE                            
000153AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153AE                            
000153AE                            
000153AE                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000153AE 1438 F76A                  		move.b	($FFFFF76A).w,d2
000153B2 B240                       		cmp.w	d0,d1
000153B4 6F00                       		ble.s	loc_1475E
000153B6 1438 F768                  		move.b	($FFFFF768).w,d2
000153BA 3200                       		move.w	d0,d1
000153BC                            
000153BC                            loc_1475E:
000153BC 0802 0000                  		btst	#0,d2
000153C0 6600                       		bne.s	loc_1476A
000153C2 1142 0026                  		move.b	d2,$26(a0)
000153C6 4E75                       		rts	
000153C8                            ; ===========================================================================
000153C8                            
000153C8                            loc_1476A:
000153C8 1428 0026                  		move.b	$26(a0),d2
000153CC 0602 0020                  		addi.b	#$20,d2
000153D0 0202 00C0                  		andi.b	#$C0,d2
000153D4 1142 0026                  		move.b	d2,$26(a0)
000153D8 4E75                       		rts	
000153DA                            ; End of function Sonic_Angle
000153DA                            
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            
000153DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153DA                            
000153DA                            
000153DA                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000153DA 3428 000C                  		move.w	$C(a0),d2
000153DE 3628 0008                  		move.w	8(a0),d3
000153E2 7000                       		moveq	#0,d0
000153E4 1028 0017                  		move.b	$17(a0),d0
000153E8 4880                       		ext.w	d0
000153EA 4440                       		neg.w	d0
000153EC D440                       		add.w	d0,d2
000153EE 1028 0016                  		move.b	$16(a0),d0
000153F2 4880                       		ext.w	d0
000153F4 D640                       		add.w	d0,d3
000153F6 49F8 F768                  		lea	($FFFFF768).w,a4
000153FA 367C 0010                  		movea.w	#$10,a3
000153FE 3C3C 0000                  		move.w	#0,d6
00015402 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015404 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00015408 3F01                       		move.w	d1,-(sp)
0001540A 3428 000C                  		move.w	$C(a0),d2
0001540E 3628 0008                  		move.w	8(a0),d3
00015412 7000                       		moveq	#0,d0
00015414 1028 0017                  		move.b	$17(a0),d0
00015418 4880                       		ext.w	d0
0001541A D440                       		add.w	d0,d2
0001541C 1028 0016                  		move.b	$16(a0),d0
00015420 4880                       		ext.w	d0
00015422 D640                       		add.w	d0,d3
00015424 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015428 367C 0010                  		movea.w	#$10,a3
0001542C 3C3C 0000                  		move.w	#0,d6
00015430 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015432 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00015436 301F                       		move.w	(sp)+,d0
00015438 6100 FF74                  		bsr.w	Sonic_Angle
0001543C 4A41                       		tst.w	d1
0001543E 6700                       		beq.s	locret_147F0
00015440 6A00                       		bpl.s	loc_147F2
00015442 0C41 FFF2                  		cmpi.w	#-$E,d1
00015446 6D00 FF20                  		blt.w	locret_1470A
0001544A D368 0008                  		add.w	d1,8(a0)
0001544E                            
0001544E                            locret_147F0:
0001544E 4E75                       		rts	
00015450                            ; ===========================================================================
00015450                            
00015450                            loc_147F2:
00015450 0C41 000E                  		cmpi.w	#$E,d1
00015454 6E00                       		bgt.s	loc_147FE
00015456                            
00015456                            loc_147F8:
00015456 D368 0008                  		add.w	d1,8(a0)
0001545A 4E75                       		rts	
0001545C                            ; ===========================================================================
0001545C                            
0001545C                            loc_147FE:
0001545C 4A28 0038                  		tst.b	$38(a0)
00015460 66F4                       		bne.s	loc_147F8
00015462 08E8 0001 0022             		bset	#1,$22(a0)
00015468 08A8 0005 0022             		bclr	#5,$22(a0)
0001546E 117C 0001 001D             		move.b	#1,$1D(a0)
00015474 4E75                       		rts	
00015476                            ; End of function Sonic_WalkVertR
00015476                            
00015476                            ; ---------------------------------------------------------------------------
00015476                            ; Subroutine allowing Sonic to walk upside-down
00015476                            ; ---------------------------------------------------------------------------
00015476                            
00015476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015476                            
00015476                            
00015476                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015476 3428 000C                  		move.w	$C(a0),d2
0001547A 3628 0008                  		move.w	8(a0),d3
0001547E 7000                       		moveq	#0,d0
00015480 1028 0016                  		move.b	$16(a0),d0
00015484 4880                       		ext.w	d0
00015486 9440                       		sub.w	d0,d2
00015488 0A42 000F                  		eori.w	#$F,d2
0001548C 1028 0017                  		move.b	$17(a0),d0
00015490 4880                       		ext.w	d0
00015492 D640                       		add.w	d0,d3
00015494 49F8 F768                  		lea	($FFFFF768).w,a4
00015498 367C FFF0                  		movea.w	#-$10,a3
0001549C 3C3C 0800                  		move.w	#$0800,d6
000154A0 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000154A2 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000154A6 3F01                       		move.w	d1,-(sp)
000154A8 3428 000C                  		move.w	$C(a0),d2
000154AC 3628 0008                  		move.w	8(a0),d3
000154B0 7000                       		moveq	#0,d0
000154B2 1028 0016                  		move.b	$16(a0),d0
000154B6 4880                       		ext.w	d0
000154B8 9440                       		sub.w	d0,d2
000154BA 0A42 000F                  		eori.w	#$F,d2
000154BE 1028 0017                  		move.b	$17(a0),d0
000154C2 4880                       		ext.w	d0
000154C4 9640                       		sub.w	d0,d3
000154C6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000154CA 367C FFF0                  		movea.w	#-$10,a3
000154CE 3C3C 0800                  		move.w	#$0800,d6
000154D2 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000154D4 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000154D8 301F                       		move.w	(sp)+,d0
000154DA 6100 FED2                  		bsr.w	Sonic_Angle
000154DE 4A41                       		tst.w	d1
000154E0 6700                       		beq.s	locret_14892
000154E2 6A00                       		bpl.s	loc_14894
000154E4 0C41 FFF2                  		cmpi.w	#-$E,d1
000154E8 6D00 FE5A                  		blt.w	locret_146E6
000154EC 9368 000C                  		sub.w	d1,$C(a0)
000154F0                            
000154F0                            locret_14892:
000154F0 4E75                       		rts	
000154F2                            ; ===========================================================================
000154F2                            
000154F2                            loc_14894:
000154F2 0C41 000E                  		cmpi.w	#$E,d1
000154F6 6E00                       		bgt.s	loc_148A0
000154F8                            
000154F8                            loc_1489A:
000154F8 9368 000C                  		sub.w	d1,$C(a0)
000154FC 4E75                       		rts	
000154FE                            ; ===========================================================================
000154FE                            
000154FE                            loc_148A0:
000154FE 4A28 0038                  		tst.b	$38(a0)
00015502 66F4                       		bne.s	loc_1489A
00015504 08E8 0001 0022             		bset	#1,$22(a0)
0001550A 08A8 0005 0022             		bclr	#5,$22(a0)
00015510 117C 0001 001D             		move.b	#1,$1D(a0)
00015516 4E75                       		rts	
00015518                            ; End of function Sonic_WalkCeiling
00015518                            
00015518                            ; ---------------------------------------------------------------------------
00015518                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015518                            ; ---------------------------------------------------------------------------
00015518                            
00015518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015518                            
00015518                            
00015518                            Sonic_WalkVertL:
00015518 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
0001551C 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
00015520 7000                       		moveq	#0,d0					; MJ: clear d0
00015522 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
00015526 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00015528 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
0001552A 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
0001552E 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00015530 9640                       		sub.w	d0,d3					; MJ: subtract from X position
00015532 0A43 000F                  		eori.w	#$F,d3
00015536 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
0001553A 367C FFF0                  		movea.w	#-$10,a3
0001553E 3C3C 0400                  		move.w	#$400,d6
00015542 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015544 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00015548 3F01                       		move.w	d1,-(sp)
0001554A 3428 000C                  		move.w	$C(a0),d2
0001554E 3628 0008                  		move.w	8(a0),d3
00015552 7000                       		moveq	#0,d0
00015554 1028 0017                  		move.b	$17(a0),d0
00015558 4880                       		ext.w	d0
0001555A D440                       		add.w	d0,d2
0001555C 1028 0016                  		move.b	$16(a0),d0
00015560 4880                       		ext.w	d0
00015562 9640                       		sub.w	d0,d3
00015564 0A43 000F                  		eori.w	#$F,d3
00015568 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001556C 367C FFF0                  		movea.w	#-$10,a3
00015570 3C3C 0400                  		move.w	#$400,d6
00015574 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015576 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0001557A 301F                       		move.w	(sp)+,d0
0001557C 6100 FE30                  		bsr.w	Sonic_Angle
00015580 4A41                       		tst.w	d1
00015582 6700                       		beq.s	locret_14934
00015584 6A00                       		bpl.s	loc_14936
00015586 0C41 FFF2                  		cmpi.w	#-$E,d1
0001558A 6D00 FDDC                  		blt.w	locret_1470A
0001558E 9368 0008                  		sub.w	d1,8(a0)
00015592                            
00015592                            locret_14934:
00015592 4E75                       		rts
00015594                            
00015594                            ; ===========================================================================
00015594                            
00015594                            loc_14936:
00015594 0C41 000E                  		cmpi.w	#$E,d1
00015598 6E00                       		bgt.s	loc_14942
0001559A                            
0001559A                            loc_1493C:
0001559A 9368 0008                  		sub.w	d1,8(a0)
0001559E 4E75                       		rts	
000155A0                            
000155A0                            ; ===========================================================================
000155A0                            
000155A0                            loc_14942:
000155A0 4A28 0038                  		tst.b	$38(a0)
000155A4 66F4                       		bne.s	loc_1493C
000155A6 08E8 0001 0022             		bset	#1,$22(a0)
000155AC 08A8 0005 0022             		bclr	#5,$22(a0)
000155B2 117C 0001 001D             		move.b	#1,$1D(a0)
000155B8 4E75                       		rts	
000155BA                            ; End of function Sonic_WalkVertL
000155BA                            
000155BA                            ; ---------------------------------------------------------------------------
000155BA                            ; Subroutine to	find which tile	the object is standing on
000155BA                            ; ---------------------------------------------------------------------------
000155BA                            
000155BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155BA                            
000155BA                            Floor_ChkTile:				; XREF: FindFloor; et al
000155BA 3002                       		move.w	d2,d0					; MJ: load Y position
000155BC 0240 0780                  		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
000155C0 D040                       		add.w	d0,d0					; MJ: multiply by 2
000155C2 3203                       		move.w	d3,d1					; MJ: load X position
000155C4 EE49                       		lsr.w	#7,d1					; MJ: shift to right side
000155C6 0241 007F                  		andi.w	#$007F,d1				; MJ: get within 7F
000155CA D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
000155CC 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
000155CE 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
000155D2 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
000155D6 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
000155DA EF49                       		lsl.w	#$07,d1					; MJ: multiply by 80
000155DC 3002                       		move.w	d2,d0					; MJ: load Y position
000155DE 0240 0070                  		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
000155E2 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000155E4 3003                       		move.w	d3,d0					; MJ: load X position
000155E6 E648                       		lsr.w	#3,d0					; MJ: divide by 8
000155E8 0240 000E                  		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
000155EC D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000155EE                            
000155EE                            loc_14996:
000155EE 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
000155F0 4E75                       		rts						; MJ: return
000155F2                            ; ===========================================================================
000155F2                            
000155F2                            loc_1499A:
000155F2 0241 007F                  		andi.w	#$7F,d1
000155F6 0828 0006 0001             		btst	#6,1(a0)
000155FC 6700                       		beq.s	loc_149B2
000155FE 5241                       		addq.w	#1,d1
00015600 0C41 0029                  		cmpi.w	#$29,d1
00015604 6600                       		bne.s	loc_149B2
00015606 323C 0051                  		move.w	#$51,d1
0001560A                            
0001560A                            loc_149B2:
0001560A EE59                       		ror.w	#7,d1
0001560C E459                       		ror.w	#2,d1
0001560E 3002                       		move.w	d2,d0
00015610 D040                       		add.w	d0,d0
00015612 0240 0070                  		andi.w	#$070,d0
00015616 D240                       		add.w	d0,d1
00015618 3003                       		move.w	d3,d0
0001561A E648                       		lsr.w	#3,d0
0001561C 0240 000E                  		andi.w	#$0E,d0
00015620 D240                       		add.w	d0,d1
00015622 2241                       		movea.l	d1,a1
00015624 4E75                       		rts
00015626                            ; End of function Floor_ChkTile
00015626                            
00015626                            
00015626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015626                            
00015626                            
00015626                            ColisionChkLayer:
00015626 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
0001562A 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
0001562C 3800                       		move.w	d0,d4					; MJ: load block ID to d4
0001562E 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
00015632 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00015636 E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00015638 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
0001563A                            
0001563A                            CCL_NoChange:
0001563A 4E75                       		rts						; MJ: return
0001563C                            
0001563C                            
0001563C                            FindFloor:
0001563C 6100 FF7C                  		bsr.w	Floor_ChkTile
00015640 3011                       		move.w	(a1),d0
00015642 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
00015644 3800                       		move.w	d0,d4
00015646 0240 03FF                  		andi.w	#$3FF,d0
0001564A 6700                       		beq.s	loc_149DE
0001564C 0B04                       		btst	d5,d4
0001564E 6600                       		bne.s	loc_149EC
00015650                            
00015650                            loc_149DE:
00015650 D44B                       		add.w	a3,d2
00015652 6100 0000                  		bsr.w	FindFloor2
00015656 944B                       		sub.w	a3,d2
00015658 0641 0010                  		addi.w	#$10,d1
0001565C 4E75                       		rts	
0001565E                            ; ===========================================================================
0001565E                            
0001565E                            loc_149EC:
0001565E 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
00015662 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
00015666 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
0001566A 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
0001566C 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00015672 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
00015676 E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
00015678 3203                       		move.w	d3,d1					; MJ: load X position
0001567A 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
0001567E 6700                       		beq.s	loc_14A12				; MJ: if not, branch
00015680 4641                       		not.w	d1					; MJ: reverse bits of the X position
00015682 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00015684                            
00015684                            loc_14A12:
00015684 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
00015688 6700                       		beq.s	loc_14A22				; MJ: if not, branch
0001568A 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
0001568E 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00015690 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00015694                            
00015694                            loc_14A22:
00015694 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00015698 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
0001569A 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
000156A0 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
000156A4 4880                       		ext.w	d0					; MJ: clear left byte
000156A6 BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
000156A8 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
000156AC 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
000156AE 4440                       		neg.w	d0					; MJ: reverse solid value
000156B0                            
000156B0                            loc_14A3E:
000156B0 4A40                       		tst.w	d0					; MJ: is the solid data null?
000156B2 679C                       		beq.s	loc_149DE				; MJ: if so, branch
000156B4 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
000156B6 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
000156BA 6700                       		beq.s	loc_14A66				; MJ: if so, branch
000156BC 3202                       		move.w	d2,d1					; MJ: load Y position
000156BE 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
000156C2 D041                       		add.w	d1,d0					; MJ: add to solid value
000156C4 323C 000F                  		move.w	#$F,d1					; MJ: set F
000156C8 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
000156CA 4E75                       		rts			; d1 = position?	; MJ: return
000156CC                            
000156CC                            ; ===========================================================================
000156CC                            
000156CC                            loc_14A5A:
000156CC 3202                       		move.w	d2,d1
000156CE 0241 000F                  		andi.w	#$F,d1
000156D2 D041                       		add.w	d1,d0
000156D4 6A00 FF7A                  		bpl.w	loc_149DE
000156D8                            
000156D8                            loc_14A66:
000156D8 944B                       		sub.w	a3,d2
000156DA 6100 0000                  		bsr.w	FindFloor2
000156DE D44B                       		add.w	a3,d2
000156E0 0441 0010                  		subi.w	#$10,d1
000156E4 4E75                       		rts	
000156E6                            ; End of function FindFloor
000156E6                            
000156E6                            
000156E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156E6                            
000156E6                            
000156E6                            FindFloor2:				; XREF: FindFloor
000156E6 6100 FED2                  		bsr.w	Floor_ChkTile
000156EA 3011                       		move.w	(a1),d0
000156EC 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
000156F0 3800                       		move.w	d0,d4
000156F2 0240 03FF                  		andi.w	#$3FF,d0
000156F6 6700                       		beq.s	loc_14A86
000156F8 0B04                       		btst	d5,d4
000156FA 6600                       		bne.s	loc_14A94
000156FC                            
000156FC                            loc_14A86:
000156FC 323C 000F                  		move.w	#$F,d1
00015700 3002                       		move.w	d2,d0
00015702 0240 000F                  		andi.w	#$F,d0
00015706 9240                       		sub.w	d0,d1
00015708 4E75                       		rts	
0001570A                            ; ===========================================================================
0001570A                            
0001570A                            loc_14A94:
0001570A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001570E 1032 0000                  		move.b	(a2,d0.w),d0
00015712 0240 00FF                  		andi.w	#$FF,d0
00015716 67E4                       		beq.s	loc_14A86
00015718 45F9 0000 0000             		lea	(AngleMap).l,a2
0001571E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015722 E948                       		lsl.w	#4,d0
00015724 3203                       		move.w	d3,d1
00015726 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
0001572A 6700                       		beq.s	loc_14ABA
0001572C 4641                       		not.w	d1
0001572E 4414                       		neg.b	(a4)
00015730                            
00015730                            loc_14ABA:
00015730 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00015734 6700                       		beq.s	loc_14ACA
00015736 0614 0040                  		addi.b	#$40,(a4)
0001573A 4414                       		neg.b	(a4)
0001573C 0414 0040                  		subi.b	#$40,(a4)
00015740                            
00015740                            loc_14ACA:
00015740 0241 000F                  		andi.w	#$F,d1
00015744 D240                       		add.w	d0,d1
00015746 45F9 0000 0000             		lea	(CollArray1).l,a2
0001574C 1032 1000                  		move.b	(a2,d1.w),d0
00015750 4880                       		ext.w	d0
00015752 BD44                       		eor.w	d6,d4
00015754 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00015758 6700                       		beq.s	loc_14AE6
0001575A 4440                       		neg.w	d0
0001575C                            
0001575C                            loc_14AE6:
0001575C 4A40                       		tst.w	d0
0001575E 679C                       		beq.s	loc_14A86
00015760 6B00                       		bmi.s	loc_14AFC
00015762 3202                       		move.w	d2,d1
00015764 0241 000F                  		andi.w	#$F,d1
00015768 D041                       		add.w	d1,d0
0001576A 323C 000F                  		move.w	#$F,d1
0001576E 9240                       		sub.w	d0,d1
00015770 4E75                       		rts	
00015772                            ; ===========================================================================
00015772                            
00015772                            loc_14AFC:
00015772 3202                       		move.w	d2,d1
00015774 0241 000F                  		andi.w	#$F,d1
00015778 D041                       		add.w	d1,d0
0001577A 6A00 FF80                  		bpl.w	loc_14A86
0001577E 4641                       		not.w	d1
00015780 4E75                       		rts	
00015782                            ; End of function FindFloor2
00015782                            
00015782                            
00015782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015782                            
00015782                            
00015782                            FindWall:
00015782 6100 FE36                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
00015786 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
00015788 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
0001578C 3800                       		move.w	d0,d4					; MJ: copy to d4
0001578E 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00015792 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00015794 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00015796 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00015798                            
00015798                            loc_14B1E:
00015798 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
0001579A 6100 0000                  		bsr.w	FindWall2
0001579E 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
000157A0 0641 0010                  		addi.w	#$10,d1
000157A4 4E75                       		rts	
000157A6                            ; ===========================================================================
000157A6                            
000157A6                            loc_14B2C:
000157A6 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
000157AA 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
000157AE 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
000157B2 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
000157B4 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
000157BA 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
000157BE E948                       		lsl.w	#4,d0					; MJ: multiply by 10
000157C0 3202                       		move.w	d2,d1					; MJ: load Y position
000157C2 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
000157C6 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
000157C8 4641                       		not.w	d1
000157CA 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
000157CE 4414                       		neg.b	(a4)					; MJ: negate to opposite
000157D0 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
000157D4                            
000157D4                            loc_14B5A:
000157D4 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
000157D8 6700                       		beq.s	loc_14B62				; MJ: if not, branch
000157DA 4414                       		neg.b	(a4)					; MJ: negate to opposite
000157DC                            
000157DC                            loc_14B62:
000157DC 0241 000F                  		andi.w	#$F,d1
000157E0 D240                       		add.w	d0,d1
000157E2 45F9 0000 0000             		lea	(CollArray2).l,a2
000157E8 1032 1000                  		move.b	(a2,d1.w),d0
000157EC 4880                       		ext.w	d0
000157EE BD44                       		eor.w	d6,d4
000157F0 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
000157F4 6700                       		beq.s	loc_14B7E
000157F6 4440                       		neg.w	d0
000157F8                            
000157F8                            loc_14B7E:
000157F8 4A40                       		tst.w	d0
000157FA 679C                       		beq.s	loc_14B1E
000157FC 6B00                       		bmi.s	loc_14B9A
000157FE 0C00 0010                  		cmpi.b	#$10,d0
00015802 6700                       		beq.s	loc_14BA6
00015804 3203                       		move.w	d3,d1
00015806 0241 000F                  		andi.w	#$F,d1
0001580A D041                       		add.w	d1,d0
0001580C 323C 000F                  		move.w	#$F,d1
00015810 9240                       		sub.w	d0,d1
00015812 4E75                       		rts	
00015814                            ; ===========================================================================
00015814                            
00015814                            loc_14B9A:
00015814 3203                       		move.w	d3,d1
00015816 0241 000F                  		andi.w	#$F,d1
0001581A D041                       		add.w	d1,d0
0001581C 6A00 FF7A                  		bpl.w	loc_14B1E
00015820                            
00015820                            loc_14BA6:
00015820 964B                       		sub.w	a3,d3
00015822 6100 0000                  		bsr.w	FindWall2
00015826 D64B                       		add.w	a3,d3
00015828 0441 0010                  		subi.w	#$10,d1
0001582C 4E75                       		rts	
0001582E                            ; End of function FindWall
0001582E                            
0001582E                            
0001582E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582E                            
0001582E                            
0001582E                            FindWall2:				; XREF: FindWall
0001582E 6100 FD8A                  		bsr.w	Floor_ChkTile
00015832 3011                       		move.w	(a1),d0
00015834 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00015838 3800                       		move.w	d0,d4
0001583A 0240 03FF                  		andi.w	#$3FF,d0
0001583E 6700                       		beq.s	loc_14BC6
00015840 0B04                       		btst	d5,d4
00015842 6600                       		bne.s	loc_14BD4
00015844                            
00015844                            loc_14BC6:
00015844 323C 000F                  		move.w	#$F,d1
00015848 3003                       		move.w	d3,d0
0001584A 0240 000F                  		andi.w	#$F,d0
0001584E 9240                       		sub.w	d0,d1
00015850 4E75                       		rts	
00015852                            ; ===========================================================================
00015852                            
00015852                            loc_14BD4:
00015852 2478 F796                  		movea.l	($FFFFF796).w,a2
00015856 1032 0000                  		move.b	(a2,d0.w),d0
0001585A 0240 00FF                  		andi.w	#$FF,d0
0001585E 67E4                       		beq.s	loc_14BC6
00015860 45F9 0000 0000             		lea	(AngleMap).l,a2
00015866 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001586A E948                       		lsl.w	#4,d0
0001586C 3202                       		move.w	d2,d1
0001586E 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00015872 6700                       		beq.s	loc_14C02
00015874 4641                       		not.w	d1
00015876 0614 0040                  		addi.b	#$40,(a4)
0001587A 4414                       		neg.b	(a4)
0001587C 0414 0040                  		subi.b	#$40,(a4)
00015880                            
00015880                            loc_14C02:
00015880 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00015884 6700                       		beq.s	loc_14C0A
00015886 4414                       		neg.b	(a4)
00015888                            
00015888                            loc_14C0A:
00015888 0241 000F                  		andi.w	#$F,d1
0001588C D240                       		add.w	d0,d1
0001588E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015894 1032 1000                  		move.b	(a2,d1.w),d0
00015898 4880                       		ext.w	d0
0001589A BD44                       		eor.w	d6,d4
0001589C 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
000158A0 6700                       		beq.s	loc_14C26
000158A2 4440                       		neg.w	d0
000158A4                            
000158A4                            loc_14C26:
000158A4 4A40                       		tst.w	d0
000158A6 679C                       		beq.s	loc_14BC6
000158A8 6B00                       		bmi.s	loc_14C3C
000158AA 3203                       		move.w	d3,d1
000158AC 0241 000F                  		andi.w	#$F,d1
000158B0 D041                       		add.w	d1,d0
000158B2 323C 000F                  		move.w	#$F,d1
000158B6 9240                       		sub.w	d0,d1
000158B8 4E75                       		rts	
000158BA                            ; ===========================================================================
000158BA                            
000158BA                            loc_14C3C:
000158BA 3203                       		move.w	d3,d1
000158BC 0241 000F                  		andi.w	#$F,d1
000158C0 D041                       		add.w	d1,d0
000158C2 6A00 FF80                  		bpl.w	loc_14BC6
000158C6 4641                       		not.w	d1
000158C8 4E75                       		rts	
000158CA                            ; End of function FindWall2
000158CA                            
000158CA                            ; ---------------------------------------------------------------------------
000158CA                            ; Unused floor/wall subroutine - logs something	to do with collision
000158CA                            ; ---------------------------------------------------------------------------
000158CA                            
000158CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158CA                            
000158CA                            
000158CA                            FloorLog_Unk:				; XREF: Level
000158CA 4E75                       		rts	
000158CC                            
000158CC 43F9 0000 0000             		lea	(CollArray1).l,a1
000158D2 45F9 0000 0000             		lea	(CollArray1).l,a2
000158D8 363C 00FF                  		move.w	#$FF,d3
000158DC                            
000158DC                            loc_14C5E:
000158DC 7A10                       		moveq	#$10,d5
000158DE 343C 000F                  		move.w	#$F,d2
000158E2                            
000158E2                            loc_14C64:
000158E2 7800                       		moveq	#0,d4
000158E4 323C 000F                  		move.w	#$F,d1
000158E8                            
000158E8                            loc_14C6A:
000158E8 3019                       		move.w	(a1)+,d0
000158EA EAA8                       		lsr.l	d5,d0
000158EC D944                       		addx.w	d4,d4
000158EE 51C9 FFF8                  		dbf	d1,loc_14C6A
000158F2                            
000158F2 34C4                       		move.w	d4,(a2)+
000158F4 92FC 0020                  		suba.w	#$20,a1
000158F8 5345                       		subq.w	#1,d5
000158FA 51CA FFE6                  		dbf	d2,loc_14C64
000158FE                            
000158FE D2FC 0020                  		adda.w	#$20,a1
00015902 51CB FFD8                  		dbf	d3,loc_14C5E
00015906                            
00015906 43F9 0000 0000             		lea	(CollArray1).l,a1
0001590C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015912 6100                       		bsr.s	FloorLog_Unk2
00015914 43F9 0000 0000             		lea	(CollArray1).l,a1
0001591A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015920                            
00015920                            ; End of function FloorLog_Unk
00015920                            
00015920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015920                            
00015920                            
00015920                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015920 363C 0FFF                  		move.w	#$FFF,d3
00015924                            
00015924                            loc_14CA6:
00015924 7400                       		moveq	#0,d2
00015926 323C 000F                  		move.w	#$F,d1
0001592A 3019                       		move.w	(a1)+,d0
0001592C 6700                       		beq.s	loc_14CD4
0001592E 6B00                       		bmi.s	loc_14CBE
00015930                            
00015930                            loc_14CB2:
00015930 E248                       		lsr.w	#1,d0
00015932 6400                       		bcc.s	loc_14CB8
00015934 5202                       		addq.b	#1,d2
00015936                            
00015936                            loc_14CB8:
00015936 51C9 FFF8                  		dbf	d1,loc_14CB2
0001593A                            
0001593A 6000                       		bra.s	loc_14CD6
0001593C                            ; ===========================================================================
0001593C                            
0001593C                            loc_14CBE:
0001593C 0C40 FFFF                  		cmpi.w	#-1,d0
00015940 6700                       		beq.s	loc_14CD0
00015942                            
00015942                            loc_14CC4:
00015942 E348                       		lsl.w	#1,d0
00015944 6400                       		bcc.s	loc_14CCA
00015946 5302                       		subq.b	#1,d2
00015948                            
00015948                            loc_14CCA:
00015948 51C9 FFF8                  		dbf	d1,loc_14CC4
0001594C                            
0001594C 6000                       		bra.s	loc_14CD6
0001594E                            ; ===========================================================================
0001594E                            
0001594E                            loc_14CD0:
0001594E 303C 0010                  		move.w	#$10,d0
00015952                            
00015952                            loc_14CD4:
00015952 3400                       		move.w	d0,d2
00015954                            
00015954                            loc_14CD6:
00015954 14C2                       		move.b	d2,(a2)+
00015956 51CB FFCC                  		dbf	d3,loc_14CA6
0001595A                            
0001595A 4E75                       		rts	
0001595C                            
0001595C                            ; End of function FloorLog_Unk2
0001595C                            
0001595C                            
0001595C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001595C                            
0001595C                            
0001595C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001595C 2628 0008                  		move.l	8(a0),d3
00015960 2428 000C                  		move.l	$C(a0),d2
00015964 3228 0010                  		move.w	$10(a0),d1
00015968 48C1                       		ext.l	d1
0001596A E181                       		asl.l	#8,d1
0001596C D681                       		add.l	d1,d3
0001596E 3228 0012                  		move.w	$12(a0),d1
00015972 48C1                       		ext.l	d1
00015974 E181                       		asl.l	#8,d1
00015976 D481                       		add.l	d1,d2
00015978 4842                       		swap	d2
0001597A 4843                       		swap	d3
0001597C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015980 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015984 1200                       		move.b	d0,d1
00015986 0600 0020                  		addi.b	#$20,d0
0001598A 6A00                       		bpl.s	loc_14D1A
0001598C 1001                       		move.b	d1,d0
0001598E 6A00                       		bpl.s	loc_14D14
00015990 5300                       		subq.b	#1,d0
00015992                            
00015992                            loc_14D14:
00015992 0600 0020                  		addi.b	#$20,d0
00015996 6000                       		bra.s	loc_14D24
00015998                            ; ===========================================================================
00015998                            
00015998                            loc_14D1A:
00015998 1001                       		move.b	d1,d0
0001599A 6A00                       		bpl.s	loc_14D20
0001599C 5200                       		addq.b	#1,d0
0001599E                            
0001599E                            loc_14D20:
0001599E 0600 001F                  		addi.b	#$1F,d0
000159A2                            
000159A2                            loc_14D24:
000159A2 0200 00C0                  		andi.b	#$C0,d0
000159A6 6700 0000                  		beq.w	loc_14DF0
000159AA 0C00 0080                  		cmpi.b	#$80,d0
000159AE 6700 0000                  		beq.w	loc_14F7C
000159B2 0201 0038                  		andi.b	#$38,d1
000159B6 6600                       		bne.s	loc_14D3C
000159B8 5042                       		addq.w	#8,d2
000159BA                            
000159BA                            loc_14D3C:
000159BA 0C00 0040                  		cmpi.b	#$40,d0
000159BE 6700 0000                  		beq.w	loc_1504A
000159C2 6000 0000                  		bra.w	loc_14EBC
000159C6                            
000159C6                            ; End of function Sonic_WalkSpeed
000159C6                            
000159C6                            
000159C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C6                            
000159C6                            
000159C6                            sub_14D48:				; XREF: Sonic_Jump
000159C6 11C0 F768                  		move.b	d0,($FFFFF768).w
000159CA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000159CE 0600 0020                  		addi.b	#$20,d0
000159D2 0200 00C0                  		andi.b	#$C0,d0
000159D6 0C00 0040                  		cmpi.b	#$40,d0
000159DA 6700 0000                  		beq.w	loc_14FD6
000159DE 0C00 0080                  		cmpi.b	#$80,d0
000159E2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000159E6 0C00 00C0                  		cmpi.b	#$C0,d0
000159EA 6700 0000                  		beq.w	sub_14E50
000159EE                            
000159EE                            ; End of function sub_14D48
000159EE                            
000159EE                            ; ---------------------------------------------------------------------------
000159EE                            ; Subroutine to	make Sonic land	on the floor after jumping
000159EE                            ; ---------------------------------------------------------------------------
000159EE                            
000159EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159EE                            
000159EE                            
000159EE                            Sonic_HitFloor:				; XREF: Sonic_Floor
000159EE 3428 000C                  		move.w	$C(a0),d2
000159F2 3628 0008                  		move.w	8(a0),d3
000159F6 7000                       		moveq	#0,d0
000159F8 1028 0016                  		move.b	$16(a0),d0
000159FC 4880                       		ext.w	d0
000159FE D440                       		add.w	d0,d2
00015A00 1028 0017                  		move.b	$17(a0),d0
00015A04 4880                       		ext.w	d0
00015A06 D640                       		add.w	d0,d3
00015A08 49F8 F768                  		lea	($FFFFF768).w,a4
00015A0C 367C 0010                  		movea.w	#$10,a3
00015A10 3C3C 0000                  		move.w	#0,d6
00015A14 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015A16 6100 FC24                  		bsr.w	FindFloor				; MJ: check solidity
00015A1A 3F01                       		move.w	d1,-(sp)
00015A1C 3428 000C                  		move.w	$C(a0),d2
00015A20 3628 0008                  		move.w	8(a0),d3
00015A24 7000                       		moveq	#0,d0
00015A26 1028 0016                  		move.b	$16(a0),d0
00015A2A 4880                       		ext.w	d0
00015A2C D440                       		add.w	d0,d2
00015A2E 1028 0017                  		move.b	$17(a0),d0
00015A32 4880                       		ext.w	d0
00015A34 9640                       		sub.w	d0,d3
00015A36 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A3A 367C 0010                  		movea.w	#$10,a3
00015A3E 3C3C 0000                  		move.w	#0,d6
00015A42 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015A44 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00015A48 301F                       		move.w	(sp)+,d0
00015A4A 143C 0000                  		move.b	#0,d2
00015A4E                            
00015A4E                            loc_14DD0:
00015A4E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015A52 B240                       		cmp.w	d0,d1
00015A54 6F00                       		ble.s	loc_14DDE
00015A56 1638 F768                  		move.b	($FFFFF768).w,d3
00015A5A C141                       		exg	d0,d1
00015A5C                            
00015A5C                            loc_14DDE:
00015A5C 0803 0000                  		btst	#0,d3
00015A60 6700                       		beq.s	locret_14DE6
00015A62 1602                       		move.b	d2,d3
00015A64                            
00015A64                            locret_14DE6:
00015A64 4E75                       		rts	
00015A66                            
00015A66                            ; End of function Sonic_HitFloor
00015A66                            
00015A66                            ; ===========================================================================
00015A66 3428 000C                  		move.w	$C(a0),d2
00015A6A 3628 0008                  		move.w	8(a0),d3
00015A6E                            
00015A6E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015A6E 0642 000A                  		addi.w	#$A,d2
00015A72 49F8 F768                  		lea	($FFFFF768).w,a4
00015A76 367C 0010                  		movea.w	#$10,a3
00015A7A 3C3C 0000                  		move.w	#0,d6
00015A7E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015A80 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00015A84 143C 0000                  		move.b	#0,d2
00015A88                            
00015A88                            loc_14E0A:				; XREF: sub_14EB4
00015A88 1638 F768                  		move.b	($FFFFF768).w,d3
00015A8C 0803 0000                  		btst	#0,d3
00015A90 6700                       		beq.s	locret_14E16
00015A92 1602                       		move.b	d2,d3
00015A94                            
00015A94                            locret_14E16:
00015A94 4E75                       		rts	
00015A96                            
00015A96                            ; ---------------------------------------------------------------------------
00015A96                            ; Subroutine allowing objects to interact with the floor
00015A96                            ; ---------------------------------------------------------------------------
00015A96                            
00015A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A96                            
00015A96                            
00015A96                            ObjHitFloor:
00015A96 3628 0008                  		move.w	8(a0),d3
00015A9A                            
00015A9A                            ; End of function ObjHitFloor
00015A9A                            
00015A9A                            
00015A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A9A                            
00015A9A                            
00015A9A                            ObjHitFloor2:
00015A9A 3428 000C                  		move.w	$C(a0),d2
00015A9E 7000                       		moveq	#0,d0
00015AA0 1028 0016                  		move.b	$16(a0),d0
00015AA4 4880                       		ext.w	d0
00015AA6 D440                       		add.w	d0,d2
00015AA8 49F8 F768                  		lea	($FFFFF768).w,a4
00015AAC 18BC 0000                  		move.b	#0,(a4)
00015AB0 367C 0010                  		movea.w	#$10,a3
00015AB4 3C3C 0000                  		move.w	#0,d6
00015AB8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00015ABA 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00015ABE 1638 F768                  		move.b	($FFFFF768).w,d3
00015AC2 0803 0000                  		btst	#0,d3
00015AC6 6700                       		beq.s	locret_14E4E
00015AC8 163C 0000                  		move.b	#0,d3
00015ACC                            
00015ACC                            locret_14E4E:
00015ACC 4E75                       		rts	
00015ACE                            ; End of function ObjHitFloor2
00015ACE                            
00015ACE                            
00015ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ACE                            
00015ACE                            
00015ACE                            sub_14E50:				; XREF: sub_14D48
00015ACE 3428 000C                  		move.w	$C(a0),d2
00015AD2 3628 0008                  		move.w	8(a0),d3
00015AD6 7000                       		moveq	#0,d0
00015AD8 1028 0017                  		move.b	$17(a0),d0
00015ADC 4880                       		ext.w	d0
00015ADE 9440                       		sub.w	d0,d2
00015AE0 1028 0016                  		move.b	$16(a0),d0
00015AE4 4880                       		ext.w	d0
00015AE6 D640                       		add.w	d0,d3
00015AE8 49F8 F768                  		lea	($FFFFF768).w,a4
00015AEC 367C 0010                  		movea.w	#$10,a3
00015AF0 3C3C 0000                  		move.w	#0,d6
00015AF4 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015AF6 6100 FC8A                  		bsr.w	FindWall				; MJ: check solidity
00015AFA 3F01                       		move.w	d1,-(sp)
00015AFC 3428 000C                  		move.w	$C(a0),d2
00015B00 3628 0008                  		move.w	8(a0),d3
00015B04 7000                       		moveq	#0,d0
00015B06 1028 0017                  		move.b	$17(a0),d0
00015B0A 4880                       		ext.w	d0
00015B0C D440                       		add.w	d0,d2
00015B0E 1028 0016                  		move.b	$16(a0),d0
00015B12 4880                       		ext.w	d0
00015B14 D640                       		add.w	d0,d3
00015B16 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B1A 367C 0010                  		movea.w	#$10,a3
00015B1E 3C3C 0000                  		move.w	#0,d6
00015B22 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015B24 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00015B28 301F                       		move.w	(sp)+,d0
00015B2A 143C 00C0                  		move.b	#-$40,d2
00015B2E 6000 FF1E                  		bra.w	loc_14DD0
00015B32                            
00015B32                            ; End of function sub_14E50
00015B32                            
00015B32                            
00015B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B32                            
00015B32                            
00015B32                            sub_14EB4:				; XREF: Sonic_Floor
00015B32 3428 000C                  		move.w	$C(a0),d2
00015B36 3628 0008                  		move.w	8(a0),d3
00015B3A                            
00015B3A                            loc_14EBC:
00015B3A 0643 000A                  		addi.w	#$A,d3
00015B3E 49F8 F768                  		lea	($FFFFF768).w,a4
00015B42 367C 0010                  		movea.w	#$10,a3
00015B46 3C3C 0000                  		move.w	#0,d6
00015B4A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015B4C 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00015B50 143C 00C0                  		move.b	#-$40,d2
00015B54 6000 FF32                  		bra.w	loc_14E0A
00015B58                            
00015B58                            ; End of function sub_14EB4
00015B58                            
00015B58                            ; ---------------------------------------------------------------------------
00015B58                            ; Subroutine to	detect when an object hits a wall to its right
00015B58                            ; ---------------------------------------------------------------------------
00015B58                            
00015B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B58                            
00015B58                            
00015B58                            ObjHitWallRight:
00015B58 D668 0008                  		add.w	8(a0),d3
00015B5C 3428 000C                  		move.w	$C(a0),d2
00015B60 49F8 F768                  		lea	($FFFFF768).w,a4
00015B64 18BC 0000                  		move.b	#0,(a4)
00015B68 367C 0010                  		movea.w	#$10,a3
00015B6C 3C3C 0000                  		move.w	#0,d6
00015B70 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015B72 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00015B76 1638 F768                  		move.b	($FFFFF768).w,d3
00015B7A 0803 0000                  		btst	#0,d3
00015B7E 6700                       		beq.s	locret_14F06
00015B80 163C 00C0                  		move.b	#-$40,d3
00015B84                            
00015B84                            locret_14F06:
00015B84 4E75                       		rts	
00015B86                            
00015B86                            ; End of function ObjHitWallRight
00015B86                            
00015B86                            ; ---------------------------------------------------------------------------
00015B86                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015B86                            ; touches them
00015B86                            ; ---------------------------------------------------------------------------
00015B86                            
00015B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B86                            
00015B86                            
00015B86                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015B86 3428 000C                  		move.w	$C(a0),d2
00015B8A 3628 0008                  		move.w	8(a0),d3
00015B8E 7000                       		moveq	#0,d0
00015B90 1028 0016                  		move.b	$16(a0),d0
00015B94 4880                       		ext.w	d0
00015B96 9440                       		sub.w	d0,d2
00015B98 0A42 000F                  		eori.w	#$F,d2
00015B9C 1028 0017                  		move.b	$17(a0),d0
00015BA0 4880                       		ext.w	d0
00015BA2 D640                       		add.w	d0,d3
00015BA4 49F8 F768                  		lea	($FFFFF768).w,a4
00015BA8 367C FFF0                  		movea.w	#-$10,a3
00015BAC 3C3C 0800                  		move.w	#$0800,d6
00015BB0 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015BB2 6100 FA88                  		bsr.w	FindFloor				; MJ: check solidity
00015BB6 3F01                       		move.w	d1,-(sp)
00015BB8 3428 000C                  		move.w	$C(a0),d2
00015BBC 3628 0008                  		move.w	8(a0),d3
00015BC0 7000                       		moveq	#0,d0
00015BC2 1028 0016                  		move.b	$16(a0),d0
00015BC6 4880                       		ext.w	d0
00015BC8 9440                       		sub.w	d0,d2
00015BCA 0A42 000F                  		eori.w	#$F,d2
00015BCE 1028 0017                  		move.b	$17(a0),d0
00015BD2 4880                       		ext.w	d0
00015BD4 9640                       		sub.w	d0,d3
00015BD6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015BDA 367C FFF0                  		movea.w	#-$10,a3
00015BDE 3C3C 0800                  		move.w	#$0800,d6
00015BE2 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015BE4 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00015BE8 301F                       		move.w	(sp)+,d0
00015BEA 143C 0080                  		move.b	#-$80,d2
00015BEE 6000 FE5E                  		bra.w	loc_14DD0
00015BF2                            ; End of function Sonic_DontRunOnWalls
00015BF2                            
00015BF2                            ; ===========================================================================
00015BF2 3428 000C                  		move.w	$C(a0),d2
00015BF6 3628 0008                  		move.w	8(a0),d3
00015BFA                            
00015BFA                            loc_14F7C:
00015BFA 0442 000A                  		subi.w	#$A,d2
00015BFE 0A42 000F                  		eori.w	#$F,d2
00015C02 49F8 F768                  		lea	($FFFFF768).w,a4
00015C06 367C FFF0                  		movea.w	#-$10,a3
00015C0A 3C3C 0800                  		move.w	#$0800,d6
00015C0E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015C10 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
00015C14 143C 0080                  		move.b	#-$80,d2
00015C18 6000 FE6E                  		bra.w	loc_14E0A
00015C1C                            
00015C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C1C                            
00015C1C                            
00015C1C                            ObjHitCeiling:
00015C1C 3428 000C                  		move.w	$C(a0),d2
00015C20 3628 0008                  		move.w	8(a0),d3
00015C24 7000                       		moveq	#0,d0
00015C26 1028 0016                  		move.b	$16(a0),d0
00015C2A 4880                       		ext.w	d0
00015C2C 9440                       		sub.w	d0,d2
00015C2E 0A42 000F                  		eori.w	#$F,d2
00015C32 49F8 F768                  		lea	($FFFFF768).w,a4
00015C36 367C FFF0                  		movea.w	#-$10,a3
00015C3A 3C3C 0800                  		move.w	#$0800,d6
00015C3E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015C40 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
00015C44 1638 F768                  		move.b	($FFFFF768).w,d3
00015C48 0803 0000                  		btst	#0,d3
00015C4C 6700                       		beq.s	locret_14FD4
00015C4E 163C 0080                  		move.b	#-$80,d3
00015C52                            
00015C52                            locret_14FD4:
00015C52 4E75                       		rts	
00015C54                            ; End of function ObjHitCeiling
00015C54                            
00015C54                            ; ===========================================================================
00015C54                            
00015C54                            loc_14FD6:				; XREF: sub_14D48
00015C54 3428 000C                  		move.w	$C(a0),d2
00015C58 3628 0008                  		move.w	8(a0),d3
00015C5C 7000                       		moveq	#0,d0
00015C5E 1028 0017                  		move.b	$17(a0),d0
00015C62 4880                       		ext.w	d0
00015C64 9440                       		sub.w	d0,d2
00015C66 1028 0016                  		move.b	$16(a0),d0
00015C6A 4880                       		ext.w	d0
00015C6C 9640                       		sub.w	d0,d3
00015C6E 0A43 000F                  		eori.w	#$F,d3
00015C72 49F8 F768                  		lea	($FFFFF768).w,a4
00015C76 367C FFF0                  		movea.w	#-$10,a3
00015C7A 3C3C 0400                  		move.w	#$400,d6
00015C7E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015C80 6100 FB00                  		bsr.w	FindWall				; MJ: check solidity
00015C84 3F01                       		move.w	d1,-(sp)
00015C86 3428 000C                  		move.w	$C(a0),d2
00015C8A 3628 0008                  		move.w	8(a0),d3
00015C8E 7000                       		moveq	#0,d0
00015C90 1028 0017                  		move.b	$17(a0),d0
00015C94 4880                       		ext.w	d0
00015C96 D440                       		add.w	d0,d2
00015C98 1028 0016                  		move.b	$16(a0),d0
00015C9C 4880                       		ext.w	d0
00015C9E 9640                       		sub.w	d0,d3
00015CA0 0A43 000F                  		eori.w	#$F,d3
00015CA4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015CA8 367C FFF0                  		movea.w	#-$10,a3
00015CAC 3C3C 0400                  		move.w	#$400,d6
00015CB0 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015CB2 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00015CB6 301F                       		move.w	(sp)+,d0
00015CB8 143C 0040                  		move.b	#$40,d2
00015CBC 6000 FD90                  		bra.w	loc_14DD0
00015CC0                            
00015CC0                            ; ---------------------------------------------------------------------------
00015CC0                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015CC0                            ; ---------------------------------------------------------------------------
00015CC0                            
00015CC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CC0                            
00015CC0                            
00015CC0                            Sonic_HitWall:				; XREF: Sonic_Floor
00015CC0 3428 000C                  		move.w	$C(a0),d2
00015CC4 3628 0008                  		move.w	8(a0),d3
00015CC8                            
00015CC8                            loc_1504A:
00015CC8 0443 000A                  		subi.w	#$A,d3
00015CCC 0A43 000F                  		eori.w	#$F,d3
00015CD0 49F8 F768                  		lea	($FFFFF768).w,a4
00015CD4 367C FFF0                  		movea.w	#-$10,a3
00015CD8 3C3C 0400                  		move.w	#$400,d6
00015CDC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015CDE 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
00015CE2 143C 0040                  		move.b	#$40,d2
00015CE6 6000 FDA0                  		bra.w	loc_14E0A
00015CEA                            ; End of function Sonic_HitWall
00015CEA                            
00015CEA                            ; ---------------------------------------------------------------------------
00015CEA                            ; Subroutine to	detect when an object hits a wall to its left
00015CEA                            ; ---------------------------------------------------------------------------
00015CEA                            
00015CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CEA                            
00015CEA                            
00015CEA                            ObjHitWallLeft:
00015CEA D668 0008                  		add.w	8(a0),d3
00015CEE 3428 000C                  		move.w	$C(a0),d2
00015CF2 49F8 F768                  		lea	($FFFFF768).w,a4
00015CF6 18BC 0000                  		move.b	#0,(a4)
00015CFA 367C FFF0                  		movea.w	#-$10,a3
00015CFE 3C3C 0400                  		move.w	#$400,d6
00015D02 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00015D04 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
00015D08 1638 F768                  		move.b	($FFFFF768).w,d3
00015D0C 0803 0000                  		btst	#0,d3
00015D10 6700                       		beq.s	locret_15098
00015D12 163C 0040                  		move.b	#$40,d3
00015D16                            
00015D16                            locret_15098:
00015D16 4E75                       		rts	
00015D18                            ; End of function ObjHitWallLeft
00015D18                            
00015D18                            ; ===========================================================================
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            
00015D18                            ; ===========================================================================
00015D18                            ; ---------------------------------------------------------------------------
00015D18                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015D18                            ; ---------------------------------------------------------------------------
00015D18                            
00015D18                            Obj66:					; XREF: Obj_Index
00015D18 7000                       		moveq	#0,d0
00015D1A 1028 0024                  		move.b	$24(a0),d0
00015D1E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015D22 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015D26                            ; ===========================================================================
00015D26 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015D28 0000                       		dc.w Obj66_Action-Obj66_Index
00015D2A 0000                       		dc.w Obj66_Display-Obj66_Index
00015D2C 0000                       		dc.w Obj66_Release-Obj66_Index
00015D2E                            ; ===========================================================================
00015D2E                            
00015D2E                            Obj66_Main:				; XREF: Obj66_Index
00015D2E 5428 0024                  		addq.b	#2,$24(a0)
00015D32 323C 0001                  		move.w	#1,d1
00015D36 2248                       		movea.l	a0,a1
00015D38 6000                       		bra.s	Obj66_MakeItem
00015D3A                            ; ===========================================================================
00015D3A                            
00015D3A                            Obj66_Loop:
00015D3A 6100 84B2                  		bsr.w	SingleObjLoad
00015D3E 6600                       		bne.s	loc_150FE
00015D40 12BC 0066                  		move.b	#$66,0(a1)
00015D44 5829 0024                  		addq.b	#4,$24(a1)
00015D48 3368 0008 0008             		move.w	8(a0),8(a1)
00015D4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015D54 137C 0003 0018             		move.b	#3,$18(a1)
00015D5A 137C 0010 001A             		move.b	#$10,$1A(a1)
00015D60                            
00015D60                            Obj66_MakeItem:				; XREF: Obj66_Main
00015D60 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015D68 337C 4348 0002             		move.w	#$4348,2(a1)
00015D6E 0029 0004 0001             		ori.b	#4,1(a1)
00015D74 137C 0038 0019             		move.b	#$38,$19(a1)
00015D7A                            
00015D7A                            loc_150FE:
00015D7A 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015D7E                            
00015D7E 117C 0030 0019             		move.b	#$30,$19(a0)
00015D84 117C 0004 0018             		move.b	#4,$18(a0)
00015D8A 317C 003C 0030             		move.w	#$3C,$30(a0)
00015D90 117C 0001 0034             		move.b	#1,$34(a0)
00015D96 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015D9C                            
00015D9C                            Obj66_Action:				; XREF: Obj66_Index
00015D9C 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015DA0 4A28 0001                  		tst.b	1(a0)
00015DA4 6A00 0000                  		bpl.w	Obj66_Display
00015DA8 323C 0030                  		move.w	#$30,d1
00015DAC 3401                       		move.w	d1,d2
00015DAE 3602                       		move.w	d2,d3
00015DB0 5243                       		addq.w	#1,d3
00015DB2 3828 0008                  		move.w	8(a0),d4
00015DB6 6100 A542                  		bsr.w	SolidObject
00015DBA 0828 0005 0022             		btst	#5,$22(a0)
00015DC0 6700 0000                  		beq.w	Obj66_Display
00015DC4 43F8 D000                  		lea	($FFFFD000).w,a1
00015DC8 720E                       		moveq	#$E,d1
00015DCA 3029 0008                  		move.w	8(a1),d0
00015DCE B068 0008                  		cmp.w	8(a0),d0
00015DD2 6500                       		bcs.s	Obj66_GrabSonic
00015DD4 7207                       		moveq	#7,d1
00015DD6                            
00015DD6                            Obj66_GrabSonic:
00015DD6 B228 001A                  		cmp.b	$1A(a0),d1
00015DDA 6600                       		bne.s	Obj66_Display
00015DDC 1141 0032                  		move.b	d1,$32(a0)
00015DE0 5828 0024                  		addq.b	#4,$24(a0)
00015DE4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015DEA 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015DF0 337C 0800 0014             		move.w	#$800,$14(a1)
00015DF6 337C 0000 0010             		move.w	#0,$10(a1)
00015DFC 337C 0000 0012             		move.w	#0,$12(a1)
00015E02 08A8 0005 0022             		bclr	#5,$22(a0)
00015E08 08A9 0005 0022             		bclr	#5,$22(a1)
00015E0E 08E9 0001 0022             		bset	#1,$22(a1)
00015E14 3429 0008                  		move.w	8(a1),d2
00015E18 3629 000C                  		move.w	$C(a1),d3
00015E1C 6100 0000                  		bsr.w	Obj66_ChgPos
00015E20 D569 0008                  		add.w	d2,8(a1)
00015E24 D769 000C                  		add.w	d3,$C(a1)
00015E28 E0E9 0008                  		asr	8(a1)
00015E2C E0E9 000C                  		asr	$C(a1)
00015E30                            
00015E30                            Obj66_Display:				; XREF: Obj66_Index
00015E30 6000 9FE4                  		bra.w	MarkObjGone
00015E34                            ; ===========================================================================
00015E34                            
00015E34                            Obj66_Release:				; XREF: Obj66_Index
00015E34 1028 001A                  		move.b	$1A(a0),d0
00015E38 0C00 0004                  		cmpi.b	#4,d0
00015E3C 6700                       		beq.s	loc_151C8
00015E3E 0C00 0007                  		cmpi.b	#7,d0
00015E42 6600                       		bne.s	loc_151F8
00015E44                            
00015E44                            loc_151C8:
00015E44 B028 0032                  		cmp.b	$32(a0),d0
00015E48 6700                       		beq.s	loc_151F8
00015E4A 43F8 D000                  		lea	($FFFFD000).w,a1
00015E4E 337C 0000 0010             		move.w	#0,$10(a1)
00015E54 337C 0800 0012             		move.w	#$800,$12(a1)
00015E5A 0C00 0004                  		cmpi.b	#4,d0
00015E5E 6700                       		beq.s	loc_151F0
00015E60 337C 0800 0010             		move.w	#$800,$10(a1)
00015E66 337C 0800 0012             		move.w	#$800,$12(a1)
00015E6C                            
00015E6C                            loc_151F0:
00015E6C 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015E70 5928 0024                  		subq.b	#4,$24(a0)
00015E74                            
00015E74                            loc_151F8:
00015E74 6100                       		bsr.s	Obj66_ChkSwitch
00015E76 6100                       		bsr.s	Obj66_ChgPos
00015E78 6000 9F9C                  		bra.w	MarkObjGone
00015E7C                            
00015E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E7C                            
00015E7C                            
00015E7C                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015E7C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015E80 7000                       		moveq	#0,d0
00015E82 1028 0038                  		move.b	$38(a0),d0
00015E86 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015E8C 6700                       		beq.s	loc_15224	; if not, branch
00015E8E 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015E92 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015E94 4428 0034                  		neg.b	$34(a0)
00015E98 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015E9E 6000                       		bra.s	Obj66_Animate
00015EA0                            ; ===========================================================================
00015EA0                            
00015EA0                            loc_15224:
00015EA0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015EA4                            
00015EA4                            Obj66_Animate:
00015EA4 5328 001E                  		subq.b	#1,$1E(a0)
00015EA8 6A00                       		bpl.s	locret_15246
00015EAA 117C 0007 001E             		move.b	#7,$1E(a0)
00015EB0 1228 0034                  		move.b	$34(a0),d1
00015EB4 1028 001A                  		move.b	$1A(a0),d0
00015EB8 D001                       		add.b	d1,d0
00015EBA 0200 000F                  		andi.b	#$F,d0
00015EBE 1140 001A                  		move.b	d0,$1A(a0)
00015EC2                            
00015EC2                            locret_15246:
00015EC2 4E75                       		rts	
00015EC4                            ; End of function Obj66_ChkSwitch
00015EC4                            
00015EC4                            
00015EC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EC4                            
00015EC4                            
00015EC4                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015EC4 43F8 D000                  		lea	($FFFFD000).w,a1
00015EC8 7000                       		moveq	#0,d0
00015ECA 1028 001A                  		move.b	$1A(a0),d0
00015ECE D040                       		add.w	d0,d0
00015ED0 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015ED4 101A                       		move.b	(a2)+,d0
00015ED6 4880                       		ext.w	d0
00015ED8 D068 0008                  		add.w	8(a0),d0
00015EDC 3340 0008                  		move.w	d0,8(a1)
00015EE0 101A                       		move.b	(a2)+,d0
00015EE2 4880                       		ext.w	d0
00015EE4 D068 000C                  		add.w	$C(a0),d0
00015EE8 3340 000C                  		move.w	d0,$C(a1)
00015EEC 4E75                       		rts	
00015EEE                            ; End of function Obj66_ChgPos
00015EEE                            
00015EEE                            ; ===========================================================================
00015EEE E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015EF2 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015EF6 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015EFA 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015EFE 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015F02 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015F06 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015F0A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015F0E                            ; ---------------------------------------------------------------------------
00015F0E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015F0E                            ; ---------------------------------------------------------------------------
00015F0E                            Map_obj66:
00015F0E                            	include "_maps\obj66.asm"
00015F0E                            ; ---------------------------------------------------------------------------
00015F0E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015F0E                            ; ---------------------------------------------------------------------------
00015F0E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015F12 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015F16 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015F1A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015F1E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015F22 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015F26 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015F2A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015F2E 0000                       		dc.w byte_154A4-Map_obj66
00015F30 06                         byte_152B4:	dc.b 6
00015F31 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015F36 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015F3B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015F40 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015F45 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015F4A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015F4F 06                         byte_152D3:	dc.b 6
00015F50 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015F55 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015F5A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015F5F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015F64 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015F69 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015F6E 06                         byte_152F2:	dc.b 6
00015F6F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015F74 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015F79 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015F7E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015F83 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015F88 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015F8D 06                         byte_15311:	dc.b 6
00015F8E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015F93 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015F98 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015F9D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015FA2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015FA7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015FAC 06                         byte_15330:	dc.b 6
00015FAD 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015FB2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015FB7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015FBC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015FC1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015FC6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015FCB 06                         byte_1534F:	dc.b 6
00015FCC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015FD1 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015FD6 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015FDB 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015FE0 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015FE5 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015FEA 06                         byte_1536E:	dc.b 6
00015FEB 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015FF0 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015FF5 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015FFA 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015FFF 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016004 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016009 06                         byte_1538D:	dc.b 6
0001600A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001600F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016014 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016019 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001601E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016023 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016028 06                         byte_153AC:	dc.b 6
00016029 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001602E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016033 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016038 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001603D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016042 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016047 06                         byte_153CB:	dc.b 6
00016048 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001604D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016052 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016057 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001605C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016061 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016066 06                         byte_153EA:	dc.b 6
00016067 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001606C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016071 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016076 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001607B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016080 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016085 06                         byte_15409:	dc.b 6
00016086 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001608B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016090 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016095 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001609A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001609F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000160A4 06                         byte_15428:	dc.b 6
000160A5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000160AA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000160AF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000160B4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000160B9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000160BE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000160C3 06                         byte_15447:	dc.b 6
000160C4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000160C9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000160CE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000160D3 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000160D8 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000160DD E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000160E2 06                         byte_15466:	dc.b 6
000160E3 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000160E8 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000160ED D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000160F2 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000160F7 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000160FC E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016101 06                         byte_15485:	dc.b 6
00016102 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016107 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001610C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016111 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016116 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001611B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016120 0C                         byte_154A4:	dc.b $C
00016121 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016126 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001612B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016130 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016135 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001613A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001613F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016144 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016149 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001614E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016153 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016158 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001615E 00                         		even
0001615E 00                         		even
0001615E                            
0001615E                            ; ===========================================================================
0001615E                            ; ---------------------------------------------------------------------------
0001615E                            ; Object 67 - disc that	you run	around (SBZ)
0001615E                            ; ---------------------------------------------------------------------------
0001615E                            
0001615E                            Obj67:					; XREF: Obj_Index
0001615E 7000                       		moveq	#0,d0
00016160 1028 0024                  		move.b	$24(a0),d0
00016164 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016168 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001616C                            ; ===========================================================================
0001616C 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001616E 0000                       		dc.w Obj67_Action-Obj67_Index
00016170                            ; ===========================================================================
00016170                            
00016170                            Obj67_Main:				; XREF: Obj67_Index
00016170 5428 0024                  		addq.b	#2,$24(a0)
00016174 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001617C 317C C344 0002             		move.w	#$C344,2(a0)
00016182 117C 0004 0001             		move.b	#4,1(a0)
00016188 117C 0004 0018             		move.b	#4,$18(a0)
0001618E 117C 0008 0019             		move.b	#8,$19(a0)
00016194 3168 0008 0032             		move.w	8(a0),$32(a0)
0001619A 3168 000C 0030             		move.w	$C(a0),$30(a0)
000161A0 117C 0018 0034             		move.b	#$18,$34(a0)
000161A6 117C 0048 0038             		move.b	#$48,$38(a0)
000161AC 1228 0028                  		move.b	$28(a0),d1	; get object type
000161B0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161B4 6700                       		beq.s	loc_15546
000161B6 117C 0010 0034             		move.b	#$10,$34(a0)
000161BC 117C 0038 0038             		move.b	#$38,$38(a0)
000161C2                            
000161C2                            loc_15546:
000161C2 1228 0028                  		move.b	$28(a0),d1	; get object type
000161C6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161CA 4881                       		ext.w	d1
000161CC E741                       		asl.w	#3,d1
000161CE 3141 0036                  		move.w	d1,$36(a0)
000161D2 1028 0022                  		move.b	$22(a0),d0
000161D6 E418                       		ror.b	#2,d0
000161D8 0200 00C0                  		andi.b	#-$40,d0
000161DC 1140 0026                  		move.b	d0,$26(a0)
000161E0                            
000161E0                            Obj67_Action:				; XREF: Obj67_Index
000161E0 6100 0000                  		bsr.w	Obj67_MoveSonic
000161E4 6100 0000                  		bsr.w	Obj67_MoveSpot
000161E8 6000 0000                  		bra.w	Obj67_ChkDel
000161EC                            ; ===========================================================================
000161EC                            
000161EC                            Obj67_MoveSonic:			; XREF: Obj67_Action
000161EC 7400                       		moveq	#0,d2
000161EE 1428 0038                  		move.b	$38(a0),d2
000161F2 3602                       		move.w	d2,d3
000161F4 D643                       		add.w	d3,d3
000161F6 43F8 D000                  		lea	($FFFFD000).w,a1
000161FA 3029 0008                  		move.w	8(a1),d0
000161FE 9068 0032                  		sub.w	$32(a0),d0
00016202 D042                       		add.w	d2,d0
00016204 B043                       		cmp.w	d3,d0
00016206 6400                       		bcc.s	loc_155A8
00016208 3229 000C                  		move.w	$C(a1),d1
0001620C 9268 0030                  		sub.w	$30(a0),d1
00016210 D242                       		add.w	d2,d1
00016212 B243                       		cmp.w	d3,d1
00016214 6400                       		bcc.s	loc_155A8
00016216 0829 0001 0022             		btst	#1,$22(a1)
0001621C 6700                       		beq.s	loc_155B8
0001621E 4228 003A                  		clr.b	$3A(a0)
00016222 4E75                       		rts	
00016224                            ; ===========================================================================
00016224                            
00016224                            loc_155A8:
00016224 4A28 003A                  		tst.b	$3A(a0)
00016228 6700                       		beq.s	locret_155B6
0001622A 4229 0038                  		clr.b	$38(a1)
0001622E 4228 003A                  		clr.b	$3A(a0)
00016232                            
00016232                            locret_155B6:
00016232 4E75                       		rts	
00016234                            ; ===========================================================================
00016234                            
00016234                            loc_155B8:
00016234 4A28 003A                  		tst.b	$3A(a0)
00016238 6600                       		bne.s	loc_155E2
0001623A 117C 0001 003A             		move.b	#1,$3A(a0)
00016240 0829 0002 0022             		btst	#2,$22(a1)
00016246 6600                       		bne.s	loc_155D0
00016248 4229 001C                  		clr.b	$1C(a1)
0001624C                            
0001624C                            loc_155D0:
0001624C 08A9 0005 0022             		bclr	#5,$22(a1)
00016252 137C 0001 001D             		move.b	#1,$1D(a1)
00016258 137C 0001 0038             		move.b	#1,$38(a1)
0001625E                            
0001625E                            loc_155E2:
0001625E                            ;		move.w	$14(a1),d0
0001625E 4A68 0036                  		tst.w	$36(a0)
00016262 6A00                       		bpl.s	loc_15608
00016264 0C40 FC00                  		cmpi.w	#-$400,d0
00016268 6F00                       		ble.s	loc_155FA
0001626A 337C FC00 0014             		move.w	#-$400,$14(a1)
00016270 4E75                       		rts	
00016272                            ; ===========================================================================
00016272                            
00016272                            loc_155FA:
00016272 0C40 F100                  		cmpi.w	#-$F00,d0
00016276 6C00                       		bge.s	locret_15606
00016278 337C F100 0014             		move.w	#-$F00,$14(a1)
0001627E                            
0001627E                            locret_15606:
0001627E 4E75                       		rts	
00016280                            ; ===========================================================================
00016280                            
00016280                            loc_15608:
00016280 0C40 0400                  		cmpi.w	#$400,d0
00016284 6C00                       		bge.s	loc_15616
00016286                            ;		move.w	#$400,$14(a1)
00016286 4E75                       		rts	
00016288                            ; ===========================================================================
00016288                            
00016288                            loc_15616:
00016288 0C40 0F00                  		cmpi.w	#$F00,d0
0001628C 6F00 0000                  		ble.w	locret_15622
00016290                            ;		move.w	#$F00,$14(a1)
00016290                            
00016290                            locret_15622:
00016290 4E75                       		rts	
00016292                            ; ===========================================================================
00016292                            
00016292                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016292 3028 0036                  		move.w	$36(a0),d0
00016296 D168 0026                  		add.w	d0,$26(a0)
0001629A 1028 0026                  		move.b	$26(a0),d0
0001629E 4EB9 0000 2D64             		jsr	(CalcSine).l
000162A4 3428 0030                  		move.w	$30(a0),d2
000162A8 3628 0032                  		move.w	$32(a0),d3
000162AC 7800                       		moveq	#0,d4
000162AE 1828 0034                  		move.b	$34(a0),d4
000162B2 E14C                       		lsl.w	#8,d4
000162B4 2A04                       		move.l	d4,d5
000162B6 C9C0                       		muls.w	d0,d4
000162B8 4844                       		swap	d4
000162BA CBC1                       		muls.w	d1,d5
000162BC 4845                       		swap	d5
000162BE D842                       		add.w	d2,d4
000162C0 DA43                       		add.w	d3,d5
000162C2 3144 000C                  		move.w	d4,$C(a0)
000162C6 3145 0008                  		move.w	d5,8(a0)
000162CA 4E75                       		rts	
000162CC                            ; ===========================================================================
000162CC                            
000162CC                            Obj67_ChkDel:				; XREF: Obj67_Action
000162CC 3028 0032                  		move.w	$32(a0),d0
000162D0 0240 FF80                  		andi.w	#-$80,d0
000162D4 3238 F700                  		move.w	($FFFFF700).w,d1
000162D8 0441 0080                  		subi.w	#$80,d1
000162DC 0241 FF80                  		andi.w	#-$80,d1
000162E0 9041                       		sub.w	d1,d0
000162E2 0C40 0280                  		cmpi.w	#$280,d0
000162E6 6200                       		bhi.s	Obj67_Delete
000162E8 4EF9 0000 DD42             		jmp	DisplaySprite
000162EE                            ; ===========================================================================
000162EE                            
000162EE                            Obj67_Delete:
000162EE 4EF9 0000 DD7E             		jmp	DeleteObject
000162F4                            ; ===========================================================================
000162F4                            ; ---------------------------------------------------------------------------
000162F4                            ; Sprite mappings - disc that you run around (SBZ)
000162F4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000162F4                            ; part of the level tiles.)
000162F4                            ; ---------------------------------------------------------------------------
000162F4                            Map_obj67:
000162F4                            	include "_maps\obj67.asm"
000162F4                            ; ================================================================================
000162F4                            ; Sprite Mappings - generated by Flex 2 Sun Jul 29 2018 18:18:28 GMT-0700 (Pacific Daylight Time)
000162F4                            ; ================================================================================
000162F4                            
000162F4                            DATA4GH2GYG88WM:
000162F4 0000                       	dc.w $0
000162F6                            	even
000162F6                            	even
000162F6                            
000162F6                            ; ===========================================================================
000162F6                            ; ---------------------------------------------------------------------------
000162F6                            ; Object 68 - conveyor belts (SBZ)
000162F6                            ; ---------------------------------------------------------------------------
000162F6                            
000162F6                            Obj68:					; XREF: Obj_Index
000162F6 7000                       		moveq	#0,d0
000162F8 1028 0024                  		move.b	$24(a0),d0
000162FC 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016300 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016304                            ; ===========================================================================
00016304 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00016306 0000                       		dc.w Obj68_Action-Obj68_Index
00016308                            ; ===========================================================================
00016308                            
00016308                            Obj68_Main:				; XREF: Obj68_Index
00016308 5428 0024                  		addq.b	#2,$24(a0)
0001630C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016312 1228 0028                  		move.b	$28(a0),d1	; get object type
00016316 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001631A 6700                       		beq.s	loc_156BA	; if zero, branch
0001631C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016322                            
00016322                            loc_156BA:
00016322 1228 0028                  		move.b	$28(a0),d1	; get object type
00016326 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001632A 4881                       		ext.w	d1
0001632C E841                       		asr.w	#4,d1
0001632E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016332                            
00016332                            Obj68_Action:				; XREF: Obj68_Index
00016332 6100                       		bsr.s	Obj68_MoveSonic
00016334 3028 0008                  		move.w	8(a0),d0
00016338 0240 FF80                  		andi.w	#$FF80,d0
0001633C 3238 F700                  		move.w	($FFFFF700).w,d1
00016340 0441 0080                  		subi.w	#$80,d1
00016344 0241 FF80                  		andi.w	#$FF80,d1
00016348 9041                       		sub.w	d1,d0
0001634A 0C40 0280                  		cmpi.w	#$280,d0
0001634E 6200                       		bhi.s	Obj68_Delete
00016350 4E75                       		rts	
00016352                            ; ===========================================================================
00016352                            
00016352                            Obj68_Delete:
00016352 4EF9 0000 DD7E             		jmp	DeleteObject
00016358                            ; ===========================================================================
00016358                            
00016358                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016358 7400                       		moveq	#0,d2
0001635A 1428 0038                  		move.b	$38(a0),d2
0001635E 3602                       		move.w	d2,d3
00016360 D643                       		add.w	d3,d3
00016362 43F8 D000                  		lea	($FFFFD000).w,a1
00016366 3029 0008                  		move.w	8(a1),d0
0001636A 9068 0008                  		sub.w	8(a0),d0
0001636E D042                       		add.w	d2,d0
00016370 B043                       		cmp.w	d3,d0
00016372 6400                       		bcc.s	locret_1572E
00016374 3229 000C                  		move.w	$C(a1),d1
00016378 9268 000C                  		sub.w	$C(a0),d1
0001637C 0641 0030                  		addi.w	#$30,d1
00016380 0C41 0030                  		cmpi.w	#$30,d1
00016384 6400                       		bcc.s	locret_1572E
00016386 0829 0001 0022             		btst	#1,$22(a1)
0001638C 6600                       		bne.s	locret_1572E
0001638E 3028 0036                  		move.w	$36(a0),d0
00016392 D169 0008                  		add.w	d0,8(a1)
00016396                            
00016396                            locret_1572E:
00016396 4E75                       		rts	
00016398                            
00016398                            ; ===========================================================================
00016398                            ; ---------------------------------------------------------------------------
00016398                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016398                            ; ---------------------------------------------------------------------------
00016398                            
00016398                            Obj69:					; XREF: Obj_Index
00016398 7000                       		moveq	#0,d0
0001639A 1028 0024                  		move.b	$24(a0),d0
0001639E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000163A2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000163A6                            ; ===========================================================================
000163A6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000163A8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000163AA 0000                       		dc.w Obj69_Spinner-Obj69_Index
000163AC                            ; ===========================================================================
000163AC                            
000163AC                            Obj69_Main:				; XREF: Obj69_Index
000163AC 5428 0024                  		addq.b	#2,$24(a0)
000163B0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000163B8 317C 4492 0002             		move.w	#$4492,2(a0)
000163BE 0028 0004 0001             		ori.b	#4,1(a0)
000163C4 117C 0080 0019             		move.b	#$80,$19(a0)
000163CA 7000                       		moveq	#0,d0
000163CC 1028 0028                  		move.b	$28(a0),d0
000163D0 0240 000F                  		andi.w	#$F,d0
000163D4 C0FC 003C                  		mulu.w	#$3C,d0
000163D8 3140 0032                  		move.w	d0,$32(a0)
000163DC 4A28 0028                  		tst.b	$28(a0)
000163E0 6A00                       		bpl.s	Obj69_Trapdoor
000163E2 5428 0024                  		addq.b	#2,$24(a0)
000163E6 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000163EE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000163F4 117C 0010 0019             		move.b	#$10,$19(a0)
000163FA 117C 0002 001C             		move.b	#2,$1C(a0)
00016400 7000                       		moveq	#0,d0
00016402 1028 0028                  		move.b	$28(a0),d0	; get object type
00016406 3200                       		move.w	d0,d1
00016408 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001640C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016410 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016414 3140 0032                  		move.w	d0,$32(a0)
00016418 0241 0070                  		andi.w	#$70,d1
0001641C 0641 0010                  		addi.w	#$10,d1
00016420 E549                       		lsl.w	#2,d1
00016422 5341                       		subq.w	#1,d1
00016424 3141 0036                  		move.w	d1,$36(a0)
00016428 6000                       		bra.s	Obj69_Spinner
0001642A                            ; ===========================================================================
0001642A                            
0001642A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001642A 5368 0030                  		subq.w	#1,$30(a0)
0001642E 6A00                       		bpl.s	Obj69_Animate
00016430 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016436 0868 0000 001C             		bchg	#0,$1C(a0)
0001643C 4A28 0001                  		tst.b	1(a0)
00016440 6A00                       		bpl.s	Obj69_Animate
00016442 303C 00BB                  		move.w	#$BB,d0
00016446 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play door sound
0001644C                            
0001644C                            Obj69_Animate:
0001644C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016452 4EB9 0000 AFC8             		jsr	AnimateSprite
00016458 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001645C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001645E 323C 004B                  		move.w	#$4B,d1
00016462 343C 000C                  		move.w	#$C,d2
00016466 3602                       		move.w	d2,d3
00016468 5243                       		addq.w	#1,d3
0001646A 3828 0008                  		move.w	8(a0),d4
0001646E 6100 9E8A                  		bsr.w	SolidObject
00016472 6000 99A2                  		bra.w	MarkObjGone
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj69_NotSolid:
00016476 0828 0003 0022             		btst	#3,$22(a0)
0001647C 6700                       		beq.s	Obj69_Display
0001647E 43F8 D000                  		lea	($FFFFD000).w,a1
00016482 08A9 0003 0022             		bclr	#3,$22(a1)
00016488 08A8 0003 0022             		bclr	#3,$22(a0)
0001648E 4228 0025                  		clr.b	$25(a0)
00016492                            
00016492                            Obj69_Display:
00016492 6000 9982                  		bra.w	MarkObjGone
00016496                            ; ===========================================================================
00016496                            
00016496                            Obj69_Spinner:				; XREF: Obj69_Index
00016496 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001649A C068 0036                  		and.w	$36(a0),d0
0001649E 6600                       		bne.s	Obj69_Delay
000164A0 117C 0001 0034             		move.b	#1,$34(a0)
000164A6                            
000164A6                            Obj69_Delay:
000164A6 4A28 0034                  		tst.b	$34(a0)
000164AA 6700                       		beq.s	Obj69_Animate2
000164AC 5368 0030                  		subq.w	#1,$30(a0)
000164B0 6A00                       		bpl.s	Obj69_Animate2
000164B2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000164B8 4228 0034                  		clr.b	$34(a0)
000164BC 0868 0000 001C             		bchg	#0,$1C(a0)
000164C2                            
000164C2                            Obj69_Animate2:
000164C2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000164C8 4EB9 0000 AFC8             		jsr	AnimateSprite
000164CE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000164D2 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000164D4 323C 001B                  		move.w	#$1B,d1
000164D8 343C 0007                  		move.w	#7,d2
000164DC 3602                       		move.w	d2,d3
000164DE 5243                       		addq.w	#1,d3
000164E0 3828 0008                  		move.w	8(a0),d4
000164E4 6100 9E14                  		bsr.w	SolidObject
000164E8 6000 992C                  		bra.w	MarkObjGone
000164EC                            ; ===========================================================================
000164EC                            
000164EC                            Obj69_NotSolid2:
000164EC 0828 0003 0022             		btst	#3,$22(a0)
000164F2 6700                       		beq.s	Obj69_Display2
000164F4 43F8 D000                  		lea	($FFFFD000).w,a1
000164F8 08A9 0003 0022             		bclr	#3,$22(a1)
000164FE 08A8 0003 0022             		bclr	#3,$22(a0)
00016504 4228 0025                  		clr.b	$25(a0)
00016508                            
00016508                            Obj69_Display2:
00016508 6000 990C                  		bra.w	MarkObjGone
0001650C                            ; ===========================================================================
0001650C                            Ani_obj69:
0001650C                            	include "_anim\obj69.asm"
0001650C                            ; ---------------------------------------------------------------------------
0001650C                            ; Animation script - trapdoor (SBZ)
0001650C                            ; ---------------------------------------------------------------------------
0001650C 0000                       		dc.w byte_158AC-Ani_obj69
0001650E 0000                       		dc.w byte_158B2-Ani_obj69
00016510 0000                       		dc.w byte_158B8-Ani_obj69
00016512 0000                       		dc.w byte_158CC-Ani_obj69
00016514 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001651A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016520 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001652D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016534 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016541 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016548                            		even
00016548                            		even
00016548                            
00016548                            ; ---------------------------------------------------------------------------
00016548                            ; Sprite mappings - trapdoor (SBZ)
00016548                            ; ---------------------------------------------------------------------------
00016548                            Map_obj69:
00016548                            	include "_maps\obj69.asm"
00016548                            ; ---------------------------------------------------------------------------
00016548                            ; Sprite mappings - trapdoor (SBZ)
00016548                            ; ---------------------------------------------------------------------------
00016548 0000                       		dc.w byte_158E6-Map_obj69
0001654A 0000                       		dc.w byte_158FB-Map_obj69
0001654C 0000                       		dc.w byte_15924-Map_obj69
0001654E 04                         byte_158E6:	dc.b 4
0001654F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016554 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016559 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001655E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016563 08                         byte_158FB:	dc.b 8
00016564 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016569 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001656E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016573 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016578 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001657D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016582 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016587 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001658C 04                         byte_15924:	dc.b 4
0001658D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016592 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016597 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001659C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000165A2 00                         		even
000165A2 00                         		even
000165A2                            
000165A2                            ; ---------------------------------------------------------------------------
000165A2                            ; Sprite mappings - spinning platforms (SBZ)
000165A2                            ; ---------------------------------------------------------------------------
000165A2                            Map_obj69a:
000165A2                            	include "_maps\obj69a.asm"
000165A2                            ; ---------------------------------------------------------------------------
000165A2                            ; Sprite mappings - spinning platforms (SBZ)
000165A2                            ; ---------------------------------------------------------------------------
000165A2 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000165A6 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000165AA 0000                       		dc.w byte_15970-Map_obj69a
000165AC 02                         byte_15944:	dc.b 2
000165AD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000165B2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000165B7 02                         byte_1594F:	dc.b 2
000165B8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000165BD 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000165C2 02                         byte_1595A:	dc.b 2
000165C3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000165C8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000165CD 02                         byte_15965:	dc.b 2
000165CE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000165D3 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000165D8 02                         byte_15970:	dc.b 2
000165D9 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000165DE 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000165E4 00                         		even
000165E4 00                         		even
000165E4                            
000165E4                            ; ===========================================================================
000165E4                            ; ---------------------------------------------------------------------------
000165E4                            ; Object 6A - ground saws and pizza cutters (SBZ)
000165E4                            ; ---------------------------------------------------------------------------
000165E4                            
000165E4                            Obj6A:					; XREF: Obj_Index
000165E4 7000                       		moveq	#0,d0
000165E6 1028 0024                  		move.b	$24(a0),d0
000165EA 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000165EE 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000165F2                            ; ===========================================================================
000165F2 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000165F4 0000                       		dc.w Obj6A_Action-Obj6A_Index
000165F6                            ; ===========================================================================
000165F6                            
000165F6                            Obj6A_Main:				; XREF: Obj6A_Index
000165F6 5428 0024                  		addq.b	#2,$24(a0)
000165FA 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016602 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016608 117C 0004 0001             		move.b	#4,1(a0)
0001660E 117C 0004 0018             		move.b	#4,$18(a0)
00016614 117C 0020 0019             		move.b	#$20,$19(a0)
0001661A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016620 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016626 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001662C 6400                       		bcc.s	Obj6A_Action
0001662E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016634                            
00016634                            Obj6A_Action:				; XREF: Obj6A_Index
00016634 7000                       		moveq	#0,d0
00016636 1028 0028                  		move.b	$28(a0),d0
0001663A 0240 0007                  		andi.w	#7,d0
0001663E D040                       		add.w	d0,d0
00016640 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016644 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016648 3028 003A                  		move.w	$3A(a0),d0
0001664C 0240 FF80                  		andi.w	#$FF80,d0
00016650 3238 F700                  		move.w	($FFFFF700).w,d1
00016654 0441 0080                  		subi.w	#$80,d1
00016658 0241 FF80                  		andi.w	#$FF80,d1
0001665C 9041                       		sub.w	d1,d0
0001665E 0C40 0280                  		cmpi.w	#$280,d0
00016662 6200                       		bhi.s	Obj6A_Delete
00016664 4EF9 0000 DD42             		jmp	DisplaySprite
0001666A                            ; ===========================================================================
0001666A                            
0001666A                            Obj6A_Delete:
0001666A 4EF9 0000 DD7E             		jmp	DeleteObject
00016670                            ; ===========================================================================
00016670 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016674 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016678 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001667A                            ; ===========================================================================
0001667A                            
0001667A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001667A 4E75                       		rts	
0001667C                            ; ===========================================================================
0001667C                            
0001667C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001667C 323C 0060                  		move.w	#$60,d1
00016680 7000                       		moveq	#0,d0
00016682 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016686 0828 0000 0022             		btst	#0,$22(a0)
0001668C 6700                       		beq.s	Obj6A_Animate01
0001668E 4440                       		neg.w	d0
00016690 D041                       		add.w	d1,d0
00016692                            
00016692                            Obj6A_Animate01:
00016692 3228 003A                  		move.w	$3A(a0),d1
00016696 9240                       		sub.w	d0,d1
00016698 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001669C 5328 001E                  		subq.b	#1,$1E(a0)
000166A0 6A00                       		bpl.s	loc_15A46
000166A2 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000166A8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000166AE                            
000166AE                            loc_15A46:
000166AE 4A28 0001                  		tst.b	1(a0)
000166B2 6A00                       		bpl.s	locret_15A60
000166B4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000166B8 0240 000F                  		andi.w	#$F,d0
000166BC 6600                       		bne.s	locret_15A60
000166BE 303C 00B0                  		move.w	#$B0,d0
000166C2 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play saw sound
000166C8                            
000166C8                            locret_15A60:
000166C8 4E75                       		rts	
000166CA                            ; ===========================================================================
000166CA                            
000166CA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000166CA 323C 0030                  		move.w	#$30,d1
000166CE 7000                       		moveq	#0,d0
000166D0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000166D4 0828 0000 0022             		btst	#0,$22(a0)
000166DA 6700                       		beq.s	Obj6A_Animate02
000166DC 4440                       		neg.w	d0
000166DE 0640 0080                  		addi.w	#$80,d0
000166E2                            
000166E2                            Obj6A_Animate02:
000166E2 3228 0038                  		move.w	$38(a0),d1
000166E6 9240                       		sub.w	d0,d1
000166E8 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000166EC 5328 001E                  		subq.b	#1,$1E(a0)
000166F0 6A00                       		bpl.s	loc_15A96
000166F2 117C 0002 001E             		move.b	#2,$1E(a0)
000166F8 0868 0000 001A             		bchg	#0,$1A(a0)
000166FE                            
000166FE                            loc_15A96:
000166FE 4A28 0001                  		tst.b	1(a0)
00016702 6A00                       		bpl.s	locret_15AB0
00016704 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016708 0C00 0018                  		cmpi.b	#$18,d0
0001670C 6600                       		bne.s	locret_15AB0
0001670E 303C 00B0                  		move.w	#$B0,d0
00016712 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play saw sound
00016718                            
00016718                            locret_15AB0:
00016718 4E75                       		rts	
0001671A                            ; ===========================================================================
0001671A                            
0001671A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001671A 4A28 003D                  		tst.b	$3D(a0)
0001671E 6600                       		bne.s	Obj6A_Animate03
00016720 3038 D008                  		move.w	($FFFFD008).w,d0
00016724 0440 00C0                  		subi.w	#$C0,d0
00016728 6500                       		bcs.s	loc_15B02
0001672A 9068 0008                  		sub.w	8(a0),d0
0001672E 6500                       		bcs.s	loc_15B02
00016730 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016734 0440 0080                  		subi.w	#$80,d0
00016738 B068 000C                  		cmp.w	$C(a0),d0
0001673C 6400                       		bcc.s	locret_15B04
0001673E 0640 0100                  		addi.w	#$100,d0
00016742 B068 000C                  		cmp.w	$C(a0),d0
00016746 6500                       		bcs.s	locret_15B04
00016748 117C 0001 003D             		move.b	#1,$3D(a0)
0001674E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016754 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001675A 117C 0002 001A             		move.b	#2,$1A(a0)
00016760 303C 00B0                  		move.w	#$B0,d0
00016764 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play saw sound
0001676A                            
0001676A                            loc_15B02:
0001676A 588F                       		addq.l	#4,sp
0001676C                            
0001676C                            locret_15B04:
0001676C 4E75                       		rts	
0001676E                            ; ===========================================================================
0001676E                            
0001676E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001676E 4EB9 0000 DD28             		jsr	SpeedToPos
00016774 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001677A 5328 001E                  		subq.b	#1,$1E(a0)
0001677E 6A00                       		bpl.s	locret_15B24
00016780 117C 0002 001E             		move.b	#2,$1E(a0)
00016786 0868 0000 001A             		bchg	#0,$1A(a0)
0001678C                            
0001678C                            locret_15B24:
0001678C 4E75                       		rts	
0001678E                            ; ===========================================================================
0001678E                            
0001678E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001678E 4A28 003D                  		tst.b	$3D(a0)
00016792 6600                       		bne.s	Obj6A_Animate04
00016794 3038 D008                  		move.w	($FFFFD008).w,d0
00016798 0640 00E0                  		addi.w	#$E0,d0
0001679C 9068 0008                  		sub.w	8(a0),d0
000167A0 6400                       		bcc.s	loc_15B74
000167A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000167A6 0440 0080                  		subi.w	#$80,d0
000167AA B068 000C                  		cmp.w	$C(a0),d0
000167AE 6400                       		bcc.s	locret_15B76
000167B0 0640 0100                  		addi.w	#$100,d0
000167B4 B068 000C                  		cmp.w	$C(a0),d0
000167B8 6500                       		bcs.s	locret_15B76
000167BA 117C 0001 003D             		move.b	#1,$3D(a0)
000167C0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000167C6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000167CC 117C 0002 001A             		move.b	#2,$1A(a0)
000167D2 303C 00B0                  		move.w	#$B0,d0
000167D6 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play saw sound
000167DC                            
000167DC                            loc_15B74:
000167DC 588F                       		addq.l	#4,sp
000167DE                            
000167DE                            locret_15B76:
000167DE 4E75                       		rts	
000167E0                            ; ===========================================================================
000167E0                            
000167E0                            Obj6A_Animate04:
000167E0 4EB9 0000 DD28             		jsr	SpeedToPos
000167E6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000167EC 5328 001E                  		subq.b	#1,$1E(a0)
000167F0 6A00                       		bpl.s	locret_15B96
000167F2 117C 0002 001E             		move.b	#2,$1E(a0)
000167F8 0868 0000 001A             		bchg	#0,$1A(a0)
000167FE                            
000167FE                            locret_15B96:
000167FE 4E75                       		rts	
00016800                            ; ===========================================================================
00016800                            ; ---------------------------------------------------------------------------
00016800                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016800                            ; ---------------------------------------------------------------------------
00016800                            Map_obj6A:
00016800                            	include "_maps\obj6A.asm"
00016800                            ; ---------------------------------------------------------------------------
00016800                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016800                            ; ---------------------------------------------------------------------------
00016800 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016804 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016808 07                         byte_15BA0:	dc.b 7
00016809 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001680E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016813 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016818 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001681D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016822 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016827 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001682C 07                         byte_15BC4:	dc.b 7
0001682D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016832 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016837 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001683C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016841 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016846 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001684B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016850 04                         byte_15BE8:	dc.b 4
00016851 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016856 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001685B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016860 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016865 04                         byte_15BFD:	dc.b 4
00016866 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001686B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016870 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016875 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001687A                            		even
0001687A                            		even
0001687A                            
0001687A                            ; ===========================================================================
0001687A                            ; ---------------------------------------------------------------------------
0001687A                            ; Object 6B - stomper (SBZ)
0001687A                            ; ---------------------------------------------------------------------------
0001687A                            
0001687A                            Obj6B:					; XREF: Obj_Index
0001687A 7000                       		moveq	#0,d0
0001687C 1028 0024                  		move.b	$24(a0),d0
00016880 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016884 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016888                            ; ===========================================================================
00016888 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001688A 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001688C                            
0001688C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016890 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016894 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016898 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001689C 8040 0005                  		dc.b  $80, $40,	  0,   5
000168A0                            ; ===========================================================================
000168A0                            
000168A0                            Obj6B_Main:				; XREF: Obj6B_Index
000168A0 5428 0024                  		addq.b	#2,$24(a0)
000168A4 7000                       		moveq	#0,d0
000168A6 1028 0028                  		move.b	$28(a0),d0
000168AA E448                       		lsr.w	#2,d0
000168AC 0240 001C                  		andi.w	#$1C,d0
000168B0 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000168B4 115B 0019                  		move.b	(a3)+,$19(a0)
000168B8 115B 0016                  		move.b	(a3)+,$16(a0)
000168BC E448                       		lsr.w	#2,d0
000168BE 1140 001A                  		move.b	d0,$1A(a0)
000168C2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000168CA 317C 22C0 0002             		move.w	#$22C0,2(a0)
000168D0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000168D6 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000168D8 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000168DE 6700                       		beq.s	Obj6B_SBZ3
000168E0                            
000168E0                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000168E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168E4 7000                       		moveq	#0,d0
000168E6 1028 0023                  		move.b	$23(a0),d0
000168EA 6700                       		beq.s	Obj6B_Delete
000168EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000168F2                            
000168F2                            Obj6B_Delete:
000168F2 4EF9 0000 DD7E             		jmp	DeleteObject
000168F8                            ; ===========================================================================
000168F8                            
000168F8                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000168F8 317C 41F0 0002             		move.w	#$41F0,2(a0)
000168FE 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016904 6600                       		bne.s	Obj6B_SBZ12
00016906 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001690A 7000                       		moveq	#0,d0
0001690C 1028 0023                  		move.b	$23(a0),d0
00016910 6700                       		beq.s	Obj6B_SBZ12
00016912 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016918 6700                       		beq.s	Obj6B_SBZ12
0001691A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001691E 60C0                       		bra.s	Obj6B_ChkGone
00016920                            ; ===========================================================================
00016920                            
00016920                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016920 0028 0004 0001             		ori.b	#4,1(a0)
00016926 117C 0004 0018             		move.b	#4,$18(a0)
0001692C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016932 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016938 7000                       		moveq	#0,d0
0001693A 101B                       		move.b	(a3)+,d0
0001693C 3140 003C                  		move.w	d0,$3C(a0)
00016940 7000                       		moveq	#0,d0
00016942 1028 0028                  		move.b	$28(a0),d0
00016946 6A00                       		bpl.s	Obj6B_Action
00016948 0200 000F                  		andi.b	#$F,d0
0001694C 1140 003E                  		move.b	d0,$3E(a0)
00016950 1153 0028                  		move.b	(a3),$28(a0)
00016954 0C13 0005                  		cmpi.b	#5,(a3)
00016958 6600                       		bne.s	Obj6B_ChkGone2
0001695A 08E8 0004 0001             		bset	#4,1(a0)
00016960                            
00016960                            Obj6B_ChkGone2:
00016960 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016964 7000                       		moveq	#0,d0
00016966 1028 0023                  		move.b	$23(a0),d0
0001696A 6700                       		beq.s	Obj6B_Action
0001696C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016972                            
00016972                            Obj6B_Action:				; XREF: Obj6B_Index
00016972 3F28 0008                  		move.w	8(a0),-(sp)
00016976 7000                       		moveq	#0,d0
00016978 1028 0028                  		move.b	$28(a0),d0
0001697C 0240 000F                  		andi.w	#$F,d0
00016980 D040                       		add.w	d0,d0
00016982 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016986 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001698A 381F                       		move.w	(sp)+,d4
0001698C 4A28 0001                  		tst.b	1(a0)
00016990 6A00                       		bpl.s	Obj6B_ChkDel
00016992 7200                       		moveq	#0,d1
00016994 1228 0019                  		move.b	$19(a0),d1
00016998 0641 000B                  		addi.w	#$B,d1
0001699C 7400                       		moveq	#0,d2
0001699E 1428 0016                  		move.b	$16(a0),d2
000169A2 3602                       		move.w	d2,d3
000169A4 5243                       		addq.w	#1,d3
000169A6 6100 9952                  		bsr.w	SolidObject
000169AA                            
000169AA                            Obj6B_ChkDel:
000169AA 3028 0034                  		move.w	$34(a0),d0
000169AE 0240 FF80                  		andi.w	#$FF80,d0
000169B2 3238 F700                  		move.w	($FFFFF700).w,d1
000169B6 0441 0080                  		subi.w	#$80,d1
000169BA 0241 FF80                  		andi.w	#$FF80,d1
000169BE 9041                       		sub.w	d1,d0
000169C0 0C40 0280                  		cmpi.w	#$280,d0
000169C4 6200                       		bhi.s	loc_15D64
000169C6 4EF9 0000 DD42             		jmp	DisplaySprite
000169CC                            ; ===========================================================================
000169CC                            
000169CC                            loc_15D64:
000169CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000169D2 6600                       		bne.s	Obj6B_Delete2
000169D4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000169D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169DC 7000                       		moveq	#0,d0
000169DE 1028 0023                  		move.b	$23(a0),d0
000169E2 6700                       		beq.s	Obj6B_Delete2
000169E4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000169EA                            
000169EA                            Obj6B_Delete2:
000169EA 4EF9 0000 DD7E             		jmp	DeleteObject
000169F0                            ; ===========================================================================
000169F0 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000169F4 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000169F8 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000169FC                            ; ===========================================================================
000169FC                            
000169FC                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000169FC 4E75                       		rts	
000169FE                            ; ===========================================================================
000169FE                            
000169FE                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000169FE 4A28 0038                  		tst.b	$38(a0)
00016A02 6600                       		bne.s	loc_15DB4
00016A04 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A08 7000                       		moveq	#0,d0
00016A0A 1028 003E                  		move.b	$3E(a0),d0
00016A0E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A14 6700                       		beq.s	loc_15DC2
00016A16 117C 0001 0038             		move.b	#1,$38(a0)
00016A1C                            
00016A1C                            loc_15DB4:
00016A1C 3028 003C                  		move.w	$3C(a0),d0
00016A20 B068 003A                  		cmp.w	$3A(a0),d0
00016A24 6700                       		beq.s	loc_15DE0
00016A26 5468 003A                  		addq.w	#2,$3A(a0)
00016A2A                            
00016A2A                            loc_15DC2:
00016A2A 3028 003A                  		move.w	$3A(a0),d0
00016A2E 0828 0000 0022             		btst	#0,$22(a0)
00016A34 6700                       		beq.s	loc_15DD4
00016A36 4440                       		neg.w	d0
00016A38 0640 0080                  		addi.w	#$80,d0
00016A3C                            
00016A3C                            loc_15DD4:
00016A3C 3228 0034                  		move.w	$34(a0),d1
00016A40 9240                       		sub.w	d0,d1
00016A42 3141 0008                  		move.w	d1,8(a0)
00016A46 4E75                       		rts	
00016A48                            ; ===========================================================================
00016A48                            
00016A48                            loc_15DE0:
00016A48 5228 0028                  		addq.b	#1,$28(a0)
00016A4C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016A52 4228 0038                  		clr.b	$38(a0)
00016A56 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A5A 7000                       		moveq	#0,d0
00016A5C 1028 0023                  		move.b	$23(a0),d0
00016A60 67C8                       		beq.s	loc_15DC2
00016A62 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A68 60C0                       		bra.s	loc_15DC2
00016A6A                            ; ===========================================================================
00016A6A                            
00016A6A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016A6A 4A28 0038                  		tst.b	$38(a0)
00016A6E 6600                       		bne.s	loc_15E14
00016A70 5368 0036                  		subq.w	#1,$36(a0)
00016A74 6600                       		bne.s	loc_15E1E
00016A76 117C 0001 0038             		move.b	#1,$38(a0)
00016A7C                            
00016A7C                            loc_15E14:
00016A7C 4A68 003A                  		tst.w	$3A(a0)
00016A80 6700                       		beq.s	loc_15E3C
00016A82 5568 003A                  		subq.w	#2,$3A(a0)
00016A86                            
00016A86                            loc_15E1E:
00016A86 3028 003A                  		move.w	$3A(a0),d0
00016A8A 0828 0000 0022             		btst	#0,$22(a0)
00016A90 6700                       		beq.s	loc_15E30
00016A92 4440                       		neg.w	d0
00016A94 0640 0080                  		addi.w	#$80,d0
00016A98                            
00016A98                            loc_15E30:
00016A98 3228 0034                  		move.w	$34(a0),d1
00016A9C 9240                       		sub.w	d0,d1
00016A9E 3141 0008                  		move.w	d1,8(a0)
00016AA2 4E75                       		rts	
00016AA4                            ; ===========================================================================
00016AA4                            
00016AA4                            loc_15E3C:
00016AA4 5328 0028                  		subq.b	#1,$28(a0)
00016AA8 4228 0038                  		clr.b	$38(a0)
00016AAC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016AB0 7000                       		moveq	#0,d0
00016AB2 1028 0023                  		move.b	$23(a0),d0
00016AB6 67CE                       		beq.s	loc_15E1E
00016AB8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016ABE 60C6                       		bra.s	loc_15E1E
00016AC0                            ; ===========================================================================
00016AC0                            
00016AC0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016AC0 4A28 0038                  		tst.b	$38(a0)
00016AC4 6600                       		bne.s	loc_15E7C
00016AC6 4A68 003A                  		tst.w	$3A(a0)
00016ACA 6700                       		beq.s	loc_15E6A
00016ACC 5368 003A                  		subq.w	#1,$3A(a0)
00016AD0 6000                       		bra.s	loc_15E8E
00016AD2                            ; ===========================================================================
00016AD2                            
00016AD2                            loc_15E6A:
00016AD2 5368 0036                  		subq.w	#1,$36(a0)
00016AD6 6A00                       		bpl.s	loc_15E8E
00016AD8 317C 003C 0036             		move.w	#$3C,$36(a0)
00016ADE 117C 0001 0038             		move.b	#1,$38(a0)
00016AE4                            
00016AE4                            loc_15E7C:
00016AE4 5068 003A                  		addq.w	#8,$3A(a0)
00016AE8 3028 003A                  		move.w	$3A(a0),d0
00016AEC B068 003C                  		cmp.w	$3C(a0),d0
00016AF0 6600                       		bne.s	loc_15E8E
00016AF2 4228 0038                  		clr.b	$38(a0)
00016AF6                            
00016AF6                            loc_15E8E:
00016AF6 3028 003A                  		move.w	$3A(a0),d0
00016AFA 0828 0000 0022             		btst	#0,$22(a0)
00016B00 6700                       		beq.s	loc_15EA0
00016B02 4440                       		neg.w	d0
00016B04 0640 0038                  		addi.w	#$38,d0
00016B08                            
00016B08                            loc_15EA0:
00016B08 3228 0030                  		move.w	$30(a0),d1
00016B0C D240                       		add.w	d0,d1
00016B0E 3141 000C                  		move.w	d1,$C(a0)
00016B12 4E75                       		rts	
00016B14                            ; ===========================================================================
00016B14                            
00016B14                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016B14 4A28 0038                  		tst.b	$38(a0)
00016B18 6600                       		bne.s	loc_15ED0
00016B1A 4A68 003A                  		tst.w	$3A(a0)
00016B1E 6700                       		beq.s	loc_15EBE
00016B20 5168 003A                  		subq.w	#8,$3A(a0)
00016B24 6000                       		bra.s	loc_15EF0
00016B26                            ; ===========================================================================
00016B26                            
00016B26                            loc_15EBE:
00016B26 5368 0036                  		subq.w	#1,$36(a0)
00016B2A 6A00                       		bpl.s	loc_15EF0
00016B2C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016B32 117C 0001 0038             		move.b	#1,$38(a0)
00016B38                            
00016B38                            loc_15ED0:
00016B38 3028 003A                  		move.w	$3A(a0),d0
00016B3C B068 003C                  		cmp.w	$3C(a0),d0
00016B40 6700                       		beq.s	loc_15EE0
00016B42 5068 003A                  		addq.w	#8,$3A(a0)
00016B46 6000                       		bra.s	loc_15EF0
00016B48                            ; ===========================================================================
00016B48                            
00016B48                            loc_15EE0:
00016B48 5368 0036                  		subq.w	#1,$36(a0)
00016B4C 6A00                       		bpl.s	loc_15EF0
00016B4E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016B54 4228 0038                  		clr.b	$38(a0)
00016B58                            
00016B58                            loc_15EF0:
00016B58 3028 003A                  		move.w	$3A(a0),d0
00016B5C 0828 0000 0022             		btst	#0,$22(a0)
00016B62 6700                       		beq.s	loc_15F02
00016B64 4440                       		neg.w	d0
00016B66 0640 0038                  		addi.w	#$38,d0
00016B6A                            
00016B6A                            loc_15F02:
00016B6A 3228 0030                  		move.w	$30(a0),d1
00016B6E D240                       		add.w	d0,d1
00016B70 3141 000C                  		move.w	d1,$C(a0)
00016B74 4E75                       		rts	
00016B76                            ; ===========================================================================
00016B76                            
00016B76                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016B76 4A28 0038                  		tst.b	$38(a0)
00016B7A 6600                       		bne.s	loc_15F3E
00016B7C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016B80 7000                       		moveq	#0,d0
00016B82 1028 003E                  		move.b	$3E(a0),d0
00016B86 0832 0000 0000             		btst	#0,(a2,d0.w)
00016B8C 6700                       		beq.s	locret_15F5C
00016B8E 117C 0001 0038             		move.b	#1,$38(a0)
00016B94 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B98 7000                       		moveq	#0,d0
00016B9A 1028 0023                  		move.b	$23(a0),d0
00016B9E 6700                       		beq.s	loc_15F3E
00016BA0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016BA6                            
00016BA6                            loc_15F3E:
00016BA6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016BAE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016BB6 3168 0008 0034             		move.w	8(a0),$34(a0)
00016BBC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016BC2 6700                       		beq.s	loc_15F5E
00016BC4                            
00016BC4                            locret_15F5C:
00016BC4 4E75                       		rts	
00016BC6                            ; ===========================================================================
00016BC6                            
00016BC6                            loc_15F5E:
00016BC6 4228 0028                  		clr.b	$28(a0)
00016BCA 4228 0038                  		clr.b	$38(a0)
00016BCE 4E75                       		rts	
00016BD0                            ; ===========================================================================
00016BD0                            ; ---------------------------------------------------------------------------
00016BD0                            ; Sprite mappings - stomper and	platforms (SBZ)
00016BD0                            ; ---------------------------------------------------------------------------
00016BD0                            Map_obj6B:
00016BD0                            	include "_maps\obj6B.asm"
00016BD0                            ; ---------------------------------------------------------------------------
00016BD0                            ; Sprite mappings - stomper and	platforms (SBZ)
00016BD0                            ; ---------------------------------------------------------------------------
00016BD0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016BD4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016BD8 0000                       		dc.w byte_15FB0-Map_obj6B
00016BDA 04                         byte_15F72:	dc.b 4
00016BDB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016BE0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016BE5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016BEA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016BEF 08                         byte_15F87:	dc.b 8
00016BF0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016BF5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016BFA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016BFF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016C04 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016C09 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016C0E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016C13 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016C18 0E                         byte_15FB0:	dc.b $E
00016C19 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016C1E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016C23 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016C28 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016C2D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016C32 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016C37 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016C3C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016C41 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016C46 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016C4B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016C50 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016C55 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016C5A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016C60 00                         		even
00016C60 00                         		even
00016C60                            
00016C60                            ; ===========================================================================
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            ; Object 6C - vanishing	platforms (SBZ)
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            
00016C60                            Obj6C:					; XREF: Obj_Index
00016C60 7000                       		moveq	#0,d0
00016C62 1028 0024                  		move.b	$24(a0),d0
00016C66 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016C6A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016C6E                            ; ===========================================================================
00016C6E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016C70 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016C72 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016C74 0000                       		dc.w loc_16068-Obj6C_Index
00016C76                            ; ===========================================================================
00016C76                            
00016C76                            Obj6C_Main:				; XREF: Obj6C_Index
00016C76 5C28 0024                  		addq.b	#6,$24(a0)
00016C7A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016C82 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016C88 0028 0004 0001             		ori.b	#4,1(a0)
00016C8E 117C 0010 0019             		move.b	#$10,$19(a0)
00016C94 117C 0004 0018             		move.b	#4,$18(a0)
00016C9A 7000                       		moveq	#0,d0
00016C9C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016CA0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016CA4 5240                       		addq.w	#1,d0		; add 1
00016CA6 EF48                       		lsl.w	#7,d0		; multiply by $80
00016CA8 3200                       		move.w	d0,d1
00016CAA 5340                       		subq.w	#1,d0
00016CAC 3140 0030                  		move.w	d0,$30(a0)
00016CB0 3140 0032                  		move.w	d0,$32(a0)
00016CB4 7000                       		moveq	#0,d0
00016CB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00016CBA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016CBE 0641 0080                  		addi.w	#$80,d1
00016CC2 C0C1                       		mulu.w	d1,d0
00016CC4 E088                       		lsr.l	#8,d0
00016CC6 3140 0036                  		move.w	d0,$36(a0)
00016CCA 5341                       		subq.w	#1,d1
00016CCC 3141 0038                  		move.w	d1,$38(a0)
00016CD0                            
00016CD0                            loc_16068:				; XREF: Obj6C_Index
00016CD0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CD4 9068 0036                  		sub.w	$36(a0),d0
00016CD8 C068 0038                  		and.w	$38(a0),d0
00016CDC 6600                       		bne.s	Obj6C_Animate
00016CDE 5928 0024                  		subq.b	#4,$24(a0)
00016CE2 6000                       		bra.s	Obj6C_Vanish
00016CE4                            ; ===========================================================================
00016CE4                            
00016CE4                            Obj6C_Animate:
00016CE4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016CEA 4EB9 0000 AFC8             		jsr	AnimateSprite
00016CF0 6000 9124                  		bra.w	MarkObjGone
00016CF4                            ; ===========================================================================
00016CF4                            
00016CF4                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016CF4 5368 0030                  		subq.w	#1,$30(a0)
00016CF8 6A00                       		bpl.s	loc_160AA
00016CFA 317C 007F 0030             		move.w	#127,$30(a0)
00016D00 4A28 001C                  		tst.b	$1C(a0)
00016D04 6700                       		beq.s	loc_160A4
00016D06 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016D0C                            
00016D0C                            loc_160A4:
00016D0C 0868 0000 001C             		bchg	#0,$1C(a0)
00016D12                            
00016D12                            loc_160AA:
00016D12 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016D18 4EB9 0000 AFC8             		jsr	AnimateSprite
00016D1E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016D24 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016D26 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016D2C 6600                       		bne.s	loc_160D6
00016D2E 7200                       		moveq	#0,d1
00016D30 1228 0019                  		move.b	$19(a0),d1
00016D34 4EB9 0000 7BF0             		jsr	(PlatformObject).l
00016D3A 6000 90DA                  		bra.w	MarkObjGone
00016D3E                            ; ===========================================================================
00016D3E                            
00016D3E                            loc_160D6:
00016D3E 7200                       		moveq	#0,d1
00016D40 1228 0019                  		move.b	$19(a0),d1
00016D44 4EB9 0000 7D64             		jsr	(ExitPlatform).l
00016D4A 3428 0008                  		move.w	8(a0),d2
00016D4E 4EB9 0000 82CE             		jsr	(MvSonicOnPtfm2).l
00016D54 6000 90C0                  		bra.w	MarkObjGone
00016D58                            ; ===========================================================================
00016D58                            
00016D58                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016D58 0828 0003 0022             		btst	#3,$22(a0)
00016D5E 6700                       		beq.s	Obj6C_Display
00016D60 43F8 D000                  		lea	($FFFFD000).w,a1
00016D64 08A9 0003 0022             		bclr	#3,$22(a1)
00016D6A 08A8 0003 0022             		bclr	#3,$22(a0)
00016D70 117C 0002 0024             		move.b	#2,$24(a0)
00016D76 4228 0025                  		clr.b	$25(a0)
00016D7A                            
00016D7A                            Obj6C_Display:
00016D7A 6000 909A                  		bra.w	MarkObjGone
00016D7E                            ; ===========================================================================
00016D7E                            Ani_obj6C:
00016D7E                            	include "_anim\obj6C.asm"
00016D7E                            ; ---------------------------------------------------------------------------
00016D7E                            ; Animation script - vanishing platforms (SBZ)
00016D7E                            ; ---------------------------------------------------------------------------
00016D7E 0000                       		dc.w byte_1611A-Ani_obj6C
00016D80 0000                       		dc.w byte_16122-Ani_obj6C
00016D82 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016D8A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016D92                            		even
00016D92                            		even
00016D92                            
00016D92                            ; ---------------------------------------------------------------------------
00016D92                            ; Sprite mappings - vanishing platforms	(SBZ)
00016D92                            ; ---------------------------------------------------------------------------
00016D92                            Map_obj6C:
00016D92                            	include "_maps\obj6C.asm"
00016D92                            ; ---------------------------------------------------------------------------
00016D92                            ; Sprite mappings - vanishing platforms	(SBZ)
00016D92                            ; ---------------------------------------------------------------------------
00016D92 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016D96 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016D9A 01                         byte_16132:	dc.b 1
00016D9B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016DA0 01                         byte_16138:	dc.b 1
00016DA1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016DA6 01                         byte_1613E:	dc.b 1
00016DA7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016DAC 00                         byte_16144:	dc.b 0
00016DAE 00                         		even
00016DAE 00                         		even
00016DAE                            
00016DAE                            ; ===========================================================================
00016DAE                            ; ---------------------------------------------------------------------------
00016DAE                            ; Object 6E - electrocution orbs (SBZ)
00016DAE                            ; ---------------------------------------------------------------------------
00016DAE                            
00016DAE                            Obj6E:					; XREF: Obj_Index
00016DAE 7000                       		moveq	#0,d0
00016DB0 1028 0024                  		move.b	$24(a0),d0
00016DB4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016DB8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016DBC                            ; ===========================================================================
00016DBC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016DBE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016DC0                            ; ===========================================================================
00016DC0                            
00016DC0                            Obj6E_Main:				; XREF: Obj6E_Index
00016DC0 5428 0024                  		addq.b	#2,$24(a0)
00016DC4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016DCC 317C 047E 0002             		move.w	#$47E,2(a0)
00016DD2 0028 0004 0001             		ori.b	#4,1(a0)
00016DD8 117C 0028 0019             		move.b	#$28,$19(a0)
00016DDE 7000                       		moveq	#0,d0
00016DE0 1028 0028                  		move.b	$28(a0),d0	; read object type
00016DE4 E948                       		lsl.w	#4,d0		; multiply by $10
00016DE6 5340                       		subq.w	#1,d0
00016DE8 3140 0034                  		move.w	d0,$34(a0)
00016DEC                            
00016DEC                            Obj6E_Shock:				; XREF: Obj6E_Index
00016DEC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016DF0 C068 0034                  		and.w	$34(a0),d0
00016DF4 6600                       		bne.s	Obj6E_Animate
00016DF6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016DFC 4A28 0001                  		tst.b	1(a0)
00016E00 6A00                       		bpl.s	Obj6E_Animate
00016E02 303C 00B1                  		move.w	#$B1,d0
00016E06 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play electricity sound
00016E0C                            
00016E0C                            Obj6E_Animate:
00016E0C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016E12 4EB9 0000 AFC8             		jsr	AnimateSprite
00016E18 117C 0000 0020             		move.b	#0,$20(a0)
00016E1E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016E24 6600                       		bne.s	Obj6E_Display	; if not, branch
00016E26 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016E2C                            
00016E2C                            Obj6E_Display:
00016E2C 6000 8FE8                  		bra.w	MarkObjGone
00016E30                            ; ===========================================================================
00016E30                            Ani_obj6E:
00016E30                            	include "_anim\obj6E.asm"
00016E30                            ; ---------------------------------------------------------------------------
00016E30                            ; Animation script - electrocution orbs (SBZ)
00016E30                            ; ---------------------------------------------------------------------------
00016E30 0000                       		dc.w byte_161CC-Ani_obj6E
00016E32 0000                       		dc.w byte_161D0-Ani_obj6E
00016E34 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016E38 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016E48                            		even
00016E48                            		even
00016E48                            
00016E48                            ; ---------------------------------------------------------------------------
00016E48                            ; Sprite mappings - electrocution orbs (SBZ)
00016E48                            ; ---------------------------------------------------------------------------
00016E48                            Map_obj6E:
00016E48                            	include "_maps\obj6E.asm"
00016E48                            ; ---------------------------------------------------------------------------
00016E48                            ; Sprite mappings - electrocution orbs (SBZ)
00016E48                            ; ---------------------------------------------------------------------------
00016E48 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016E4C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016E50 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016E54 02                         byte_161EC:	dc.b 2
00016E55 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016E5A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016E5F 03                         byte_161F7:	dc.b 3
00016E60 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016E65 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016E6A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016E6F 05                         byte_16207:	dc.b 5
00016E70 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016E75 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016E7A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016E7F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016E84 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016E89 04                         byte_16221:	dc.b 4
00016E8A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016E8F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016E94 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016E99 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016E9E 06                         byte_16236:	dc.b 6
00016E9F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016EA4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016EA9 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016EAE F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016EB3 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00016EB8 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016EBD 04                         byte_16255:	dc.b 4
00016EBE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016EC3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016EC8 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016ECD F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016ED2                            		even
00016ED2                            		even
00016ED2                            
00016ED2                            ; ===========================================================================
00016ED2                            ; ---------------------------------------------------------------------------
00016ED2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016ED2                            ; ---------------------------------------------------------------------------
00016ED2                            
00016ED2                            Obj6F:					; XREF: Obj_Index
00016ED2 7000                       		moveq	#0,d0
00016ED4 1028 0024                  		move.b	$24(a0),d0
00016ED8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016EDC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016EE0 3028 0030                  		move.w	$30(a0),d0
00016EE4 0240 FF80                  		andi.w	#$FF80,d0
00016EE8 3238 F700                  		move.w	($FFFFF700).w,d1
00016EEC 0441 0080                  		subi.w	#$80,d1
00016EF0 0241 FF80                  		andi.w	#$FF80,d1
00016EF4 9041                       		sub.w	d1,d0
00016EF6 0C40 0280                  		cmpi.w	#$280,d0
00016EFA 6200                       		bhi.s	loc_1629A
00016EFC                            
00016EFC                            Obj6F_Display:
00016EFC 4EF9 0000 DD42             		jmp	DisplaySprite
00016F02                            ; ===========================================================================
00016F02                            
00016F02                            loc_1629A:
00016F02 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016F08 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016F0A 0C40 FF80                  		cmpi.w	#-$80,d0
00016F0E 64EC                       		bcc.s	Obj6F_Display
00016F10                            
00016F10                            Obj6F_Act1or2:
00016F10 1028 002F                  		move.b	$2F(a0),d0
00016F14 6A00                       		bpl.s	Obj6F_Delete
00016F16 0240 007F                  		andi.w	#$7F,d0
00016F1A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016F1E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016F24                            
00016F24                            Obj6F_Delete:
00016F24 4EF9 0000 DD7E             		jmp	DeleteObject
00016F2A                            ; ===========================================================================
00016F2A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016F2C 0000                       		dc.w loc_163D8-Obj6F_Index
00016F2E                            ; ===========================================================================
00016F2E                            
00016F2E                            Obj6F_Main:				; XREF: Obj6F_Index
00016F2E 1028 0028                  		move.b	$28(a0),d0
00016F32 6B00 0000                  		bmi.w	loc_16380
00016F36 5428 0024                  		addq.b	#2,$24(a0)
00016F3A 217C 0001 65A2 0004        		move.l	#Map_obj69a,4(a0)
00016F42 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016F48 117C 0010 0019             		move.b	#$10,$19(a0)
00016F4E 0028 0004 0001             		ori.b	#4,1(a0)
00016F54 117C 0004 0018             		move.b	#4,$18(a0)
00016F5A 7000                       		moveq	#0,d0
00016F5C 1028 0028                  		move.b	$28(a0),d0
00016F60 3200                       		move.w	d0,d1
00016F62 E648                       		lsr.w	#3,d0
00016F64 0240 001E                  		andi.w	#$1E,d0
00016F68 45FA 0000                  		lea	off_164A6(pc),a2
00016F6C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F70 315A 0038                  		move.w	(a2)+,$38(a0)
00016F74 315A 0030                  		move.w	(a2)+,$30(a0)
00016F78 214A 003C                  		move.l	a2,$3C(a0)
00016F7C 0241 000F                  		andi.w	#$F,d1
00016F80 E549                       		lsl.w	#2,d1
00016F82 1141 0038                  		move.b	d1,$38(a0)
00016F86 117C 0004 003A             		move.b	#4,$3A(a0)
00016F8C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016F90 6700                       		beq.s	loc_16356
00016F92 117C 0001 003B             		move.b	#1,$3B(a0)
00016F98 4428 003A                  		neg.b	$3A(a0)
00016F9C 7200                       		moveq	#0,d1
00016F9E 1228 0038                  		move.b	$38(a0),d1
00016FA2 D228 003A                  		add.b	$3A(a0),d1
00016FA6 B228 0039                  		cmp.b	$39(a0),d1
00016FAA 6500                       		bcs.s	loc_16352
00016FAC 1001                       		move.b	d1,d0
00016FAE 7200                       		moveq	#0,d1
00016FB0 4A00                       		tst.b	d0
00016FB2 6A00                       		bpl.s	loc_16352
00016FB4 1228 0039                  		move.b	$39(a0),d1
00016FB8 5901                       		subq.b	#4,d1
00016FBA                            
00016FBA                            loc_16352:
00016FBA 1141 0038                  		move.b	d1,$38(a0)
00016FBE                            
00016FBE                            loc_16356:
00016FBE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016FC4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016FCA 4A41                       		tst.w	d1
00016FCC 6600                       		bne.s	loc_1636C
00016FCE 117C 0001 001C             		move.b	#1,$1C(a0)
00016FD4                            
00016FD4                            loc_1636C:
00016FD4 0C41 0008                  		cmpi.w	#8,d1
00016FD8 6600                       		bne.s	loc_16378
00016FDA 117C 0000 001C             		move.b	#0,$1C(a0)
00016FE0                            
00016FE0                            loc_16378:
00016FE0 6100 BEE6                  		bsr.w	Obj63_ChangeDir
00016FE4 6000 0000                  		bra.w	loc_163D8
00016FE8                            ; ===========================================================================
00016FE8                            
00016FE8                            loc_16380:				; XREF: Obj6F_Main
00016FE8 1140 002F                  		move.b	d0,$2F(a0)
00016FEC 0240 007F                  		andi.w	#$7F,d0
00016FF0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016FF4 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016FFA 6700                       		beq.s	loc_1639A
00016FFC 4EF9 0000 DD7E             		jmp	DeleteObject
00017002                            ; ===========================================================================
00017002                            
00017002                            loc_1639A:
00017002 4E75                       		rts
00017004 D040                       		add.w	d0,d0
00017006 0240 001E                  		andi.w	#$1E,d0
0001700A 0640 0080                  		addi.w	#$80,d0
0001700E 0640 0080                  		addi.w	#$80,d0
00017012 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017018 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001701C 321A                       		move.w	(a2)+,d1
0001701E 2248                       		movea.l	a0,a1
00017020 6000                       		bra.s	Obj6F_LoadPform
00017022                            ; ===========================================================================
00017022                            
00017022                            Obj6F_Loop:
00017022 4EB9 0000 E1EE             		jsr	SingleObjLoad
00017028 6600                       		bne.s	loc_163D0
0001702A                            
0001702A                            Obj6F_LoadPform:			; XREF: loc_1639A
0001702A 12BC 006F                  		move.b	#$6F,0(a1)
0001702E 335A 0008                  		move.w	(a2)+,8(a1)
00017032 335A 000C                  		move.w	(a2)+,$C(a1)
00017036 301A                       		move.w	(a2)+,d0
00017038 1340 0028                  		move.b	d0,$28(a1)
0001703C                            
0001703C                            loc_163D0:
0001703C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017040                            
00017040 588F                       		addq.l	#4,sp
00017042 4E75                       		rts	
00017044                            ; ===========================================================================
00017044                            
00017044                            loc_163D8:				; XREF: Obj6F_Index
00017044 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001704A 4EB9 0000 AFC8             		jsr	AnimateSprite
00017050 4A28 001A                  		tst.b	$1A(a0)
00017054 6600                       		bne.s	loc_16404
00017056 3F28 0008                  		move.w	8(a0),-(sp)
0001705A 6100 0000                  		bsr.w	loc_16424
0001705E 323C 001B                  		move.w	#$1B,d1
00017062 343C 0007                  		move.w	#7,d2
00017066 3602                       		move.w	d2,d3
00017068 5243                       		addq.w	#1,d3
0001706A 381F                       		move.w	(sp)+,d4
0001706C 6000 928C                  		bra.w	SolidObject
00017070                            ; ===========================================================================
00017070                            
00017070                            loc_16404:
00017070 0828 0003 0022             		btst	#3,$22(a0)
00017076 6700                       		beq.s	loc_16420
00017078 43F8 D000                  		lea	($FFFFD000).w,a1
0001707C 08A9 0003 0022             		bclr	#3,$22(a1)
00017082 08A8 0003 0022             		bclr	#3,$22(a0)
00017088 4228 0025                  		clr.b	$25(a0)
0001708C                            
0001708C                            loc_16420:
0001708C 6000 0002                  		bra.w	*+4
00017090                            
00017090                            loc_16424:
00017090 3028 0008                  		move.w	8(a0),d0
00017094 B068 0034                  		cmp.w	$34(a0),d0
00017098 6600                       		bne.s	loc_16484
0001709A 3028 000C                  		move.w	$C(a0),d0
0001709E B068 0036                  		cmp.w	$36(a0),d0
000170A2 6600                       		bne.s	loc_16484
000170A4 7200                       		moveq	#0,d1
000170A6 1228 0038                  		move.b	$38(a0),d1
000170AA D228 003A                  		add.b	$3A(a0),d1
000170AE B228 0039                  		cmp.b	$39(a0),d1
000170B2 6500                       		bcs.s	loc_16456
000170B4 1001                       		move.b	d1,d0
000170B6 7200                       		moveq	#0,d1
000170B8 4A00                       		tst.b	d0
000170BA 6A00                       		bpl.s	loc_16456
000170BC 1228 0039                  		move.b	$39(a0),d1
000170C0 5901                       		subq.b	#4,d1
000170C2                            
000170C2                            loc_16456:
000170C2 1141 0038                  		move.b	d1,$38(a0)
000170C6 2268 003C                  		movea.l	$3C(a0),a1
000170CA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000170D0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000170D6 4A41                       		tst.w	d1
000170D8 6600                       		bne.s	loc_16474
000170DA 117C 0001 001C             		move.b	#1,$1C(a0)
000170E0                            
000170E0                            loc_16474:
000170E0 0C41 0008                  		cmpi.w	#8,d1
000170E4 6600                       		bne.s	loc_16480
000170E6 117C 0000 001C             		move.b	#0,$1C(a0)
000170EC                            
000170EC                            loc_16480:
000170EC 6100 BDDA                  		bsr.w	Obj63_ChangeDir
000170F0                            
000170F0                            loc_16484:
000170F0 4EF9 0000 DD28             		jmp	SpeedToPos
000170F6                            ; ===========================================================================
000170F6                            Ani_obj6F:
000170F6                            	include "_anim\obj6F.asm"
000170F6                            ; ---------------------------------------------------------------------------
000170F6                            ; Animation script - platform on conveyor belt (SBZ)
000170F6                            ; ---------------------------------------------------------------------------
000170F6 0000                       		dc.w byte_1648E-Ani_obj6F
000170F8 0000                       		dc.w byte_164A2-Ani_obj6F
000170FA 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017107 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001710E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017112 00                         		even
00017112 00                         		even
00017112                            
00017112 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017118 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001711E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017132 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017146 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001715A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001716E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017182 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017196                            ; ===========================================================================
00017196                            ; ---------------------------------------------------------------------------
00017196                            ; Object 70 - large girder block (SBZ)
00017196                            ; ---------------------------------------------------------------------------
00017196                            
00017196                            Obj70:					; XREF: Obj_Index
00017196 7000                       		moveq	#0,d0
00017198 1028 0024                  		move.b	$24(a0),d0
0001719C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000171A0 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000171A4                            ; ===========================================================================
000171A4 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000171A6 0000                       		dc.w Obj70_Action-Obj70_Index
000171A8                            ; ===========================================================================
000171A8                            
000171A8                            Obj70_Main:				; XREF: Obj70_Index
000171A8 5428 0024                  		addq.b	#2,$24(a0)
000171AC 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000171B4 317C 42F0 0002             		move.w	#$42F0,2(a0)
000171BA 0028 0004 0001             		ori.b	#4,1(a0)
000171C0 117C 0004 0018             		move.b	#4,$18(a0)
000171C6 117C 0060 0019             		move.b	#$60,$19(a0)
000171CC 117C 0018 0016             		move.b	#$18,$16(a0)
000171D2 3168 0008 0032             		move.w	8(a0),$32(a0)
000171D8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000171DE 6100 0000                  		bsr.w	Obj70_Move2
000171E2                            
000171E2                            Obj70_Action:				; XREF: Obj70_Index
000171E2 3F28 0008                  		move.w	8(a0),-(sp)
000171E6 4A68 003A                  		tst.w	$3A(a0)
000171EA 6700                       		beq.s	Obj70_Move
000171EC 5368 003A                  		subq.w	#1,$3A(a0)
000171F0 6600                       		bne.s	Obj70_Solid
000171F2                            
000171F2                            Obj70_Move:
000171F2 4EB9 0000 DD28             		jsr	SpeedToPos
000171F8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000171FC 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000171FE 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017202                            
00017202                            Obj70_Solid:
00017202 381F                       		move.w	(sp)+,d4
00017204 4A28 0001                  		tst.b	1(a0)
00017208 6A00                       		bpl.s	Obj70_ChkDel
0001720A 7200                       		moveq	#0,d1
0001720C 1228 0019                  		move.b	$19(a0),d1
00017210 0641 000B                  		addi.w	#$B,d1
00017214 7400                       		moveq	#0,d2
00017216 1428 0016                  		move.b	$16(a0),d2
0001721A 3602                       		move.w	d2,d3
0001721C 5243                       		addq.w	#1,d3
0001721E 6100 90DA                  		bsr.w	SolidObject
00017222                            
00017222                            Obj70_ChkDel:
00017222 3028 0032                  		move.w	$32(a0),d0
00017226 0240 FF80                  		andi.w	#$FF80,d0
0001722A 3238 F700                  		move.w	($FFFFF700).w,d1
0001722E 0441 0080                  		subi.w	#$80,d1
00017232 0241 FF80                  		andi.w	#$FF80,d1
00017236 9041                       		sub.w	d1,d0
00017238 0C40 0280                  		cmpi.w	#$280,d0
0001723C 6200                       		bhi.s	Obj70_Delete
0001723E 4EF9 0000 DD42             		jmp	DisplaySprite
00017244                            ; ===========================================================================
00017244                            
00017244                            Obj70_Delete:
00017244 4EF9 0000 DD7E             		jmp	DeleteObject
0001724A                            ; ===========================================================================
0001724A                            
0001724A                            Obj70_Move2:				; XREF: Obj70_Main
0001724A 1028 0038                  		move.b	$38(a0),d0
0001724E 0240 0018                  		andi.w	#$18,d0
00017252 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017258 43F1 0000                  		lea	(a1,d0.w),a1
0001725C 3159 0010                  		move.w	(a1)+,$10(a0)
00017260 3159 0012                  		move.w	(a1)+,$12(a0)
00017264 3159 0034                  		move.w	(a1)+,$34(a0)
00017268 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001726C 317C 0007 003A             		move.w	#7,$3A(a0)
00017272 4E75                       		rts	
00017274                            ; ===========================================================================
00017274 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001727C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017284 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001728C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017294                            ; ---------------------------------------------------------------------------
00017294                            ; Sprite mappings - large girder block (SBZ)
00017294                            ; ---------------------------------------------------------------------------
00017294                            Map_obj70:
00017294                            	include "_maps\obj70.asm"
00017294                            ; ---------------------------------------------------------------------------
00017294                            ; Sprite mappings - large girder block (SBZ)
00017294                            ; ---------------------------------------------------------------------------
00017294 0000                       		dc.w byte_1662A-Map_obj70
00017296 0C                         byte_1662A:	dc.b $C
00017297 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001729C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000172A1 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000172A6 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000172AB E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000172B0 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000172B5 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000172BA 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000172BF E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000172C4 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000172C9 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000172CE 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000172D4 00                         		even
000172D4 00                         		even
000172D4                            
000172D4                            ; ===========================================================================
000172D4                            ; ---------------------------------------------------------------------------
000172D4                            ; Object 72 - teleporter (SBZ)
000172D4                            ; ---------------------------------------------------------------------------
000172D4                            
000172D4                            Obj72:					; XREF: Obj_Index
000172D4 7000                       		moveq	#0,d0
000172D6 1028 0024                  		move.b	$24(a0),d0
000172DA 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000172DE 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000172E2 3028 0008                  		move.w	8(a0),d0
000172E6 0240 FF80                  		andi.w	#$FF80,d0
000172EA 3238 F700                  		move.w	($FFFFF700).w,d1
000172EE 0441 0080                  		subi.w	#$80,d1
000172F2 0241 FF80                  		andi.w	#$FF80,d1
000172F6 9041                       		sub.w	d1,d0
000172F8 0C40 0280                  		cmpi.w	#$280,d0
000172FC 6200                       		bhi.s	Obj72_Delete
000172FE 4E75                       		rts	
00017300                            ; ===========================================================================
00017300                            
00017300                            Obj72_Delete:
00017300 4EF9 0000 DD7E             		jmp	DeleteObject
00017306                            ; ===========================================================================
00017306 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017308 0000                       		dc.w loc_166C8-Obj72_Index
0001730A 0000                       		dc.w loc_1675E-Obj72_Index
0001730C 0000                       		dc.w loc_16798-Obj72_Index
0001730E                            ; ===========================================================================
0001730E                            
0001730E                            Obj72_Main:				; XREF: Obj72_Index
0001730E 5428 0024                  		addq.b	#2,$24(a0)
00017312 1028 0028                  		move.b	$28(a0),d0
00017316 D040                       		add.w	d0,d0
00017318 0240 001E                  		andi.w	#$1E,d0
0001731C 45FA 0000                  		lea	Obj72_Data(pc),a2
00017320 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017324 315A 003A                  		move.w	(a2)+,$3A(a0)
00017328 214A 003C                  		move.l	a2,$3C(a0)
0001732C 315A 0036                  		move.w	(a2)+,$36(a0)
00017330 315A 0038                  		move.w	(a2)+,$38(a0)
00017334                            
00017334                            loc_166C8:				; XREF: Obj72_Index
00017334 43F8 D000                  		lea	($FFFFD000).w,a1
00017338 3029 0008                  		move.w	8(a1),d0
0001733C 9068 0008                  		sub.w	8(a0),d0
00017340 0828 0000 0022             		btst	#0,$22(a0)
00017346 6700                       		beq.s	loc_166E0
00017348 0640 000F                  		addi.w	#$F,d0
0001734C                            
0001734C                            loc_166E0:
0001734C 0C40 0010                  		cmpi.w	#$10,d0
00017350 6400                       		bcc.s	locret_1675C
00017352 3229 000C                  		move.w	$C(a1),d1
00017356 9268 000C                  		sub.w	$C(a0),d1
0001735A 0641 0020                  		addi.w	#$20,d1
0001735E 0C41 0040                  		cmpi.w	#$40,d1
00017362 6400                       		bcc.s	locret_1675C
00017364 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017368 6600                       		bne.s	locret_1675C
0001736A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017370 6600                       		bne.s	loc_1670E
00017372 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017378 6500                       		bcs.s	locret_1675C
0001737A                            
0001737A                            loc_1670E:
0001737A 5428 0024                  		addq.b	#2,$24(a0)
0001737E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017384 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001738A 337C 0800 0014             		move.w	#$800,$14(a1)
00017390 337C 0000 0010             		move.w	#0,$10(a1)
00017396 337C 0000 0012             		move.w	#0,$12(a1)
0001739C 08A8 0005 0022             		bclr	#5,$22(a0)
000173A2 08A9 0005 0022             		bclr	#5,$22(a1)
000173A8 08E9 0001 0022             		bset	#1,$22(a1)
000173AE 3368 0008 0008             		move.w	8(a0),8(a1)
000173B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000173BA 4228 0032                  		clr.b	$32(a0)
000173BE 303C 00BE                  		move.w	#$BE,d0
000173C2 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000173C8                            
000173C8                            locret_1675C:
000173C8 4E75                       		rts	
000173CA                            ; ===========================================================================
000173CA                            
000173CA                            loc_1675E:				; XREF: Obj72_Index
000173CA 43F8 D000                  		lea	($FFFFD000).w,a1
000173CE 1028 0032                  		move.b	$32(a0),d0
000173D2 5428 0032                  		addq.b	#2,$32(a0)
000173D6 4EB9 0000 2D64             		jsr	(CalcSine).l
000173DC EA40                       		asr.w	#5,d0
000173DE 3428 000C                  		move.w	$C(a0),d2
000173E2 9440                       		sub.w	d0,d2
000173E4 3342 000C                  		move.w	d2,$C(a1)
000173E8 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000173EE 6600                       		bne.s	locret_16796
000173F0 6100 0000                  		bsr.w	sub_1681C
000173F4 5428 0024                  		addq.b	#2,$24(a0)
000173F8 303C 00BC                  		move.w	#$BC,d0
000173FC 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play teleport sound
00017402                            
00017402                            locret_16796:
00017402 4E75                       		rts	
00017404                            ; ===========================================================================
00017404                            
00017404                            loc_16798:				; XREF: Obj72_Index
00017404 588F                       		addq.l	#4,sp
00017406 43F8 D000                  		lea	($FFFFD000).w,a1
0001740A 5328 002E                  		subq.b	#1,$2E(a0)
0001740E 6A00                       		bpl.s	loc_167DA
00017410 3368 0036 0008             		move.w	$36(a0),8(a1)
00017416 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001741C 7200                       		moveq	#0,d1
0001741E 1228 003A                  		move.b	$3A(a0),d1
00017422 5801                       		addq.b	#4,d1
00017424 B228 003B                  		cmp.b	$3B(a0),d1
00017428 6500                       		bcs.s	loc_167C2
0001742A 7200                       		moveq	#0,d1
0001742C 6000                       		bra.s	loc_16800
0001742E                            ; ===========================================================================
0001742E                            
0001742E                            loc_167C2:
0001742E 1141 003A                  		move.b	d1,$3A(a0)
00017432 2468 003C                  		movea.l	$3C(a0),a2
00017436 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001743C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017442 6000 0000                  		bra.w	sub_1681C
00017446                            ; ===========================================================================
00017446                            
00017446                            loc_167DA:
00017446 2429 0008                  		move.l	8(a1),d2
0001744A 2629 000C                  		move.l	$C(a1),d3
0001744E 3029 0010                  		move.w	$10(a1),d0
00017452 48C0                       		ext.l	d0
00017454 E180                       		asl.l	#8,d0
00017456 D480                       		add.l	d0,d2
00017458 3029 0012                  		move.w	$12(a1),d0
0001745C 48C0                       		ext.l	d0
0001745E E180                       		asl.l	#8,d0
00017460 D680                       		add.l	d0,d3
00017462 2342 0008                  		move.l	d2,8(a1)
00017466 2343 000C                  		move.l	d3,$C(a1)
0001746A 4E75                       		rts	
0001746C                            ; ===========================================================================
0001746C                            
0001746C                            loc_16800:
0001746C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017472 4228 0024                  		clr.b	$24(a0)
00017476 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001747A 337C 0000 0010             		move.w	#0,$10(a1)
00017480 337C 0200 0012             		move.w	#$200,$12(a1)
00017486 4E75                       		rts	
00017488                            
00017488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017488                            
00017488                            
00017488                            sub_1681C:
00017488 7000                       		moveq	#0,d0
0001748A 343C 1000                  		move.w	#$1000,d2
0001748E 3028 0036                  		move.w	$36(a0),d0
00017492 9069 0008                  		sub.w	8(a1),d0
00017496 6C00                       		bge.s	loc_16830
00017498 4440                       		neg.w	d0
0001749A 4442                       		neg.w	d2
0001749C                            
0001749C                            loc_16830:
0001749C 7200                       		moveq	#0,d1
0001749E 363C 1000                  		move.w	#$1000,d3
000174A2 3228 0038                  		move.w	$38(a0),d1
000174A6 9269 000C                  		sub.w	$C(a1),d1
000174AA 6C00                       		bge.s	loc_16844
000174AC 4441                       		neg.w	d1
000174AE 4443                       		neg.w	d3
000174B0                            
000174B0                            loc_16844:
000174B0 B240                       		cmp.w	d0,d1
000174B2 6500                       		bcs.s	loc_1687A
000174B4 7200                       		moveq	#0,d1
000174B6 3228 0038                  		move.w	$38(a0),d1
000174BA 9269 000C                  		sub.w	$C(a1),d1
000174BE 4841                       		swap	d1
000174C0 83C3                       		divs.w	d3,d1
000174C2 7000                       		moveq	#0,d0
000174C4 3028 0036                  		move.w	$36(a0),d0
000174C8 9069 0008                  		sub.w	8(a1),d0
000174CC 6700                       		beq.s	loc_16866
000174CE 4840                       		swap	d0
000174D0 81C1                       		divs.w	d1,d0
000174D2                            
000174D2                            loc_16866:
000174D2 3340 0010                  		move.w	d0,$10(a1)
000174D6 3343 0012                  		move.w	d3,$12(a1)
000174DA 4A41                       		tst.w	d1
000174DC 6A00                       		bpl.s	loc_16874
000174DE 4441                       		neg.w	d1
000174E0                            
000174E0                            loc_16874:
000174E0 3141 002E                  		move.w	d1,$2E(a0)
000174E4 4E75                       		rts	
000174E6                            ; ===========================================================================
000174E6                            
000174E6                            loc_1687A:
000174E6 7000                       		moveq	#0,d0
000174E8 3028 0036                  		move.w	$36(a0),d0
000174EC 9069 0008                  		sub.w	8(a1),d0
000174F0 4840                       		swap	d0
000174F2 81C2                       		divs.w	d2,d0
000174F4 7200                       		moveq	#0,d1
000174F6 3228 0038                  		move.w	$38(a0),d1
000174FA 9269 000C                  		sub.w	$C(a1),d1
000174FE 6700                       		beq.s	loc_16898
00017500 4841                       		swap	d1
00017502 83C0                       		divs.w	d0,d1
00017504                            
00017504                            loc_16898:
00017504 3341 0012                  		move.w	d1,$12(a1)
00017508 3342 0010                  		move.w	d2,$10(a1)
0001750C 4A40                       		tst.w	d0
0001750E 6A00                       		bpl.s	loc_168A6
00017510 4440                       		neg.w	d0
00017512                            
00017512                            loc_168A6:
00017512 3140 002E                  		move.w	d0,$2E(a0)
00017516 4E75                       		rts	
00017518                            ; End of function sub_1681C
00017518                            
00017518                            ; ===========================================================================
00017518 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001751E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017524 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017528 0004 1A40 0750             word_168BC:	dc.w 4, $1A40, $0750
0001752E 0004 1EC0 0770             word_168C2:	dc.w 4, $1EC0, $0770
00017534 0004 1FC0 0770             word_168C8:	dc.w 4, $1FC0, $0770
0001753A 0004 2640 05F0             word_168E6:	dc.w 4, $2640, $05F0
00017540 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017546 1184 0498 1158             		dc.w $1184, $498, $1158
0001754C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017552 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017558 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001755E 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017564 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001756A 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017570 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017576 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001757C FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017582 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017588                            ; ===========================================================================
00017588                            ; ---------------------------------------------------------------------------
00017588                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017588                            ; ---------------------------------------------------------------------------
00017588                            
00017588                            Obj78:					; XREF: Obj_Index
00017588 7000                       		moveq	#0,d0
0001758A 1028 0024                  		move.b	$24(a0),d0
0001758E 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017592 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017596                            ; ===========================================================================
00017596 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017598 0000                       		dc.w Obj78_Action-Obj78_Index
0001759A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001759C 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001759E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000175A0 0000                       		dc.w Obj78_Delete-Obj78_Index
000175A2 0000                       		dc.w loc_16CC0-Obj78_Index
000175A4                            ; ===========================================================================
000175A4                            
000175A4                            locret_16950:
000175A4 4E75                       		rts	
000175A6                            ; ===========================================================================
000175A6                            
000175A6                            Obj78_Main:				; XREF: Obj78_Index
000175A6 117C 0007 0016             		move.b	#7,$16(a0)
000175AC 117C 0008 0017             		move.b	#8,$17(a0)
000175B2 4EB9 0000 DD08             		jsr	ObjectFall
000175B8 4EBA E4DC                  		jsr	ObjHitFloor
000175BC 4A41                       		tst.w	d1
000175BE 6AE4                       		bpl.s	locret_16950
000175C0 D368 000C                  		add.w	d1,$C(a0)
000175C4 4268 0012                  		clr.w	$12(a0)
000175C8 5428 0024                  		addq.b	#2,$24(a0)
000175CC 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000175D4 317C 02B0 0002             		move.w	#$2B0,2(a0)
000175DA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000175E0 6700                       		beq.s	loc_16996
000175E2 317C 04FF 0002             		move.w	#$4FF,2(a0)	; MZ specific code
000175E8                            
000175E8                            loc_16996:
000175E8 0228 0003 0001             		andi.b	#3,1(a0)
000175EE 0028 0004 0001             		ori.b	#4,1(a0)
000175F4 1168 0001 0022             		move.b	1(a0),$22(a0)
000175FA 117C 0004 0018             		move.b	#4,$18(a0)
00017600 117C 0008 0019             		move.b	#8,$19(a0)
00017606 117C 000B 0020             		move.b	#$B,$20(a0)
0001760C 3428 0008                  		move.w	8(a0),d2
00017610 7A0C                       		moveq	#$C,d5
00017612 0828 0000 0022             		btst	#0,$22(a0)
00017618 6700                       		beq.s	loc_169CA
0001761A 4445                       		neg.w	d5
0001761C                            
0001761C                            loc_169CA:
0001761C 1C3C 0004                  		move.b	#4,d6
00017620 7600                       		moveq	#0,d3
00017622 7804                       		moveq	#4,d4
00017624 2448                       		movea.l	a0,a2
00017626 7202                       		moveq	#2,d1
00017628                            
00017628                            Obj78_LoadBody:
00017628 4EB9 0000 E204             		jsr	SingleObjLoad2
0001762E 6600                       		bne.s	Obj78_QuitLoad
00017630 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017634 1346 0024                  		move.b	d6,$24(a1)
00017638 5406                       		addq.b	#2,d6
0001763A 2368 0004 0004             		move.l	4(a0),4(a1)
00017640 3368 0002 0002             		move.w	2(a0),2(a1)
00017646 137C 0005 0018             		move.b	#5,$18(a1)
0001764C 137C 0008 0019             		move.b	#8,$19(a1)
00017652 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017658 D445                       		add.w	d5,d2
0001765A 3342 0008                  		move.w	d2,8(a1)
0001765E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017664 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001766A 1368 0022 0001             		move.b	$22(a0),1(a1)
00017670 137C 0008 001A             		move.b	#8,$1A(a1)
00017676 234A 003C                  		move.l	a2,$3C(a1)
0001767A 1344 003C                  		move.b	d4,$3C(a1)
0001767E 5804                       		addq.b	#4,d4
00017680 2449                       		movea.l	a1,a2
00017682                            
00017682                            Obj78_QuitLoad:
00017682 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017686                            
00017686 117C 0007 002A             		move.b	#7,$2A(a0)
0001768C 4228 003C                  		clr.b	$3C(a0)
00017690                            
00017690                            Obj78_Action:				; XREF: Obj78_Index
00017690 4A28 0022                  		tst.b	$22(a0)
00017694 6B00 0000                  		bmi.w	loc_16C96
00017698 7000                       		moveq	#0,d0
0001769A 1028 0025                  		move.b	$25(a0),d0
0001769E 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000176A2 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000176A6 1228 002B                  		move.b	$2B(a0),d1
000176AA 6A00                       		bpl.s	Obj78_Display
000176AC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176B2 1028 0026                  		move.b	$26(a0),d0
000176B6 0240 007F                  		andi.w	#$7F,d0
000176BA 5828 0026                  		addq.b	#4,$26(a0)
000176BE 1031 0000                  		move.b	(a1,d0.w),d0
000176C2 6A00                       		bpl.s	Obj78_AniHead
000176C4 08A8 0007 002B             		bclr	#7,$2B(a0)
000176CA 6000                       		bra.s	Obj78_Display
000176CC                            ; ===========================================================================
000176CC                            
000176CC                            Obj78_AniHead:
000176CC 0201 0010                  		andi.b	#$10,d1
000176D0 D001                       		add.b	d1,d0
000176D2 1140 001A                  		move.b	d0,$1A(a0)
000176D6                            
000176D6                            Obj78_Display:
000176D6 3028 0008                  		move.w	8(a0),d0
000176DA 0240 FF80                  		andi.w	#$FF80,d0
000176DE 3238 F700                  		move.w	($FFFFF700).w,d1
000176E2 0441 0080                  		subi.w	#$80,d1
000176E6 0241 FF80                  		andi.w	#$FF80,d1
000176EA 9041                       		sub.w	d1,d0
000176EC 0C40 0280                  		cmpi.w	#$280,d0
000176F0 6200 0000                  		bhi.w	Obj78_ChkGone
000176F4 4EF9 0000 DD42             		jmp	DisplaySprite
000176FA                            ; ===========================================================================
000176FA                            
000176FA                            Obj78_ChkGone:
000176FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176FE 7000                       		moveq	#0,d0
00017700 1028 0023                  		move.b	$23(a0),d0
00017704 6700                       		beq.s	loc_16ABC
00017706 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001770C                            
0001770C                            loc_16ABC:
0001770C 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017712 4E75                       		rts	
00017714                            ; ===========================================================================
00017714                            
00017714                            Obj78_Delete:				; XREF: Obj78_Index
00017714 4EF9 0000 DD7E             		jmp	DeleteObject
0001771A                            ; ===========================================================================
0001771A 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001771C 0000                       		dc.w loc_16B02-Obj78_Index2
0001771E                            ; ===========================================================================
0001771E                            
0001771E                            Obj78_Move:				; XREF: Obj78_Index2
0001771E 5328 002A                  		subq.b	#1,$2A(a0)
00017722 6B00                       		bmi.s	Obj78_Move2
00017724 4E75                       		rts	
00017726                            ; ===========================================================================
00017726                            
00017726                            Obj78_Move2:
00017726 5428 0025                  		addq.b	#2,$25(a0)
0001772A 117C 0010 002A             		move.b	#$10,$2A(a0)
00017730 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017736 317C 0040 0014             		move.w	#$40,$14(a0)
0001773C 0868 0004 002B             		bchg	#4,$2B(a0)
00017742 6600                       		bne.s	loc_16AFC
00017744 4268 0010                  		clr.w	$10(a0)
00017748 4468 0014                  		neg.w	$14(a0)
0001774C                            
0001774C                            loc_16AFC:
0001774C 08E8 0007 002B             		bset	#7,$2B(a0)
00017752                            
00017752                            loc_16B02:				; XREF: Obj78_Index2
00017752 5328 002A                  		subq.b	#1,$2A(a0)
00017756 6B00                       		bmi.s	loc_16B5E
00017758 2F28 0008                  		move.l	8(a0),-(sp)
0001775C 2428 0008                  		move.l	8(a0),d2
00017760 3028 0010                  		move.w	$10(a0),d0
00017764 0828 0000 0022             		btst	#0,$22(a0)
0001776A 6700                       		beq.s	loc_16B1E
0001776C 4440                       		neg.w	d0
0001776E                            
0001776E                            loc_16B1E:
0001776E 48C0                       		ext.l	d0
00017770 E180                       		asl.l	#8,d0
00017772 D480                       		add.l	d0,d2
00017774 2142 0008                  		move.l	d2,8(a0)
00017778 4EBA E31C                  		jsr	ObjHitFloor
0001777C 241F                       		move.l	(sp)+,d2
0001777E 0C41 FFF8                  		cmpi.w	#-8,d1
00017782 6D00                       		blt.s	loc_16B70
00017784 0C41 000C                  		cmpi.w	#$C,d1
00017788 6C00                       		bge.s	loc_16B70
0001778A D368 000C                  		add.w	d1,$C(a0)
0001778E 4842                       		swap	d2
00017790 B468 0008                  		cmp.w	8(a0),d2
00017794 6700                       		beq.s	locret_16B5C
00017796 7000                       		moveq	#0,d0
00017798 1028 003C                  		move.b	$3C(a0),d0
0001779C 5228 003C                  		addq.b	#1,$3C(a0)
000177A0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000177A6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000177AA                            
000177AA                            locret_16B5C:
000177AA 4E75                       		rts	
000177AC                            ; ===========================================================================
000177AC                            
000177AC                            loc_16B5E:
000177AC 5528 0025                  		subq.b	#2,$25(a0)
000177B0 117C 0007 002A             		move.b	#7,$2A(a0)
000177B6 317C 0000 0010             		move.w	#0,$10(a0)
000177BC 4E75                       		rts	
000177BE                            ; ===========================================================================
000177BE                            
000177BE                            loc_16B70:
000177BE 2142 0008                  		move.l	d2,8(a0)
000177C2 0868 0000 0022             		bchg	#0,$22(a0)
000177C8 1168 0022 0001             		move.b	$22(a0),1(a0)
000177CE 7000                       		moveq	#0,d0
000177D0 1028 003C                  		move.b	$3C(a0),d0
000177D4 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000177DA 5228 003C                  		addq.b	#1,$3C(a0)
000177DE 0228 000F 003C             		andi.b	#$F,$3C(a0)
000177E4 4E75                       		rts	
000177E6                            ; ===========================================================================
000177E6                            
000177E6                            Obj78_BodySeg2:				; XREF: Obj78_Index
000177E6 2268 003C                  		movea.l	$3C(a0),a1
000177EA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000177F0 6A00                       		bpl.s	Obj78_BodySeg1
000177F2 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000177F8 1028 0026                  		move.b	$26(a0),d0
000177FC 0240 007F                  		andi.w	#$7F,d0
00017800 5828 0026                  		addq.b	#4,$26(a0)
00017804 4A31 0004                  		tst.b	4(a1,d0.w)
00017808 6A00                       		bpl.s	Obj78_AniBody
0001780A 5828 0026                  		addq.b	#4,$26(a0)
0001780E                            
0001780E                            Obj78_AniBody:
0001780E 1031 0000                  		move.b	(a1,d0.w),d0
00017812 5000                       		addq.b	#8,d0
00017814 1140 001A                  		move.b	d0,$1A(a0)
00017818                            
00017818                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017818 2268 003C                  		movea.l	$3C(a0),a1
0001781C 4A28 0022                  		tst.b	$22(a0)
00017820 6B00 0000                  		bmi.w	loc_16C90
00017824 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001782A 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017830 6700 0000                  		beq.w	loc_16C64
00017834 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001783A 3029 0010                  		move.w	$10(a1),d0
0001783E D069 0014                  		add.w	$14(a1),d0
00017842 3140 0010                  		move.w	d0,$10(a0)
00017846 2428 0008                  		move.l	8(a0),d2
0001784A 2602                       		move.l	d2,d3
0001784C 3028 0010                  		move.w	$10(a0),d0
00017850 0828 0000 0022             		btst	#0,$22(a0)
00017856 6700                       		beq.s	loc_16C0C
00017858 4440                       		neg.w	d0
0001785A                            
0001785A                            loc_16C0C:
0001785A 48C0                       		ext.l	d0
0001785C E180                       		asl.l	#8,d0
0001785E D480                       		add.l	d0,d2
00017860 2142 0008                  		move.l	d2,8(a0)
00017864 4843                       		swap	d3
00017866 B668 0008                  		cmp.w	8(a0),d3
0001786A 6700                       		beq.s	loc_16C64
0001786C 7000                       		moveq	#0,d0
0001786E 1028 003C                  		move.b	$3C(a0),d0
00017872 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017876 0C01 0080                  		cmpi.b	#-$80,d1
0001787A 6600                       		bne.s	loc_16C50
0001787C 4843                       		swap	d3
0001787E 2143 0008                  		move.l	d3,8(a0)
00017882 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017886 0868 0000 0022             		bchg	#0,$22(a0)
0001788C 1168 0022 0001             		move.b	$22(a0),1(a0)
00017892 5228 003C                  		addq.b	#1,$3C(a0)
00017896 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001789C 6000                       		bra.s	loc_16C64
0001789E                            ; ===========================================================================
0001789E                            
0001789E                            loc_16C50:
0001789E 4881                       		ext.w	d1
000178A0 D368 000C                  		add.w	d1,$C(a0)
000178A4 5228 003C                  		addq.b	#1,$3C(a0)
000178A8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000178AE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000178B2                            
000178B2                            loc_16C64:
000178B2 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000178B8 6700                       		beq.s	loc_16C90
000178BA 0C11 0027                  		cmpi.b	#$27,0(a1)
000178BE 6700                       		beq.s	loc_16C7C
000178C0 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000178C6 6600                       		bne.s	loc_16C82
000178C8                            
000178C8                            loc_16C7C:
000178C8 4229 0020                  		clr.b	$20(a1)
000178CC 117C 000A 0024             		move.b	#$A,$24(a0)
000178D2                            
000178D2                            loc_16C82:
000178D2 4EF9 0000 DD42             		jmp	DisplaySprite
000178D8                            
000178D8                            ; ===========================================================================
000178D8 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000178E0                            ; ===========================================================================
000178E0                            
000178E0                            loc_16C90:
000178E0 08E9 0007 0022             		bset	#7,$22(a1)
000178E6                            
000178E6                            loc_16C96:
000178E6 7000                       		moveq	#0,d0
000178E8 1028 0024                  		move.b	$24(a0),d0
000178EC 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000178F0 0828 0000 0022             		btst	#0,$22(a0)
000178F6 6700                       		beq.s	loc_16CAA
000178F8 4440                       		neg.w	d0
000178FA                            
000178FA                            loc_16CAA:
000178FA 3140 0010                  		move.w	d0,$10(a0)
000178FE 317C FC00 0012             		move.w	#-$400,$12(a0)
00017904 117C 000C 0024             		move.b	#$C,$24(a0)
0001790A 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017910                            
00017910                            loc_16CC0:				; XREF: Obj78_Index
00017910 4EB9 0000 DD08             		jsr	ObjectFall
00017916 4A68 0012                  		tst.w	$12(a0)
0001791A 6B00                       		bmi.s	loc_16CE0
0001791C 4EBA E178                  		jsr	ObjHitFloor
00017920 4A41                       		tst.w	d1
00017922 6A00                       		bpl.s	loc_16CE0
00017924 D368 000C                  		add.w	d1,$C(a0)
00017928 317C FC00 0012             		move.w	#-$400,$12(a0)
0001792E                            
0001792E                            loc_16CE0:
0001792E 4A28 0001                  		tst.b	1(a0)
00017932 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00017936 4EF9 0000 DD42             		jmp	DisplaySprite
0001793C                            ; ===========================================================================
0001793C                            Ani_obj78:
0001793C                            	include "_anim\obj78.asm"
0001793C                            ; ---------------------------------------------------------------------------
0001793C                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001793C                            ; ---------------------------------------------------------------------------
0001793C 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001794C 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001795C 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001796C 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001797C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001798C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001799C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000179AC 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000179BC                            	even
000179BC                            	even
000179BC                            
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            Map_obj78:
000179BC                            	include "_maps\obj78.asm"
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000179BC                            ; ---------------------------------------------------------------------------
000179BC 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000179C0 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000179C4 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000179C8 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000179CC 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000179D0 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000179D4 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000179D8 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000179DC 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000179E0 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000179E4 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000179E8 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000179EC 01                         byte_16D9E:	dc.b 1
000179ED F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000179F2 01                         byte_16DA4:	dc.b 1
000179F3 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000179F8 01                         byte_16DAA:	dc.b 1
000179F9 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000179FE 01                         byte_16DB0:	dc.b 1
000179FF EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017A04 01                         byte_16DB6:	dc.b 1
00017A05 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017A0A 01                         byte_16DBC:	dc.b 1
00017A0B ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017A10 01                         byte_16DC2:	dc.b 1
00017A11 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017A16 01                         byte_16DC8:	dc.b 1
00017A17 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017A1C 01                         byte_16DCE:	dc.b 1
00017A1D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017A22 01                         byte_16DD4:	dc.b 1
00017A23 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017A28 01                         byte_16DDA:	dc.b 1
00017A29 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017A2E 01                         byte_16DE0:	dc.b 1
00017A2F F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017A34 01                         byte_16DE6:	dc.b 1
00017A35 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017A3A 01                         byte_16DEC:	dc.b 1
00017A3B F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017A40 01                         byte_16DF2:	dc.b 1
00017A41 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017A46 01                         byte_16DF8:	dc.b 1
00017A47 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017A4C 01                         byte_16DFE:	dc.b 1
00017A4D F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017A52 01                         byte_16E04:	dc.b 1
00017A53 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017A58 01                         byte_16E0A:	dc.b 1
00017A59 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017A5E 01                         byte_16E10:	dc.b 1
00017A5F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017A64 01                         byte_16E16:	dc.b 1
00017A65 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017A6A 01                         byte_16E1C:	dc.b 1
00017A6B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017A70 01                         byte_16E22:	dc.b 1
00017A71 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017A76 01                         byte_16E28:	dc.b 1
00017A77 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017A7C                            		even
00017A7C                            		even
00017A7C                            
00017A7C                            ; ===========================================================================
00017A7C                            ; ---------------------------------------------------------------------------
00017A7C                            ; Object 79 - lamppost
00017A7C                            ; ---------------------------------------------------------------------------
00017A7C                            
00017A7C                            Obj79:					; XREF: Obj_Index
00017A7C 7000                       		moveq	#0,d0
00017A7E 1028 0024                  		move.b	$24(a0),d0
00017A82 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017A86 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017A8A 4EFA 838A                  		jmp	MarkObjGone
00017A8E                            ; ===========================================================================
00017A8E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017A90 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017A92 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017A94 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017A96                            ; ===========================================================================
00017A96                            
00017A96                            Obj79_Main:				; XREF: Obj79_Index
00017A96 5428 0024                  		addq.b	#2,$24(a0)
00017A9A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017AA2 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017AA8 117C 0004 0001             		move.b	#4,1(a0)
00017AAE 117C 0008 0019             		move.b	#8,$19(a0)
00017AB4 117C 0005 0018             		move.b	#5,$18(a0)
00017ABA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017ABE 7000                       		moveq	#0,d0
00017AC0 1028 0023                  		move.b	$23(a0),d0
00017AC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017ACA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017AD0 6600                       		bne.s	Obj79_RedLamp
00017AD2 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017AD6 0201 007F                  		andi.b	#$7F,d1
00017ADA 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017ADE 0202 007F                  		andi.b	#$7F,d2
00017AE2 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017AE4 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017AE6                            
00017AE6                            Obj79_RedLamp:
00017AE6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017AEC 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017AF2 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017AF8 4E75                       		rts	
00017AFA                            ; ===========================================================================
00017AFA                            
00017AFA                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017AFA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017AFE 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017B02 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017B06 6B00 0000                  		bmi.w	locret_16F90
00017B0A 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017B0E 0201 007F                  		andi.b	#$7F,d1
00017B12 1428 0028                  		move.b	$28(a0),d2
00017B16 0202 007F                  		andi.b	#$7F,d2
00017B1A B202                       		cmp.b	d2,d1
00017B1C 6500                       		bcs.s	Obj79_HitLamp
00017B1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017B22 7000                       		moveq	#0,d0
00017B24 1028 0023                  		move.b	$23(a0),d0
00017B28 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017B2E 117C 0004 0024             		move.b	#4,$24(a0)
00017B34 117C 0003 001A             		move.b	#3,$1A(a0)
00017B3A 6000 0000                  		bra.w	locret_16F90
00017B3E                            ; ===========================================================================
00017B3E                            
00017B3E                            Obj79_HitLamp:
00017B3E 3038 D008                  		move.w	($FFFFD008).w,d0
00017B42 9068 0008                  		sub.w	8(a0),d0
00017B46 5040                       		addq.w	#8,d0
00017B48 0C40 0010                  		cmpi.w	#$10,d0
00017B4C 6400 0000                  		bcc.w	locret_16F90
00017B50 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B54 9068 000C                  		sub.w	$C(a0),d0
00017B58 0640 0040                  		addi.w	#$40,d0
00017B5C 0C40 0068                  		cmpi.w	#$68,d0
00017B60 6400                       		bcc.s	locret_16F90
00017B62 303C 00A1                  		move.w	#$A1,d0
00017B66 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017B6C 5428 0024                  		addq.b	#2,$24(a0)
00017B70 4EB9 0000 E1EE             		jsr	SingleObjLoad
00017B76 6600                       		bne.s	loc_16F76
00017B78 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017B7C 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017B82 3368 0008 0030             		move.w	8(a0),$30(a1)
00017B88 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017B8E 0469 0018 0032             		subi.w	#$18,$32(a1)
00017B94 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017B9C 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017BA2 137C 0004 0001             		move.b	#4,1(a1)
00017BA8 137C 0008 0019             		move.b	#8,$19(a1)
00017BAE 137C 0004 0018             		move.b	#4,$18(a1)
00017BB4 137C 0002 001A             		move.b	#2,$1A(a1)
00017BBA 337C 0020 0036             		move.w	#$20,$36(a1)
00017BC0                            
00017BC0                            loc_16F76:
00017BC0 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017BC6 6100 0000                  		bsr.w	Obj79_StoreInfo
00017BCA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017BCE 7000                       		moveq	#0,d0
00017BD0 1028 0023                  		move.b	$23(a0),d0
00017BD4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017BDA                            
00017BDA                            locret_16F90:
00017BDA 4E75                       		rts	
00017BDC                            ; ===========================================================================
00017BDC                            
00017BDC                            Obj79_AfterHit:				; XREF: Obj79_Index
00017BDC 4E75                       		rts	
00017BDE                            ; ===========================================================================
00017BDE                            
00017BDE                            Obj79_Twirl:				; XREF: Obj79_Index
00017BDE 5368 0036                  		subq.w	#1,$36(a0)
00017BE2 6A00                       		bpl.s	loc_16FA0
00017BE4 117C 0004 0024             		move.b	#4,$24(a0)
00017BEA                            
00017BEA                            loc_16FA0:
00017BEA 1028 0026                  		move.b	$26(a0),d0
00017BEE 0428 0010 0026             		subi.b	#$10,$26(a0)
00017BF4 0400 0040                  		subi.b	#$40,d0
00017BF8 4EB9 0000 2D64             		jsr	(CalcSine).l
00017BFE C3FC 0C00                  		muls.w	#$C00,d1
00017C02 4841                       		swap	d1
00017C04 D268 0030                  		add.w	$30(a0),d1
00017C08 3141 0008                  		move.w	d1,8(a0)
00017C0C C1FC 0C00                  		muls.w	#$C00,d0
00017C10 4840                       		swap	d0
00017C12 D068 0032                  		add.w	$32(a0),d0
00017C16 3140 000C                  		move.w	d0,$C(a0)
00017C1A 4E75                       		rts	
00017C1C                            ; ===========================================================================
00017C1C                            ; ---------------------------------------------------------------------------
00017C1C                            ; Subroutine to	store information when you hit a lamppost
00017C1C                            ; ---------------------------------------------------------------------------
00017C1C                            
00017C1C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017C1C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017C22 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017C28 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017C2E 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017C34 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017C3A 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017C40 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017C46 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017C4C 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017C52 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017C58 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017C5E 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017C64 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017C6A 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017C70 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017C76 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017C7C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017C82 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017C88 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017C8E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017C94 4E75                       		rts	
00017C96                            
00017C96                            ; ---------------------------------------------------------------------------
00017C96                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017C96                            ; ---------------------------------------------------------------------------
00017C96                            
00017C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C96                            
00017C96                            
00017C96                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017C96 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017C9C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017CA2 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017CA8 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017CAE 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017CB4 4278 FE20                  		clr.w	($FFFFFE20).w
00017CB8 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017CBC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017CC2 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017CC8 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017CCC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017CD2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017CD8 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017CDE 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017CE4 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017CEA 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017CF0 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017CF6 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017CFC 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017D02 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017D08 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017D0E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017D14 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017D1A 6600                       		bne.s	loc_170E4
00017D1C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017D22 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017D28 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017D2E                            
00017D2E                            loc_170E4:
00017D2E 4A38 FE30                  		tst.b	($FFFFFE30).w
00017D32 6A00                       		bpl.s	locret_170F6
00017D34 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017D38 0440 00A0                  		subi.w	#$A0,d0
00017D3C 31C0 F728                  		move.w	d0,($FFFFF728).w
00017D40                            
00017D40                            locret_170F6:
00017D40 4E75                       		rts	
00017D42                            ; End of function Obj79_LoadInfo
00017D42                            
00017D42                            ; ===========================================================================
00017D42                            ; ---------------------------------------------------------------------------
00017D42                            ; Sprite mappings - lamppost
00017D42                            ; ---------------------------------------------------------------------------
00017D42                            Map_obj79:
00017D42                            	include "_maps\obj79.asm"
00017D42                            ; ================================================================================
00017D42                            ; Sprite Mappings - generated by Flex 2 Sun Oct 21 2018 09:07:25 GMT-0700 (Pacific Daylight Time)
00017D42                            ; ================================================================================
00017D42                            
00017D42                            DATAC9132VBCWZV:
00017D42 0000 0000                  	dc.w DATAC9132VBCWZV_0-DATAC9132VBCWZV, DATAC9132VBCWZV_1-DATAC9132VBCWZV
00017D46 0000 0000                  	dc.w DATAC9132VBCWZV_2-DATAC9132VBCWZV, DATAC9132VBCWZV_3-DATAC9132VBCWZV
00017D4A 06                         DATAC9132VBCWZV_0: dc.b $6
00017D4B E401 0000 F8               	dc.b $E4, $1, $0, $0, $F8
00017D50 E401 0800 00               	dc.b $E4, $1, $8, $0, $0
00017D55 F403 0002 F8               	dc.b $F4, $3, $0, $2, $F8
00017D5A F403 0802 00               	dc.b $F4, $3, $8, $2, $0
00017D5F D401 0006 F8               	dc.b $D4, $1, $0, $6, $F8
00017D64 D401 0806 00               	dc.b $D4, $1, $8, $6, $0
00017D69 04                         DATAC9132VBCWZV_1: dc.b $4
00017D6A E401 0000 F8               	dc.b $E4, $1, $0, $0, $F8
00017D6F E401 0800 00               	dc.b $E4, $1, $8, $0, $0
00017D74 F403 0002 F8               	dc.b $F4, $3, $0, $2, $F8
00017D79 F403 0802 00               	dc.b $F4, $3, $8, $2, $0
00017D7E 02                         DATAC9132VBCWZV_2: dc.b $2
00017D7F F801 0008 F8               	dc.b $F8, $1, $0, $8, $F8
00017D84 F801 0808 00               	dc.b $F8, $1, $8, $8, $0
00017D89 06                         DATAC9132VBCWZV_3: dc.b $6
00017D8A E401 0000 F8               	dc.b $E4, $1, $0, $0, $F8
00017D8F E401 0800 00               	dc.b $E4, $1, $8, $0, $0
00017D94 F403 0002 F8               	dc.b $F4, $3, $0, $2, $F8
00017D99 F403 0802 00               	dc.b $F4, $3, $8, $2, $0
00017D9E D401 0008 F8               	dc.b $D4, $1, $0, $8, $F8
00017DA3 D401 0808 00               	dc.b $D4, $1, $8, $8, $0
00017DA8                            	even
00017DA8                            	even
00017DA8                            
00017DA8                            ; ===========================================================================
00017DA8                            ; ---------------------------------------------------------------------------
00017DA8                            ; Object 7D - hidden points at the end of a level
00017DA8                            ; ---------------------------------------------------------------------------
00017DA8                            
00017DA8                            Obj7D:					; XREF: Obj_Index
00017DA8 7000                       		moveq	#0,d0
00017DAA 1028 0024                  		move.b	$24(a0),d0
00017DAE 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017DB2 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017DB6                            ; ===========================================================================
00017DB6 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017DB8 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017DBA                            ; ===========================================================================
00017DBA                            
00017DBA                            Obj7D_Main:				; XREF: Obj7D_Index
00017DBA 7410                       		moveq	#$10,d2
00017DBC 3602                       		move.w	d2,d3
00017DBE D643                       		add.w	d3,d3
00017DC0 43F8 D000                  		lea	($FFFFD000).w,a1
00017DC4 3029 0008                  		move.w	8(a1),d0
00017DC8 9068 0008                  		sub.w	8(a0),d0
00017DCC D042                       		add.w	d2,d0
00017DCE B043                       		cmp.w	d3,d0
00017DD0 6400                       		bcc.s	Obj7D_ChkDel
00017DD2 3229 000C                  		move.w	$C(a1),d1
00017DD6 9268 000C                  		sub.w	$C(a0),d1
00017DDA D242                       		add.w	d2,d1
00017DDC B243                       		cmp.w	d3,d1
00017DDE 6400                       		bcc.s	Obj7D_ChkDel
00017DE0 4A78 FE08                  		tst.w	($FFFFFE08).w
00017DE4 6600                       		bne.s	Obj7D_ChkDel
00017DE6 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017DEA 6600                       		bne.s	Obj7D_ChkDel
00017DEC 5428 0024                  		addq.b	#2,$24(a0)
00017DF0 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017DF8 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017DFE 0028 0004 0001             		ori.b	#4,1(a0)
00017E04 117C 0000 0018             		move.b	#0,$18(a0)
00017E0A 117C 0010 0019             		move.b	#$10,$19(a0)
00017E10 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017E16 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017E1C 303C 00C9                  		move.w	#$C9,d0
00017E20 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play bonus sound
00017E26 7000                       		moveq	#0,d0
00017E28 1028 0028                  		move.b	$28(a0),d0
00017E2C D040                       		add.w	d0,d0
00017E2E 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017E32 4EB9 0000 0000             		jsr	AddPoints
00017E38                            
00017E38                            Obj7D_ChkDel:
00017E38 3028 0008                  		move.w	8(a0),d0
00017E3C 0240 FF80                  		andi.w	#$FF80,d0
00017E40 3238 F700                  		move.w	($FFFFF700).w,d1
00017E44 0441 0080                  		subi.w	#$80,d1
00017E48 0241 FF80                  		andi.w	#$FF80,d1
00017E4C 9041                       		sub.w	d1,d0
00017E4E 0C40 0280                  		cmpi.w	#$280,d0
00017E52 6200                       		bhi.s	Obj7D_Delete
00017E54 4E75                       		rts	
00017E56                            ; ===========================================================================
00017E56                            
00017E56                            Obj7D_Delete:
00017E56 4EF9 0000 DD7E             		jmp	DeleteObject
00017E5C                            ; ===========================================================================
00017E5C 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017E5E 03E8                       		dc.w 1000
00017E60 0064                       		dc.w 100
00017E62 0001                       		dc.w 1
00017E64                            ; ===========================================================================
00017E64                            
00017E64                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017E64 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017E68 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017E6A 3028 0008                  		move.w	8(a0),d0
00017E6E 0240 FF80                  		andi.w	#-$80,d0
00017E72 3238 F700                  		move.w	($FFFFF700).w,d1
00017E76 0441 0080                  		subi.w	#$80,d1
00017E7A 0241 FF80                  		andi.w	#-$80,d1
00017E7E 9041                       		sub.w	d1,d0
00017E80 0C40 0280                  		cmpi.w	#$280,d0
00017E84 6200                       		bhi.s	Obj7D_Delete2
00017E86 4EF9 0000 DD42             		jmp	DisplaySprite
00017E8C                            ; ===========================================================================
00017E8C                            
00017E8C                            Obj7D_Delete2:
00017E8C 4EF9 0000 DD7E             		jmp	DeleteObject
00017E92                            ; ===========================================================================
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            ; Sprite mappings - hidden points at the end of	a level
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            Map_obj7D:
00017E92                            	include "_maps\obj7D.asm"
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            ; Sprite mappings - hidden points at the end of	a level
00017E92                            ; ---------------------------------------------------------------------------
00017E92 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017E96 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017E9A 00                         byte_17250:	dc.b 0
00017E9B 01                         byte_17251:	dc.b 1
00017E9C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017EA1 01                         byte_17257:	dc.b 1
00017EA2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017EA7 01                         byte_1725D:	dc.b 1
00017EA8 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017EAE 00                         		even
00017EAE 00                         		even
00017EAE                            
00017EAE                            ; ===========================================================================
00017EAE                            ; ---------------------------------------------------------------------------
00017EAE                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017EAE                            ; ---------------------------------------------------------------------------
00017EAE                            
00017EAE                            Obj8A:					; XREF: Obj_Index
00017EAE 7000                       		moveq	#0,d0
00017EB0 1028 0024                  		move.b	$24(a0),d0
00017EB4 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017EB8 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017EBC                            ; ===========================================================================
00017EBC 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017EBE 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017EC0                            ; ===========================================================================
00017EC0                            
00017EC0                            Obj8A_Main:				; XREF: Obj8A_Index
00017EC0 5428 0024                  		addq.b	#2,$24(a0)
00017EC4 317C 0120 0008             		move.w	#$120,8(a0)
00017ECA 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017ED0 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017ED8 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017EDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017EE2 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017EE6 117C 0000 0001             		move.b	#0,1(a0)
00017EEC 117C 0000 0018             		move.b	#0,$18(a0)
00017EF2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017EF8 6600                       		bne.s	Obj8A_Display	; if not, branch
00017EFA 317C 00A6 0002             		move.w	#$A6,2(a0)
00017F00 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017F06 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017F0A 6700                       		beq.s	Obj8A_Display	; if not, branch
00017F0C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017F12 6600                       		bne.s	Obj8A_Display	; if not, branch
00017F14 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017F1A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017F20 4EF9 0000 DD7E             		jmp	DeleteObject
00017F26                            ; ===========================================================================
00017F26                            
00017F26                            Obj8A_Display:				; XREF: Obj8A_Index
00017F26 4EF9 0000 DD42             		jmp	DisplaySprite
00017F2C                            ; ===========================================================================
00017F2C                            ; ---------------------------------------------------------------------------
00017F2C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017F2C                            ; ---------------------------------------------------------------------------
00017F2C                            Map_obj8A:
00017F2C                            	include "_maps\obj8A.asm"
00017F2C                            ; ---------------------------------------------------------------------------
00017F2C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017F2C                            ; ---------------------------------------------------------------------------
00017F2C 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00017F30 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00017F34 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00017F38 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00017F3C 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00017F40 0000                       		dc.w byte_176A9-Map_obj8A
00017F42 18                         byte_172F8:	dc.b $18	;  SONIC TEAM STAFF | FART FART FART FART FART FART
00017F43 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
00017F48 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
00017F4D 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
00017F52 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
00017F57                            
00017F57 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
00017F5C B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
00017F61 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
00017F66 B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
00017F6B                            
00017F6B D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
00017F70 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
00017F75 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
00017F7A D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
00017F7F                            
00017F7F F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
00017F84 F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
00017F89 F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
00017F8E F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
00017F93                            
00017F93 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
00017F98 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
00017F9D 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
00017FA2 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
00017FA7                            
00017FA7 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00017FAC 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
00017FB1 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
00017FB6 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
00017FBB 18                         byte_1733F:	dc.b $18	;  GAME PLAN CAROL YAS | FART FART FART FART FART FART
00017FBC 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
00017FC1 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
00017FC6 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
00017FCB 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
00017FD0                            
00017FD0 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
00017FD5 B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
00017FDA B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
00017FDF B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
00017FE4                            
00017FE4 D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
00017FE9 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
00017FEE D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
00017FF3 D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
00017FF8                            
00017FF8 F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
00017FFD F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
00018002 F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
00018007 F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
0001800C                            
0001800C 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
00018011 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
00018016 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
0001801B 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
00018020                            
00018020 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00018025 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
0001802A 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
0001802F 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
00018034 18                         byte_17390:	dc.b $18	;  PROGRAM YU 2 | FART FART FART FART FART FART
00018035 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
0001803A 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001803F 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
00018044 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
00018049                            
00018049 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
0001804E B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
00018053 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
00018058 B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
0001805D                            
0001805D D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
00018062 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
00018067 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001806C D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
00018071                            
00018071 F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
00018076 F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
0001807B F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
00018080 F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
00018085                            
00018085 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
0001808A 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
0001808F 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
00018094 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
00018099                            
00018099 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
0001809E 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
000180A3 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
000180A8 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
000180AD 18                         byte_173C3:	dc.b $18	;  CHARACTER DESIGN BIGISLAND | FART FART FART FART FART FART
000180AE 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
000180B3 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
000180B8 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
000180BD 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
000180C2                            
000180C2 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
000180C7 B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
000180CC B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
000180D1 B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
000180D6                            
000180D6 D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
000180DB D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
000180E0 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
000180E5 D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
000180EA                            
000180EA F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
000180EF F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
000180F4 F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
000180F9 F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
000180FE                            
000180FE 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
00018103 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
00018108 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
0001810D 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
00018112                            
00018112 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00018117 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
0001811C 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
00018121 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
00018126 18                         byte_1743C:	dc.b $18	;  DESIGN JINYA PHENIX RIE | FART FART FART FART FART FART
00018127 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
0001812C 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
00018131 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
00018136 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
0001813B                            
0001813B B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
00018140 B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
00018145 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001814A B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
0001814F                            
0001814F D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
00018154 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
00018159 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001815E D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
00018163                            
00018163 F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
00018168 F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
0001816D F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
00018172 F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
00018177                            
00018177 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
0001817C 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
00018181 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
00018186 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
0001818B                            
0001818B 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00018190 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
00018195 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
0001819A 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
0001819F 18                         byte_174A1:	dc.b $18	;  SOUND PRODUCE MASATO NAKAMURA | FART FART FART FART FART FART
000181A0 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
000181A5 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
000181AA 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
000181AF 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
000181B4                            
000181B4 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
000181B9 B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
000181BE B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
000181C3 B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
000181C8                            
000181C8 D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
000181CD D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
000181D2 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
000181D7 D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
000181DC                            
000181DC F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
000181E1 F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
000181E6 F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
000181EB F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
000181F0                            
000181F0 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
000181F5 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
000181FA 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
000181FF 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
00018204                            
00018204 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00018209 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
0001820E 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
00018213 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
00018218 18                         byte_17524:	dc.b $18	;  SOUND PROGRAM JIMITA MACKY | FART FART FART FART FART FART
00018219 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
0001821E 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
00018223 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
00018228 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
0001822D                            
0001822D B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
00018232 B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
00018237 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001823C B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
00018241                            
00018241 D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
00018246 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
0001824B D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
00018250 D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
00018255                            
00018255 F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
0001825A F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
0001825F F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
00018264 F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
00018269                            
00018269 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
0001826E 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
00018273 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
00018278 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
0001827D                            
0001827D 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00018282 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
00018287 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
0001828C 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
00018291                            
00018291                            
00018291                            
00018291                            
00018291 18                         byte_17598:	dc.b $18	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | FART FART FART FART FART FART
00018292 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
00018297 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001829C 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
000182A1 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
000182A6                            
000182A6 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
000182AB B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
000182B0 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
000182B5 B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
000182BA                            
000182BA D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
000182BF D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
000182C4 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
000182C9 D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
000182CE                            
000182CE F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
000182D3 F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
000182D8 F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
000182DD F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
000182E2                            
000182E2 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
000182E7 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
000182EC 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
000182F1 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
000182F6                            
000182F6 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
000182FB 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
00018300 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
00018305 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
0001830A 18                         byte_17634:	dc.b $18	;  PRESENTED BY SEGA | FART FART FART FART FART FART
0001830B 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
00018310 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
00018315 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
0001831A 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
0001831F                            
0001831F B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
00018324 B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
00018329 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001832E B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
00018333                            
00018333 D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
00018338 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
0001833D D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
00018342 D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
00018347                            
00018347 F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
0001834C F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
00018351 F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
00018356 F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
0001835B                            
0001835B 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
00018360 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
00018365 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
0001836A 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
0001836F                            
0001836F 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
00018374 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
00018379 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
0001837E 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
00018383 18                         byte_17680:	dc.b $18	;  TRY AGAIN | FART FART FART FART FART FART
00018384 9005 005C 90               		dc.b $90, 5, 0, $5C, $90	; F
00018389 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001838E 9005 0022 B0               		dc.b $90, 5, 0, $22, $B0	; R
00018393 9005 003E C0               		dc.b $90, 5, 0, $3E, $C0	; T
00018398                            
00018398 B805 005C C0               		dc.b $B8, 5, 0, $5C, $C0	; F
0001839D B805 0004 D0               		dc.b $B8, 5, 0, 4, $D0		; A
000183A2 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
000183A7 B805 003E F0               		dc.b $B8, 5, 0, $3E, $F0	; T
000183AC                            
000183AC D805 005C C0               		dc.b $D8, 5, 0, $5C, $C0	; F
000183B1 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0		; A
000183B6 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
000183BB D805 003E F0               		dc.b $D8, 5, 0, $3E, $F0	; T
000183C0                            
000183C0 F805 005C C0               		dc.b $F8, 5, 0, $5C, $C0	; F
000183C5 F805 0004 D0               		dc.b $F8, 5, 0, 4, $D0		; A
000183CA F805 0022 E0               		dc.b $F8, 5, 0, $22, $E0	; R
000183CF F805 003E F0               		dc.b $F8, 5, 0, $3E, $F0	; T
000183D4                            
000183D4 1805 005C C0               		dc.b $18, 5, 0, $5C, $C0	; F
000183D9 1805 0004 D0               		dc.b $18, 5, 0, 4, $D0		; A
000183DE 1805 0022 E0               		dc.b $18, 5, 0, $22, $E0	; R
000183E3 1805 003E F0               		dc.b $18, 5, 0, $3E, $F0	; T
000183E8                            
000183E8 3805 005C C0               		dc.b $38, 5, 0, $5C, $C0	; F
000183ED 3805 0004 D0               		dc.b $38, 5, 0, 4, $D0		; A
000183F2 3805 0022 E0               		dc.b $38, 5, 0, $22, $E0	; R
000183F7 3805 003E F0               		dc.b $38, 5, 0, $3E, $F0	; T
000183FC 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000183FD E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00018402 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00018407 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
0001840C E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00018411 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00018416 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
0001841B E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00018420 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00018425 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001842A 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
0001842F 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00018434 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00018439 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
0001843E 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00018443 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00018448 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
0001844D 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00018452                            		even
00018452                            		even
00018452                            
00018452                            ; ===========================================================================
00018452                            ; ---------------------------------------------------------------------------
00018452                            ; Object 3D - Eggman (GHZ)
00018452                            ; ---------------------------------------------------------------------------
00018452                            
00018452                            Obj3D:					; XREF: Obj_Index
00018452 7000                       		moveq	#0,d0
00018454 1028 0024                  		move.b	$24(a0),d0
00018458 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001845C 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018460                            ; ===========================================================================
00018460 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018462 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018464 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018466 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018468                            
00018468 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001846A 0401                       		dc.b 4,	1
0001846C 0607                       		dc.b 6,	7
0001846E                            ; ===========================================================================
0001846E                            
0001846E                            Obj3D_Main:				; XREF: Obj3D_Index
0001846E 45F9 0001 8468             		lea	(Obj3D_ObjData).l,a2
00018474 2248                       		movea.l	a0,a1
00018476 7202                       		moveq	#2,d1
00018478 6000                       		bra.s	Obj3D_LoadBoss
0001847A                            ; ===========================================================================
0001847A                            
0001847A                            Obj3D_Loop:
0001847A 4EB9 0000 E204             		jsr	SingleObjLoad2
00018480 6600                       		bne.s	loc_17772
00018482                            
00018482                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018482 135A 0024                  		move.b	(a2)+,$24(a1)
00018486 12BC 003D                  		move.b	#$3D,0(a1)
0001848A 3368 0008 0008             		move.w	8(a0),8(a1)
00018490 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018496 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001849E 337C 0400 0002             		move.w	#$400,2(a1)
000184A4 137C 0004 0001             		move.b	#4,1(a1)
000184AA 137C 0020 0019             		move.b	#$20,$19(a1)
000184B0 137C 0003 0018             		move.b	#3,$18(a1)
000184B6 135A 001C                  		move.b	(a2)+,$1C(a1)
000184BA 2348 0034                  		move.l	a0,$34(a1)
000184BE 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000184C2                            
000184C2                            loc_17772:
000184C2 3168 0008 0030             		move.w	8(a0),$30(a0)
000184C8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000184CE 117C 000F 0020             		move.b	#$F,$20(a0)
000184D4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000184DA                            
000184DA                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000184DA 7000                       		moveq	#0,d0
000184DC 1028 0025                  		move.b	$25(a0),d0
000184E0 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000184E4 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000184E8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000184EE 4EB9 0000 AFC8             		jsr	AnimateSprite
000184F4 1028 0022                  		move.b	$22(a0),d0
000184F8 0200 0003                  		andi.b	#3,d0
000184FC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018502 8128 0001                  		or.b	d0,1(a0)
00018506 4EF9 0000 DD42             		jmp	DisplaySprite
0001850C                            ; ===========================================================================
0001850C 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001850E 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018510 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018512 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018514 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018516 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018518 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001851A                            ; ===========================================================================
0001851A                            
0001851A                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001851A 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00018520 6100 0000                  		bsr.w	BossMove
00018524 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001852A 6600                       		bne.s	loc_177E6
0001852C 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018532 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018536                            
00018536                            loc_177E6:
00018536 1028 003F                  		move.b	$3F(a0),d0
0001853A 4EB9 0000 2D64             		jsr	(CalcSine).l
00018540 EC40                       		asr.w	#6,d0
00018542 D068 0038                  		add.w	$38(a0),d0
00018546 3140 000C                  		move.w	d0,$C(a0)
0001854A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018550 5428 003F                  		addq.b	#2,$3F(a0)
00018554 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001855A 6400                       		bcc.s	locret_1784A
0001855C 4A28 0022                  		tst.b	$22(a0)
00018560 6B00                       		bmi.s	loc_1784C
00018562 4A28 0020                  		tst.b	$20(a0)
00018566 6600                       		bne.s	locret_1784A
00018568 4A28 003E                  		tst.b	$3E(a0)
0001856C 6600                       		bne.s	Obj3D_ShipFlash
0001856E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018574 303C 00AC                  		move.w	#$AC,d0
00018578 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001857E                            
0001857E                            Obj3D_ShipFlash:
0001857E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018582 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018584 4A51                       		tst.w	(a1)
00018586 6600                       		bne.s	loc_1783C
00018588 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001858C                            
0001858C                            loc_1783C:
0001858C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001858E 5328 003E                  		subq.b	#1,$3E(a0)
00018592 6600                       		bne.s	locret_1784A
00018594 117C 000F 0020             		move.b	#$F,$20(a0)
0001859A                            
0001859A                            locret_1784A:
0001859A 4E75                       		rts	
0001859C                            ; ===========================================================================
0001859C                            
0001859C                            loc_1784C:				; XREF: loc_177E6
0001859C 7064                       		moveq	#100,d0
0001859E 6100 0000                  		bsr.w	AddPoints
000185A2 117C 0008 0025             		move.b	#8,$25(a0)
000185A8 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000185AE 4E75                       		rts	
000185B0                            
000185B0                            ; ---------------------------------------------------------------------------
000185B0                            ; Defeated boss	subroutine
000185B0                            ; ---------------------------------------------------------------------------
000185B0                            
000185B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185B0                            
000185B0                            
000185B0                            BossDefeated:
000185B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000185B4 0200 0007                  		andi.b	#7,d0
000185B8 6600                       		bne.s	locret_178A2
000185BA 4EB9 0000 E1EE             		jsr	SingleObjLoad
000185C0 6600                       		bne.s	locret_178A2
000185C2 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000185C6 3368 0008 0008             		move.w	8(a0),8(a1)
000185CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000185D2 4EB9 0000 2D3E             		jsr	(RandomNumber).l
000185D8 3200                       		move.w	d0,d1
000185DA 7200                       		moveq	#0,d1
000185DC 1200                       		move.b	d0,d1
000185DE E409                       		lsr.b	#2,d1
000185E0 0441 0020                  		subi.w	#$20,d1
000185E4 D369 0008                  		add.w	d1,8(a1)
000185E8 E048                       		lsr.w	#8,d0
000185EA E608                       		lsr.b	#3,d0
000185EC D169 000C                  		add.w	d0,$C(a1)
000185F0                            
000185F0                            locret_178A2:
000185F0 4E75                       		rts	
000185F2                            ; End of function BossDefeated
000185F2                            
000185F2                            ; ---------------------------------------------------------------------------
000185F2                            ; Subroutine to	move a boss
000185F2                            ; ---------------------------------------------------------------------------
000185F2                            
000185F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185F2                            
000185F2                            
000185F2                            BossMove:
000185F2 2428 0030                  		move.l	$30(a0),d2
000185F6 2628 0038                  		move.l	$38(a0),d3
000185FA 3028 0010                  		move.w	$10(a0),d0
000185FE 48C0                       		ext.l	d0
00018600 E180                       		asl.l	#8,d0
00018602 D480                       		add.l	d0,d2
00018604 3028 0012                  		move.w	$12(a0),d0
00018608 48C0                       		ext.l	d0
0001860A E180                       		asl.l	#8,d0
0001860C D680                       		add.l	d0,d3
0001860E 2142 0030                  		move.l	d2,$30(a0)
00018612 2143 0038                  		move.l	d3,$38(a0)
00018616 4E75                       		rts	
00018618                            ; End of function BossMove
00018618                            
00018618                            ; ===========================================================================
00018618                            
00018618                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00018618 317C FF00 0010             		move.w	#-$100,$10(a0)
0001861E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018624 6100 FFCC                  		bsr.w	BossMove
00018628 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001862E 6600                       		bne.s	loc_17916
00018630 317C 0000 0010             		move.w	#0,$10(a0)
00018636 317C 0000 0012             		move.w	#0,$12(a0)
0001863C 5428 0025                  		addq.b	#2,$25(a0)
00018640 4EB9 0000 E204             		jsr	SingleObjLoad2
00018646 6600                       		bne.s	loc_17910
00018648 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001864C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018652 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018658 2348 0034                  		move.l	a0,$34(a1)
0001865C                            
0001865C                            loc_17910:
0001865C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018662                            
00018662                            loc_17916:
00018662 6000 FED2                  		bra.w	loc_177E6
00018666                            ; ===========================================================================
00018666                            
00018666                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00018666 5368 003C                  		subq.w	#1,$3C(a0)
0001866A 6A00                       		bpl.s	Obj3D_Reverse
0001866C 5428 0025                  		addq.b	#2,$25(a0)
00018670 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018676 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0001867C 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018682 6600                       		bne.s	Obj3D_Reverse
00018684 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001868A 317C 0040 0010             		move.w	#$40,$10(a0)
00018690                            
00018690                            Obj3D_Reverse:
00018690 0828 0000 0022             		btst	#0,$22(a0)
00018696 6600                       		bne.s	loc_17950
00018698 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001869C                            
0001869C                            loc_17950:
0001869C 6000 FE98                  		bra.w	loc_177E6
000186A0                            ; ===========================================================================
000186A0                            
000186A0                            loc_17954:				; XREF: Obj3D_ShipIndex
000186A0 5368 003C                  		subq.w	#1,$3C(a0)
000186A4 6B00                       		bmi.s	loc_17960
000186A6 6100 FF4A                  		bsr.w	BossMove
000186AA 6000                       		bra.s	loc_17976
000186AC                            ; ===========================================================================
000186AC                            
000186AC                            loc_17960:
000186AC 0868 0000 0022             		bchg	#0,$22(a0)
000186B2 317C 003F 003C             		move.w	#$3F,$3C(a0)
000186B8 5528 0025                  		subq.b	#2,$25(a0)
000186BC 317C 0000 0010             		move.w	#0,$10(a0)
000186C2                            
000186C2                            loc_17976:
000186C2 6000 FE72                  		bra.w	loc_177E6
000186C6                            ; ===========================================================================
000186C6                            
000186C6                            loc_1797A:				; XREF: Obj3D_ShipIndex
000186C6 5368 003C                  		subq.w	#1,$3C(a0)
000186CA 6B00                       		bmi.s	loc_17984
000186CC 6000 FEE2                  		bra.w	BossDefeated
000186D0                            ; ===========================================================================
000186D0                            
000186D0                            loc_17984:
000186D0 08E8 0000 0022             		bset	#0,$22(a0)
000186D6 08A8 0007 0022             		bclr	#7,$22(a0)
000186DC 4268 0010                  		clr.w	$10(a0)
000186E0 5428 0025                  		addq.b	#2,$25(a0)
000186E4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000186EA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000186EE 6600                       		bne.s	locret_179AA
000186F0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000186F6                            
000186F6                            locret_179AA:
000186F6 4E75                       		rts	
000186F8                            ; ===========================================================================
000186F8                            
000186F8                            loc_179AC:				; XREF: Obj3D_ShipIndex
000186F8 5268 003C                  		addq.w	#1,$3C(a0)
000186FC 6700                       		beq.s	loc_179BC
000186FE 6A00                       		bpl.s	loc_179C2
00018700 0668 0018 0012             		addi.w	#$18,$12(a0)
00018706 6000                       		bra.s	loc_179EE
00018708                            ; ===========================================================================
00018708                            
00018708                            loc_179BC:
00018708 4268 0012                  		clr.w	$12(a0)
0001870C 6000                       		bra.s	loc_179EE
0001870E                            ; ===========================================================================
0001870E                            
0001870E                            loc_179C2:
0001870E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018714 6500                       		bcs.s	loc_179DA
00018716 6700                       		beq.s	loc_179E0
00018718 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001871E 6500                       		bcs.s	loc_179EE
00018720 5428 0025                  		addq.b	#2,$25(a0)
00018724 6000                       		bra.s	loc_179EE
00018726                            ; ===========================================================================
00018726                            
00018726                            loc_179DA:
00018726 5168 0012                  		subq.w	#8,$12(a0)
0001872A 6000                       		bra.s	loc_179EE
0001872C                            ; ===========================================================================
0001872C                            
0001872C                            loc_179E0:
0001872C 4268 0012                  		clr.w	$12(a0)
00018730 303C 0081                  		move.w	#$81,d0
00018734 4EB9 0000 11AE             		jsr	(PlaySound).l	; play GHZ music
0001873A                            
0001873A                            loc_179EE:
0001873A 6100 FEB6                  		bsr.w	BossMove
0001873E 6000 FDF6                  		bra.w	loc_177E6
00018742                            ; ===========================================================================
00018742                            
00018742                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018742 317C 0400 0010             		move.w	#$400,$10(a0)
00018748 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001874E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018754 6700                       		beq.s	loc_17A10
00018756 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001875A 6000                       		bra.s	loc_17A16
0001875C                            ; ===========================================================================
0001875C                            
0001875C                            loc_17A10:
0001875C 4A28 0001                  		tst.b	1(a0)
00018760 6A00                       		bpl.s	Obj3D_ShipDel
00018762                            
00018762                            loc_17A16:
00018762 6100 FE8E                  		bsr.w	BossMove
00018766 6000 FDCE                  		bra.w	loc_177E6
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            Obj3D_ShipDel:
0001876A 4EF9 0000 DD7E             		jmp	DeleteObject
00018770                            ; ===========================================================================
00018770                            
00018770                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018770 7000                       		moveq	#0,d0
00018772 7201                       		moveq	#1,d1
00018774 2268 0034                  		movea.l	$34(a0),a1
00018778 1029 0025                  		move.b	$25(a1),d0
0001877C 5900                       		subq.b	#4,d0
0001877E 6600                       		bne.s	loc_17A3E
00018780 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018786 6600                       		bne.s	loc_17A46
00018788 7204                       		moveq	#4,d1
0001878A                            
0001878A                            loc_17A3E:
0001878A 5D00                       		subq.b	#6,d0
0001878C 6B00                       		bmi.s	loc_17A46
0001878E 720A                       		moveq	#$A,d1
00018790 6000                       		bra.s	loc_17A5A
00018792                            ; ===========================================================================
00018792                            
00018792                            loc_17A46:
00018792 4A29 0020                  		tst.b	$20(a1)
00018796 6600                       		bne.s	loc_17A50
00018798 7205                       		moveq	#5,d1
0001879A 6000                       		bra.s	loc_17A5A
0001879C                            ; ===========================================================================
0001879C                            
0001879C                            loc_17A50:
0001879C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187A2 6500                       		bcs.s	loc_17A5A
000187A4 7204                       		moveq	#4,d1
000187A6                            
000187A6                            loc_17A5A:
000187A6 1141 001C                  		move.b	d1,$1C(a0)
000187AA 5500                       		subq.b	#2,d0
000187AC 6600                       		bne.s	Obj3D_FaceDisp
000187AE 117C 0006 001C             		move.b	#6,$1C(a0)
000187B4 4A28 0001                  		tst.b	1(a0)
000187B8 6A00                       		bpl.s	Obj3D_FaceDel
000187BA                            
000187BA                            Obj3D_FaceDisp:
000187BA 6000                       		bra.s	Obj3D_Display
000187BC                            ; ===========================================================================
000187BC                            
000187BC                            Obj3D_FaceDel:
000187BC 4EF9 0000 DD7E             		jmp	DeleteObject
000187C2                            ; ===========================================================================
000187C2                            
000187C2                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000187C2 117C 0007 001C             		move.b	#7,$1C(a0)
000187C8 2268 0034                  		movea.l	$34(a0),a1
000187CC 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000187D2 6600                       		bne.s	loc_17A96
000187D4 117C 000B 001C             		move.b	#$B,$1C(a0)
000187DA 4A28 0001                  		tst.b	1(a0)
000187DE 6A00                       		bpl.s	Obj3D_FlameDel
000187E0 6000                       		bra.s	Obj3D_FlameDisp
000187E2                            ; ===========================================================================
000187E2                            
000187E2                            loc_17A96:
000187E2 3029 0010                  		move.w	$10(a1),d0
000187E6 6700                       		beq.s	Obj3D_FlameDisp
000187E8 117C 0008 001C             		move.b	#8,$1C(a0)
000187EE                            
000187EE                            Obj3D_FlameDisp:
000187EE 6000                       		bra.s	Obj3D_Display
000187F0                            ; ===========================================================================
000187F0                            
000187F0                            Obj3D_FlameDel:
000187F0 4EF9 0000 DD7E             		jmp	DeleteObject
000187F6                            ; ===========================================================================
000187F6                            
000187F6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000187F6 2268 0034                  		movea.l	$34(a0),a1
000187FA 3169 0008 0008             		move.w	8(a1),8(a0)
00018800 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018806 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001880C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018812 4EB9 0000 AFC8             		jsr	AnimateSprite
00018818 1028 0022                  		move.b	$22(a0),d0
0001881C 0200 0003                  		andi.b	#3,d0
00018820 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018826 8128 0001                  		or.b	d0,1(a0)
0001882A 4EF9 0000 DD42             		jmp	DisplaySprite
00018830                            ; ===========================================================================
00018830                            ; ---------------------------------------------------------------------------
00018830                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018830                            ; ---------------------------------------------------------------------------
00018830                            
00018830                            Obj48:					; XREF: Obj_Index
00018830 7000                       		moveq	#0,d0
00018832 1028 0024                  		move.b	$24(a0),d0
00018836 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001883A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001883E                            ; ===========================================================================
0001883E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018840 0000                       		dc.w Obj48_Base-Obj48_Index
00018842 0000                       		dc.w Obj48_Display2-Obj48_Index
00018844 0000                       		dc.w loc_17C68-Obj48_Index
00018846 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018848                            ; ===========================================================================
00018848                            
00018848                            Obj48_Main:				; XREF: Obj48_Index
00018848 5428 0024                  		addq.b	#2,$24(a0)
0001884C 317C 4080 0026             		move.w	#$4080,$26(a0)
00018852 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018858 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018860 317C 046C 0002             		move.w	#$46C,2(a0)
00018866 45E8 0028                  		lea	$28(a0),a2
0001886A 14FC 0000                  		move.b	#0,(a2)+
0001886E 7205                       		moveq	#5,d1
00018870 2248                       		movea.l	a0,a1
00018872 6000                       		bra.s	loc_17B60
00018874                            ; ===========================================================================
00018874                            
00018874                            Obj48_MakeLinks:
00018874 4EB9 0000 E204             		jsr	SingleObjLoad2
0001887A 6600                       		bne.s	Obj48_MakeBall
0001887C 3368 0008 0008             		move.w	8(a0),8(a1)
00018882 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018888 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001888C 137C 0006 0024             		move.b	#6,$24(a1)
00018892 237C 0000 83E8 0004        		move.l	#Map_obj15,4(a1)
0001889A 337C 0380 0002             		move.w	#$380,2(a1)
000188A0 137C 0001 001A             		move.b	#1,$1A(a1)
000188A6 5228 0028                  		addq.b	#1,$28(a0)
000188AA                            
000188AA                            loc_17B60:				; XREF: Obj48_Main
000188AA 3A09                       		move.w	a1,d5
000188AC 0445 D000                  		subi.w	#$D000,d5
000188B0 EC4D                       		lsr.w	#6,d5
000188B2 0245 007F                  		andi.w	#$7F,d5
000188B6 14C5                       		move.b	d5,(a2)+
000188B8 137C 0004 0001             		move.b	#4,1(a1)
000188BE 137C 0008 0019             		move.b	#8,$19(a1)
000188C4 137C 0006 0018             		move.b	#6,$18(a1)
000188CA 2368 0034 0034             		move.l	$34(a0),$34(a1)
000188D0 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000188D4                            
000188D4                            Obj48_MakeBall:
000188D4 137C 0008 0024             		move.b	#8,$24(a1)
000188DA 237C 0000 8A20 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000188E2 337C 03AA 0002             		move.w	#$03AA,2(a1)	; use different	graphics
000188E8 137C 0001 001A             		move.b	#1,$1A(a1)
000188EE 137C 0005 0018             		move.b	#5,$18(a1)
000188F4 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000188FA 4E75                       		rts	
000188FC                            ; ===========================================================================
000188FC                            
000188FC 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018902                            
00018902                            ; ===========================================================================
00018902                            
00018902                            Obj48_Base:				; XREF: Obj48_Index
00018902 47F9 0001 88FC             		lea	(Obj48_PosData).l,a3
00018908 45E8 0028                  		lea	$28(a0),a2
0001890C 7C00                       		moveq	#0,d6
0001890E 1C1A                       		move.b	(a2)+,d6
00018910                            
00018910                            loc_17BC6:
00018910 7800                       		moveq	#0,d4
00018912 181A                       		move.b	(a2)+,d4
00018914 ED4C                       		lsl.w	#6,d4
00018916 0684 00FF D000             		addi.l	#$FFD000,d4
0001891C 2244                       		movea.l	d4,a1
0001891E 101B                       		move.b	(a3)+,d0
00018920 B029 003C                  		cmp.b	$3C(a1),d0
00018924 6700                       		beq.s	loc_17BE0
00018926 5229 003C                  		addq.b	#1,$3C(a1)
0001892A                            
0001892A                            loc_17BE0:
0001892A 51CE FFE4                  		dbf	d6,loc_17BC6
0001892E                            
0001892E B029 003C                  		cmp.b	$3C(a1),d0
00018932 6600                       		bne.s	loc_17BFA
00018934 2268 0034                  		movea.l	$34(a0),a1
00018938 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001893E 6600                       		bne.s	loc_17BFA
00018940 5428 0024                  		addq.b	#2,$24(a0)
00018944                            
00018944                            loc_17BFA:
00018944 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001894A 6700                       		beq.s	Obj48_Display
0001894C 5268 0032                  		addq.w	#1,$32(a0)
00018950                            
00018950                            Obj48_Display:
00018950 6100 0000                  		bsr.w	sub_17C2A
00018954 1028 0026                  		move.b	$26(a0),d0
00018958 4EB9 0000 835A             		jsr	(Obj15_Move2).l
0001895E 4EF9 0000 DD42             		jmp	DisplaySprite
00018964                            ; ===========================================================================
00018964                            
00018964                            Obj48_Display2:				; XREF: Obj48_Index
00018964 6100 0000                  		bsr.w	sub_17C2A
00018968 4EB9 0000 831A             		jsr	(Obj48_Move).l
0001896E 4EF9 0000 DD42             		jmp	DisplaySprite
00018974                            
00018974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018974                            
00018974                            
00018974                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018974 2268 0034                  		movea.l	$34(a0),a1
00018978 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001897E 6400                       		bcc.s	loc_17C3C
00018980 0868 0000 001A             		bchg	#0,$1A(a0)
00018986                            
00018986                            loc_17C3C:
00018986 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001898C 3029 000C                  		move.w	$C(a1),d0
00018990 D068 0032                  		add.w	$32(a0),d0
00018994 3140 0038                  		move.w	d0,$38(a0)
00018998 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001899E 4A29 0022                  		tst.b	$22(a1)
000189A2 6A00                       		bpl.s	locret_17C66
000189A4 10BC 003F                  		move.b	#$3F,0(a0)
000189A8 117C 0000 0024             		move.b	#0,$24(a0)
000189AE                            
000189AE                            locret_17C66:
000189AE 4E75                       		rts	
000189B0                            ; End of function sub_17C2A
000189B0                            
000189B0                            ; ===========================================================================
000189B0                            
000189B0                            loc_17C68:				; XREF: Obj48_Index
000189B0 2268 0034                  		movea.l	$34(a0),a1
000189B4 4A29 0022                  		tst.b	$22(a1)
000189B8 6A00                       		bpl.s	Obj48_Display3
000189BA 10BC 003F                  		move.b	#$3F,0(a0)
000189BE 117C 0000 0024             		move.b	#0,$24(a0)
000189C4                            
000189C4                            Obj48_Display3:
000189C4 4EF9 0000 DD42             		jmp	DisplaySprite
000189CA                            ; ===========================================================================
000189CA                            
000189CA                            Obj48_ChkVanish:			; XREF: Obj48_Index
000189CA 7000                       		moveq	#0,d0
000189CC 4A28 001A                  		tst.b	$1A(a0)
000189D0 6600                       		bne.s	Obj48_Vanish
000189D2 5200                       		addq.b	#1,d0
000189D4                            
000189D4                            Obj48_Vanish:
000189D4 1140 001A                  		move.b	d0,$1A(a0)
000189D8 2268 0034                  		movea.l	$34(a0),a1
000189DC 4A29 0022                  		tst.b	$22(a1)
000189E0 6A00                       		bpl.s	Obj48_Display4
000189E2 117C 0000 0020             		move.b	#0,$20(a0)
000189E8 6100 FBC6                  		bsr.w	BossDefeated
000189EC 5328 003C                  		subq.b	#1,$3C(a0)
000189F0 6A00                       		bpl.s	Obj48_Display4
000189F2 10BC 003F                  		move.b	#$3F,(a0)
000189F6 117C 0000 0024             		move.b	#0,$24(a0)
000189FC                            
000189FC                            Obj48_Display4:
000189FC 4EF9 0000 DD42             		jmp	DisplaySprite
00018A02                            ; ===========================================================================
00018A02                            Ani_Eggman:
00018A02                            	include "_anim\Eggman.asm"
00018A02                            ; ---------------------------------------------------------------------------
00018A02                            ; Animation script - Eggman (bosses)
00018A02                            ; ---------------------------------------------------------------------------
00018A02 0000                       		dc.w byte_17CD4-Ani_Eggman
00018A04 0000                       		dc.w byte_17CD8-Ani_Eggman
00018A06 0000                       		dc.w byte_17CDC-Ani_Eggman
00018A08 0000                       		dc.w byte_17CE0-Ani_Eggman
00018A0A 0000                       		dc.w byte_17CE4-Ani_Eggman
00018A0C 0000                       		dc.w byte_17CE8-Ani_Eggman
00018A0E 0000                       		dc.w byte_17CEC-Ani_Eggman
00018A10 0000                       		dc.w byte_17CF0-Ani_Eggman
00018A12 0000                       		dc.w byte_17CF4-Ani_Eggman
00018A14 0000                       		dc.w byte_17CF8-Ani_Eggman
00018A16 0000                       		dc.w byte_17CFC-Ani_Eggman
00018A18 0000                       		dc.w byte_17D00-Ani_Eggman
00018A1A 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018A1E 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018A22 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018A26 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018A2A 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018A2E 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018A32 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018A36 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018A3A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018A3E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018A42 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018A46 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018A52                            		even
00018A52                            		even
00018A52                            
00018A52                            ; ---------------------------------------------------------------------------
00018A52                            ; Sprite mappings - Eggman (boss levels)
00018A52                            ; ---------------------------------------------------------------------------
00018A52                            Map_Eggman:
00018A52                            	include "_maps\Eggman.asm"
00018A52                            ; ---------------------------------------------------------------------------
00018A52                            ; Sprite mappings - Eggman (boss levels)
00018A52                            ; ---------------------------------------------------------------------------
00018A52 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00018A56 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00018A5A 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00018A5E 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00018A62 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00018A66 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00018A6A 0000                       		dc.w byte_17DC8-Map_Eggman
00018A6C 06                         byte_17D26:	dc.b 6
00018A6D EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00018A72 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00018A77 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00018A7C FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00018A81 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00018A86 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00018A8B 02                         byte_17D45:	dc.b 2
00018A8C E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018A91 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00018A96 02                         byte_17D50:	dc.b 2
00018A97 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018A9C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00018AA1 03                         byte_17D5B:	dc.b 3
00018AA2 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00018AA7 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00018AAC EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00018AB1 03                         byte_17D6B:	dc.b 3
00018AB2 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00018AB7 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00018ABC EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00018AC1 03                         byte_17D7B:	dc.b 3
00018AC2 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00018AC7 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00018ACC EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00018AD1 03                         byte_17D8B:	dc.b 3
00018AD2 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00018AD7 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018ADC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00018AE1 04                         byte_17D9B:	dc.b 4
00018AE2 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00018AE7 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00018AEC EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00018AF1 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00018AF6 01                         byte_17DB0:	dc.b 1
00018AF7 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00018AFC 01                         byte_17DB6:	dc.b 1
00018AFD 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00018B02 00                         byte_17DBC:	dc.b 0
00018B03 02                         byte_17DBD:	dc.b 2
00018B04 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00018B09 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00018B0E 02                         byte_17DC8:	dc.b 2
00018B0F F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00018B14 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00018B1A 00                         		even
00018B1A 00                         		even
00018B1A                            
00018B1A                            ; ---------------------------------------------------------------------------
00018B1A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018B1A                            ; ---------------------------------------------------------------------------
00018B1A                            Map_BossItems:
00018B1A                            	include "_maps\Boss items.asm"
00018B1A                            ; ---------------------------------------------------------------------------
00018B1A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018B1A                            ; ---------------------------------------------------------------------------
00018B1A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018B1E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018B22 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018B26 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018B2A 01                         byte_17DE4:	dc.b 1
00018B2B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018B30 02                         byte_17DEA:	dc.b 2
00018B31 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018B36 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018B3B 00                         		dc.b 0
00018B3C 01                         byte_17DF6:	dc.b 1
00018B3D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018B42 01                         byte_17DFC:	dc.b 1
00018B43 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018B48 01                         byte_17E02:	dc.b 1
00018B49 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018B4E 04                         byte_17E08:	dc.b 4
00018B4F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018B54 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018B59 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018B5E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018B63 00                         		dc.b 0
00018B64 02                         byte_17E1E:	dc.b 2
00018B65 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018B6A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018B6F 00                         		dc.b 0
00018B70 02                         byte_17E2A:	dc.b 2
00018B71 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018B76 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018B7C 00                         		even
00018B7C 00                         		even
00018B7C                            
00018B7C                            ; ===========================================================================
00018B7C                            ; ---------------------------------------------------------------------------
00018B7C                            ; Object 77 - Eggman (LZ)
00018B7C                            ; ---------------------------------------------------------------------------
00018B7C                            
00018B7C                            Obj77:					; XREF: Obj_Index
00018B7C 7000                       		moveq	#0,d0
00018B7E 1028 0024                  		move.b	$24(a0),d0
00018B82 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018B86 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018B8A                            ; ===========================================================================
00018B8A 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018B8C 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018B8E 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018B90 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018B92                            
00018B92 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018B94 0401                       		dc.b 4,	1
00018B96 0607                       		dc.b 6,	7
00018B98                            ; ===========================================================================
00018B98                            
00018B98                            Obj77_Main:				; XREF: Obj77_Index
00018B98 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018B9E 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018BA4 3168 0008 0030             		move.w	8(a0),$30(a0)
00018BAA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018BB0 117C 000F 0020             		move.b	#$F,$20(a0)
00018BB6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018BBC 117C 0004 0018             		move.b	#4,$18(a0)
00018BC2 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018BC6 2248                       		movea.l	a0,a1
00018BC8 7202                       		moveq	#2,d1
00018BCA 6000                       		bra.s	Obj77_LoadBoss
00018BCC                            ; ===========================================================================
00018BCC                            
00018BCC                            Obj77_Loop:
00018BCC 4EB9 0000 E204             		jsr	SingleObjLoad2
00018BD2 6600                       		bne.s	Obj77_ShipMain
00018BD4 12BC 0077                  		move.b	#$77,0(a1)
00018BD8 3368 0008 0008             		move.w	8(a0),8(a1)
00018BDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018BE4                            
00018BE4                            Obj77_LoadBoss:				; XREF: Obj77_Main
00018BE4 08A8 0000 0022             		bclr	#0,$22(a0)
00018BEA 4229 0025                  		clr.b	$25(a1)
00018BEE 135A 0024                  		move.b	(a2)+,$24(a1)
00018BF2 135A 001C                  		move.b	(a2)+,$1C(a1)
00018BF6 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018BFC 237C 0001 8A52 0004        		move.l	#Map_Eggman,4(a1)
00018C04 337C 0400 0002             		move.w	#$400,2(a1)
00018C0A 137C 0004 0001             		move.b	#4,1(a1)
00018C10 137C 0020 0019             		move.b	#$20,$19(a1)
00018C16 2348 0034                  		move.l	a0,$34(a1)
00018C1A 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018C1E                            
00018C1E                            Obj77_ShipMain:
00018C1E 43F8 D000                  		lea	($FFFFD000).w,a1
00018C22 7000                       		moveq	#0,d0
00018C24 1028 0025                  		move.b	$25(a0),d0
00018C28 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018C2C 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018C30 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
00018C36 4EB9 0000 AFC8             		jsr	AnimateSprite
00018C3C 7003                       		moveq	#3,d0
00018C3E C028 0022                  		and.b	$22(a0),d0
00018C42 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018C48 8128 0001                  		or.b	d0,1(a0)
00018C4C 4EF9 0000 DD42             		jmp	DisplaySprite
00018C52                            ; ===========================================================================
00018C52 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018C56 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018C5A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018C5E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018C62                            ; ===========================================================================
00018C62                            
00018C62                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018C62 3029 0008                  		move.w	8(a1),d0
00018C66 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018C6A 6500                       		bcs.s	loc_17F38
00018C6C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018C72 317C 0060 0010             		move.w	#$60,$10(a0)
00018C78 5428 0025                  		addq.b	#2,$25(a0)
00018C7C                            
00018C7C                            loc_17F38:
00018C7C 6100 F974                  		bsr.w	BossMove
00018C80 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C86 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C8C                            
00018C8C                            loc_17F48:
00018C8C 4A28 003D                  		tst.b	$3D(a0)
00018C90 6600                       		bne.s	loc_17F8E
00018C92 4A28 0022                  		tst.b	$22(a0)
00018C96 6B00                       		bmi.s	loc_17F92
00018C98 4A28 0020                  		tst.b	$20(a0)
00018C9C 6600                       		bne.s	locret_17F8C
00018C9E 4A28 003E                  		tst.b	$3E(a0)
00018CA2 6600                       		bne.s	loc_17F70
00018CA4 117C 0020 003E             		move.b	#$20,$3E(a0)
00018CAA 303C 00AC                  		move.w	#$AC,d0
00018CAE 4EB9 0000 11B4             		jsr	(PlaySound_Special).l
00018CB4                            
00018CB4                            loc_17F70:
00018CB4 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018CB8 7000                       		moveq	#0,d0
00018CBA 4A51                       		tst.w	(a1)
00018CBC 6600                       		bne.s	loc_17F7E
00018CBE 303C 0EEE                  		move.w	#$EEE,d0
00018CC2                            
00018CC2                            loc_17F7E:
00018CC2 3280                       		move.w	d0,(a1)
00018CC4 5328 003E                  		subq.b	#1,$3E(a0)
00018CC8 6600                       		bne.s	locret_17F8C
00018CCA 117C 000F 0020             		move.b	#$F,$20(a0)
00018CD0                            
00018CD0                            locret_17F8C:
00018CD0 4E75                       		rts	
00018CD2                            ; ===========================================================================
00018CD2                            
00018CD2                            loc_17F8E:				; XREF: loc_17F48
00018CD2 6000 F8DC                  		bra.w	BossDefeated
00018CD6                            ; ===========================================================================
00018CD6                            
00018CD6                            loc_17F92:				; XREF: loc_17F48
00018CD6 7064                       		moveq	#100,d0
00018CD8 6100 0000                  		bsr.w	AddPoints
00018CDC 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018CE2 4E75                       		rts	
00018CE4                            ; ===========================================================================
00018CE4                            
00018CE4                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018CE4 70FE                       		moveq	#-2,d0
00018CE6 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018CEC 6500                       		bcs.s	loc_17FB6
00018CEE 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00018CF4 4268 0010                  		clr.w	$10(a0)
00018CF8 5240                       		addq.w	#1,d0
00018CFA                            
00018CFA                            loc_17FB6:
00018CFA 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018D00 6E00                       		bgt.s	loc_17FCA
00018D02 317C 0500 0038             		move.w	#$500,$38(a0)
00018D08 4268 0012                  		clr.w	$12(a0)
00018D0C 5240                       		addq.w	#1,d0
00018D0E                            
00018D0E                            loc_17FCA:
00018D0E 6600                       		bne.s	loc_17FDC
00018D10 317C 0140 0010             		move.w	#$140,$10(a0)
00018D16 317C FE00 0012             		move.w	#-$200,$12(a0)
00018D1C 5428 0025                  		addq.b	#2,$25(a0)
00018D20                            
00018D20                            loc_17FDC:
00018D20 6000 FF5A                  		bra.w	loc_17F38
00018D24                            ; ===========================================================================
00018D24                            
00018D24                            loc_17FE0:				; XREF: Obj77_ShipIndex
00018D24 70FE                       		moveq	#-2,d0
00018D26 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018D2C 6500                       		bcs.s	loc_17FF6
00018D2E 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018D34 4268 0010                  		clr.w	$10(a0)
00018D38 5240                       		addq.w	#1,d0
00018D3A                            
00018D3A                            loc_17FF6:
00018D3A 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018D40 6E00                       		bgt.s	loc_1800A
00018D42 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018D48 4268 0012                  		clr.w	$12(a0)
00018D4C 5240                       		addq.w	#1,d0
00018D4E                            
00018D4E                            loc_1800A:
00018D4E 6600                       		bne.s	loc_1801A
00018D50 317C FE80 0012             		move.w	#-$180,$12(a0)
00018D56 5428 0025                  		addq.b	#2,$25(a0)
00018D5A 4228 003F                  		clr.b	$3F(a0)
00018D5E                            
00018D5E                            loc_1801A:
00018D5E 6000 FF1C                  		bra.w	loc_17F38
00018D62                            ; ===========================================================================
00018D62                            
00018D62                            loc_1801E:				; XREF: Obj77_ShipIndex
00018D62 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018D68 6E00                       		bgt.s	loc_1804E
00018D6A 317C 0100 0038             		move.w	#$100,$38(a0)
00018D70 317C 0140 0010             		move.w	#$140,$10(a0)
00018D76 317C FF80 0012             		move.w	#-$80,$12(a0)
00018D7C 4A28 003D                  		tst.b	$3D(a0)
00018D80 6700                       		beq.s	loc_18046
00018D82 E1E8 0010                  		asl	$10(a0)
00018D86 E1E8 0012                  		asl	$12(a0)
00018D8A                            
00018D8A                            loc_18046:
00018D8A 5428 0025                  		addq.b	#2,$25(a0)
00018D8E 6000 FEEC                  		bra.w	loc_17F38
00018D92                            ; ===========================================================================
00018D92                            
00018D92                            loc_1804E:
00018D92 08E8 0000 0022             		bset	#0,$22(a0)
00018D98 5428 003F                  		addq.b	#2,$3F(a0)
00018D9C 1028 003F                  		move.b	$3F(a0),d0
00018DA0 4EB9 0000 2D64             		jsr	(CalcSine).l
00018DA6 4A41                       		tst.w	d1
00018DA8 6A00                       		bpl.s	loc_1806C
00018DAA 08A8 0000 0022             		bclr	#0,$22(a0)
00018DB0                            
00018DB0                            loc_1806C:
00018DB0 E840                       		asr.w	#4,d0
00018DB2 4840                       		swap	d0
00018DB4 4240                       		clr.w	d0
00018DB6 D0A8 0030                  		add.l	$30(a0),d0
00018DBA 4840                       		swap	d0
00018DBC 3140 0008                  		move.w	d0,8(a0)
00018DC0 3028 0012                  		move.w	$12(a0),d0
00018DC4 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018DC8 9268 000C                  		sub.w	$C(a0),d1
00018DCC 6500                       		bcs.s	loc_180A2
00018DCE 0441 0048                  		subi.w	#$48,d1
00018DD2 6500                       		bcs.s	loc_180A2
00018DD4 E240                       		asr.w	#1,d0
00018DD6 0441 0028                  		subi.w	#$28,d1
00018DDA 6500                       		bcs.s	loc_180A2
00018DDC E240                       		asr.w	#1,d0
00018DDE 0441 0028                  		subi.w	#$28,d1
00018DE2 6500                       		bcs.s	loc_180A2
00018DE4 7000                       		moveq	#0,d0
00018DE6                            
00018DE6                            loc_180A2:
00018DE6 48C0                       		ext.l	d0
00018DE8 E180                       		asl.l	#8,d0
00018DEA 4A28 003D                  		tst.b	$3D(a0)
00018DEE 6700                       		beq.s	loc_180AE
00018DF0 D080                       		add.l	d0,d0
00018DF2                            
00018DF2                            loc_180AE:
00018DF2 D1A8 0038                  		add.l	d0,$38(a0)
00018DF6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018DFC 6000 FE8E                  		bra.w	loc_17F48
00018E00                            ; ===========================================================================
00018E00                            
00018E00                            loc_180BC:				; XREF: Obj77_ShipIndex
00018E00 70FE                       		moveq	#-2,d0
00018E02 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018E08 6500                       		bcs.s	loc_180D2
00018E0A 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018E10 4268 0010                  		clr.w	$10(a0)
00018E14 5240                       		addq.w	#1,d0
00018E16                            
00018E16                            loc_180D2:
00018E16 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018E1C 6E00                       		bgt.s	loc_180E6
00018E1E 317C 00C0 0038             		move.w	#$C0,$38(a0)
00018E24 4268 0012                  		clr.w	$12(a0)
00018E28 5240                       		addq.w	#1,d0
00018E2A                            
00018E2A                            loc_180E6:
00018E2A 6600                       		bne.s	loc_180F2
00018E2C 5428 0025                  		addq.b	#2,$25(a0)
00018E30 08A8 0000 0022             		bclr	#0,$22(a0)
00018E36                            
00018E36                            loc_180F2:
00018E36 6000 FE44                  		bra.w	loc_17F38
00018E3A                            ; ===========================================================================
00018E3A                            
00018E3A                            loc_180F6:				; XREF: Obj77_ShipIndex
00018E3A 4A28 003D                  		tst.b	$3D(a0)
00018E3E 6600                       		bne.s	loc_18112
00018E40 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018E46 6D00                       		blt.s	loc_18126
00018E48 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018E4E 6E00                       		bgt.s	loc_18126
00018E50 117C 0032 003C             		move.b	#$32,$3C(a0)
00018E56                            
00018E56                            loc_18112:
00018E56 303C 0082                  		move.w	#$82,d0
00018E5A 4EB9 0000 11AE             		jsr	(PlaySound).l	; play LZ music
00018E60 08E8 0000 0022             		bset	#0,$22(a0)
00018E66 5428 0025                  		addq.b	#2,$25(a0)
00018E6A                            
00018E6A                            loc_18126:
00018E6A 6000 FE10                  		bra.w	loc_17F38
00018E6E                            ; ===========================================================================
00018E6E                            
00018E6E                            loc_1812A:				; XREF: Obj77_ShipIndex
00018E6E 4A28 003D                  		tst.b	$3D(a0)
00018E72 6600                       		bne.s	loc_18136
00018E74 5328 003C                  		subq.b	#1,$3C(a0)
00018E78 6600                       		bne.s	loc_1814E
00018E7A                            
00018E7A                            loc_18136:
00018E7A 4228 003C                  		clr.b	$3C(a0)
00018E7E 317C 0400 0010             		move.w	#$400,$10(a0)
00018E84 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018E8A 4228 003D                  		clr.b	$3D(a0)
00018E8E 5428 0025                  		addq.b	#2,$25(a0)
00018E92                            
00018E92                            loc_1814E:
00018E92 6000 FDE8                  		bra.w	loc_17F38
00018E96                            ; ===========================================================================
00018E96                            
00018E96                            loc_18152:				; XREF: Obj77_ShipIndex
00018E96 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018E9C 6400                       		bcc.s	loc_18160
00018E9E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018EA2 6000                       		bra.s	loc_18166
00018EA4                            ; ===========================================================================
00018EA4                            
00018EA4                            loc_18160:
00018EA4 4A28 0001                  		tst.b	1(a0)
00018EA8 6A00                       		bpl.s	Obj77_ShipDel
00018EAA                            
00018EAA                            loc_18166:
00018EAA 6000 FDD0                  		bra.w	loc_17F38
00018EAE                            ; ===========================================================================
00018EAE                            
00018EAE                            Obj77_ShipDel:
00018EAE 4EF9 0000 DD7E             		jmp	DeleteObject
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            Obj77_FaceMain:				; XREF: Obj77_Index
00018EB4 2268 0034                  		movea.l	$34(a0),a1
00018EB8 1011                       		move.b	(a1),d0
00018EBA B010                       		cmp.b	(a0),d0
00018EBC 6600                       		bne.s	Obj77_FaceDel
00018EBE 7000                       		moveq	#0,d0
00018EC0 1029 0025                  		move.b	$25(a1),d0
00018EC4 7201                       		moveq	#1,d1
00018EC6 4A28 003D                  		tst.b	$3D(a0)
00018ECA 6700                       		beq.s	loc_1818C
00018ECC 720A                       		moveq	#$A,d1
00018ECE 6000                       		bra.s	loc_181A0
00018ED0                            ; ===========================================================================
00018ED0                            
00018ED0                            loc_1818C:
00018ED0 4A29 0020                  		tst.b	$20(a1)
00018ED4 6600                       		bne.s	loc_18196
00018ED6 7205                       		moveq	#5,d1
00018ED8 6000                       		bra.s	loc_181A0
00018EDA                            ; ===========================================================================
00018EDA                            
00018EDA                            loc_18196:
00018EDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018EE0 6500                       		bcs.s	loc_181A0
00018EE2 7204                       		moveq	#4,d1
00018EE4                            
00018EE4                            loc_181A0:
00018EE4 1141 001C                  		move.b	d1,$1C(a0)
00018EE8 0C00 000E                  		cmpi.b	#$E,d0
00018EEC 6600                       		bne.s	loc_181B6
00018EEE 117C 0006 001C             		move.b	#6,$1C(a0)
00018EF4 4A28 0001                  		tst.b	1(a0)
00018EF8 6A00                       		bpl.s	Obj77_FaceDel
00018EFA                            
00018EFA                            loc_181B6:
00018EFA 6000                       		bra.s	Obj77_Display
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            Obj77_FaceDel:
00018EFC 4EF9 0000 DD7E             		jmp	DeleteObject
00018F02                            ; ===========================================================================
00018F02                            
00018F02                            Obj77_FlameMain:			; XREF: Obj77_Index
00018F02 117C 0007 001C             		move.b	#7,$1C(a0)
00018F08 2268 0034                  		movea.l	$34(a0),a1
00018F0C 1011                       		move.b	(a1),d0
00018F0E B010                       		cmp.b	(a0),d0
00018F10 6600                       		bne.s	Obj77_FlameDel
00018F12 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018F18 6600                       		bne.s	loc_181F0
00018F1A 117C 000B 001C             		move.b	#$B,$1C(a0)
00018F20 4A28 0001                  		tst.b	1(a0)
00018F24 6A00                       		bpl.s	Obj77_FlameDel
00018F26 6000                       		bra.s	loc_181F0
00018F28                            ; ===========================================================================
00018F28 4A69 0010                  		tst.w	$10(a1)
00018F2C 6700                       		beq.s	loc_181F0
00018F2E 117C 0008 001C             		move.b	#8,$1C(a0)
00018F34                            
00018F34                            loc_181F0:
00018F34 6000                       		bra.s	Obj77_Display
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018F36 4EF9 0000 DD7E             		jmp	DeleteObject
00018F3C                            ; ===========================================================================
00018F3C                            
00018F3C                            Obj77_Display:
00018F3C 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
00018F42 4EB9 0000 AFC8             		jsr	AnimateSprite
00018F48 2268 0034                  		movea.l	$34(a0),a1
00018F4C 3169 0008 0008             		move.w	8(a1),8(a0)
00018F52 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018F58 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F5E 7003                       		moveq	#3,d0
00018F60 C028 0022                  		and.b	$22(a0),d0
00018F64 0228 00FC 0001             		andi.b	#-4,1(a0)
00018F6A 8128 0001                  		or.b	d0,1(a0)
00018F6E 4EF9 0000 DD42             		jmp	DisplaySprite
00018F74                            ; ===========================================================================
00018F74                            ; ---------------------------------------------------------------------------
00018F74                            ; Object 73 - Eggman (MZ)
00018F74                            ; ---------------------------------------------------------------------------
00018F74                            
00018F74                            Obj73:					; XREF: Obj_Index
00018F74 7000                       		moveq	#0,d0
00018F76 1028 0024                  		move.b	$24(a0),d0
00018F7A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018F7E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018F82                            ; ===========================================================================
00018F82 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018F84 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018F86 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018F88 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018F8A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018F8C                            
00018F8C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018F8F 0401 04                    		dc.b 4,	1, 4
00018F92 0607 04                    		dc.b 6,	7, 4
00018F95 0800 03                    		dc.b 8,	0, 3
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            Obj73_Main:				; XREF: Obj73_Index
00018F98 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FA4 117C 000F 0020             		move.b	#$F,$20(a0)
00018FAA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018FB0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018FB4 2248                       		movea.l	a0,a1
00018FB6 7203                       		moveq	#3,d1
00018FB8 6000                       		bra.s	Obj73_LoadBoss
00018FBA                            ; ===========================================================================
00018FBA                            
00018FBA                            Obj73_Loop:
00018FBA 4EB9 0000 E204             		jsr	SingleObjLoad2
00018FC0 6600                       		bne.s	Obj73_ShipMain
00018FC2 12BC 0073                  		move.b	#$73,0(a1)
00018FC6 3368 0008 0008             		move.w	8(a0),8(a1)
00018FCC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018FD2                            
00018FD2                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018FD2 08A8 0000 0022             		bclr	#0,$22(a0)
00018FD8 4229 0025                  		clr.b	$25(a1)
00018FDC 135A 0024                  		move.b	(a2)+,$24(a1)
00018FE0 135A 001C                  		move.b	(a2)+,$1C(a1)
00018FE4 135A 0018                  		move.b	(a2)+,$18(a1)
00018FE8 237C 0001 8A52 0004        		move.l	#Map_Eggman,4(a1)
00018FF0 337C 0400 0002             		move.w	#$400,2(a1)
00018FF6 137C 0004 0001             		move.b	#4,1(a1)
00018FFC 137C 0020 0019             		move.b	#$20,$19(a1)
00019002 2348 0034                  		move.l	a0,$34(a1)
00019006 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001900A                            
0001900A                            Obj73_ShipMain:
0001900A 7000                       		moveq	#0,d0
0001900C 1028 0025                  		move.b	$25(a0),d0
00019010 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019014 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019018 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
0001901E 4EB9 0000 AFC8             		jsr	AnimateSprite
00019024 7003                       		moveq	#3,d0
00019026 C028 0022                  		and.b	$22(a0),d0
0001902A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019030 8128 0001                  		or.b	d0,1(a0)
00019034 4EF9 0000 DD42             		jmp	DisplaySprite
0001903A                            ; ===========================================================================
0001903A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001903C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001903E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019040 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019042 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019044                            ; ===========================================================================
00019044                            
00019044                            loc_18302:				; XREF: Obj73_ShipIndex
00019044 1028 003F                  		move.b	$3F(a0),d0
00019048 5428 003F                  		addq.b	#2,$3F(a0)
0001904C 4EB9 0000 2D64             		jsr	(CalcSine).l
00019052 E440                       		asr.w	#2,d0
00019054 3140 0012                  		move.w	d0,$12(a0)
00019058 317C FF00 0010             		move.w	#-$100,$10(a0)
0001905E 6100 F592                  		bsr.w	BossMove
00019062 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019068 6600                       		bne.s	loc_18334
0001906A 5428 0025                  		addq.b	#2,$25(a0)
0001906E 4228 0028                  		clr.b	$28(a0)
00019072 42A8 0010                  		clr.l	$10(a0)
00019076                            
00019076                            loc_18334:
00019076 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001907C 1140 0034                  		move.b	d0,$34(a0)
00019080                            
00019080                            loc_1833E:
00019080 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019086 3168 0030 0008             		move.w	$30(a0),8(a0)
0001908C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019092 6400                       		bcc.s	locret_18390
00019094 4A28 0022                  		tst.b	$22(a0)
00019098 6B00                       		bmi.s	loc_18392
0001909A 4A28 0020                  		tst.b	$20(a0)
0001909E 6600                       		bne.s	locret_18390
000190A0 4A28 003E                  		tst.b	$3E(a0)
000190A4 6600                       		bne.s	loc_18374
000190A6 117C 0028 003E             		move.b	#$28,$3E(a0)
000190AC 303C 00AC                  		move.w	#$AC,d0
000190B0 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play boss damage sound
000190B6                            
000190B6                            loc_18374:
000190B6 43F8 FB22                  		lea	($FFFFFB22).w,a1
000190BA 7000                       		moveq	#0,d0
000190BC 4A51                       		tst.w	(a1)
000190BE 6600                       		bne.s	loc_18382
000190C0 303C 0EEE                  		move.w	#$EEE,d0
000190C4                            
000190C4                            loc_18382:
000190C4 3280                       		move.w	d0,(a1)
000190C6 5328 003E                  		subq.b	#1,$3E(a0)
000190CA 6600                       		bne.s	locret_18390
000190CC 117C 000F 0020             		move.b	#$F,$20(a0)
000190D2                            
000190D2                            locret_18390:
000190D2 4E75                       		rts	
000190D4                            ; ===========================================================================
000190D4                            
000190D4                            loc_18392:				; XREF: loc_1833E
000190D4 7064                       		moveq	#100,d0
000190D6 6100 0000                  		bsr.w	AddPoints
000190DA 117C 0004 0025             		move.b	#4,$25(a0)
000190E0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000190E6 4268 0010                  		clr.w	$10(a0)
000190EA 4E75                       		rts	
000190EC                            ; ===========================================================================
000190EC                            
000190EC                            loc_183AA:				; XREF: Obj73_ShipIndex
000190EC 7000                       		moveq	#0,d0
000190EE 1028 0028                  		move.b	$28(a0),d0
000190F2 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000190F6 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000190FA 0228 0006 0028             		andi.b	#6,$28(a0)
00019100 6000 FF7E                  		bra.w	loc_1833E
00019104                            ; ===========================================================================
00019104 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019106 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019108 0000                       		dc.w loc_183CA-off_183C2
0001910A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001910C                            ; ===========================================================================
0001910C                            
0001910C                            loc_183CA:				; XREF: off_183C2
0001910C 4A68 0010                  		tst.w	$10(a0)
00019110 6600                       		bne.s	loc_183FE
00019112 7040                       		moveq	#$40,d0
00019114 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001911A 6700                       		beq.s	loc_183E6
0001911C 6500                       		bcs.s	loc_183DE
0001911E 4440                       		neg.w	d0
00019120                            
00019120                            loc_183DE:
00019120 3140 0012                  		move.w	d0,$12(a0)
00019124 6000 F4CC                  		bra.w	BossMove
00019128                            ; ===========================================================================
00019128                            
00019128                            loc_183E6:
00019128 317C 0200 0010             		move.w	#$200,$10(a0)
0001912E 317C 0100 0012             		move.w	#$100,$12(a0)
00019134 0828 0000 0022             		btst	#0,$22(a0)
0001913A 6600                       		bne.s	loc_183FE
0001913C 4468 0010                  		neg.w	$10(a0)
00019140                            
00019140                            loc_183FE:
00019140 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019146 6400                       		bcc.s	Obj73_MakeLava
00019148 6100 F4A8                  		bsr.w	BossMove
0001914C 5968 0012                  		subq.w	#4,$12(a0)
00019150                            
00019150                            Obj73_MakeLava:
00019150 5328 0034                  		subq.b	#1,$34(a0)
00019154 6400                       		bcc.s	loc_1845C
00019156 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001915C 6600                       		bne.s	loc_1844A
0001915E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019162 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019168 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001916E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019174 80FC 0050                  		divu.w	#$50,d0
00019178 4840                       		swap	d0
0001917A 0640 1878                  		addi.w	#$1878,d0
0001917E 3340 0008                  		move.w	d0,8(a1)
00019182 EE09                       		lsr.b	#7,d1
00019184 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001918A                            
0001918A                            loc_1844A:
0001918A 4EB9 0000 2D3E             		jsr	(RandomNumber).l
00019190 0200 001F                  		andi.b	#$1F,d0
00019194 0600 0040                  		addi.b	#$40,d0
00019198 1140 0034                  		move.b	d0,$34(a0)
0001919C                            
0001919C                            loc_1845C:
0001919C 0828 0000 0022             		btst	#0,$22(a0)
000191A2 6700                       		beq.s	loc_18474
000191A4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000191AA 6D00                       		blt.s	locret_1849C
000191AC 317C 1910 0030             		move.w	#$1910,$30(a0)
000191B2 6000                       		bra.s	loc_18482
000191B4                            ; ===========================================================================
000191B4                            
000191B4                            loc_18474:
000191B4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000191BA 6E00                       		bgt.s	locret_1849C
000191BC 317C 1830 0030             		move.w	#$1830,$30(a0)
000191C2                            
000191C2                            loc_18482:
000191C2 4268 0010                  		clr.w	$10(a0)
000191C6 317C FE80 0012             		move.w	#-$180,$12(a0)
000191CC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000191D2 6400                       		bcc.s	loc_18498
000191D4 4468 0012                  		neg.w	$12(a0)
000191D8                            
000191D8                            loc_18498:
000191D8 5428 0028                  		addq.b	#2,$28(a0)
000191DC                            
000191DC                            locret_1849C:
000191DC 4E75                       		rts	
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            Obj73_MakeLava2:			; XREF: off_183C2
000191DE 6100 F412                  		bsr.w	BossMove
000191E2 3028 0038                  		move.w	$38(a0),d0
000191E6 0440 022C                  		subi.w	#$22C,d0
000191EA 6E00                       		bgt.s	locret_184F4
000191EC 303C 022C                  		move.w	#$22C,d0
000191F0 4A68 0012                  		tst.w	$12(a0)
000191F4 6700                       		beq.s	loc_184EA
000191F6 4268 0012                  		clr.w	$12(a0)
000191FA 317C 0050 003C             		move.w	#$50,$3C(a0)
00019200 0868 0000 0022             		bchg	#0,$22(a0)
00019206 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001920C 6600                       		bne.s	loc_184EA
0001920E 3368 0030 0008             		move.w	$30(a0),8(a1)
00019214 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001921A 0669 0018 000C             		addi.w	#$18,$C(a1)
00019220 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019224 137C 0001 0028             		move.b	#1,$28(a1)
0001922A                            
0001922A                            loc_184EA:
0001922A 5368 003C                  		subq.w	#1,$3C(a0)
0001922E 6600                       		bne.s	locret_184F4
00019230 5428 0028                  		addq.b	#2,$28(a0)
00019234                            
00019234                            locret_184F4:
00019234 4E75                       		rts	
00019236                            ; ===========================================================================
00019236                            
00019236                            loc_184F6:				; XREF: Obj73_ShipIndex
00019236 5368 003C                  		subq.w	#1,$3C(a0)
0001923A 6B00                       		bmi.s	loc_18500
0001923C 6000 F372                  		bra.w	BossDefeated
00019240                            ; ===========================================================================
00019240                            
00019240                            loc_18500:
00019240 08E8 0000 0022             		bset	#0,$22(a0)
00019246 08A8 0007 0022             		bclr	#7,$22(a0)
0001924C 4268 0010                  		clr.w	$10(a0)
00019250 5428 0025                  		addq.b	#2,$25(a0)
00019254 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001925A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001925E 6600                       		bne.s	locret_1852A
00019260 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019266 4268 0012                  		clr.w	$12(a0)
0001926A                            
0001926A                            locret_1852A:
0001926A 4E75                       		rts	
0001926C                            ; ===========================================================================
0001926C                            
0001926C                            loc_1852C:				; XREF: Obj73_ShipIndex
0001926C 5268 003C                  		addq.w	#1,$3C(a0)
00019270 6700                       		beq.s	loc_18544
00019272 6A00                       		bpl.s	loc_1854E
00019274 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001927A 6400                       		bcc.s	loc_18544
0001927C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019282 6000                       		bra.s	loc_1857A
00019284                            ; ===========================================================================
00019284                            
00019284                            loc_18544:
00019284 4268 0012                  		clr.w	$12(a0)
00019288 4268 003C                  		clr.w	$3C(a0)
0001928C 6000                       		bra.s	loc_1857A
0001928E                            ; ===========================================================================
0001928E                            
0001928E                            loc_1854E:
0001928E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019294 6500                       		bcs.s	loc_18566
00019296 6700                       		beq.s	loc_1856C
00019298 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001929E 6500                       		bcs.s	loc_1857A
000192A0 5428 0025                  		addq.b	#2,$25(a0)
000192A4 6000                       		bra.s	loc_1857A
000192A6                            ; ===========================================================================
000192A6                            
000192A6                            loc_18566:
000192A6 5168 0012                  		subq.w	#8,$12(a0)
000192AA 6000                       		bra.s	loc_1857A
000192AC                            ; ===========================================================================
000192AC                            
000192AC                            loc_1856C:
000192AC 4268 0012                  		clr.w	$12(a0)
000192B0 303C 0083                  		move.w	#$83,d0
000192B4 4EB9 0000 11AE             		jsr	(PlaySound).l	; play MZ music
000192BA                            
000192BA                            loc_1857A:
000192BA 6100 F336                  		bsr.w	BossMove
000192BE 6000 FDC0                  		bra.w	loc_1833E
000192C2                            ; ===========================================================================
000192C2                            
000192C2                            loc_18582:				; XREF: Obj73_ShipIndex
000192C2 317C 0500 0010             		move.w	#$500,$10(a0)
000192C8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192CE 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000192D4 6400                       		bcc.s	loc_1859C
000192D6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000192DA 6000                       		bra.s	loc_185A2
000192DC                            ; ===========================================================================
000192DC                            
000192DC                            loc_1859C:
000192DC 4A28 0001                  		tst.b	1(a0)
000192E0 6A00                       		bpl.s	Obj73_ShipDel
000192E2                            
000192E2                            loc_185A2:
000192E2 6100 F30E                  		bsr.w	BossMove
000192E6 6000 FD98                  		bra.w	loc_1833E
000192EA                            ; ===========================================================================
000192EA                            
000192EA                            Obj73_ShipDel:
000192EA 4EF9 0000 DD7E             		jmp	DeleteObject
000192F0                            ; ===========================================================================
000192F0                            
000192F0                            Obj73_FaceMain:				; XREF: Obj73_Index
000192F0 7000                       		moveq	#0,d0
000192F2 7201                       		moveq	#1,d1
000192F4 2268 0034                  		movea.l	$34(a0),a1
000192F8 1029 0025                  		move.b	$25(a1),d0
000192FC 5540                       		subq.w	#2,d0
000192FE 6600                       		bne.s	loc_185D2
00019300 0829 0001 0028             		btst	#1,$28(a1)
00019306 6700                       		beq.s	loc_185DA
00019308 4A69 0012                  		tst.w	$12(a1)
0001930C 6600                       		bne.s	loc_185DA
0001930E 7204                       		moveq	#4,d1
00019310 6000                       		bra.s	loc_185EE
00019312                            ; ===========================================================================
00019312                            
00019312                            loc_185D2:
00019312 5500                       		subq.b	#2,d0
00019314 6B00                       		bmi.s	loc_185DA
00019316 720A                       		moveq	#$A,d1
00019318 6000                       		bra.s	loc_185EE
0001931A                            ; ===========================================================================
0001931A                            
0001931A                            loc_185DA:
0001931A 4A29 0020                  		tst.b	$20(a1)
0001931E 6600                       		bne.s	loc_185E4
00019320 7205                       		moveq	#5,d1
00019322 6000                       		bra.s	loc_185EE
00019324                            ; ===========================================================================
00019324                            
00019324                            loc_185E4:
00019324 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001932A 6500                       		bcs.s	loc_185EE
0001932C 7204                       		moveq	#4,d1
0001932E                            
0001932E                            loc_185EE:
0001932E 1141 001C                  		move.b	d1,$1C(a0)
00019332 5900                       		subq.b	#4,d0
00019334 6600                       		bne.s	loc_18602
00019336 117C 0006 001C             		move.b	#6,$1C(a0)
0001933C 4A28 0001                  		tst.b	1(a0)
00019340 6A00                       		bpl.s	Obj73_FaceDel
00019342                            
00019342                            loc_18602:
00019342 6000                       		bra.s	Obj73_Display
00019344                            ; ===========================================================================
00019344                            
00019344                            Obj73_FaceDel:
00019344 4EF9 0000 DD7E             		jmp	DeleteObject
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            Obj73_FlameMain:			; XREF: Obj73_Index
0001934A 117C 0007 001C             		move.b	#7,$1C(a0)
00019350 2268 0034                  		movea.l	$34(a0),a1
00019354 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001935A 6D00                       		blt.s	loc_1862A
0001935C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019362 4A28 0001                  		tst.b	1(a0)
00019366 6A00                       		bpl.s	Obj73_FlameDel
00019368 6000                       		bra.s	loc_18636
0001936A                            ; ===========================================================================
0001936A                            
0001936A                            loc_1862A:
0001936A 4A69 0010                  		tst.w	$10(a1)
0001936E 6700                       		beq.s	loc_18636
00019370 117C 0008 001C             		move.b	#8,$1C(a0)
00019376                            
00019376                            loc_18636:
00019376 6000                       		bra.s	Obj73_Display
00019378                            ; ===========================================================================
00019378                            
00019378                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019378 4EF9 0000 DD7E             		jmp	DeleteObject
0001937E                            ; ===========================================================================
0001937E                            
0001937E                            Obj73_Display:
0001937E 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
00019384 4EB9 0000 AFC8             		jsr	AnimateSprite
0001938A                            
0001938A                            loc_1864A:
0001938A 2268 0034                  		movea.l	$34(a0),a1
0001938E 3169 0008 0008             		move.w	8(a1),8(a0)
00019394 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001939A 1169 0022 0022             		move.b	$22(a1),$22(a0)
000193A0 7003                       		moveq	#3,d0
000193A2 C028 0022                  		and.b	$22(a0),d0
000193A6 0228 00FC 0001             		andi.b	#-4,1(a0)
000193AC 8128 0001                  		or.b	d0,1(a0)
000193B0 4EF9 0000 DD42             		jmp	DisplaySprite
000193B6                            ; ===========================================================================
000193B6                            
000193B6                            Obj73_TubeMain:				; XREF: Obj73_Index
000193B6 2268 0034                  		movea.l	$34(a0),a1
000193BA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000193C0 6600                       		bne.s	loc_18688
000193C2 4A28 0001                  		tst.b	1(a0)
000193C6 6A00                       		bpl.s	Obj73_TubeDel
000193C8                            
000193C8                            loc_18688:
000193C8 217C 0001 8B1A 0004        		move.l	#Map_BossItems,4(a0)
000193D0 317C 246C 0002             		move.w	#$246C,2(a0)
000193D6 117C 0004 001A             		move.b	#4,$1A(a0)
000193DC 60AC                       		bra.s	loc_1864A
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            Obj73_TubeDel:
000193DE 4EF9 0000 DD7E             		jmp	DeleteObject
000193E4                            ; ===========================================================================
000193E4                            ; ---------------------------------------------------------------------------
000193E4                            ; Object 74 - lava that	Eggman drops (MZ)
000193E4                            ; ---------------------------------------------------------------------------
000193E4                            
000193E4                            Obj74:					; XREF: Obj_Index
000193E4 7000                       		moveq	#0,d0
000193E6 1028 0024                  		move.b	$24(a0),d0
000193EA 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000193EE 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000193F2 4EF9 0000 DD42             		jmp	DisplaySprite
000193F8                            ; ===========================================================================
000193F8 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000193FA 0000                       		dc.w Obj74_Action-Obj74_Index
000193FC 0000                       		dc.w loc_18886-Obj74_Index
000193FE 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019400                            ; ===========================================================================
00019400                            
00019400                            Obj74_Main:				; XREF: Obj74_Index
00019400 117C 0008 0016             		move.b	#8,$16(a0)
00019406 117C 0008 0017             		move.b	#8,$17(a0)
0001940C 217C 0000 BC20 0004        		move.l	#Map_obj14,4(a0)
00019414 317C 0345 0002             		move.w	#$345,2(a0)
0001941A 117C 0004 0001             		move.b	#4,1(a0)
00019420 117C 0005 0018             		move.b	#5,$18(a0)
00019426 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001942C 117C 0008 0019             		move.b	#8,$19(a0)
00019432 5428 0024                  		addq.b	#2,$24(a0)
00019436 4A28 0028                  		tst.b	$28(a0)
0001943A 6600                       		bne.s	loc_1870A
0001943C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019442 5428 0024                  		addq.b	#2,$24(a0)
00019446 6000 0000                  		bra.w	loc_18886
0001944A                            ; ===========================================================================
0001944A                            
0001944A                            loc_1870A:
0001944A 117C 001E 0029             		move.b	#$1E,$29(a0)
00019450 303C 00AE                  		move.w	#$AE,d0
00019454 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play lava sound
0001945A                            
0001945A                            Obj74_Action:				; XREF: Obj74_Index
0001945A 7000                       		moveq	#0,d0
0001945C 1028 0025                  		move.b	$25(a0),d0
00019460 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019464 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019468 4EB9 0000 DD28             		jsr	SpeedToPos
0001946E 43F9 0000 EC22             		lea	(Ani_obj14).l,a1
00019474 4EB9 0000 AFC8             		jsr	AnimateSprite
0001947A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019480 6200                       		bhi.s	Obj74_Delete
00019482 4E75                       		rts	
00019484                            ; ===========================================================================
00019484                            
00019484                            Obj74_Delete:
00019484 4EF9 0000 DD7E             		jmp	DeleteObject
0001948A                            ; ===========================================================================
0001948A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001948C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001948E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019490 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019492                            ; ===========================================================================
00019492                            
00019492                            Obj74_Drop:				; XREF: Obj74_Index2
00019492 08E8 0001 0022             		bset	#1,$22(a0)
00019498 5328 0029                  		subq.b	#1,$29(a0)
0001949C 6A00                       		bpl.s	locret_18780
0001949E 117C 008B 0020             		move.b	#$8B,$20(a0)
000194A4 4228 0028                  		clr.b	$28(a0)
000194A8 0668 0018 0012             		addi.w	#$18,$12(a0)
000194AE 08A8 0001 0022             		bclr	#1,$22(a0)
000194B4 6100 C5E0                  		bsr.w	ObjHitFloor
000194B8 4A41                       		tst.w	d1
000194BA 6A00                       		bpl.s	locret_18780
000194BC 5428 0025                  		addq.b	#2,$25(a0)
000194C0                            
000194C0                            locret_18780:
000194C0 4E75                       		rts	
000194C2                            ; ===========================================================================
000194C2                            
000194C2                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000194C2 5568 000C                  		subq.w	#2,$C(a0)
000194C6 08E8 0007 0002             		bset	#7,2(a0)
000194CC 317C 00A0 0010             		move.w	#$A0,$10(a0)
000194D2 4268 0012                  		clr.w	$12(a0)
000194D6 3168 0008 0030             		move.w	8(a0),$30(a0)
000194DC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194E2 117C 0003 0029             		move.b	#3,$29(a0)
000194E8 4EB9 0000 E204             		jsr	SingleObjLoad2
000194EE 6600                       		bne.s	loc_187CA
000194F0 47D1                       		lea	(a1),a3
000194F2 45D0                       		lea	(a0),a2
000194F4 7003                       		moveq	#3,d0
000194F6                            
000194F6                            Obj74_Loop:
000194F6 26DA                       		move.l	(a2)+,(a3)+
000194F8 26DA                       		move.l	(a2)+,(a3)+
000194FA 26DA                       		move.l	(a2)+,(a3)+
000194FC 26DA                       		move.l	(a2)+,(a3)+
000194FE 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019502                            
00019502 4469 0010                  		neg.w	$10(a1)
00019506 5429 0025                  		addq.b	#2,$25(a1)
0001950A                            
0001950A                            loc_187CA:
0001950A 5428 0025                  		addq.b	#2,$25(a0)
0001950E 4E75                       		rts	
00019510                            
00019510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019510                            
00019510                            
00019510                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019510 4EB9 0000 E204             		jsr	SingleObjLoad2
00019516 6600                       		bne.s	locret_187EE
00019518 3368 0008 0008             		move.w	8(a0),8(a1)
0001951E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019524 12BC 0074                  		move.b	#$74,(a1)
00019528 337C 0067 0028             		move.w	#$67,$28(a1)
0001952E                            
0001952E                            locret_187EE:
0001952E 4E75                       		rts	
00019530                            ; End of function Obj74_Duplicate2
00019530                            
00019530                            ; ===========================================================================
00019530                            
00019530                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019530 6100 C564                  		bsr.w	ObjHitFloor
00019534 4A41                       		tst.w	d1
00019536 6A00                       		bpl.s	loc_18826
00019538 3028 0008                  		move.w	8(a0),d0
0001953C 0C40 1940                  		cmpi.w	#$1940,d0
00019540 6E00                       		bgt.s	loc_1882C
00019542 3228 0030                  		move.w	$30(a0),d1
00019546 B240                       		cmp.w	d0,d1
00019548 6700                       		beq.s	loc_1881E
0001954A 0240 0010                  		andi.w	#$10,d0
0001954E 0241 0010                  		andi.w	#$10,d1
00019552 B240                       		cmp.w	d0,d1
00019554 6700                       		beq.s	loc_1881E
00019556 61B8                       		bsr.s	Obj74_Duplicate2
00019558 3168 0008 0032             		move.w	8(a0),$32(a0)
0001955E                            
0001955E                            loc_1881E:
0001955E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019564 4E75                       		rts	
00019566                            ; ===========================================================================
00019566                            
00019566                            loc_18826:
00019566 5428 0025                  		addq.b	#2,$25(a0)
0001956A 4E75                       		rts	
0001956C                            ; ===========================================================================
0001956C                            
0001956C                            loc_1882C:
0001956C 5428 0024                  		addq.b	#2,$24(a0)
00019570 4E75                       		rts	
00019572                            ; ===========================================================================
00019572                            
00019572                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019572 08A8 0001 0022             		bclr	#1,$22(a0)
00019578 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001957E 3028 0008                  		move.w	8(a0),d0
00019582 9068 0032                  		sub.w	$32(a0),d0
00019586 6A00                       		bpl.s	loc_1884A
00019588 4440                       		neg.w	d0
0001958A                            
0001958A                            loc_1884A:
0001958A 0C40 0012                  		cmpi.w	#$12,d0
0001958E 6600                       		bne.s	loc_18856
00019590 08A8 0007 0002             		bclr	#7,2(a0)
00019596                            
00019596                            loc_18856:
00019596 6100 C4FE                  		bsr.w	ObjHitFloor
0001959A 4A41                       		tst.w	d1
0001959C 6A00                       		bpl.s	locret_1887E
0001959E 5328 0029                  		subq.b	#1,$29(a0)
000195A2 6700                       		beq.s	Obj74_Delete2
000195A4 4268 0012                  		clr.w	$12(a0)
000195A8 3168 0032 0008             		move.w	$32(a0),8(a0)
000195AE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000195B4 08E8 0007 0002             		bset	#7,2(a0)
000195BA 5528 0025                  		subq.b	#2,$25(a0)
000195BE                            
000195BE                            locret_1887E:
000195BE 4E75                       		rts	
000195C0                            ; ===========================================================================
000195C0                            
000195C0                            Obj74_Delete2:
000195C0 4EF9 0000 DD7E             		jmp	DeleteObject
000195C6                            ; ===========================================================================
000195C6                            
000195C6                            loc_18886:				; XREF: Obj74_Index
000195C6 08E8 0007 0002             		bset	#7,2(a0)
000195CC 5328 0029                  		subq.b	#1,$29(a0)
000195D0 6600                       		bne.s	Obj74_Animate
000195D2 117C 0001 001C             		move.b	#1,$1C(a0)
000195D8 5968 000C                  		subq.w	#4,$C(a0)
000195DC 4228 0020                  		clr.b	$20(a0)
000195E0                            
000195E0                            Obj74_Animate:
000195E0 43F9 0000 EC22             		lea	(Ani_obj14).l,a1
000195E6 4EF9 0000 AFC8             		jmp	AnimateSprite
000195EC                            ; ===========================================================================
000195EC                            
000195EC                            Obj74_Delete3:				; XREF: Obj74_Index
000195EC 4EF9 0000 DD7E             		jmp	DeleteObject
000195F2                            ; ===========================================================================
000195F2                            
000195F2                            Obj7A_Delete:
000195F2 4EF9 0000 DD7E             		jmp	DeleteObject
000195F8                            ; ===========================================================================
000195F8                            ; ---------------------------------------------------------------------------
000195F8                            ; Object 7A - Eggman (SLZ)
000195F8                            ; ---------------------------------------------------------------------------
000195F8                            
000195F8                            Obj7A:					; XREF: Obj_Index
000195F8 7000                       		moveq	#0,d0
000195FA 1028 0024                  		move.b	$24(a0),d0
000195FE 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019602 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019606                            ; ===========================================================================
00019606 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019608 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001960A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001960C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001960E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019610                            
00019610 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019613 0401 04                    		dc.b 4,	1, 4
00019616 0607 04                    		dc.b 6,	7, 4
00019619 0800 03                    		dc.b 8,	0, 3
0001961C                            ; ===========================================================================
0001961C                            
0001961C                            Obj7A_Main:				; XREF: Obj7A_Index
0001961C 317C 2188 0008             		move.w	#$2188,8(a0)
00019622 317C 0228 000C             		move.w	#$228,$C(a0)
00019628 3168 0008 0030             		move.w	8(a0),$30(a0)
0001962E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019634 117C 000F 0020             		move.b	#$F,$20(a0)
0001963A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019640 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019644 2248                       		movea.l	a0,a1
00019646 7203                       		moveq	#3,d1
00019648 6000                       		bra.s	Obj7A_LoadBoss
0001964A                            ; ===========================================================================
0001964A                            
0001964A                            Obj7A_Loop:
0001964A 4EB9 0000 E204             		jsr	SingleObjLoad2
00019650 6600                       		bne.s	loc_1895C
00019652 12BC 007A                  		move.b	#$7A,0(a1)
00019656 3368 0008 0008             		move.w	8(a0),8(a1)
0001965C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019662                            
00019662                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019662 08A8 0000 0022             		bclr	#0,$22(a0)
00019668 4229 0025                  		clr.b	$25(a1)
0001966C 135A 0024                  		move.b	(a2)+,$24(a1)
00019670 135A 001C                  		move.b	(a2)+,$1C(a1)
00019674 135A 0018                  		move.b	(a2)+,$18(a1)
00019678 237C 0001 8A52 0004        		move.l	#Map_Eggman,4(a1)
00019680 337C 0400 0002             		move.w	#$400,2(a1)
00019686 137C 0004 0001             		move.b	#4,1(a1)
0001968C 137C 0020 0019             		move.b	#$20,$19(a1)
00019692 2348 0034                  		move.l	a0,$34(a1)
00019696 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001969A                            
0001969A                            loc_1895C:
0001969A 43F8 D040                  		lea	($FFFFD040).w,a1
0001969E 45E8 002A                  		lea	$2A(a0),a2
000196A2 705E                       		moveq	#$5E,d0
000196A4 723E                       		moveq	#$3E,d1
000196A6                            
000196A6                            loc_18968:
000196A6 B011                       		cmp.b	(a1),d0
000196A8 6600                       		bne.s	loc_18974
000196AA 4A29 0028                  		tst.b	$28(a1)
000196AE 6700                       		beq.s	loc_18974
000196B0 34C9                       		move.w	a1,(a2)+
000196B2                            
000196B2                            loc_18974:
000196B2 D2FC 0040                  		adda.w	#$40,a1
000196B6 51C9 FFEE                  		dbf	d1,loc_18968
000196BA                            
000196BA                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000196BA 7000                       		moveq	#0,d0
000196BC 1028 0025                  		move.b	$25(a0),d0
000196C0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000196C4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000196C8 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
000196CE 4EB9 0000 AFC8             		jsr	AnimateSprite
000196D4 7003                       		moveq	#3,d0
000196D6 C028 0022                  		and.b	$22(a0),d0
000196DA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000196E0 8128 0001                  		or.b	d0,1(a0)
000196E4 4EF9 0000 DD42             		jmp	DisplaySprite
000196EA                            ; ===========================================================================
000196EA 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000196EC 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000196EE 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000196F0 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000196F2 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000196F4 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000196F6                            ; ===========================================================================
000196F6                            
000196F6                            loc_189B8:				; XREF: Obj7A_ShipIndex
000196F6 317C FF00 0010             		move.w	#-$100,$10(a0)
000196FC 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019702 6400                       		bcc.s	loc_189CA
00019704 5428 0025                  		addq.b	#2,$25(a0)
00019708                            
00019708                            loc_189CA:
00019708 6100 EEE8                  		bsr.w	BossMove
0001970C 1028 003F                  		move.b	$3F(a0),d0
00019710 5428 003F                  		addq.b	#2,$3F(a0)
00019714 4EB9 0000 2D64             		jsr	(CalcSine).l
0001971A EC40                       		asr.w	#6,d0
0001971C D068 0038                  		add.w	$38(a0),d0
00019720 3140 000C                  		move.w	d0,$C(a0)
00019724 3168 0030 0008             		move.w	$30(a0),8(a0)
0001972A 6000                       		bra.s	loc_189FE
0001972C                            ; ===========================================================================
0001972C                            
0001972C                            loc_189EE:
0001972C 6100 EEC4                  		bsr.w	BossMove
00019730 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019736 3168 0030 0008             		move.w	$30(a0),8(a0)
0001973C                            
0001973C                            loc_189FE:
0001973C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019742 6400                       		bcc.s	locret_18A44
00019744 4A28 0022                  		tst.b	$22(a0)
00019748 6B00                       		bmi.s	loc_18A46
0001974A 4A28 0020                  		tst.b	$20(a0)
0001974E 6600                       		bne.s	locret_18A44
00019750 4A28 003E                  		tst.b	$3E(a0)
00019754 6600                       		bne.s	loc_18A28
00019756 117C 0020 003E             		move.b	#$20,$3E(a0)
0001975C 303C 00AC                  		move.w	#$AC,d0
00019760 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019766                            
00019766                            loc_18A28:
00019766 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001976A 7000                       		moveq	#0,d0
0001976C 4A51                       		tst.w	(a1)
0001976E 6600                       		bne.s	loc_18A36
00019770 303C 0EEE                  		move.w	#$EEE,d0
00019774                            
00019774                            loc_18A36:
00019774 3280                       		move.w	d0,(a1)
00019776 5328 003E                  		subq.b	#1,$3E(a0)
0001977A 6600                       		bne.s	locret_18A44
0001977C 117C 000F 0020             		move.b	#$F,$20(a0)
00019782                            
00019782                            locret_18A44:
00019782 4E75                       		rts	
00019784                            ; ===========================================================================
00019784                            
00019784                            loc_18A46:
00019784 7064                       		moveq	#100,d0
00019786 6100 0000                  		bsr.w	AddPoints
0001978A 117C 0006 0025             		move.b	#6,$25(a0)
00019790 117C 0078 003C             		move.b	#$78,$3C(a0)
00019796 4268 0010                  		clr.w	$10(a0)
0001979A 4E75                       		rts	
0001979C                            ; ===========================================================================
0001979C                            
0001979C                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001979C 3028 0030                  		move.w	$30(a0),d0
000197A0 317C 0200 0010             		move.w	#$200,$10(a0)
000197A6 0828 0000 0022             		btst	#0,$22(a0)
000197AC 6600                       		bne.s	loc_18A7C
000197AE 4468 0010                  		neg.w	$10(a0)
000197B2 0C40 2008                  		cmpi.w	#$2008,d0
000197B6 6E00                       		bgt.s	loc_18A88
000197B8 6000                       		bra.s	loc_18A82
000197BA                            ; ===========================================================================
000197BA                            
000197BA                            loc_18A7C:
000197BA 0C40 2138                  		cmpi.w	#$2138,d0
000197BE 6D00                       		blt.s	loc_18A88
000197C0                            
000197C0                            loc_18A82:
000197C0 0868 0000 0022             		bchg	#0,$22(a0)
000197C6                            
000197C6                            loc_18A88:
000197C6 3028 0008                  		move.w	8(a0),d0
000197CA 72FF                       		moveq	#-1,d1
000197CC 7402                       		moveq	#2,d2
000197CE 45E8 002A                  		lea	$2A(a0),a2
000197D2 7828                       		moveq	#$28,d4
000197D4 4A68 0010                  		tst.w	$10(a0)
000197D8 6A00                       		bpl.s	loc_18A9E
000197DA 4444                       		neg.w	d4
000197DC                            
000197DC                            loc_18A9E:
000197DC 321A                       		move.w	(a2)+,d1
000197DE 2641                       		movea.l	d1,a3
000197E0 082B 0003 0022             		btst	#3,$22(a3)
000197E6 6600                       		bne.s	loc_18AB4
000197E8 362B 0008                  		move.w	8(a3),d3
000197EC D644                       		add.w	d4,d3
000197EE 9640                       		sub.w	d0,d3
000197F0 6700                       		beq.s	loc_18AC0
000197F2                            
000197F2                            loc_18AB4:
000197F2 51CA FFE8                  		dbf	d2,loc_18A9E
000197F6                            
000197F6 1142 0028                  		move.b	d2,$28(a0)
000197FA 6000 FF0C                  		bra.w	loc_189CA
000197FE                            ; ===========================================================================
000197FE                            
000197FE                            loc_18AC0:
000197FE 1142 0028                  		move.b	d2,$28(a0)
00019802 5428 0025                  		addq.b	#2,$25(a0)
00019806 117C 0028 003C             		move.b	#$28,$3C(a0)
0001980C 6000 FEFA                  		bra.w	loc_189CA
00019810                            ; ===========================================================================
00019810                            
00019810                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019810 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019816 6600                       		bne.s	loc_18B36
00019818 70FF                       		moveq	#-1,d0
0001981A 1028 0028                  		move.b	$28(a0),d0
0001981E 4880                       		ext.w	d0
00019820 6B00                       		bmi.s	loc_18B40
00019822 5540                       		subq.w	#2,d0
00019824 4440                       		neg.w	d0
00019826 D040                       		add.w	d0,d0
00019828 43E8 002A                  		lea	$2A(a0),a1
0001982C 3031 0000                  		move.w	(a1,d0.w),d0
00019830 2440                       		movea.l	d0,a2
00019832 43F8 D040                  		lea	($FFFFD040).w,a1
00019836 723E                       		moveq	#$3E,d1
00019838                            
00019838                            loc_18AFA:
00019838 B0A9 003C                  		cmp.l	$3C(a1),d0
0001983C 6700                       		beq.s	loc_18B40
0001983E D2FC 0040                  		adda.w	#$40,a1
00019842 51C9 FFF4                  		dbf	d1,loc_18AFA
00019846                            
00019846 2F08                       		move.l	a0,-(sp)
00019848 41D2                       		lea	(a2),a0
0001984A 4EB9 0000 E204             		jsr	SingleObjLoad2
00019850 205F                       		movea.l	(sp)+,a0
00019852 6600                       		bne.s	loc_18B40
00019854 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019858 3368 0008 0008             		move.w	8(a0),8(a1)
0001985E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019864 0669 0020 000C             		addi.w	#$20,$C(a1)
0001986A 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019870 234A 003C                  		move.l	a2,$3C(a1)
00019874                            
00019874                            loc_18B36:
00019874 5328 003C                  		subq.b	#1,$3C(a0)
00019878 6700                       		beq.s	loc_18B40
0001987A 6000 FEC0                  		bra.w	loc_189FE
0001987E                            ; ===========================================================================
0001987E                            
0001987E                            loc_18B40:
0001987E 5528 0025                  		subq.b	#2,$25(a0)
00019882 6000 FE84                  		bra.w	loc_189CA
00019886                            ; ===========================================================================
00019886                            
00019886                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019886 5328 003C                  		subq.b	#1,$3C(a0)
0001988A 6B00                       		bmi.s	loc_18B52
0001988C 6000 ED22                  		bra.w	BossDefeated
00019890                            ; ===========================================================================
00019890                            
00019890                            loc_18B52:
00019890 5428 0025                  		addq.b	#2,$25(a0)
00019894 4268 0012                  		clr.w	$12(a0)
00019898 08E8 0000 0022             		bset	#0,$22(a0)
0001989E 08A8 0007 0022             		bclr	#7,$22(a0)
000198A4 4268 0010                  		clr.w	$10(a0)
000198A8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000198AE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000198B2 6600                       		bne.s	loc_18B7C
000198B4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000198BA                            
000198BA                            loc_18B7C:
000198BA 6000 FE80                  		bra.w	loc_189FE
000198BE                            ; ===========================================================================
000198BE                            
000198BE                            loc_18B80:				; XREF: Obj7A_ShipIndex
000198BE 5228 003C                  		addq.b	#1,$3C(a0)
000198C2 6700                       		beq.s	loc_18B90
000198C4 6A00                       		bpl.s	loc_18B96
000198C6 0668 0018 0012             		addi.w	#$18,$12(a0)
000198CC 6000                       		bra.s	loc_18BC2
000198CE                            ; ===========================================================================
000198CE                            
000198CE                            loc_18B90:
000198CE 4268 0012                  		clr.w	$12(a0)
000198D2 6000                       		bra.s	loc_18BC2
000198D4                            ; ===========================================================================
000198D4                            
000198D4                            loc_18B96:
000198D4 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000198DA 6500                       		bcs.s	loc_18BAE
000198DC 6700                       		beq.s	loc_18BB4
000198DE 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000198E4 6500                       		bcs.s	loc_18BC2
000198E6 5428 0025                  		addq.b	#2,$25(a0)
000198EA 6000                       		bra.s	loc_18BC2
000198EC                            ; ===========================================================================
000198EC                            
000198EC                            loc_18BAE:
000198EC 5168 0012                  		subq.w	#8,$12(a0)
000198F0 6000                       		bra.s	loc_18BC2
000198F2                            ; ===========================================================================
000198F2                            
000198F2                            loc_18BB4:
000198F2 4268 0012                  		clr.w	$12(a0)
000198F6 303C 0084                  		move.w	#$84,d0
000198FA 4EB9 0000 11AE             		jsr	(PlaySound).l	; play SLZ music
00019900                            
00019900                            loc_18BC2:
00019900 6000 FE2A                  		bra.w	loc_189EE
00019904                            ; ===========================================================================
00019904                            
00019904                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019904 317C 0400 0010             		move.w	#$400,$10(a0)
0001990A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019910 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019916 6400                       		bcc.s	loc_18BE0
00019918 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001991C 6000                       		bra.s	loc_18BE8
0001991E                            ; ===========================================================================
0001991E                            
0001991E                            loc_18BE0:
0001991E 4A28 0001                  		tst.b	1(a0)
00019922 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019926                            
00019926                            loc_18BE8:
00019926 6100 ECCA                  		bsr.w	BossMove
0001992A 6000 FDDC                  		bra.w	loc_189CA
0001992E                            ; ===========================================================================
0001992E                            
0001992E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001992E 7000                       		moveq	#0,d0
00019930 7201                       		moveq	#1,d1
00019932 2268 0034                  		movea.l	$34(a0),a1
00019936 1029 0025                  		move.b	$25(a1),d0
0001993A 0C00 0006                  		cmpi.b	#6,d0
0001993E 6B00                       		bmi.s	loc_18C06
00019940 720A                       		moveq	#$A,d1
00019942 6000                       		bra.s	loc_18C1A
00019944                            ; ===========================================================================
00019944                            
00019944                            loc_18C06:
00019944 4A29 0020                  		tst.b	$20(a1)
00019948 6600                       		bne.s	loc_18C10
0001994A 7205                       		moveq	#5,d1
0001994C 6000                       		bra.s	loc_18C1A
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            loc_18C10:
0001994E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019954 6500                       		bcs.s	loc_18C1A
00019956 7204                       		moveq	#4,d1
00019958                            
00019958                            loc_18C1A:
00019958 1141 001C                  		move.b	d1,$1C(a0)
0001995C 0C00 000A                  		cmpi.b	#$A,d0
00019960 6600                       		bne.s	loc_18C32
00019962 117C 0006 001C             		move.b	#6,$1C(a0)
00019968 4A28 0001                  		tst.b	1(a0)
0001996C 6A00 FC84                  		bpl.w	Obj7A_Delete
00019970                            
00019970                            loc_18C32:
00019970 6000                       		bra.s	loc_18C6C
00019972                            ; ===========================================================================
00019972                            
00019972                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019972 117C 0008 001C             		move.b	#8,$1C(a0)
00019978 2268 0034                  		movea.l	$34(a0),a1
0001997C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019982 6600                       		bne.s	loc_18C56
00019984 4A28 0001                  		tst.b	1(a0)
00019988 6A00 FC68                  		bpl.w	Obj7A_Delete
0001998C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019992 6000                       		bra.s	loc_18C6C
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_18C56:
00019994 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001999A 6E00                       		bgt.s	loc_18C6C
0001999C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000199A2 6D00                       		blt.s	loc_18C6C
000199A4 117C 0007 001C             		move.b	#7,$1C(a0)
000199AA                            
000199AA                            loc_18C6C:
000199AA 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
000199B0 4EB9 0000 AFC8             		jsr	AnimateSprite
000199B6                            
000199B6                            loc_18C78:
000199B6 2268 0034                  		movea.l	$34(a0),a1
000199BA 3169 0008 0008             		move.w	8(a1),8(a0)
000199C0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000199C6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000199CC 7003                       		moveq	#3,d0
000199CE C028 0022                  		and.b	$22(a0),d0
000199D2 0228 00FC 0001             		andi.b	#-4,1(a0)
000199D8 8128 0001                  		or.b	d0,1(a0)
000199DC 4EF9 0000 DD42             		jmp	DisplaySprite
000199E2                            ; ===========================================================================
000199E2                            
000199E2                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000199E2 2268 0034                  		movea.l	$34(a0),a1
000199E6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000199EC 6600                       		bne.s	loc_18CB8
000199EE 4A28 0001                  		tst.b	1(a0)
000199F2 6A00 FBFE                  		bpl.w	Obj7A_Delete
000199F6                            
000199F6                            loc_18CB8:
000199F6 217C 0001 8B1A 0004        		move.l	#Map_BossItems,4(a0)
000199FE 317C 246C 0002             		move.w	#$246C,2(a0)
00019A04 117C 0003 001A             		move.b	#3,$1A(a0)
00019A0A 60AA                       		bra.s	loc_18C78
00019A0C                            ; ===========================================================================
00019A0C                            ; ---------------------------------------------------------------------------
00019A0C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019A0C                            ; ---------------------------------------------------------------------------
00019A0C                            
00019A0C                            Obj7B:					; XREF: Obj_Index
00019A0C 7000                       		moveq	#0,d0
00019A0E 1028 0024                  		move.b	$24(a0),d0
00019A12 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019A16 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019A1A 3028 0030                  		move.w	$30(a0),d0
00019A1E 0240 FF80                  		andi.w	#$FF80,d0
00019A22 3238 F700                  		move.w	($FFFFF700).w,d1
00019A26 0441 0080                  		subi.w	#$80,d1
00019A2A 0241 FF80                  		andi.w	#$FF80,d1
00019A2E 9041                       		sub.w	d1,d0
00019A30 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019A34 0C40 0280                  		cmpi.w	#$280,d0
00019A38 6200 FBB8                  		bhi.w	Obj7A_Delete
00019A3C 4EF9 0000 DD42             		jmp	DisplaySprite
00019A42                            ; ===========================================================================
00019A42 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019A44 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019A46 0000                       		dc.w loc_18DC6-Obj7B_Index
00019A48 0000                       		dc.w loc_18EAA-Obj7B_Index
00019A4A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019A4C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019A4E                            ; ===========================================================================
00019A4E                            
00019A4E                            Obj7B_Main:				; XREF: Obj7B_Index
00019A4E 217C 0001 234C 0004        		move.l	#Map_obj5Ea,4(a0)
00019A56 317C 0518 0002             		move.w	#$518,2(a0)
00019A5C 117C 0001 001A             		move.b	#1,$1A(a0)
00019A62 0028 0004 0001             		ori.b	#4,1(a0)
00019A68 117C 0004 0018             		move.b	#4,$18(a0)
00019A6E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A74 117C 000C 0019             		move.b	#$C,$19(a0)
00019A7A 2268 003C                  		movea.l	$3C(a0),a1
00019A7E 3169 0008 0030             		move.w	8(a1),$30(a0)
00019A84 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019A8A 08E8 0000 0022             		bset	#0,$22(a0)
00019A90 3028 0008                  		move.w	8(a0),d0
00019A94 B069 0008                  		cmp.w	8(a1),d0
00019A98 6E00                       		bgt.s	loc_18D68
00019A9A 08A8 0000 0022             		bclr	#0,$22(a0)
00019AA0 117C 0002 003A             		move.b	#2,$3A(a0)
00019AA6                            
00019AA6                            loc_18D68:
00019AA6 5428 0024                  		addq.b	#2,$24(a0)
00019AAA                            
00019AAA                            Obj7B_Fall:				; XREF: Obj7B_Index
00019AAA 4EB9 0000 DD08             		jsr	ObjectFall
00019AB0 2268 003C                  		movea.l	$3C(a0),a1
00019AB4 45F9 0000 0000             		lea	(word_19018).l,a2
00019ABA 7000                       		moveq	#0,d0
00019ABC 1029 001A                  		move.b	$1A(a1),d0
00019AC0 3228 0008                  		move.w	8(a0),d1
00019AC4 9268 0030                  		sub.w	$30(a0),d1
00019AC8 6400                       		bcc.s	loc_18D8E
00019ACA 5440                       		addq.w	#2,d0
00019ACC                            
00019ACC                            loc_18D8E:
00019ACC D040                       		add.w	d0,d0
00019ACE 3228 0034                  		move.w	$34(a0),d1
00019AD2 D272 0000                  		add.w	(a2,d0.w),d1
00019AD6 B268 000C                  		cmp.w	$C(a0),d1
00019ADA 6E00                       		bgt.s	locret_18DC4
00019ADC 2268 003C                  		movea.l	$3C(a0),a1
00019AE0 7202                       		moveq	#2,d1
00019AE2 0828 0000 0022             		btst	#0,$22(a0)
00019AE8 6700                       		beq.s	loc_18DAE
00019AEA 7200                       		moveq	#0,d1
00019AEC                            
00019AEC                            loc_18DAE:
00019AEC 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019AF2 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019AF8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019AFE 6000 0000                  		bra.w	loc_18FA2
00019B02                            ; ===========================================================================
00019B02                            
00019B02                            locret_18DC4:
00019B02 4E75                       		rts	
00019B04                            ; ===========================================================================
00019B04                            
00019B04                            loc_18DC6:				; XREF: Obj7B_Index
00019B04 2268 003C                  		movea.l	$3C(a0),a1
00019B08 7000                       		moveq	#0,d0
00019B0A 1028 003A                  		move.b	$3A(a0),d0
00019B0E 9029 003A                  		sub.b	$3A(a1),d0
00019B12 6700                       		beq.s	loc_18E2A
00019B14 6400                       		bcc.s	loc_18DDA
00019B16 4400                       		neg.b	d0
00019B18                            
00019B18                            loc_18DDA:
00019B18 323C F7E8                  		move.w	#-$818,d1
00019B1C 343C FEEC                  		move.w	#-$114,d2
00019B20 0C00 0001                  		cmpi.b	#1,d0
00019B24 6700                       		beq.s	loc_18E00
00019B26 323C F6A0                  		move.w	#-$960,d1
00019B2A 343C FF0C                  		move.w	#-$F4,d2
00019B2E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019B34 6D00                       		blt.s	loc_18E00
00019B36 323C F5E0                  		move.w	#-$A20,d1
00019B3A 343C FF80                  		move.w	#-$80,d2
00019B3E                            
00019B3E                            loc_18E00:
00019B3E 3141 0012                  		move.w	d1,$12(a0)
00019B42 3142 0010                  		move.w	d2,$10(a0)
00019B46 3028 0008                  		move.w	8(a0),d0
00019B4A 9068 0030                  		sub.w	$30(a0),d0
00019B4E 6400                       		bcc.s	loc_18E16
00019B50 4468 0010                  		neg.w	$10(a0)
00019B54                            
00019B54                            loc_18E16:
00019B54 117C 0001 001A             		move.b	#1,$1A(a0)
00019B5A 317C 0020 0028             		move.w	#$20,$28(a0)
00019B60 5428 0024                  		addq.b	#2,$24(a0)
00019B64 6000 0000                  		bra.w	loc_18EAA
00019B68                            ; ===========================================================================
00019B68                            
00019B68                            loc_18E2A:				; XREF: loc_18DC6
00019B68 45F9 0000 0000             		lea	(word_19018).l,a2
00019B6E 7000                       		moveq	#0,d0
00019B70 1029 001A                  		move.b	$1A(a1),d0
00019B74 343C 0028                  		move.w	#$28,d2
00019B78 3228 0008                  		move.w	8(a0),d1
00019B7C 9268 0030                  		sub.w	$30(a0),d1
00019B80 6400                       		bcc.s	loc_18E48
00019B82 4442                       		neg.w	d2
00019B84 5440                       		addq.w	#2,d0
00019B86                            
00019B86                            loc_18E48:
00019B86 D040                       		add.w	d0,d0
00019B88 3228 0034                  		move.w	$34(a0),d1
00019B8C D272 0000                  		add.w	(a2,d0.w),d1
00019B90 3141 000C                  		move.w	d1,$C(a0)
00019B94 D468 0030                  		add.w	$30(a0),d2
00019B98 3142 0008                  		move.w	d2,8(a0)
00019B9C 4268 000E                  		clr.w	$E(a0)
00019BA0 4268 000A                  		clr.w	$A(a0)
00019BA4 5368 0028                  		subq.w	#1,$28(a0)
00019BA8 6600                       		bne.s	loc_18E7A
00019BAA 317C 0020 0028             		move.w	#$20,$28(a0)
00019BB0 117C 0008 0024             		move.b	#8,$24(a0)
00019BB6 4E75                       		rts	
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            loc_18E7A:
00019BB8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019BBE 6600                       		bne.s	loc_18E88
00019BC0 117C 0005 001F             		move.b	#5,$1F(a0)
00019BC6                            
00019BC6                            loc_18E88:
00019BC6 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019BCC 6600                       		bne.s	loc_18E96
00019BCE 117C 0002 001F             		move.b	#2,$1F(a0)
00019BD4                            
00019BD4                            loc_18E96:
00019BD4 5328 001E                  		subq.b	#1,$1E(a0)
00019BD8 6E00                       		bgt.s	locret_18EA8
00019BDA 0868 0000 001A             		bchg	#0,$1A(a0)
00019BE0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019BE6                            
00019BE6                            locret_18EA8:
00019BE6 4E75                       		rts	
00019BE8                            ; ===========================================================================
00019BE8                            
00019BE8                            loc_18EAA:				; XREF: Obj7B_Index
00019BE8 43F8 D040                  		lea	($FFFFD040).w,a1
00019BEC 707A                       		moveq	#$7A,d0
00019BEE 7240                       		moveq	#$40,d1
00019BF0 743E                       		moveq	#$3E,d2
00019BF2                            
00019BF2                            loc_18EB4:
00019BF2 B011                       		cmp.b	(a1),d0
00019BF4 6700                       		beq.s	loc_18EC0
00019BF6 D2C1                       		adda.w	d1,a1
00019BF8 51CA FFF8                  		dbf	d2,loc_18EB4
00019BFC                            
00019BFC 6000                       		bra.s	loc_18F38
00019BFE                            ; ===========================================================================
00019BFE                            
00019BFE                            loc_18EC0:
00019BFE 3029 0008                  		move.w	8(a1),d0
00019C02 3229 000C                  		move.w	$C(a1),d1
00019C06 3428 0008                  		move.w	8(a0),d2
00019C0A 3628 000C                  		move.w	$C(a0),d3
00019C0E 45FA 0000                  		lea	byte_19022(pc),a2
00019C12 47FA 0000                  		lea	byte_19026(pc),a3
00019C16 181A                       		move.b	(a2)+,d4
00019C18 4884                       		ext.w	d4
00019C1A D044                       		add.w	d4,d0
00019C1C 181B                       		move.b	(a3)+,d4
00019C1E 4884                       		ext.w	d4
00019C20 D444                       		add.w	d4,d2
00019C22 B440                       		cmp.w	d0,d2
00019C24 6500                       		bcs.s	loc_18F38
00019C26 181A                       		move.b	(a2)+,d4
00019C28 4884                       		ext.w	d4
00019C2A D044                       		add.w	d4,d0
00019C2C 181B                       		move.b	(a3)+,d4
00019C2E 4884                       		ext.w	d4
00019C30 D444                       		add.w	d4,d2
00019C32 B042                       		cmp.w	d2,d0
00019C34 6500                       		bcs.s	loc_18F38
00019C36 181A                       		move.b	(a2)+,d4
00019C38 4884                       		ext.w	d4
00019C3A D244                       		add.w	d4,d1
00019C3C 181B                       		move.b	(a3)+,d4
00019C3E 4884                       		ext.w	d4
00019C40 D644                       		add.w	d4,d3
00019C42 B641                       		cmp.w	d1,d3
00019C44 6500                       		bcs.s	loc_18F38
00019C46 181A                       		move.b	(a2)+,d4
00019C48 4884                       		ext.w	d4
00019C4A D244                       		add.w	d4,d1
00019C4C 181B                       		move.b	(a3)+,d4
00019C4E 4884                       		ext.w	d4
00019C50 D644                       		add.w	d4,d3
00019C52 B243                       		cmp.w	d3,d1
00019C54 6500                       		bcs.s	loc_18F38
00019C56 5428 0024                  		addq.b	#2,$24(a0)
00019C5A 4268 0028                  		clr.w	$28(a0)
00019C5E 4229 0020                  		clr.b	$20(a1)
00019C62 5329 0021                  		subq.b	#1,$21(a1)
00019C66 6600                       		bne.s	loc_18F38
00019C68 08E9 0007 0022             		bset	#7,$22(a1)
00019C6E 4268 0010                  		clr.w	$10(a0)
00019C72 4268 0012                  		clr.w	$12(a0)
00019C76                            
00019C76                            loc_18F38:
00019C76 4A68 0012                  		tst.w	$12(a0)
00019C7A 6A00                       		bpl.s	loc_18F5C
00019C7C 4EB9 0000 DD08             		jsr	ObjectFall
00019C82 3028 0034                  		move.w	$34(a0),d0
00019C86 0440 002F                  		subi.w	#$2F,d0
00019C8A B068 000C                  		cmp.w	$C(a0),d0
00019C8E 6E00                       		bgt.s	loc_18F58
00019C90 4EB9 0000 DD08             		jsr	ObjectFall
00019C96                            
00019C96                            loc_18F58:
00019C96 6000 FF20                  		bra.w	loc_18E7A
00019C9A                            ; ===========================================================================
00019C9A                            
00019C9A                            loc_18F5C:
00019C9A 4EB9 0000 DD08             		jsr	ObjectFall
00019CA0 2268 003C                  		movea.l	$3C(a0),a1
00019CA4 45F9 0000 0000             		lea	(word_19018).l,a2
00019CAA 7000                       		moveq	#0,d0
00019CAC 1029 001A                  		move.b	$1A(a1),d0
00019CB0 3228 0008                  		move.w	8(a0),d1
00019CB4 9268 0030                  		sub.w	$30(a0),d1
00019CB8 6400                       		bcc.s	loc_18F7E
00019CBA 5440                       		addq.w	#2,d0
00019CBC                            
00019CBC                            loc_18F7E:
00019CBC D040                       		add.w	d0,d0
00019CBE 3228 0034                  		move.w	$34(a0),d1
00019CC2 D272 0000                  		add.w	(a2,d0.w),d1
00019CC6 B268 000C                  		cmp.w	$C(a0),d1
00019CCA 6ECA                       		bgt.s	loc_18F58
00019CCC 2268 003C                  		movea.l	$3C(a0),a1
00019CD0 7202                       		moveq	#2,d1
00019CD2 4A68 0010                  		tst.w	$10(a0)
00019CD6 6B00                       		bmi.s	loc_18F9C
00019CD8 7200                       		moveq	#0,d1
00019CDA                            
00019CDA                            loc_18F9C:
00019CDA 317C 0000 0028             		move.w	#0,$28(a0)
00019CE0                            
00019CE0                            loc_18FA2:
00019CE0 1341 003A                  		move.b	d1,$3A(a1)
00019CE4 1141 003A                  		move.b	d1,$3A(a0)
00019CE8 B229 001A                  		cmp.b	$1A(a1),d1
00019CEC 6700                       		beq.s	loc_19008
00019CEE 08A9 0003 0022             		bclr	#3,$22(a1)
00019CF4 6700                       		beq.s	loc_19008
00019CF6 4229 0025                  		clr.b	$25(a1)
00019CFA 137C 0002 0024             		move.b	#2,$24(a1)
00019D00 45F8 D000                  		lea	($FFFFD000).w,a2
00019D04 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019D0A 446A 0012                  		neg.w	$12(a2)
00019D0E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019D14 6600                       		bne.s	loc_18FDC
00019D16 E0EA 0012                  		asr	$12(a2)
00019D1A                            
00019D1A                            loc_18FDC:
00019D1A 08EA 0001 0022             		bset	#1,$22(a2)
00019D20 08AA 0003 0022             		bclr	#3,$22(a2)
00019D26 422A 003C                  		clr.b	$3C(a2)
00019D2A 2F08                       		move.l	a0,-(sp)
00019D2C 41D2                       		lea	(a2),a0
00019D2E 4EBA A07E                  		jsr	Obj01_ChkRoll
00019D32 205F                       		movea.l	(sp)+,a0
00019D34 157C 0002 0024             		move.b	#2,$24(a2)
00019D3A 303C 00CC                  		move.w	#$CC,d0
00019D3E 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019D44                            
00019D44                            loc_19008:
00019D44 4268 0010                  		clr.w	$10(a0)
00019D48 4268 0012                  		clr.w	$12(a0)
00019D4C 5428 0024                  		addq.b	#2,$24(a0)
00019D50 6000 FE66                  		bra.w	loc_18E7A
00019D54                            ; ===========================================================================
00019D54 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019D5E                            		even
00019D5E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019D62                            		even
00019D62 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019D66                            		even
00019D66                            ; ===========================================================================
00019D66                            
00019D66                            Obj7B_Explode:				; XREF: Obj7B_Index
00019D66 10BC 003F                  		move.b	#$3F,(a0)
00019D6A 4228 0024                  		clr.b	$24(a0)
00019D6E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019D74 6700                       		beq.s	Obj7B_MakeFrag
00019D76 4E75                       		rts	
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            Obj7B_MakeFrag:
00019D78 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019D7E 7203                       		moveq	#3,d1
00019D80 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019D84                            
00019D84                            Obj7B_Loop:
00019D84 4EB9 0000 E1EE             		jsr	SingleObjLoad
00019D8A 6600                       		bne.s	loc_1909A
00019D8C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019D90 137C 000A 0024             		move.b	#$A,$24(a1)
00019D96 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019D9E 137C 0003 0018             		move.b	#3,$18(a1)
00019DA4 337C 0518 0002             		move.w	#$518,2(a1)
00019DAA 3368 0008 0008             		move.w	8(a0),8(a1)
00019DB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DB6 335A 0010                  		move.w	(a2)+,$10(a1)
00019DBA 335A 0012                  		move.w	(a2)+,$12(a1)
00019DBE 137C 0098 0020             		move.b	#$98,$20(a1)
00019DC4 0029 0004 0001             		ori.b	#4,1(a1)
00019DCA 08E9 0007 0001             		bset	#7,1(a1)
00019DD0 137C 000C 0019             		move.b	#$C,$19(a1)
00019DD6                            
00019DD6                            loc_1909A:
00019DD6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019DDA                            
00019DDA 4E75                       		rts	
00019DDC                            ; ===========================================================================
00019DDC FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019DE0 FF60 FDC0                  		dc.w $FF60, $FDC0
00019DE4 0100 FCC0                  		dc.w $100, $FCC0
00019DE8 00A0 FDC0                  		dc.w $A0, $FDC0
00019DEC                            ; ===========================================================================
00019DEC                            
00019DEC                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019DEC 4EB9 0000 DD28             		jsr	SpeedToPos
00019DF2 3168 0008 0030             		move.w	8(a0),$30(a0)
00019DF8 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019DFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00019E04 7004                       		moveq	#4,d0
00019E06 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019E0A E448                       		lsr.w	#2,d0
00019E0C 1140 001A                  		move.b	d0,$1A(a0)
00019E10 4A28 0001                  		tst.b	1(a0)
00019E14 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019E18 4E75                       		rts	
00019E1A                            ; ===========================================================================
00019E1A                            ; ---------------------------------------------------------------------------
00019E1A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019E1A                            ; ---------------------------------------------------------------------------
00019E1A                            Map_obj7B:
00019E1A                            	include "_maps\obj7B.asm"
00019E1A                            ; ---------------------------------------------------------------------------
00019E1A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019E1A                            ; ---------------------------------------------------------------------------
00019E1A 0000                       		dc.w byte_190E2-Map_obj7B
00019E1C 0000                       		dc.w byte_190E8-Map_obj7B
00019E1E 01                         byte_190E2:	dc.b 1
00019E1F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019E24 01                         byte_190E8:	dc.b 1
00019E25 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019E2A                            		even
00019E2A                            		even
00019E2A                            
00019E2A                            ; ===========================================================================
00019E2A                            ; ---------------------------------------------------------------------------
00019E2A                            ; Object 75 - Eggman (SYZ)
00019E2A                            ; ---------------------------------------------------------------------------
00019E2A                            
00019E2A                            Obj75:					; XREF: Obj_Index
00019E2A 7000                       		moveq	#0,d0
00019E2C 1028 0024                  		move.b	$24(a0),d0
00019E30 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019E34 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019E38                            ; ===========================================================================
00019E38 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019E3A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019E3C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019E3E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019E40 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019E42                            
00019E42 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019E45 0401 05                    		dc.b 4,	1, 5
00019E48 0607 05                    		dc.b 6,	7, 5
00019E4B 0800 05                    		dc.b 8,	0, 5
00019E4E                            ; ===========================================================================
00019E4E                            
00019E4E                            Obj75_Main:				; XREF: Obj75_Index
00019E4E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019E54 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019E5A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019E60 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019E66 117C 000F 0020             		move.b	#$F,$20(a0)
00019E6C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019E72 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019E76 2248                       		movea.l	a0,a1
00019E78 7203                       		moveq	#3,d1
00019E7A 6000                       		bra.s	Obj75_LoadBoss
00019E7C                            ; ===========================================================================
00019E7C                            
00019E7C                            Obj75_Loop:
00019E7C 4EB9 0000 E204             		jsr	SingleObjLoad2
00019E82 6600                       		bne.s	Obj75_ShipMain
00019E84 12BC 0075                  		move.b	#$75,(a1)
00019E88 3368 0008 0008             		move.w	8(a0),8(a1)
00019E8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E94                            
00019E94                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019E94 08A8 0000 0022             		bclr	#0,$22(a0)
00019E9A 4229 0025                  		clr.b	$25(a1)
00019E9E 135A 0024                  		move.b	(a2)+,$24(a1)
00019EA2 135A 001C                  		move.b	(a2)+,$1C(a1)
00019EA6 135A 0018                  		move.b	(a2)+,$18(a1)
00019EAA 237C 0001 8A52 0004        		move.l	#Map_Eggman,4(a1)
00019EB2 337C 0400 0002             		move.w	#$400,2(a1)
00019EB8 137C 0004 0001             		move.b	#4,1(a1)
00019EBE 137C 0020 0019             		move.b	#$20,$19(a1)
00019EC4 2348 0034                  		move.l	a0,$34(a1)
00019EC8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019ECC                            
00019ECC                            Obj75_ShipMain:				; XREF: Obj75_Index
00019ECC 7000                       		moveq	#0,d0
00019ECE 1028 0025                  		move.b	$25(a0),d0
00019ED2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019ED6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019EDA 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
00019EE0 4EB9 0000 AFC8             		jsr	AnimateSprite
00019EE6 7003                       		moveq	#3,d0
00019EE8 C028 0022                  		and.b	$22(a0),d0
00019EEC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EF2 8128 0001                  		or.b	d0,1(a0)
00019EF6 4EF9 0000 DD42             		jmp	DisplaySprite
00019EFC                            ; ===========================================================================
00019EFC 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019F00 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019F04 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019F08                            ; ===========================================================================
00019F08                            
00019F08                            loc_191CC:				; XREF: Obj75_ShipIndex
00019F08 317C FF00 0010             		move.w	#-$100,$10(a0)
00019F0E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019F14 6400                       		bcc.s	loc_191DE
00019F16 5428 0025                  		addq.b	#2,$25(a0)
00019F1A                            
00019F1A                            loc_191DE:
00019F1A 1028 003F                  		move.b	$3F(a0),d0
00019F1E 5428 003F                  		addq.b	#2,$3F(a0)
00019F22 4EB9 0000 2D64             		jsr	(CalcSine).l
00019F28 E440                       		asr.w	#2,d0
00019F2A 3140 0012                  		move.w	d0,$12(a0)
00019F2E                            
00019F2E                            loc_191F2:
00019F2E 6100 E6C2                  		bsr.w	BossMove
00019F32 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019F38 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F3E                            
00019F3E                            loc_19202:
00019F3E 3028 0008                  		move.w	8(a0),d0
00019F42 0440 2C00                  		subi.w	#$2C00,d0
00019F46 EA48                       		lsr.w	#5,d0
00019F48 1140 0034                  		move.b	d0,$34(a0)
00019F4C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019F52 6400                       		bcc.s	locret_19256
00019F54 4A28 0022                  		tst.b	$22(a0)
00019F58 6B00                       		bmi.s	loc_19258
00019F5A 4A28 0020                  		tst.b	$20(a0)
00019F5E 6600                       		bne.s	locret_19256
00019F60 4A28 003E                  		tst.b	$3E(a0)
00019F64 6600                       		bne.s	loc_1923A
00019F66 117C 0020 003E             		move.b	#$20,$3E(a0)
00019F6C 303C 00AC                  		move.w	#$AC,d0
00019F70 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019F76                            
00019F76                            loc_1923A:
00019F76 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019F7A 7000                       		moveq	#0,d0
00019F7C 4A51                       		tst.w	(a1)
00019F7E 6600                       		bne.s	loc_19248
00019F80 303C 0EEE                  		move.w	#$EEE,d0
00019F84                            
00019F84                            loc_19248:
00019F84 3280                       		move.w	d0,(a1)
00019F86 5328 003E                  		subq.b	#1,$3E(a0)
00019F8A 6600                       		bne.s	locret_19256
00019F8C 117C 000F 0020             		move.b	#$F,$20(a0)
00019F92                            
00019F92                            locret_19256:
00019F92 4E75                       		rts	
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            loc_19258:				; XREF: loc_19202
00019F94 7064                       		moveq	#100,d0
00019F96 6100 0000                  		bsr.w	AddPoints
00019F9A 117C 0006 0025             		move.b	#6,$25(a0)
00019FA0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019FA6 4268 0010                  		clr.w	$10(a0)
00019FAA 4E75                       		rts	
00019FAC                            ; ===========================================================================
00019FAC                            
00019FAC                            loc_19270:				; XREF: Obj75_ShipIndex
00019FAC 3028 0030                  		move.w	$30(a0),d0
00019FB0 317C 0140 0010             		move.w	#$140,$10(a0)
00019FB6 0828 0000 0022             		btst	#0,$22(a0)
00019FBC 6600                       		bne.s	loc_1928E
00019FBE 4468 0010                  		neg.w	$10(a0)
00019FC2 0C40 2C08                  		cmpi.w	#$2C08,d0
00019FC6 6E00                       		bgt.s	loc_1929E
00019FC8 6000                       		bra.s	loc_19294
00019FCA                            ; ===========================================================================
00019FCA                            
00019FCA                            loc_1928E:
00019FCA 0C40 2D38                  		cmpi.w	#$2D38,d0
00019FCE 6D00                       		blt.s	loc_1929E
00019FD0                            
00019FD0                            loc_19294:
00019FD0 0868 0000 0022             		bchg	#0,$22(a0)
00019FD6 4228 003D                  		clr.b	$3D(a0)
00019FDA                            
00019FDA                            loc_1929E:
00019FDA 0440 2C10                  		subi.w	#$2C10,d0
00019FDE 0240 001F                  		andi.w	#$1F,d0
00019FE2 0440 001F                  		subi.w	#$1F,d0
00019FE6 6A00                       		bpl.s	loc_192AE
00019FE8 4440                       		neg.w	d0
00019FEA                            
00019FEA                            loc_192AE:
00019FEA 5340                       		subq.w	#1,d0
00019FEC 6E00                       		bgt.s	loc_192E8
00019FEE 4A28 003D                  		tst.b	$3D(a0)
00019FF2 6600                       		bne.s	loc_192E8
00019FF4 3238 D008                  		move.w	($FFFFD008).w,d1
00019FF8 0441 2C00                  		subi.w	#$2C00,d1
00019FFC EA41                       		asr.w	#5,d1
00019FFE B228 0034                  		cmp.b	$34(a0),d1
0001A002 6600                       		bne.s	loc_192E8
0001A004 7000                       		moveq	#0,d0
0001A006 1028 0034                  		move.b	$34(a0),d0
0001A00A EB40                       		asl.w	#5,d0
0001A00C 0640 2C10                  		addi.w	#$2C10,d0
0001A010 3140 0030                  		move.w	d0,$30(a0)
0001A014 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A018 5428 0025                  		addq.b	#2,$25(a0)
0001A01C 4268 0028                  		clr.w	$28(a0)
0001A020 4268 0010                  		clr.w	$10(a0)
0001A024                            
0001A024                            loc_192E8:
0001A024 6000 FEF4                  		bra.w	loc_191DE
0001A028                            ; ===========================================================================
0001A028                            
0001A028                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A028 7000                       		moveq	#0,d0
0001A02A 1028 0028                  		move.b	$28(a0),d0
0001A02E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A032 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A036                            ; ===========================================================================
0001A036 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A038 0000                       		dc.w loc_19348-off_192FA
0001A03A 0000                       		dc.w loc_1938E-off_192FA
0001A03C 0000                       		dc.w loc_193D0-off_192FA
0001A03E                            ; ===========================================================================
0001A03E                            
0001A03E                            loc_19302:				; XREF: off_192FA
0001A03E 317C 0180 0012             		move.w	#$180,$12(a0)
0001A044 3028 0038                  		move.w	$38(a0),d0
0001A048 0C40 0556                  		cmpi.w	#$556,d0
0001A04C 6500                       		bcs.s	loc_19344
0001A04E 317C 0556 0038             		move.w	#$556,$38(a0)
0001A054 4268 003C                  		clr.w	$3C(a0)
0001A058 70FF                       		moveq	#-1,d0
0001A05A 3028 0036                  		move.w	$36(a0),d0
0001A05E 6700                       		beq.s	loc_1933C
0001A060 2240                       		movea.l	d0,a1
0001A062 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A068 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A06E 2348 0034                  		move.l	a0,$34(a1)
0001A072 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A078                            
0001A078                            loc_1933C:
0001A078 4268 0012                  		clr.w	$12(a0)
0001A07C 5428 0028                  		addq.b	#2,$28(a0)
0001A080                            
0001A080                            loc_19344:
0001A080 6000 FEAC                  		bra.w	loc_191F2
0001A084                            ; ===========================================================================
0001A084                            
0001A084                            loc_19348:				; XREF: off_192FA
0001A084 5368 003C                  		subq.w	#1,$3C(a0)
0001A088 6A00                       		bpl.s	loc_19366
0001A08A 5428 0028                  		addq.b	#2,$28(a0)
0001A08E 317C F800 0012             		move.w	#-$800,$12(a0)
0001A094 4A68 0036                  		tst.w	$36(a0)
0001A098 6600                       		bne.s	loc_19362
0001A09A E0E8 0012                  		asr	$12(a0)
0001A09E                            
0001A09E                            loc_19362:
0001A09E 7000                       		moveq	#0,d0
0001A0A0 6000                       		bra.s	loc_1937C
0001A0A2                            ; ===========================================================================
0001A0A2                            
0001A0A2                            loc_19366:
0001A0A2 7000                       		moveq	#0,d0
0001A0A4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A0AA 6E00                       		bgt.s	loc_1937C
0001A0AC 7002                       		moveq	#2,d0
0001A0AE 0828 0001 003D             		btst	#1,$3D(a0)
0001A0B4 6700                       		beq.s	loc_1937C
0001A0B6 4440                       		neg.w	d0
0001A0B8                            
0001A0B8                            loc_1937C:
0001A0B8 D068 0038                  		add.w	$38(a0),d0
0001A0BC 3140 000C                  		move.w	d0,$C(a0)
0001A0C0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A0C6 6000 FE76                  		bra.w	loc_19202
0001A0CA                            ; ===========================================================================
0001A0CA                            
0001A0CA                            loc_1938E:				; XREF: off_192FA
0001A0CA 303C 04DA                  		move.w	#$4DA,d0
0001A0CE 4A68 0036                  		tst.w	$36(a0)
0001A0D2 6700                       		beq.s	loc_1939C
0001A0D4 0440 0018                  		subi.w	#$18,d0
0001A0D8                            
0001A0D8                            loc_1939C:
0001A0D8 B068 0038                  		cmp.w	$38(a0),d0
0001A0DC 6D00                       		blt.s	loc_193BE
0001A0DE 317C 0008 003C             		move.w	#8,$3C(a0)
0001A0E4 4A68 0036                  		tst.w	$36(a0)
0001A0E8 6700                       		beq.s	loc_193B4
0001A0EA 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A0F0                            
0001A0F0                            loc_193B4:
0001A0F0 5428 0028                  		addq.b	#2,$28(a0)
0001A0F4 4268 0012                  		clr.w	$12(a0)
0001A0F8 6000                       		bra.s	loc_193CC
0001A0FA                            ; ===========================================================================
0001A0FA                            
0001A0FA                            loc_193BE:
0001A0FA 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A100 6C00                       		bge.s	loc_193CC
0001A102 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A108                            
0001A108                            loc_193CC:
0001A108 6000 FE24                  		bra.w	loc_191F2
0001A10C                            ; ===========================================================================
0001A10C                            
0001A10C                            loc_193D0:				; XREF: off_192FA
0001A10C 5368 003C                  		subq.w	#1,$3C(a0)
0001A110 6E00                       		bgt.s	loc_19406
0001A112 6B00                       		bmi.s	loc_193EE
0001A114 70FF                       		moveq	#-1,d0
0001A116 3028 0036                  		move.w	$36(a0),d0
0001A11A 6700                       		beq.s	loc_193E8
0001A11C 2240                       		movea.l	d0,a1
0001A11E 137C 000A 0029             		move.b	#$A,$29(a1)
0001A124                            
0001A124                            loc_193E8:
0001A124 4268 0036                  		clr.w	$36(a0)
0001A128 6000                       		bra.s	loc_19406
0001A12A                            ; ===========================================================================
0001A12A                            
0001A12A                            loc_193EE:
0001A12A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A130 6600                       		bne.s	loc_19406
0001A132 4228 0029                  		clr.b	$29(a0)
0001A136 5528 0025                  		subq.b	#2,$25(a0)
0001A13A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A140 6000                       		bra.s	loc_19446
0001A142                            ; ===========================================================================
0001A142                            
0001A142                            loc_19406:
0001A142 7001                       		moveq	#1,d0
0001A144 4A68 0036                  		tst.w	$36(a0)
0001A148 6700                       		beq.s	loc_19410
0001A14A 7002                       		moveq	#2,d0
0001A14C                            
0001A14C                            loc_19410:
0001A14C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A152 6700                       		beq.s	loc_19424
0001A154 6D00                       		blt.s	loc_1941C
0001A156 4440                       		neg.w	d0
0001A158                            
0001A158                            loc_1941C:
0001A158 4A68 0036                  		tst.w	$36(a0)
0001A15C D168 0038                  		add.w	d0,$38(a0)
0001A160                            
0001A160                            loc_19424:
0001A160 7000                       		moveq	#0,d0
0001A162 4A68 0036                  		tst.w	$36(a0)
0001A166 6700                       		beq.s	loc_19438
0001A168 7002                       		moveq	#2,d0
0001A16A 0828 0000 003D             		btst	#0,$3D(a0)
0001A170 6700                       		beq.s	loc_19438
0001A172 4440                       		neg.w	d0
0001A174                            
0001A174                            loc_19438:
0001A174 D068 0038                  		add.w	$38(a0),d0
0001A178 3140 000C                  		move.w	d0,$C(a0)
0001A17C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A182                            
0001A182                            loc_19446:
0001A182 6000 FDBA                  		bra.w	loc_19202
0001A186                            
0001A186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A186                            
0001A186                            
0001A186                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A186 4268 0036                  		clr.w	$36(a0)
0001A18A 43F8 D040                  		lea	($FFFFD040).w,a1
0001A18E 703E                       		moveq	#$3E,d0
0001A190 7276                       		moveq	#$76,d1
0001A192 1428 0034                  		move.b	$34(a0),d2
0001A196                            
0001A196                            Obj75_FindLoop:
0001A196 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A198 6600                       		bne.s	loc_1946A	; if not, branch
0001A19A B429 0028                  		cmp.b	$28(a1),d2
0001A19E 6600                       		bne.s	loc_1946A
0001A1A0 3149 0036                  		move.w	a1,$36(a0)
0001A1A4 6000                       		bra.s	locret_19472
0001A1A6                            ; ===========================================================================
0001A1A6                            
0001A1A6                            loc_1946A:
0001A1A6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A1AA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A1AE                            
0001A1AE                            locret_19472:
0001A1AE 4E75                       		rts	
0001A1B0                            ; End of function Obj75_FindBlocks
0001A1B0                            
0001A1B0                            ; ===========================================================================
0001A1B0                            
0001A1B0                            loc_19474:				; XREF: Obj75_ShipIndex
0001A1B0 5368 003C                  		subq.w	#1,$3C(a0)
0001A1B4 6B00                       		bmi.s	loc_1947E
0001A1B6 6000 E3F8                  		bra.w	BossDefeated
0001A1BA                            ; ===========================================================================
0001A1BA                            
0001A1BA                            loc_1947E:
0001A1BA 5428 0025                  		addq.b	#2,$25(a0)
0001A1BE 4268 0012                  		clr.w	$12(a0)
0001A1C2 08E8 0000 0022             		bset	#0,$22(a0)
0001A1C8 08A8 0007 0022             		bclr	#7,$22(a0)
0001A1CE 4268 0010                  		clr.w	$10(a0)
0001A1D2 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A1D8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A1DC 6600                       		bne.s	loc_194A8
0001A1DE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A1E4                            
0001A1E4                            loc_194A8:
0001A1E4 6000 FD58                  		bra.w	loc_19202
0001A1E8                            ; ===========================================================================
0001A1E8                            
0001A1E8                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A1E8 5268 003C                  		addq.w	#1,$3C(a0)
0001A1EC 6700                       		beq.s	loc_194BC
0001A1EE 6A00                       		bpl.s	loc_194C2
0001A1F0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A1F6 6000                       		bra.s	loc_194EE
0001A1F8                            ; ===========================================================================
0001A1F8                            
0001A1F8                            loc_194BC:
0001A1F8 4268 0012                  		clr.w	$12(a0)
0001A1FC 6000                       		bra.s	loc_194EE
0001A1FE                            ; ===========================================================================
0001A1FE                            
0001A1FE                            loc_194C2:
0001A1FE 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A204 6500                       		bcs.s	loc_194DA
0001A206 6700                       		beq.s	loc_194E0
0001A208 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A20E 6500                       		bcs.s	loc_194EE
0001A210 5428 0025                  		addq.b	#2,$25(a0)
0001A214 6000                       		bra.s	loc_194EE
0001A216                            ; ===========================================================================
0001A216                            
0001A216                            loc_194DA:
0001A216 5168 0012                  		subq.w	#8,$12(a0)
0001A21A 6000                       		bra.s	loc_194EE
0001A21C                            ; ===========================================================================
0001A21C                            
0001A21C                            loc_194E0:
0001A21C 4268 0012                  		clr.w	$12(a0)
0001A220 303C 0085                  		move.w	#$85,d0
0001A224 4EB9 0000 11AE             		jsr	(PlaySound).l	; play SYZ music
0001A22A                            
0001A22A                            loc_194EE:
0001A22A 6000 FD02                  		bra.w	loc_191F2
0001A22E                            ; ===========================================================================
0001A22E                            
0001A22E                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A22E 317C 0400 0010             		move.w	#$400,$10(a0)
0001A234 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A23A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A240 6400                       		bcc.s	loc_1950C
0001A242 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A246 6000                       		bra.s	loc_19512
0001A248                            ; ===========================================================================
0001A248                            
0001A248                            loc_1950C:
0001A248 4A28 0001                  		tst.b	1(a0)
0001A24C 6A00                       		bpl.s	Obj75_ShipDelete
0001A24E                            
0001A24E                            loc_19512:
0001A24E 6100 E3A2                  		bsr.w	BossMove
0001A252 6000 FCC6                  		bra.w	loc_191DE
0001A256                            ; ===========================================================================
0001A256                            
0001A256                            Obj75_ShipDelete:
0001A256 4EF9 0000 DD7E             		jmp	DeleteObject
0001A25C                            ; ===========================================================================
0001A25C                            
0001A25C                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A25C 7201                       		moveq	#1,d1
0001A25E 2268 0034                  		movea.l	$34(a0),a1
0001A262 7000                       		moveq	#0,d0
0001A264 1029 0025                  		move.b	$25(a1),d0
0001A268 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A26C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A270 1141 001C                  		move.b	d1,$1C(a0)
0001A274 1010                       		move.b	(a0),d0
0001A276 B011                       		cmp.b	(a1),d0
0001A278 6600                       		bne.s	Obj75_FaceDelete
0001A27A 6000                       		bra.s	loc_195BE
0001A27C                            ; ===========================================================================
0001A27C                            
0001A27C                            Obj75_FaceDelete:
0001A27C 4EF9 0000 DD7E             		jmp	DeleteObject
0001A282                            ; ===========================================================================
0001A282 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A286 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A28A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A28E                            ; ===========================================================================
0001A28E                            
0001A28E                            loc_19552:				; XREF: off_19546
0001A28E 720A                       		moveq	#$A,d1
0001A290 4E75                       		rts	
0001A292                            ; ===========================================================================
0001A292                            
0001A292                            loc_19556:				; XREF: off_19546
0001A292 7206                       		moveq	#6,d1
0001A294 4E75                       		rts	
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            loc_1955A:				; XREF: off_19546
0001A296 7000                       		moveq	#0,d0
0001A298 1029 0028                  		move.b	$28(a1),d0
0001A29C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A2A0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A2A4                            ; ===========================================================================
0001A2A4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A2A8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A2AC                            ; ===========================================================================
0001A2AC                            
0001A2AC                            loc_19570:				; XREF: off_19568
0001A2AC 6000                       		bra.s	loc_19574
0001A2AE                            ; ===========================================================================
0001A2AE                            
0001A2AE                            loc_19572:				; XREF: off_19568
0001A2AE 7206                       		moveq	#6,d1
0001A2B0                            
0001A2B0                            loc_19574:				; XREF: off_19546
0001A2B0 4A29 0020                  		tst.b	$20(a1)
0001A2B4 6600                       		bne.s	loc_1957E
0001A2B6 7205                       		moveq	#5,d1
0001A2B8 4E75                       		rts	
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            loc_1957E:
0001A2BA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A2C0 6500                       		bcs.s	locret_19588
0001A2C2 7204                       		moveq	#4,d1
0001A2C4                            
0001A2C4                            locret_19588:
0001A2C4 4E75                       		rts	
0001A2C6                            ; ===========================================================================
0001A2C6                            
0001A2C6                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A2C6 117C 0007 001C             		move.b	#7,$1C(a0)
0001A2CC 2268 0034                  		movea.l	$34(a0),a1
0001A2D0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A2D6 6600                       		bne.s	loc_195AA
0001A2D8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A2DE 4A28 0001                  		tst.b	1(a0)
0001A2E2 6A00                       		bpl.s	Obj75_FlameDelete
0001A2E4 6000                       		bra.s	loc_195B6
0001A2E6                            ; ===========================================================================
0001A2E6                            
0001A2E6                            loc_195AA:
0001A2E6 4A69 0010                  		tst.w	$10(a1)
0001A2EA 6700                       		beq.s	loc_195B6
0001A2EC 117C 0008 001C             		move.b	#8,$1C(a0)
0001A2F2                            
0001A2F2                            loc_195B6:
0001A2F2 6000                       		bra.s	loc_195BE
0001A2F4                            ; ===========================================================================
0001A2F4                            
0001A2F4                            Obj75_FlameDelete:
0001A2F4 4EF9 0000 DD7E             		jmp	DeleteObject
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            loc_195BE:
0001A2FA 43F9 0001 8A02             		lea	(Ani_Eggman).l,a1
0001A300 4EB9 0000 AFC8             		jsr	AnimateSprite
0001A306 2268 0034                  		movea.l	$34(a0),a1
0001A30A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A310 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A316                            
0001A316                            loc_195DA:
0001A316 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A31C 7003                       		moveq	#3,d0
0001A31E C028 0022                  		and.b	$22(a0),d0
0001A322 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A328 8128 0001                  		or.b	d0,1(a0)
0001A32C 4EF9 0000 DD42             		jmp	DisplaySprite
0001A332                            ; ===========================================================================
0001A332                            
0001A332                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A332 217C 0001 8B1A 0004        		move.l	#Map_BossItems,4(a0)
0001A33A 317C 246C 0002             		move.w	#$246C,2(a0)
0001A340 117C 0005 001A             		move.b	#5,$1A(a0)
0001A346 2268 0034                  		movea.l	$34(a0),a1
0001A34A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A350 6600                       		bne.s	loc_1961C
0001A352 4A28 0001                  		tst.b	1(a0)
0001A356 6A00                       		bpl.s	Obj75_SpikeDelete
0001A358                            
0001A358                            loc_1961C:
0001A358 3169 0008 0008             		move.w	8(a1),8(a0)
0001A35E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A364 3028 003C                  		move.w	$3C(a0),d0
0001A368 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A36E 6600                       		bne.s	loc_19652
0001A370 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A376 6700                       		beq.s	loc_1964C
0001A378 4A29 0028                  		tst.b	$28(a1)
0001A37C 6600                       		bne.s	loc_19658
0001A37E 0C40 0094                  		cmpi.w	#$94,d0
0001A382 6C00                       		bge.s	loc_19658
0001A384 5E40                       		addq.w	#7,d0
0001A386 6000                       		bra.s	loc_19658
0001A388                            ; ===========================================================================
0001A388                            
0001A388                            loc_1964C:
0001A388 4A69 003C                  		tst.w	$3C(a1)
0001A38C 6A00                       		bpl.s	loc_19658
0001A38E                            
0001A38E                            loc_19652:
0001A38E 4A40                       		tst.w	d0
0001A390 6F00                       		ble.s	loc_19658
0001A392 5B40                       		subq.w	#5,d0
0001A394                            
0001A394                            loc_19658:
0001A394 3140 003C                  		move.w	d0,$3C(a0)
0001A398 E440                       		asr.w	#2,d0
0001A39A D168 000C                  		add.w	d0,$C(a0)
0001A39E 117C 0008 0019             		move.b	#8,$19(a0)
0001A3A4 117C 000C 0016             		move.b	#$C,$16(a0)
0001A3AA 4228 0020                  		clr.b	$20(a0)
0001A3AE 2268 0034                  		movea.l	$34(a0),a1
0001A3B2 4A29 0020                  		tst.b	$20(a1)
0001A3B6 6700                       		beq.s	loc_19688
0001A3B8 4A29 0029                  		tst.b	$29(a1)
0001A3BC 6600                       		bne.s	loc_19688
0001A3BE 117C 0084 0020             		move.b	#$84,$20(a0)
0001A3C4                            
0001A3C4                            loc_19688:
0001A3C4 6000 FF50                  		bra.w	loc_195DA
0001A3C8                            ; ===========================================================================
0001A3C8                            
0001A3C8                            Obj75_SpikeDelete:
0001A3C8 4EF9 0000 DD7E             		jmp	DeleteObject
0001A3CE                            ; ===========================================================================
0001A3CE                            ; ---------------------------------------------------------------------------
0001A3CE                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A3CE                            ; ---------------------------------------------------------------------------
0001A3CE                            
0001A3CE                            Obj76:					; XREF: Obj_Index
0001A3CE 7000                       		moveq	#0,d0
0001A3D0 1028 0024                  		move.b	$24(a0),d0
0001A3D4 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A3D8 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A3DC                            ; ===========================================================================
0001A3DC 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A3DE 0000                       		dc.w Obj76_Action-Obj76_Index
0001A3E0 0000                       		dc.w loc_19762-Obj76_Index
0001A3E2                            ; ===========================================================================
0001A3E2                            
0001A3E2                            Obj76_Main:				; XREF: Obj76_Index
0001A3E2 7800                       		moveq	#0,d4
0001A3E4 3A3C 2C10                  		move.w	#$2C10,d5
0001A3E8 7C09                       		moveq	#9,d6
0001A3EA 43D0                       		lea	(a0),a1
0001A3EC 6000                       		bra.s	Obj76_MakeBlock
0001A3EE                            ; ===========================================================================
0001A3EE                            
0001A3EE                            Obj76_Loop:
0001A3EE 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001A3F4 6600                       		bne.s	Obj76_ExitLoop
0001A3F6                            
0001A3F6                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A3F6 12BC 0076                  		move.b	#$76,(a1)
0001A3FA 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A402 337C 4000 0002             		move.w	#$4000,2(a1)
0001A408 137C 0004 0001             		move.b	#4,1(a1)
0001A40E 137C 0010 0019             		move.b	#$10,$19(a1)
0001A414 137C 0010 0016             		move.b	#$10,$16(a1)
0001A41A 137C 0003 0018             		move.b	#3,$18(a1)
0001A420 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A424 337C 0582 000C             		move.w	#$582,$C(a1)
0001A42A 3344 0028                  		move.w	d4,$28(a1)
0001A42E 0644 0101                  		addi.w	#$101,d4
0001A432 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A436 5429 0024                  		addq.b	#2,$24(a1)
0001A43A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A43E                            
0001A43E                            Obj76_ExitLoop:
0001A43E 4E75                       		rts	
0001A440                            ; ===========================================================================
0001A440                            
0001A440                            Obj76_Action:				; XREF: Obj76_Index
0001A440 1028 0029                  		move.b	$29(a0),d0
0001A444 B028 0028                  		cmp.b	$28(a0),d0
0001A448 6700                       		beq.s	Obj76_Solid
0001A44A 4A00                       		tst.b	d0
0001A44C 6B00                       		bmi.s	loc_19718
0001A44E                            
0001A44E                            loc_19712:
0001A44E 6100 0000                  		bsr.w	Obj76_Break
0001A452 6000                       		bra.s	Obj76_Display
0001A454                            ; ===========================================================================
0001A454                            
0001A454                            loc_19718:
0001A454 2268 0034                  		movea.l	$34(a0),a1
0001A458 4A29 0021                  		tst.b	$21(a1)
0001A45C 67F0                       		beq.s	loc_19712
0001A45E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A464 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A46A 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A470 B2C8                       		cmpa.w	a0,a1
0001A472 6500                       		bcs.s	Obj76_Display
0001A474 3029 0012                  		move.w	$12(a1),d0
0001A478 48C0                       		ext.l	d0
0001A47A E080                       		asr.l	#8,d0
0001A47C D168 000C                  		add.w	d0,$C(a0)
0001A480 6000                       		bra.s	Obj76_Display
0001A482                            ; ===========================================================================
0001A482                            
0001A482                            Obj76_Solid:				; XREF: Obj76_Action
0001A482 323C 001B                  		move.w	#$1B,d1
0001A486 343C 0010                  		move.w	#$10,d2
0001A48A 363C 0011                  		move.w	#$11,d3
0001A48E 3828 0008                  		move.w	8(a0),d4
0001A492 4EB9 0001 02FA             		jsr	SolidObject
0001A498                            
0001A498                            Obj76_Display:				; XREF: Obj76_Action
0001A498 4EF9 0000 DD42             		jmp	DisplaySprite
0001A49E                            ; ===========================================================================
0001A49E                            
0001A49E                            loc_19762:				; XREF: Obj76_Index
0001A49E 4A28 0001                  		tst.b	1(a0)
0001A4A2 6A00                       		bpl.s	Obj76_Delete
0001A4A4 4EB9 0000 DD08             		jsr	ObjectFall
0001A4AA 4EF9 0000 DD42             		jmp	DisplaySprite
0001A4B0                            ; ===========================================================================
0001A4B0                            
0001A4B0                            Obj76_Delete:
0001A4B0 4EF9 0000 DD7E             		jmp	DeleteObject
0001A4B6                            
0001A4B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A4B6                            
0001A4B6                            
0001A4B6                            Obj76_Break:				; XREF: Obj76_Action
0001A4B6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A4BA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A4BE 7801                       		moveq	#1,d4
0001A4C0 7203                       		moveq	#3,d1
0001A4C2 7438                       		moveq	#$38,d2
0001A4C4 5428 0024                  		addq.b	#2,$24(a0)
0001A4C8 117C 0008 0019             		move.b	#8,$19(a0)
0001A4CE 117C 0008 0016             		move.b	#8,$16(a0)
0001A4D4 43D0                       		lea	(a0),a1
0001A4D6 6000                       		bra.s	Obj76_MakeFrag
0001A4D8                            ; ===========================================================================
0001A4D8                            
0001A4D8                            Obj76_LoopFrag:
0001A4D8 4EB9 0000 E204             		jsr	SingleObjLoad2
0001A4DE 6600                       		bne.s	loc_197D4
0001A4E0                            
0001A4E0                            Obj76_MakeFrag:
0001A4E0 45D0                       		lea	(a0),a2
0001A4E2 47D1                       		lea	(a1),a3
0001A4E4 7603                       		moveq	#3,d3
0001A4E6                            
0001A4E6                            loc_197AA:
0001A4E6 26DA                       		move.l	(a2)+,(a3)+
0001A4E8 26DA                       		move.l	(a2)+,(a3)+
0001A4EA 26DA                       		move.l	(a2)+,(a3)+
0001A4EC 26DA                       		move.l	(a2)+,(a3)+
0001A4EE 51CB FFF6                  		dbf	d3,loc_197AA
0001A4F2                            
0001A4F2 335C 0010                  		move.w	(a4)+,$10(a1)
0001A4F6 335C 0012                  		move.w	(a4)+,$12(a1)
0001A4FA 361D                       		move.w	(a5)+,d3
0001A4FC D769 0008                  		add.w	d3,8(a1)
0001A500 361D                       		move.w	(a5)+,d3
0001A502 D769 000C                  		add.w	d3,$C(a1)
0001A506 1344 001A                  		move.b	d4,$1A(a1)
0001A50A 5244                       		addq.w	#1,d4
0001A50C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A510                            
0001A510                            loc_197D4:
0001A510 303C 00CB                  		move.w	#$CB,d0
0001A514 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A51A                            ; End of function Obj76_Break
0001A51A                            
0001A51A                            ; ===========================================================================
0001A51A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A51E 0180 FE00                  		dc.w $180, $FE00
0001A522 FF00 FF00                  		dc.w $FF00, $FF00
0001A526 0100 FF00                  		dc.w $100, $FF00
0001A52A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A52E 0010 0000                  		dc.w $10, 0
0001A532 0000 0010                  		dc.w 0,	$10
0001A536 0010 0010                  		dc.w $10, $10
0001A53A                            ; ---------------------------------------------------------------------------
0001A53A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A53A                            ; ---------------------------------------------------------------------------
0001A53A                            Map_obj76:
0001A53A                            	include "_maps\obj76.asm"
0001A53A                            ; ---------------------------------------------------------------------------
0001A53A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A53A                            ; ---------------------------------------------------------------------------
0001A53A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A53E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A542 0000                       		dc.w byte_19826-Map_obj76
0001A544 02                         byte_19808:	dc.b 2
0001A545 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A54A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A54F 00                         		dc.b 0
0001A550 01                         byte_19814:	dc.b 1
0001A551 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A556 01                         byte_1981A:	dc.b 1
0001A557 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A55C 01                         byte_19820:	dc.b 1
0001A55D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A562 01                         byte_19826:	dc.b 1
0001A563 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A568                            		even
0001A568                            		even
0001A568                            
0001A568                            ; ===========================================================================
0001A568                            
0001A568                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A568 4EF9 0000 DD7E             		jmp	DeleteObject
0001A56E                            ; ===========================================================================
0001A56E                            ; ---------------------------------------------------------------------------
0001A56E                            ; Object 82 - Eggman (SBZ2)
0001A56E                            ; ---------------------------------------------------------------------------
0001A56E                            
0001A56E                            Obj82:					; XREF: Obj_Index
0001A56E 7000                       		moveq	#0,d0
0001A570 1028 0024                  		move.b	$24(a0),d0
0001A574 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A578 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A57C                            ; ===========================================================================
0001A57C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A57E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A580 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A582                            
0001A582 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A585 0400 03                    		dc.b 4,	0, 3
0001A588                            ; ===========================================================================
0001A588                            
0001A588                            Obj82_Main:				; XREF: Obj82_Index
0001A588 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A58C 317C 2160 0008             		move.w	#$2160,8(a0)
0001A592 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A598 117C 000F 0020             		move.b	#$F,$20(a0)
0001A59E 117C 0010 0021             		move.b	#$10,$21(a0)
0001A5A4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A5AA 4228 0025                  		clr.b	$25(a0)
0001A5AE 115A 0024                  		move.b	(a2)+,$24(a0)
0001A5B2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A5B6 115A 0018                  		move.b	(a2)+,$18(a0)
0001A5BA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A5C2 317C 0400 0002             		move.w	#$400,2(a0)
0001A5C8 117C 0004 0001             		move.b	#4,1(a0)
0001A5CE 08E8 0007 0001             		bset	#7,1(a0)
0001A5D4 117C 0020 0019             		move.b	#$20,$19(a0)
0001A5DA 4EB9 0000 E204             		jsr	SingleObjLoad2
0001A5E0 6600                       		bne.s	Obj82_Eggman
0001A5E2 2348 0034                  		move.l	a0,$34(a1)
0001A5E6 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A5EA 337C 2130 0008             		move.w	#$2130,8(a1)
0001A5F0 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A5F6 4228 0025                  		clr.b	$25(a0)
0001A5FA 135A 0024                  		move.b	(a2)+,$24(a1)
0001A5FE 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A602 135A 0018                  		move.b	(a2)+,$18(a1)
0001A606 237C 0000 C750 0004        		move.l	#Map_obj32,4(a1)
0001A60E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A614 137C 0004 0001             		move.b	#4,1(a1)
0001A61A 08E9 0007 0001             		bset	#7,1(a1)
0001A620 137C 0010 0019             		move.b	#$10,$19(a1)
0001A626 137C 0000 001A             		move.b	#0,$1A(a1)
0001A62C                            
0001A62C                            Obj82_Eggman:				; XREF: Obj82_Index
0001A62C 7000                       		moveq	#0,d0
0001A62E 1028 0025                  		move.b	$25(a0),d0
0001A632 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A636 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A63A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A63E 4EB9 0000 AFC8             		jsr	AnimateSprite
0001A644 4EF9 0000 DD42             		jmp	DisplaySprite
0001A64A                            ; ===========================================================================
0001A64A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A64C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A64E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A650 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A652                            ; ===========================================================================
0001A652                            
0001A652                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A652 3028 0008                  		move.w	8(a0),d0
0001A656 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A65A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A65E 6400                       		bcc.s	loc_19934	; if not, branch
0001A660 5428 0025                  		addq.b	#2,$25(a0)
0001A664 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A66A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A670                            
0001A670                            loc_19934:				; XREF: Obj82_EggIndex
0001A670 4EF9 0000 DD28             		jmp	SpeedToPos
0001A676                            ; ===========================================================================
0001A676                            
0001A676                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A676 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A67A 6600                       		bne.s	loc_19954	; if time remains, branch
0001A67C 5428 0025                  		addq.b	#2,$25(a0)
0001A680 117C 0002 001C             		move.b	#2,$1C(a0)
0001A686 5868 000C                  		addq.w	#4,$C(a0)
0001A68A 317C 000F 003C             		move.w	#15,$3C(a0)
0001A690                            
0001A690                            loc_19954:
0001A690 60DE                       		bra.s	loc_19934
0001A692                            ; ===========================================================================
0001A692                            
0001A692                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A692 5368 003C                  		subq.w	#1,$3C(a0)
0001A696 6E00                       		bgt.s	loc_199D0
0001A698 6600                       		bne.s	loc_1996A
0001A69A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A6A0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A6A6                            
0001A6A6                            loc_1996A:
0001A6A6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A6AC 6E00                       		bgt.s	loc_19976
0001A6AE 4268 0010                  		clr.w	$10(a0)
0001A6B2                            
0001A6B2                            loc_19976:
0001A6B2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A6B8 4A68 0012                  		tst.w	$12(a0)
0001A6BC 6B00                       		bmi.s	Obj82_FindBlocks
0001A6BE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A6C4 6500                       		bcs.s	Obj82_FindBlocks
0001A6C6 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A6CC 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A6D2 6500                       		bcs.s	Obj82_FindBlocks
0001A6D4 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A6DA 4268 0012                  		clr.w	$12(a0)
0001A6DE                            
0001A6DE                            Obj82_FindBlocks:
0001A6DE 3028 0010                  		move.w	$10(a0),d0
0001A6E2 8068 0012                  		or.w	$12(a0),d0
0001A6E6 6600                       		bne.s	loc_199D0
0001A6E8 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A6EC 703E                       		moveq	#$3E,d0
0001A6EE 7240                       		moveq	#$40,d1
0001A6F0                            
0001A6F0                            Obj82_FindLoop:	
0001A6F0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A6F2 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A6F6 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A6FA                            
0001A6FA 6600                       		bne.s	loc_199D0
0001A6FC 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A702 5428 0025                  		addq.b	#2,$25(a0)
0001A706 117C 0001 001C             		move.b	#1,$1C(a0)
0001A70C                            
0001A70C                            loc_199D0:
0001A70C 6000 FF62                  		bra.w	loc_19934
0001A710                            ; ===========================================================================
0001A710                            
0001A710                            Obj82_Switch:				; XREF: Obj82_Index
0001A710 7000                       		moveq	#0,d0
0001A712 1028 0025                  		move.b	$25(a0),d0
0001A716 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A71A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A71E                            ; ===========================================================================
0001A71E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A720 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A722                            ; ===========================================================================
0001A722                            
0001A722                            loc_199E6:				; XREF: Obj82_SwIndex
0001A722 2268 0034                  		movea.l	$34(a0),a1
0001A726 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A72C 6600                       		bne.s	Obj82_SwDisplay
0001A72E 117C 0001 001A             		move.b	#1,$1A(a0)
0001A734 5428 0025                  		addq.b	#2,$25(a0)
0001A738                            
0001A738                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A738 4EF9 0000 DD42             		jmp	DisplaySprite
0001A73E                            ; ===========================================================================
0001A73E                            Ani_obj82:
0001A73E                            	include "_anim\obj82.asm"
0001A73E                            ; ---------------------------------------------------------------------------
0001A73E                            ; Animation script - Eggman (SBZ2)
0001A73E                            ; ---------------------------------------------------------------------------
0001A73E 0000                       		dc.w byte_19A10-Ani_obj82
0001A740 0000                       		dc.w byte_19A14-Ani_obj82
0001A742 0000                       		dc.w byte_19A18-Ani_obj82
0001A744 0000                       		dc.w byte_19A20-Ani_obj82
0001A746 0000                       		dc.w byte_19A24-Ani_obj82
0001A748 0000                       		dc.w byte_19A2A-Ani_obj82
0001A74A 0000                       		dc.w byte_19A30-Ani_obj82
0001A74C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A750 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A754 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A75C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A760 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A766 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A76C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A770                            		even
0001A770                            		even
0001A770                            
0001A770                            ; ---------------------------------------------------------------------------
0001A770                            ; Sprite mappings - Eggman (SBZ2)
0001A770                            ; ---------------------------------------------------------------------------
0001A770                            Map_obj82:
0001A770                            	include "_maps\obj82.asm"
0001A770                            ; ================================================================================
0001A770                            ; Sprite Mappings - generated by Flex 2 Sat Sep 01 2018 11:10:27 GMT-0700 (Pacific Daylight Time)
0001A770                            ; ================================================================================
0001A770                            
0001A770                            DATA92SMZ176TU9:
0001A770 0000 0000                  	dc.w DATA92SMZ176TU9_0-DATA92SMZ176TU9, DATA92SMZ176TU9_1-DATA92SMZ176TU9
0001A774 0000 0000                  	dc.w DATA92SMZ176TU9_2-DATA92SMZ176TU9, DATA92SMZ176TU9_3-DATA92SMZ176TU9
0001A778 0000 0000                  	dc.w DATA92SMZ176TU9_4-DATA92SMZ176TU9, DATA92SMZ176TU9_5-DATA92SMZ176TU9
0001A77C 0000 0000                  	dc.w DATA92SMZ176TU9_6-DATA92SMZ176TU9, DATA92SMZ176TU9_7-DATA92SMZ176TU9
0001A780 0000 0000                  	dc.w DATA92SMZ176TU9_8-DATA92SMZ176TU9, DATA92SMZ176TU9_9-DATA92SMZ176TU9
0001A784 0000 0000                  	dc.w DATA92SMZ176TU9_A-DATA92SMZ176TU9, DATA92SMZ176TU9_B-DATA92SMZ176TU9
0001A788 03                         DATA92SMZ176TU9_0: dc.b $3
0001A789 FC00 008F E8               	dc.b $FC, $0, $0, $8F, $E8
0001A78E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A793 000F 006F F0               	dc.b $0, $F, $0, $6F, $F0
0001A798 03                         DATA92SMZ176TU9_1: dc.b $3
0001A799 FC00 008F E8               	dc.b $FC, $0, $0, $8F, $E8
0001A79E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A7A3 000F 006F F0               	dc.b $0, $F, $0, $6F, $F0
0001A7A8 03                         DATA92SMZ176TU9_2: dc.b $3
0001A7A9 FC00 008F E8               	dc.b $FC, $0, $0, $8F, $E8
0001A7AE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A7B3 000F 006F F0               	dc.b $0, $F, $0, $6F, $F0
0001A7B8 03                         DATA92SMZ176TU9_3: dc.b $3
0001A7B9 FC00 008F E8               	dc.b $FC, $0, $0, $8F, $E8
0001A7BE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A7C3 000F 006F F0               	dc.b $0, $F, $0, $6F, $F0
0001A7C8 03                         DATA92SMZ176TU9_4: dc.b $3
0001A7C9 FC00 008F E8               	dc.b $FC, $0, $0, $8F, $E8
0001A7CE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A7D3 000F 006F F0               	dc.b $0, $F, $0, $6F, $F0
0001A7D8 00                         DATA92SMZ176TU9_5: dc.b $0
0001A7D9 00                         DATA92SMZ176TU9_6: dc.b $0
0001A7DA 00                         DATA92SMZ176TU9_7: dc.b $0
0001A7DB 00                         DATA92SMZ176TU9_8: dc.b $0
0001A7DC 00                         DATA92SMZ176TU9_9: dc.b $0
0001A7DD 00                         DATA92SMZ176TU9_A: dc.b $0
0001A7DE 00                         DATA92SMZ176TU9_B: dc.b $0
0001A7E0 00                         	even
0001A7E0 00                         	even
0001A7E0                            
0001A7E0                            ; ===========================================================================
0001A7E0                            ; ---------------------------------------------------------------------------
0001A7E0                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A7E0                            ; ---------------------------------------------------------------------------
0001A7E0                            
0001A7E0                            Obj83:					; XREF: Obj_Index
0001A7E0 7000                       		moveq	#0,d0
0001A7E2 1028 0024                  		move.b	$24(a0),d0
0001A7E6 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A7EA 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A7EE                            ; ===========================================================================
0001A7EE 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A7F0 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A7F2 0000                       		dc.w loc_19C36-Obj83_Index
0001A7F4 0000                       		dc.w loc_19C62-Obj83_Index
0001A7F6 0000                       		dc.w loc_19C72-Obj83_Index
0001A7F8 0000                       		dc.w loc_19C80-Obj83_Index
0001A7FA                            ; ===========================================================================
0001A7FA                            
0001A7FA                            Obj83_Main:				; XREF: Obj83_Index
0001A7FA 317C 2080 0008             		move.w	#$2080,8(a0)
0001A800 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A806 117C 0080 0019             		move.b	#$80,$19(a0)
0001A80C 117C 0010 0016             		move.b	#$10,$16(a0)
0001A812 117C 0004 0001             		move.b	#4,1(a0)
0001A818 08E8 0007 0001             		bset	#7,1(a0)
0001A81E 7800                       		moveq	#0,d4
0001A820 3A3C 2010                  		move.w	#$2010,d5
0001A824 7C07                       		moveq	#7,d6
0001A826 45E8 0030                  		lea	$30(a0),a2
0001A82A                            
0001A82A                            Obj83_MakeBlock:
0001A82A 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001A830 6600                       		bne.s	Obj83_ExitMake
0001A832 34C9                       		move.w	a1,(a2)+
0001A834 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A838 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A840 337C 4518 0002             		move.w	#$4518,2(a1)
0001A846 137C 0004 0001             		move.b	#4,1(a1)
0001A84C 137C 0010 0019             		move.b	#$10,$19(a1)
0001A852 137C 0010 0016             		move.b	#$10,$16(a1)
0001A858 137C 0003 0018             		move.b	#3,$18(a1)
0001A85E 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A862 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A868 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A86C 137C 0008 0024             		move.b	#8,$24(a1)
0001A872 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A876                            
0001A876                            Obj83_ExitMake:
0001A876 5428 0024                  		addq.b	#2,$24(a0)
0001A87A 4E75                       		rts	
0001A87C                            ; ===========================================================================
0001A87C                            
0001A87C                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A87C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A882 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A884 4228 001A                  		clr.b	$1A(a0)
0001A888 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A88C                            
0001A88C                            Obj83_Solid:
0001A88C 7000                       		moveq	#0,d0
0001A88E 1028 001A                  		move.b	$1A(a0),d0
0001A892 4400                       		neg.b	d0
0001A894 4880                       		ext.w	d0
0001A896 5040                       		addq.w	#8,d0
0001A898 E940                       		asl.w	#4,d0
0001A89A 383C 2100                  		move.w	#$2100,d4
0001A89E 9840                       		sub.w	d0,d4
0001A8A0 1140 0019                  		move.b	d0,$19(a0)
0001A8A4 3144 0008                  		move.w	d4,8(a0)
0001A8A8 720B                       		moveq	#$B,d1
0001A8AA D240                       		add.w	d0,d1
0001A8AC 7410                       		moveq	#$10,d2
0001A8AE 7611                       		moveq	#$11,d3
0001A8B0 4EF9 0001 02FA             		jmp	SolidObject
0001A8B6                            ; ===========================================================================
0001A8B6                            
0001A8B6                            loc_19C36:				; XREF: Obj83_Index
0001A8B6 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A8BC 6400                       		bcc.s	Obj83_Solid2
0001A8BE 70FF                       		moveq	#-1,d0
0001A8C0 1028 001A                  		move.b	$1A(a0),d0
0001A8C4 4880                       		ext.w	d0
0001A8C6 D040                       		add.w	d0,d0
0001A8C8 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A8CC 2240                       		movea.l	d0,a1
0001A8CE 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A8D4 5228 001A                  		addq.b	#1,$1A(a0)
0001A8D8 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A8DE 6700                       		beq.s	loc_19C62
0001A8E0                            
0001A8E0                            Obj83_Solid2:
0001A8E0 60AA                       		bra.s	Obj83_Solid
0001A8E2                            ; ===========================================================================
0001A8E2                            
0001A8E2                            loc_19C62:				; XREF: Obj83_Index
0001A8E2 08A8 0003 0022             		bclr	#3,$22(a0)
0001A8E8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A8EE 6000 FC78                  		bra.w	loc_1982C
0001A8F2                            ; ===========================================================================
0001A8F2                            
0001A8F2                            loc_19C72:				; XREF: Obj83_Index
0001A8F2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A8F8 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A8FA 4EF9 0000 DD42             		jmp	DisplaySprite
0001A900                            ; ===========================================================================
0001A900                            
0001A900                            loc_19C80:				; XREF: Obj83_Index
0001A900 4A28 0001                  		tst.b	1(a0)
0001A904 6A00 FC62                  		bpl.w	loc_1982C
0001A908 4EB9 0000 DD08             		jsr	ObjectFall
0001A90E 4EF9 0000 DD42             		jmp	DisplaySprite
0001A914                            ; ===========================================================================
0001A914                            
0001A914                            Obj83_Break:				; XREF: loc_19C72
0001A914 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A918 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A91C 7801                       		moveq	#1,d4
0001A91E 7203                       		moveq	#3,d1
0001A920 7438                       		moveq	#$38,d2
0001A922 5428 0024                  		addq.b	#2,$24(a0)
0001A926 117C 0008 0019             		move.b	#8,$19(a0)
0001A92C 117C 0008 0016             		move.b	#8,$16(a0)
0001A932 43D0                       		lea	(a0),a1
0001A934 6000                       		bra.s	Obj83_MakeFrag
0001A936                            ; ===========================================================================
0001A936                            
0001A936                            Obj83_LoopFrag:
0001A936 4EB9 0000 E204             		jsr	SingleObjLoad2
0001A93C 6600                       		bne.s	Obj83_BreakSnd
0001A93E                            
0001A93E                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A93E 45D0                       		lea	(a0),a2
0001A940 47D1                       		lea	(a1),a3
0001A942 7603                       		moveq	#3,d3
0001A944                            
0001A944                            loc_19CC4:
0001A944 26DA                       		move.l	(a2)+,(a3)+
0001A946 26DA                       		move.l	(a2)+,(a3)+
0001A948 26DA                       		move.l	(a2)+,(a3)+
0001A94A 26DA                       		move.l	(a2)+,(a3)+
0001A94C 51CB FFF6                  		dbf	d3,loc_19CC4
0001A950                            
0001A950 335C 0012                  		move.w	(a4)+,$12(a1)
0001A954 361D                       		move.w	(a5)+,d3
0001A956 D769 0008                  		add.w	d3,8(a1)
0001A95A 361D                       		move.w	(a5)+,d3
0001A95C D769 000C                  		add.w	d3,$C(a1)
0001A960 1344 001A                  		move.b	d4,$1A(a1)
0001A964 5244                       		addq.w	#1,d4
0001A966 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A96A                            
0001A96A                            Obj83_BreakSnd:
0001A96A 303C 00CB                  		move.w	#$CB,d0
0001A96E 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A974 4EF9 0000 DD42             		jmp	DisplaySprite
0001A97A                            ; ===========================================================================
0001A97A 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A97E 0120 00C0                  		dc.w $120, $C0
0001A982 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A986 0010 0000                  		dc.w $10, 0
0001A98A 0000 0010                  		dc.w 0,	$10
0001A98E 0010 0010                  		dc.w $10, $10
0001A992                            ; ---------------------------------------------------------------------------
0001A992                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A992                            ; ---------------------------------------------------------------------------
0001A992                            Map_obj83:
0001A992                            	include "_maps\obj83.asm"
0001A992                            ; ---------------------------------------------------------------------------
0001A992                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A992                            ; ---------------------------------------------------------------------------
0001A992 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A996 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A99A 0000                       		dc.w byte_19D46-Map_obj83
0001A99C 01                         byte_19D1C:	dc.b 1
0001A99D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A9A2 02                         byte_19D22:	dc.b 2
0001A9A3 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A9A8 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A9AD 00                         		dc.b 0
0001A9AE 02                         byte_19D2E:	dc.b 2
0001A9AF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A9B4 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A9B9 00                         		dc.b 0
0001A9BA 02                         byte_19D3A:	dc.b 2
0001A9BB F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A9C0 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A9C5 00                         		dc.b 0
0001A9C6 02                         byte_19D46:	dc.b 2
0001A9C7 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A9CC F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A9D2 00                         		even
0001A9D2 00                         		even
0001A9D2                            
0001A9D2                            ; ===========================================================================
0001A9D2                            ; ---------------------------------------------------------------------------
0001A9D2                            ; Object 85 - Eggman (FZ)
0001A9D2                            ; ---------------------------------------------------------------------------
0001A9D2                            
0001A9D2                            Obj85_Delete:
0001A9D2 4EF9 0000 DD7E             		jmp	DeleteObject
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            Obj85:					; XREF: Obj_Index
0001A9D8 7000                       		moveq	#0,d0
0001A9DA 1028 0024                  		move.b	$24(a0),d0
0001A9DE 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A9E2 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A9E6                            ; ===========================================================================
0001A9E6 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A9E8 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A9EA 0000                       		dc.w loc_1A38E-Obj85_Index
0001A9EC 0000                       		dc.w loc_1A346-Obj85_Index
0001A9EE 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A9F0 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A9F2 0000                       		dc.w loc_1A264-Obj85_Index
0001A9F4                            
0001A9F4 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A9FA 0001 A770                  		dc.l Map_obj82		; mappings pointer
0001A9FE 25B0 0590 0300             		dc.w $25B0, $590, $300
0001AA04 0000 0000                  		dc.l Map_obj84
0001AA08 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001AA0E 0000 0000                  		dc.l Map_FZBoss
0001AA12 26E0 0596 0470             		dc.w $26E0, $596, $470
0001AA18 0001 A770                  		dc.l Map_obj82
0001AA1C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AA22 0001 8A52                  		dc.l Map_Eggman
0001AA26 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AA2C 0001 8A52                  		dc.l Map_Eggman
0001AA30                            
0001AA30 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001AA35 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001AA3A 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001AA3F 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001AA44 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001AA49 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001AA4E                            ; ===========================================================================
0001AA4E                            
0001AA4E                            Obj85_Main:				; XREF: Obj85_Index
0001AA4E 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001AA52 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001AA56 2248                       		movea.l	a0,a1
0001AA58 7205                       		moveq	#5,d1
0001AA5A 6000                       		bra.s	Obj85_LoadBoss
0001AA5C                            ; ===========================================================================
0001AA5C                            
0001AA5C                            Obj85_Loop:
0001AA5C 4EB9 0000 E204             		jsr	SingleObjLoad2
0001AA62 6600                       		bne.s	loc_19E20
0001AA64                            
0001AA64                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001AA64 12BC 0085                  		move.b	#$85,(a1)
0001AA68 335A 0008                  		move.w	(a2)+,8(a1)
0001AA6C 335A 000C                  		move.w	(a2)+,$C(a1)
0001AA70 335A 0002                  		move.w	(a2)+,2(a1)
0001AA74 235A 0004                  		move.l	(a2)+,4(a1)
0001AA78 135B 0024                  		move.b	(a3)+,$24(a1)
0001AA7C 135B 001C                  		move.b	(a3)+,$1C(a1)
0001AA80 135B 0018                  		move.b	(a3)+,$18(a1)
0001AA84 135B 0017                  		move.b	(a3)+,$17(a1)
0001AA88 135B 0016                  		move.b	(a3)+,$16(a1)
0001AA8C 137C 0004 0001             		move.b	#4,1(a1)
0001AA92 08E8 0007 0001             		bset	#7,1(a0)
0001AA98 2348 0034                  		move.l	a0,$34(a1)
0001AA9C 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001AAA0                            
0001AAA0                            loc_19E20:
0001AAA0 45E8 0036                  		lea	$36(a0),a2
0001AAA4 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001AAAA 6600                       		bne.s	loc_19E5A
0001AAAC 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001AAB0 3489                       		move.w	a1,(a2)
0001AAB2 2348 0034                  		move.l	a0,$34(a1)
0001AAB6 45E8 0038                  		lea	$38(a0),a2
0001AABA 7400                       		moveq	#0,d2
0001AABC 7203                       		moveq	#3,d1
0001AABE                            
0001AABE                            loc_19E3E:
0001AABE 4EB9 0000 E204             		jsr	SingleObjLoad2
0001AAC4 6600                       		bne.s	loc_19E5A
0001AAC6 34C9                       		move.w	a1,(a2)+
0001AAC8 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001AACC 2348 0034                  		move.l	a0,$34(a1)
0001AAD0 1342 0028                  		move.b	d2,$28(a1)
0001AAD4 5442                       		addq.w	#2,d2
0001AAD6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001AADA                            
0001AADA                            loc_19E5A:
0001AADA 317C 0000 0034             		move.w	#0,$34(a0)
0001AAE0 117C 0020 0021             		move.b	#32,$21(a0)	; set number of	hits to	16
0001AAE6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AAEC                            
0001AAEC                            Obj85_Eggman:				; XREF: Obj85_Index
0001AAEC 7000                       		moveq	#0,d0
0001AAEE 1028 0034                  		move.b	$34(a0),d0
0001AAF2 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001AAF6 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001AAFA 4EF9 0000 DD42             		jmp	DisplaySprite
0001AB00                            ; ===========================================================================
0001AB00 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001AB04 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001AB08 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001AB0C 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001AB10                            ; ===========================================================================
0001AB10                            
0001AB10                            loc_19E90:				; XREF: off_19E80
0001AB10 4AB8 F680                  		tst.l	($FFFFF680).w
0001AB14 6600                       		bne.s	loc_19EA2
0001AB16 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001AB1C 6500                       		bcs.s	loc_19EA2
0001AB1E 5428 0034                  		addq.b	#2,$34(a0)
0001AB22                            
0001AB22                            loc_19EA2:
0001AB22 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001AB26 4E75                       		rts	
0001AB28                            ; ===========================================================================
0001AB28                            
0001AB28                            loc_19EA8:				; XREF: off_19E80
0001AB28 4A68 0030                  		tst.w	$30(a0)
0001AB2C 6A00                       		bpl.s	loc_19F10
0001AB2E 4268 0030                  		clr.w	$30(a0)
0001AB32 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001AB38 0240 000C                  		andi.w	#$C,d0
0001AB3C 3200                       		move.w	d0,d1
0001AB3E 5441                       		addq.w	#2,d1
0001AB40 4A80                       		tst.l	d0
0001AB42 6A00                       		bpl.s	loc_19EC6
0001AB44 C141                       		exg	d1,d0
0001AB46                            
0001AB46                            loc_19EC6:
0001AB46 43FA 0000                  		lea	word_19FD6(pc),a1
0001AB4A 3031 0000                  		move.w	(a1,d0.w),d0
0001AB4E 3231 1000                  		move.w	(a1,d1.w),d1
0001AB52 3140 0030                  		move.w	d0,$30(a0)
0001AB56 74FF                       		moveq	#-1,d2
0001AB58 3430 0038                  		move.w	$38(a0,d0.w),d2
0001AB5C 2242                       		movea.l	d2,a1
0001AB5E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AB64 337C FFFF 0030             		move.w	#-1,$30(a1)
0001AB6A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001AB6E 2242                       		movea.l	d2,a1
0001AB70 137C 0001 0029             		move.b	#1,$29(a1)
0001AB76 337C 0000 0030             		move.w	#0,$30(a1)
0001AB7C 317C 0001 0032             		move.w	#1,$32(a0)
0001AB82 4228 0035                  		clr.b	$35(a0)
0001AB86                            		
0001AB86 303C 00B7                  		move.w	#$B7,d0
0001AB8A 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AB90                            
0001AB90                            loc_19F10:
0001AB90 4A68 0032                  		tst.w	$32(a0)
0001AB94 6B00 0000                  		bmi.w	loc_19FA6
0001AB98 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB9E 3038 D008                  		move.w	($FFFFD008).w,d0
0001ABA2 9068 0008                  		sub.w	8(a0),d0
0001ABA6 6500                       		bcs.s	loc_19F2E
0001ABA8 08E8 0000 0022             		bset	#0,$22(a0)
0001ABAE                            
0001ABAE                            loc_19F2E:
0001ABAE 323C 002B                  		move.w	#$2B,d1
0001ABB2 343C 0014                  		move.w	#$14,d2
0001ABB6 363C 0014                  		move.w	#$14,d3
0001ABBA 3828 0008                  		move.w	8(a0),d4
0001ABBE 4EB9 0001 02FA             		jsr	SolidObject
0001ABC4 4A44                       		tst.w	d4
0001ABC6 6E00                       		bgt.s	loc_19F50
0001ABC8                            
0001ABC8                            loc_19F48:
0001ABC8 4A28 0035                  		tst.b	$35(a0)
0001ABCC 6600                       		bne.s	loc_19F88
0001ABCE 6000                       		bra.s	loc_19F96
0001ABD0                            ; ===========================================================================
0001ABD0                            
0001ABD0                            loc_19F50:
0001ABD0 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001ABD4 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001ABDA 66EC                       		bne.s	loc_19F48
0001ABDC 303C 0300                  		move.w	#$300,d0
0001ABE0 0828 0000 0022             		btst	#0,$22(a0)
0001ABE6 6600                       		bne.s	loc_19F6A
0001ABE8 4440                       		neg.w	d0
0001ABEA                            
0001ABEA                            loc_19F6A:
0001ABEA 31C0 D010                  		move.w	d0,($FFFFD010).w
0001ABEE 4A28 0035                  		tst.b	$35(a0)
0001ABF2 6600                       		bne.s	loc_19F88
0001ABF4 5328 0021                  		subq.b	#1,$21(a0)
0001ABF8 117C 0064 0035             		move.b	#$64,$35(a0)
0001ABFE 5278 FE20                  		addi.w	#$1,($FFFFFE20).w ; add	1 ring to the number of rings you have
0001AC02 303C 00AC                  		move.w	#$AC,d0
0001AC06 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AC0C                            
0001AC0C                            loc_19F88:
0001AC0C 5328 0035                  		subq.b	#1,$35(a0)
0001AC10 6700                       		beq.s	loc_19F96
0001AC12 117C 0003 001C             		move.b	#3,$1C(a0)
0001AC18 6000                       		bra.s	loc_19F9C
0001AC1A                            ; ===========================================================================
0001AC1A                            
0001AC1A                            loc_19F96:
0001AC1A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC20                            
0001AC20                            loc_19F9C:
0001AC20 43FA FB1C                  		lea	Ani_obj82(pc),a1
0001AC24 4EF9 0000 AFC8             		jmp	AnimateSprite
0001AC2A                            ; ===========================================================================
0001AC2A                            
0001AC2A                            loc_19FA6:
0001AC2A 4A28 0021                  		tst.b	$21(a0)
0001AC2E 6700                       		beq.s	loc_19FBC
0001AC30 5428 0034                  		addq.b	#2,$34(a0)
0001AC34 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AC3A 4268 0032                  		clr.w	$32(a0)
0001AC3E 4E75                       		rts	
0001AC40                            ; ===========================================================================
0001AC40                            
0001AC40                            loc_19FBC:
0001AC40 117C 0006 0034             		move.b	#6,$34(a0)
0001AC46 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AC4C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AC52 117C 0014 0016             		move.b	#$14,$16(a0)
0001AC58 4E75                       		rts	
0001AC5A                            ; ===========================================================================
0001AC5A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AC6A                            ; ===========================================================================
0001AC6A                            
0001AC6A                            loc_19FE6:				; XREF: off_19E80
0001AC6A 70FF                       		moveq	#-1,d0
0001AC6C 3028 0036                  		move.w	$36(a0),d0
0001AC70 2240                       		movea.l	d0,a1
0001AC72 4A68 0030                  		tst.w	$30(a0)
0001AC76 6A00                       		bpl.s	loc_1A000
0001AC78 4268 0030                  		clr.w	$30(a0)
0001AC7C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AC82 6100                       		bsr.s	loc_1A020
0001AC84                            
0001AC84                            loc_1A000:
0001AC84 700F                       		moveq	#$F,d0
0001AC86 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AC8A 6600                       		bne.s	loc_1A00A
0001AC8C 6100                       		bsr.s	loc_1A020
0001AC8E                            
0001AC8E                            loc_1A00A:
0001AC8E 4A68 0032                  		tst.w	$32(a0)
0001AC92 6700                       		beq.s	locret_1A01E
0001AC94 5528 0034                  		subq.b	#2,$34(a0)
0001AC98 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AC9E 4268 0032                  		clr.w	$32(a0)
0001ACA2                            
0001ACA2                            locret_1A01E:
0001ACA2 4E75                       		rts	
0001ACA4                            ; ===========================================================================
0001ACA4                            
0001ACA4                            loc_1A020:
0001ACA4 303C 00B1                  		move.w	#$B1,d0
0001ACA8 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play electricity sound
0001ACAE                            ; ===========================================================================
0001ACAE                            
0001ACAE                            loc_1A02A:				; XREF: off_19E80
0001ACAE 117C 0030 0017             		move.b	#$30,$17(a0)
0001ACB4 08E8 0000 0022             		bset	#0,$22(a0)
0001ACBA 4EB9 0000 DD28             		jsr	SpeedToPos
0001ACC0 117C 0006 001A             		move.b	#6,$1A(a0)
0001ACC6 0668 0010 0012             		addi.w	#$10,$12(a0)
0001ACCC 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001ACD2 6500                       		bcs.s	loc_1A070
0001ACD4 317C 059C 000C             		move.w	#$59C,$C(a0)
0001ACDA 5428 0034                  		addq.b	#2,$34(a0)
0001ACDE 117C 0020 0017             		move.b	#$20,$17(a0)
0001ACE4 317C 0100 0010             		move.w	#$100,$10(a0)
0001ACEA 317C FF00 0012             		move.w	#-$100,$12(a0)
0001ACF0 5438 F742                  		addq.b	#2,($FFFFF742).w
0001ACF4                            
0001ACF4                            loc_1A070:
0001ACF4 6000 0000                  		bra.w	loc_1A166
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            loc_1A074:				; XREF: off_19E80
0001ACF8 08E8 0000 0022             		bset	#0,$22(a0)
0001ACFE 117C 0004 001C             		move.b	#4,$1C(a0)
0001AD04 4EB9 0000 DD28             		jsr	SpeedToPos
0001AD0A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AD10 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AD16 6500                       		bcs.s	loc_1A09A
0001AD18 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AD1E                            
0001AD1E                            loc_1A09A:
0001AD1E 317C 0400 0010             		move.w	#$400,$10(a0)
0001AD24 3028 0008                  		move.w	8(a0),d0
0001AD28 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AD2C 6A00                       		bpl.s	loc_1A0B4
0001AD2E 317C 0500 0010             		move.w	#$500,$10(a0)
0001AD34 6000 0000                  		bra.w	loc_1A0F2
0001AD38                            ; ===========================================================================
0001AD38                            
0001AD38                            loc_1A0B4:
0001AD38 0440 0070                  		subi.w	#$70,d0
0001AD3C 6500                       		bcs.s	loc_1A0F2
0001AD3E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AD44 5140                       		subq.w	#8,d0
0001AD46 6500                       		bcs.s	loc_1A0F2
0001AD48 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AD4E 5140                       		subq.w	#8,d0
0001AD50 6500                       		bcs.s	loc_1A0F2
0001AD52 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AD58 5140                       		subq.w	#8,d0
0001AD5A 6500                       		bcs.s	loc_1A0F2
0001AD5C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AD62 5140                       		subq.w	#8,d0
0001AD64 6500                       		bcs.s	loc_1A0F2
0001AD66 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AD6C 0440 0038                  		subi.w	#$38,d0
0001AD70 6500                       		bcs.s	loc_1A0F2
0001AD72 4268 0010                  		clr.w	$10(a0)
0001AD76                            
0001AD76                            loc_1A0F2:
0001AD76 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AD7C 6500                       		bcs.s	loc_1A110
0001AD7E 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AD84 317C 0240 0010             		move.w	#$240,$10(a0)
0001AD8A 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AD90 5428 0034                  		addq.b	#2,$34(a0)
0001AD94                            
0001AD94                            loc_1A110:
0001AD94 6000                       		bra.s	loc_1A15C
0001AD96                            ; ===========================================================================
0001AD96                            
0001AD96                            loc_1A112:				; XREF: off_19E80
0001AD96 4EB9 0000 DD28             		jsr	SpeedToPos
0001AD9C 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ADA2 6500                       		bcs.s	loc_1A124
0001ADA4 4268 0010                  		clr.w	$10(a0)
0001ADA8                            
0001ADA8                            loc_1A124:
0001ADA8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001ADAE 4A68 0012                  		tst.w	$12(a0)
0001ADB2 6B00                       		bmi.s	loc_1A142
0001ADB4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001ADBA 6500                       		bcs.s	loc_1A142
0001ADBC 317C 0592 000C             		move.w	#$592,$C(a0)
0001ADC2 4268 0012                  		clr.w	$12(a0)
0001ADC6                            
0001ADC6                            loc_1A142:
0001ADC6 3028 0010                  		move.w	$10(a0),d0
0001ADCA 8068 0012                  		or.w	$12(a0),d0
0001ADCE 6600                       		bne.s	loc_1A15C
0001ADD0 5428 0034                  		addq.b	#2,$34(a0)
0001ADD4 317C FE80 0012             		move.w	#-$180,$12(a0)
0001ADDA 117C 0001 0021             		move.b	#1,$21(a0)
0001ADE0                            
0001ADE0                            loc_1A15C:
0001ADE0 43FA F95C                  		lea	Ani_obj82(pc),a1
0001ADE4 4EB9 0000 AFC8             		jsr	AnimateSprite
0001ADEA                            
0001ADEA                            loc_1A166:
0001ADEA 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001ADF0 6C00                       		bge.s	loc_1A172
0001ADF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001ADF6                            
0001ADF6                            loc_1A172:
0001ADF6 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001ADFC 6C00                       		bge.s	locret_1A190
0001ADFE 323C 001B                  		move.w	#$1B,d1
0001AE02 343C 0070                  		move.w	#$70,d2
0001AE06 363C 0071                  		move.w	#$71,d3
0001AE0A 3828 0008                  		move.w	8(a0),d4
0001AE0E 4EF9 0001 02FA             		jmp	SolidObject
0001AE14                            ; ===========================================================================
0001AE14                            
0001AE14                            locret_1A190:
0001AE14 4E75                       		rts	
0001AE16                            ; ===========================================================================
0001AE16                            
0001AE16                            loc_1A192:				; XREF: off_19E80
0001AE16 217C 0001 8A52 0004        		move.l	#Map_Eggman,4(a0)
0001AE1E 317C 0400 0002             		move.w	#$400,2(a0)
0001AE24 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE2A 08E8 0000 0022             		bset	#0,$22(a0)
0001AE30 4EB9 0000 DD28             		jsr	SpeedToPos
0001AE36 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AE3C 6400                       		bcc.s	loc_1A1D0
0001AE3E 317C 0180 0010             		move.w	#$180,$10(a0)
0001AE44 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AE4A 117C 000F 0020             		move.b	#$F,$20(a0)
0001AE50 5428 0034                  		addq.b	#2,$34(a0)
0001AE54                            
0001AE54                            loc_1A1D0:
0001AE54 6000 FF8A                  		bra.w	loc_1A15C
0001AE58                            ; ===========================================================================
0001AE58                            
0001AE58                            loc_1A1D4:				; XREF: off_19E80
0001AE58 08E8 0000 0022             		bset	#0,$22(a0)
0001AE5E 4EB9 0000 DD28             		jsr	SpeedToPos
0001AE64 4A68 0030                  		tst.w	$30(a0)
0001AE68 6600                       		bne.s	loc_1A1FC
0001AE6A 4A28 0020                  		tst.b	$20(a0)
0001AE6E 6600                       		bne.s	loc_1A216
0001AE70 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AE76 303C 00AC                  		move.w	#$AC,d0
0001AE7A 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AE80                            
0001AE80                            loc_1A1FC:
0001AE80 5368 0030                  		subq.w	#1,$30(a0)
0001AE84 6600                       		bne.s	loc_1A216
0001AE86 4A28 0022                  		tst.b	$22(a0)
0001AE8A 6A00                       		bpl.s	loc_1A210
0001AE8C 317C 0060 0012             		move.w	#$60,$12(a0)
0001AE92 6000                       		bra.s	loc_1A216
0001AE94                            ; ===========================================================================
0001AE94                            
0001AE94                            loc_1A210:
0001AE94 117C 000F 0020             		move.b	#$F,$20(a0)
0001AE9A                            
0001AE9A                            loc_1A216:
0001AE9A 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AEA0 6D00                       		blt.s	loc_1A23A
0001AEA2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AEA8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AEAE 4278 D014                  		clr.w	($FFFFD014).w
0001AEB2 4A68 0012                  		tst.w	$12(a0)
0001AEB6 6A00                       		bpl.s	loc_1A248
0001AEB8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AEBE                            
0001AEBE                            loc_1A23A:
0001AEBE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AEC4 6D00                       		blt.s	loc_1A248
0001AEC6 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AECC                            
0001AECC                            loc_1A248:
0001AECC 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AED2 6500                       		bcs.s	loc_1A260
0001AED4 4A28 0001                  		tst.b	1(a0)
0001AED8 6B00                       		bmi.s	loc_1A260
0001AEDA 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AEE0 6000 FAF0                  		bra.w	Obj85_Delete
0001AEE4                            ; ===========================================================================
0001AEE4                            
0001AEE4                            loc_1A260:
0001AEE4 6000 FEFA                  		bra.w	loc_1A15C
0001AEE8                            ; ===========================================================================
0001AEE8                            
0001AEE8                            loc_1A264:				; XREF: Obj85_Index
0001AEE8 2268 0034                  		movea.l	$34(a0),a1
0001AEEC 1011                       		move.b	(a1),d0
0001AEEE B010                       		cmp.b	(a0),d0
0001AEF0 6600 FAE0                  		bne.w	Obj85_Delete
0001AEF4 117C 0007 001C             		move.b	#7,$1C(a0)
0001AEFA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AF00 6C00                       		bge.s	loc_1A280
0001AF02 6000                       		bra.s	loc_1A2A6
0001AF04                            ; ===========================================================================
0001AF04                            
0001AF04                            loc_1A280:
0001AF04 4A69 0010                  		tst.w	$10(a1)
0001AF08 6700                       		beq.s	loc_1A28C
0001AF0A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF10                            
0001AF10                            loc_1A28C:
0001AF10 43FA DAF0                  		lea	Ani_Eggman(pc),a1
0001AF14 4EB9 0000 AFC8             		jsr	AnimateSprite
0001AF1A                            
0001AF1A                            loc_1A296:
0001AF1A 2268 0034                  		movea.l	$34(a0),a1
0001AF1E 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF24 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF2A                            
0001AF2A                            loc_1A2A6:
0001AF2A 2268 0034                  		movea.l	$34(a0),a1
0001AF2E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF34 7003                       		moveq	#3,d0
0001AF36 C028 0022                  		and.b	$22(a0),d0
0001AF3A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AF40 8128 0001                  		or.b	d0,1(a0)
0001AF44 4EF9 0000 DD42             		jmp	DisplaySprite
0001AF4A                            ; ===========================================================================
0001AF4A                            
0001AF4A                            loc_1A2C6:				; XREF: Obj85_Index
0001AF4A 2268 0034                  		movea.l	$34(a0),a1
0001AF4E 1011                       		move.b	(a1),d0
0001AF50 B010                       		cmp.b	(a0),d0
0001AF52 6600 FA7E                  		bne.w	Obj85_Delete
0001AF56 0CA9 0001 8A52 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AF5E 6700                       		beq.s	loc_1A2E4
0001AF60 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AF66 60C2                       		bra.s	loc_1A2A6
0001AF68                            ; ===========================================================================
0001AF68                            
0001AF68                            loc_1A2E4:
0001AF68 117C 0001 001C             		move.b	#1,$1C(a0)
0001AF6E 4A29 0021                  		tst.b	$21(a1)
0001AF72 6F00                       		ble.s	loc_1A312
0001AF74 117C 0006 001C             		move.b	#6,$1C(a0)
0001AF7A 217C 0001 8A52 0004        		move.l	#Map_Eggman,4(a0)
0001AF82 317C 0400 0002             		move.w	#$400,2(a0)
0001AF88 43FA DA78                  		lea	Ani_Eggman(pc),a1
0001AF8C 4EB9 0000 AFC8             		jsr	AnimateSprite
0001AF92 6000 FF86                  		bra.w	loc_1A296
0001AF96                            ; ===========================================================================
0001AF96                            
0001AF96                            loc_1A312:
0001AF96 4A28 0001                  		tst.b	1(a0)
0001AF9A 6A00 FA36                  		bpl.w	Obj85_Delete
0001AF9E 6100 D610                  		bsr.w	BossDefeated
0001AFA2 117C 0002 0018             		move.b	#2,$18(a0)
0001AFA8 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFAE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AFB6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AFBC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AFC0 4EB9 0000 AFC8             		jsr	AnimateSprite
0001AFC6 6000 FF52                  		bra.w	loc_1A296
0001AFCA                            ; ===========================================================================
0001AFCA                            
0001AFCA                            loc_1A346:				; XREF: Obj85_Index
0001AFCA 08E8 0000 0022             		bset	#0,$22(a0)
0001AFD0 2268 0034                  		movea.l	$34(a0),a1
0001AFD4 0CA9 0001 8A52 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AFDC 6700                       		beq.s	loc_1A35E
0001AFDE 6000 FF4A                  		bra.w	loc_1A2A6
0001AFE2                            ; ===========================================================================
0001AFE2                            
0001AFE2                            loc_1A35E:
0001AFE2 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFE8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFEE 4A28 001E                  		tst.b	$1E(a0)
0001AFF2 6600                       		bne.s	loc_1A376
0001AFF4 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AFFA                            
0001AFFA                            loc_1A376:
0001AFFA 5328 001E                  		subq.b	#1,$1E(a0)
0001AFFE 6E00                       		bgt.s	loc_1A38A
0001B000 5228 001A                  		addq.b	#1,$1A(a0)
0001B004 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B00A 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B00E                            
0001B00E                            loc_1A38A:
0001B00E 6000 FF0A                  		bra.w	loc_1A296
0001B012                            ; ===========================================================================
0001B012                            
0001B012                            loc_1A38E:				; XREF: Obj85_Index
0001B012 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B018 3038 D008                  		move.w	($FFFFD008).w,d0
0001B01C 9068 0008                  		sub.w	8(a0),d0
0001B020 6500                       		bcs.s	loc_1A3A6
0001B022 4A28 0001                  		tst.b	1(a0)
0001B026 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B02A                            
0001B02A                            loc_1A3A6:
0001B02A 4EF9 0000 DD42             		jmp	DisplaySprite
0001B030                            ; ===========================================================================
0001B030                            
0001B030                            loc_1A3AC:				; XREF: Obj85_Index
0001B030 117C 0000 001A             		move.b	#0,$1A(a0)
0001B036 08E8 0000 0022             		bset	#0,$22(a0)
0001B03C 2268 0034                  		movea.l	$34(a0),a1
0001B040 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B046 6600                       		bne.s	loc_1A3D0
0001B048 0CA9 0001 8A52 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B050 6700 F980                  		beq.w	Obj85_Delete
0001B054                            
0001B054                            loc_1A3D0:
0001B054 6000 FED4                  		bra.w	loc_1A2A6
0001B058                            ; ===========================================================================
0001B058                            Ani_obj85:
0001B058                            	include "_anim\obj85.asm"
0001B058                            ; ---------------------------------------------------------------------------
0001B058                            ; Animation script - Eggman (FZ)
0001B058                            ; ---------------------------------------------------------------------------
0001B058 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B05A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B05E                            		even
0001B05E                            		even
0001B05E                            
0001B05E                            Map_Eggman2:
0001B05E                            	include "_maps\Eggman2.asm"
0001B05E                            ; ---------------------------------------------------------------------------
0001B05E                            ; Sprite mappings - Eggman (FZ)
0001B05E                            ; ---------------------------------------------------------------------------
0001B05E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B060 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B062 06                         byte_1A3DE:	dc.b 6
0001B063 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B068 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B06D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B072 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B077 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B07C 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B081 06                         byte_1A3FD:	dc.b 6
0001B082 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B087 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B08C EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B091 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B096 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B09B 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B0A0                            		even
0001B0A0                            		even
0001B0A0                            
0001B0A0                            Map_FZBoss:
0001B0A0                            	include "_maps\FZ boss.asm"
0001B0A0                            ; ---------------------------------------------------------------------------
0001B0A0                            ; Sprite mappings - boss (FZ)
0001B0A0                            ; ---------------------------------------------------------------------------
0001B0A0 0000                       		dc.w byte_1A422-Map_FZBoss
0001B0A2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B0A4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B0A6 02                         byte_1A422:	dc.b 2
0001B0A7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B0AC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B0B1 03                         byte_1A42D:	dc.b 3
0001B0B2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B0B7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B0BC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B0C1 02                         byte_1A43D:	dc.b 2
0001B0C2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B0C7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B0CC                            		even
0001B0CC                            		even
0001B0CC                            
0001B0CC                            ; ===========================================================================
0001B0CC                            
0001B0CC                            Obj84_Delete:
0001B0CC 4EF9 0000 DD7E             		jmp	DeleteObject
0001B0D2                            ; ===========================================================================
0001B0D2                            ; ---------------------------------------------------------------------------
0001B0D2                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B0D2                            ; ---------------------------------------------------------------------------
0001B0D2                            
0001B0D2                            Obj84:					; XREF: Obj_Index
0001B0D2 7000                       		moveq	#0,d0
0001B0D4 1028 0024                  		move.b	$24(a0),d0
0001B0D8 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B0DC 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B0E0                            ; ===========================================================================
0001B0E0 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B0E2 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B0E4 0000                       		dc.w loc_1A57E-Obj84_Index
0001B0E6                            
0001B0E6 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B0EA 2550 0620                  		dc.w $2550, $620
0001B0EE 2490 04C0                  		dc.w $2490, $4C0
0001B0F2 2510 04C0                  		dc.w $2510, $4C0
0001B0F6                            ; ===========================================================================
0001B0F6                            
0001B0F6                            Obj84_Main:				; XREF: Obj84_Index
0001B0F6 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B0FA 7000                       		moveq	#0,d0
0001B0FC 1028 0028                  		move.b	$28(a0),d0
0001B100 D040                       		add.w	d0,d0
0001B102 D2C0                       		adda.w	d0,a1
0001B104 117C 0004 0001             		move.b	#4,1(a0)
0001B10A 08E8 0007 0001             		bset	#7,1(a0)
0001B110 08E8 0004 0001             		bset	#4,1(a0)
0001B116 317C 0300 0002             		move.w	#$300,2(a0)
0001B11C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B124 3159 0008                  		move.w	(a1)+,8(a0)
0001B128 3151 000C                  		move.w	(a1),$C(a0)
0001B12C 3159 0038                  		move.w	(a1)+,$38(a0)
0001B130 117C 0020 0016             		move.b	#$20,$16(a0)
0001B136 117C 0060 0017             		move.b	#$60,$17(a0)
0001B13C 117C 0020 0019             		move.b	#$20,$19(a0)
0001B142 117C 0060 0016             		move.b	#$60,$16(a0)
0001B148 117C 0003 0018             		move.b	#3,$18(a0)
0001B14E 5428 0024                  		addq.b	#2,$24(a0)
0001B152                            
0001B152                            loc_1A4CE:				; XREF: Obj84_Index
0001B152 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B158 6F00                       		ble.s	loc_1A4DC
0001B15A 08E8 0001 0001             		bset	#1,1(a0)
0001B160                            
0001B160                            loc_1A4DC:
0001B160 42A8 003C                  		clr.l	$3C(a0)
0001B164 4A28 0029                  		tst.b	$29(a0)
0001B168 6700                       		beq.s	loc_1A4EA
0001B16A 5428 0024                  		addq.b	#2,$24(a0)
0001B16E                            
0001B16E                            loc_1A4EA:
0001B16E 2028 003C                  		move.l	$3C(a0),d0
0001B172 2228 0038                  		move.l	$38(a0),d1
0001B176 D280                       		add.l	d0,d1
0001B178 4841                       		swap	d1
0001B17A 3141 000C                  		move.w	d1,$C(a0)
0001B17E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B184 6600                       		bne.s	loc_1A524
0001B186 4A68 0030                  		tst.w	$30(a0)
0001B18A 6A00                       		bpl.s	loc_1A524
0001B18C 70F6                       		moveq	#-$A,d0
0001B18E 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B194 6F00                       		ble.s	loc_1A514
0001B196 700E                       		moveq	#$E,d0
0001B198                            
0001B198                            loc_1A514:
0001B198 D240                       		add.w	d0,d1
0001B19A 2268 0034                  		movea.l	$34(a0),a1
0001B19E 3341 000C                  		move.w	d1,$C(a1)
0001B1A2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1A8                            
0001B1A8                            loc_1A524:
0001B1A8 323C 002B                  		move.w	#$2B,d1
0001B1AC 343C 0060                  		move.w	#$60,d2
0001B1B0 363C 0061                  		move.w	#$61,d3
0001B1B4 3828 0008                  		move.w	8(a0),d4
0001B1B8 4EB9 0001 02FA             		jsr	SolidObject
0001B1BE 7000                       		moveq	#0,d0
0001B1C0 3228 003C                  		move.w	$3C(a0),d1
0001B1C4 6A00                       		bpl.s	loc_1A550
0001B1C6 4441                       		neg.w	d1
0001B1C8 5141                       		subq.w	#8,d1
0001B1CA 6500                       		bcs.s	loc_1A55C
0001B1CC 5200                       		addq.b	#1,d0
0001B1CE E841                       		asr.w	#4,d1
0001B1D0 D041                       		add.w	d1,d0
0001B1D2 6000                       		bra.s	loc_1A55C
0001B1D4                            ; ===========================================================================
0001B1D4                            
0001B1D4                            loc_1A550:
0001B1D4 0441 0027                  		subi.w	#$27,d1
0001B1D8 6500                       		bcs.s	loc_1A55C
0001B1DA 5200                       		addq.b	#1,d0
0001B1DC E841                       		asr.w	#4,d1
0001B1DE D041                       		add.w	d1,d0
0001B1E0                            
0001B1E0                            loc_1A55C:
0001B1E0 1140 001A                  		move.b	d0,$1A(a0)
0001B1E4 3038 D008                  		move.w	($FFFFD008).w,d0
0001B1E8 9068 0008                  		sub.w	8(a0),d0
0001B1EC 6B00                       		bmi.s	loc_1A578
0001B1EE 0440 0140                  		subi.w	#$140,d0
0001B1F2 6B00                       		bmi.s	loc_1A578
0001B1F4 4A28 0001                  		tst.b	1(a0)
0001B1F8 6A00 FED2                  		bpl.w	Obj84_Delete
0001B1FC                            
0001B1FC                            loc_1A578:
0001B1FC 4EF9 0000 DD42             		jmp	DisplaySprite
0001B202                            ; ===========================================================================
0001B202                            
0001B202                            loc_1A57E:				; XREF: Obj84_Index
0001B202 7000                       		moveq	#0,d0
0001B204 1028 0028                  		move.b	$28(a0),d0
0001B208 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B20C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B210 6000 FF5C                  		bra.w	loc_1A4EA
0001B214                            ; ===========================================================================
0001B214 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B216 0000                       		dc.w loc_1A598-off_1A590
0001B218 0000                       		dc.w loc_1A604-off_1A590
0001B21A 0000                       		dc.w loc_1A604-off_1A590
0001B21C                            ; ===========================================================================
0001B21C                            
0001B21C                            loc_1A598:				; XREF: off_1A590
0001B21C 4A28 0029                  		tst.b	$29(a0)
0001B220 6600                       		bne.s	loc_1A5D4
0001B222 2268 0034                  		movea.l	$34(a0),a1
0001B226 4A29 0021                  		tst.b	$21(a1)
0001B22A 6600                       		bne.s	loc_1A5B4
0001B22C 6100 D382                  		bsr.w	BossDefeated
0001B230 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B238                            
0001B238                            loc_1A5B4:
0001B238 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B240 6400                       		bcc.s	locret_1A602
0001B242 42A8 003C                  		clr.l	$3C(a0)
0001B246 2268 0034                  		movea.l	$34(a0),a1
0001B24A 5369 0032                  		subq.w	#1,$32(a1)
0001B24E 4269 0030                  		clr.w	$30(a1)
0001B252 5528 0024                  		subq.b	#2,$24(a0)
0001B256 4E75                       		rts	
0001B258                            ; ===========================================================================
0001B258                            
0001B258                            loc_1A5D4:
0001B258 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B25E 6C00                       		bge.s	loc_1A5E4
0001B260 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B268                            
0001B268                            loc_1A5E4:
0001B268 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B270 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B276 6E00                       		bgt.s	locret_1A602
0001B278 4268 003E                  		clr.w	$3E(a0)
0001B27C 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B282 4228 0029                  		clr.b	$29(a0)
0001B286                            
0001B286                            locret_1A602:
0001B286 4E75                       		rts	
0001B288                            ; ===========================================================================
0001B288                            
0001B288                            loc_1A604:				; XREF: off_1A590
0001B288 08E8 0001 0001             		bset	#1,1(a0)
0001B28E 4A28 0029                  		tst.b	$29(a0)
0001B292 6600                       		bne.s	loc_1A646
0001B294 2268 0034                  		movea.l	$34(a0),a1
0001B298 4A29 0021                  		tst.b	$21(a1)
0001B29C 6600                       		bne.s	loc_1A626
0001B29E 6100 D310                  		bsr.w	BossDefeated
0001B2A2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B2AA                            
0001B2AA                            loc_1A626:
0001B2AA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B2B2 6400                       		bcc.s	locret_1A674
0001B2B4 42A8 003C                  		clr.l	$3C(a0)
0001B2B8 2268 0034                  		movea.l	$34(a0),a1
0001B2BC 5369 0032                  		subq.w	#1,$32(a1)
0001B2C0 4269 0030                  		clr.w	$30(a1)
0001B2C4 5528 0024                  		subq.b	#2,$24(a0)
0001B2C8 4E75                       		rts	
0001B2CA                            ; ===========================================================================
0001B2CA                            
0001B2CA                            loc_1A646:
0001B2CA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B2D0 6D00                       		blt.s	loc_1A656
0001B2D2 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B2DA                            
0001B2DA                            loc_1A656:
0001B2DA 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B2E2 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B2E8 6D00                       		blt.s	locret_1A674
0001B2EA 4268 003E                  		clr.w	$3E(a0)
0001B2EE 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B2F4 4228 0029                  		clr.b	$29(a0)
0001B2F8                            
0001B2F8                            locret_1A674:
0001B2F8 4E75                       		rts	
0001B2FA                            ; ===========================================================================
0001B2FA                            ; ---------------------------------------------------------------------------
0001B2FA                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B2FA                            ; ---------------------------------------------------------------------------
0001B2FA                            Map_obj84:
0001B2FA                            	include "_maps\obj84.asm"
0001B2FA                            ; ================================================================================
0001B2FA                            ; Sprite Mappings - generated by Flex 2 Sat Sep 01 2018 15:41:47 GMT-0700 (Pacific Daylight Time)
0001B2FA                            ; ================================================================================
0001B2FA                            
0001B2FA                            DATA1U6S2PL78VA:
0001B2FA 0000 0000                  	dc.w DATA1U6S2PL78VA_0-DATA1U6S2PL78VA, DATA1U6S2PL78VA_1-DATA1U6S2PL78VA
0001B2FE 0000 0000                  	dc.w DATA1U6S2PL78VA_2-DATA1U6S2PL78VA, DATA1U6S2PL78VA_3-DATA1U6S2PL78VA
0001B302 0000 0000                  	dc.w DATA1U6S2PL78VA_4-DATA1U6S2PL78VA, DATA1U6S2PL78VA_5-DATA1U6S2PL78VA
0001B306 0000 0000                  	dc.w DATA1U6S2PL78VA_6-DATA1U6S2PL78VA, DATA1U6S2PL78VA_7-DATA1U6S2PL78VA
0001B30A 0000 0000                  	dc.w DATA1U6S2PL78VA_8-DATA1U6S2PL78VA, DATA1U6S2PL78VA_9-DATA1U6S2PL78VA
0001B30E 0000 0000                  	dc.w DATA1U6S2PL78VA_A-DATA1U6S2PL78VA, DATA1U6S2PL78VA_B-DATA1U6S2PL78VA
0001B312 0000                       	dc.w DATA1U6S2PL78VA_C-DATA1U6S2PL78VA
0001B314 06                         DATA1U6S2PL78VA_0: dc.b $6
0001B315 A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B31A A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B31F B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B324 B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B329 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B32E B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B333 08                         DATA1U6S2PL78VA_1: dc.b $8
0001B334 A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B339 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B33E B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B343 B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B348 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B34D B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B352 D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B357 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B35C 0A                         DATA1U6S2PL78VA_2: dc.b $A
0001B35D A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B362 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B367 B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B36C B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B371 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B376 B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B37B D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B380 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B385 F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B38A F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B38F 0C                         DATA1U6S2PL78VA_3: dc.b $C
0001B390 A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B395 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B39A B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B39F B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B3A4 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B3A9 B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B3AE D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B3B3 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B3B8 F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B3BD F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B3C2 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B3C7 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B3CC 0D                         DATA1U6S2PL78VA_4: dc.b $D
0001B3CD A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B3D2 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B3D7 B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B3DC B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B3E1 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B3E6 B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B3EB D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B3F0 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B3F5 F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B3FA F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B3FF 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B404 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B409 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B40E 0E                         DATA1U6S2PL78VA_5: dc.b $E
0001B40F A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B414 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B419 B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B41E B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B423 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B428 B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B42D D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B432 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B437 F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B43C F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B441 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B446 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B44B 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B450 580F 0050 F0               	dc.b $58, $F, $0, $50, $F0
0001B455 0E                         DATA1U6S2PL78VA_6: dc.b $E
0001B456 A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B45B A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B460 B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B465 B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B46A B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B46F B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B474 D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B479 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B47E F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B483 F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B488 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B48D 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B492 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B497 580F 0050 F0               	dc.b $58, $F, $0, $50, $F0
0001B49C 0E                         DATA1U6S2PL78VA_7: dc.b $E
0001B49D A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B4A2 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B4A7 B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B4AC B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B4B1 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B4B6 B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B4BB D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B4C0 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B4C5 F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B4CA F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B4CF 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B4D4 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B4D9 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B4DE 580F 0050 F0               	dc.b $58, $F, $0, $50, $F0
0001B4E3 0E                         DATA1U6S2PL78VA_8: dc.b $E
0001B4E4 A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B4E9 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B4EE B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B4F3 B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B4F8 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B4FD B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B502 D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B507 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B50C F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B511 F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B516 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B51B 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B520 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B525 580F 0050 F0               	dc.b $58, $F, $0, $50, $F0
0001B52A 0E                         DATA1U6S2PL78VA_9: dc.b $E
0001B52B A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B530 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B535 B00C 0808 00               	dc.b $B0, $C, $8, $8, $0
0001B53A B00C 080C E0               	dc.b $B0, $C, $8, $C, $E0
0001B53F B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B544 B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B549 D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B54E D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B553 F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B558 F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B55D 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B562 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B567 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B56C 580F 0050 F0               	dc.b $58, $F, $0, $50, $F0
0001B571 0E                         DATA1U6S2PL78VA_A: dc.b $E
0001B572 A00D 0000 E0               	dc.b $A0, $D, $0, $0, $E0
0001B577 A00D 0800 00               	dc.b $A0, $D, $8, $0, $0
0001B57C B00C 0008 E0               	dc.b $B0, $C, $0, $8, $E0
0001B581 B00C 000C 00               	dc.b $B0, $C, $0, $C, $0
0001B586 B80F 0010 E0               	dc.b $B8, $F, $0, $10, $E0
0001B58B B80F 0810 00               	dc.b $B8, $F, $8, $10, $0
0001B590 D80F 0020 E0               	dc.b $D8, $F, $0, $20, $E0
0001B595 D80F 0820 00               	dc.b $D8, $F, $8, $20, $0
0001B59A F80F 0030 E0               	dc.b $F8, $F, $0, $30, $E0
0001B59F F80F 0830 00               	dc.b $F8, $F, $8, $30, $0
0001B5A4 180F 0040 E0               	dc.b $18, $F, $0, $40, $E0
0001B5A9 180F 0840 00               	dc.b $18, $F, $8, $40, $0
0001B5AE 380F 0050 F0               	dc.b $38, $F, $0, $50, $F0
0001B5B3 580F 0050 F0               	dc.b $58, $F, $0, $50, $F0
0001B5B8 00                         DATA1U6S2PL78VA_B: dc.b $0
0001B5B9 02                         DATA1U6S2PL78VA_C: dc.b $2
0001B5BA D00D 006E E5               	dc.b $D0, $D, $0, $6E, $E5
0001B5BF D005 0076 05               	dc.b $D0, $5, $0, $76, $5
0001B5C4                            	even
0001B5C4                            	even
0001B5C4                            
0001B5C4                            ; ===========================================================================
0001B5C4                            ; ---------------------------------------------------------------------------
0001B5C4                            ; Object 86 - energy balls (FZ)
0001B5C4                            ; ---------------------------------------------------------------------------
0001B5C4                            
0001B5C4                            Obj86:					; XREF: Obj_Index
0001B5C4 7000                       		moveq	#0,d0
0001B5C6 1028 0024                  		move.b	$24(a0),d0
0001B5CA 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B5CE 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B5D2                            ; ===========================================================================
0001B5D2 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B5D4 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B5D6 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B5D8 0000                       		dc.w loc_1A962-Obj86_Index
0001B5DA 0000                       		dc.w loc_1A982-Obj86_Index
0001B5DC                            ; ===========================================================================
0001B5DC                            
0001B5DC                            Obj86_Main:				; XREF: Obj86_Index
0001B5DC 317C 2588 0008             		move.w	#$2588,8(a0)
0001B5E2 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B5E8 317C 0300 0002             		move.w	#$300,2(a0)
0001B5EE 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B5F6 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5FC 117C 0003 0018             		move.b	#3,$18(a0)
0001B602 117C 0008 0017             		move.b	#8,$17(a0)
0001B608 117C 0008 0016             		move.b	#8,$16(a0)
0001B60E 117C 0004 0001             		move.b	#4,1(a0)
0001B614 08E8 0007 0001             		bset	#7,1(a0)
0001B61A 5428 0024                  		addq.b	#2,$24(a0)
0001B61E                            
0001B61E                            Obj86_Generator:			; XREF: Obj86_Index
0001B61E 2268 0034                  		movea.l	$34(a0),a1
0001B622 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B628 6600                       		bne.s	loc_1A850
0001B62A 10BC 003F                  		move.b	#$3F,(a0)
0001B62E 117C 0000 0024             		move.b	#0,$24(a0)
0001B634 4EF9 0000 DD42             		jmp	DisplaySprite
0001B63A                            ; ===========================================================================
0001B63A                            
0001B63A                            loc_1A850:
0001B63A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B640                            ;		tst.b	$29(a0)
0001B640                            ;		beq.s	loc_1A86C
0001B640 5428 0024                  		addq.b	#2,$24(a0)
0001B644 117C 0001 001C             		move.b	#1,$1C(a0)
0001B64A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B650                            
0001B650                            loc_1A86C:
0001B650 323C 0013                  		move.w	#$13,d1
0001B654 343C 0008                  		move.w	#8,d2
0001B658 363C 0011                  		move.w	#$11,d3
0001B65C 3828 0008                  		move.w	8(a0),d4
0001B660 4EB9 0001 02FA             		jsr	SolidObject
0001B666 3038 D008                  		move.w	($FFFFD008).w,d0
0001B66A 9068 0008                  		sub.w	8(a0),d0
0001B66E 6B00                       		bmi.s	loc_1A89A
0001B670 0440 0140                  		subi.w	#$140,d0
0001B674 6B00                       		bmi.s	loc_1A89A
0001B676 4A28 0001                  		tst.b	1(a0)
0001B67A 6A00 FA50                  		bpl.w	Obj84_Delete
0001B67E                            
0001B67E                            loc_1A89A:
0001B67E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B682 4EB9 0000 AFC8             		jsr	AnimateSprite
0001B688 4EF9 0000 DD42             		jmp	DisplaySprite
0001B68E                            ; ===========================================================================
0001B68E                            
0001B68E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B68E 4A28 0029                  		tst.b	$29(a0)
0001B692 6700 0000                  		beq.w	loc_1A954
0001B696 4228 0029                  		clr.b	$29(a0)
0001B69A D068 0030                  		add.w	$30(a0),d0
0001B69E 0240 001E                  		andi.w	#$1E,d0
0001B6A2 D4C0                       		adda.w	d0,a2
0001B6A4 5868 0030                  		addq.w	#4,$30(a0)
0001B6A8 4268 0032                  		clr.w	$32(a0)
0001B6AC 7406                       		moveq	#6,d2
0001B6AE                            
0001B6AE                            Obj86_Loop:
0001B6AE 4EB9 0000 E204             		jsr	SingleObjLoad2
0001B6B4 6600 0000                  		bne.w	loc_1A954
0001B6B8 12BC 0086                  		move.b	#$86,(a1)
0001B6BC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B6C2 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B6C8 137C 0008 0024             		move.b	#8,$24(a1)
0001B6CE 337C 2300 0002             		move.w	#$2300,2(a1)
0001B6D4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B6DC 137C 000C 0016             		move.b	#$C,$16(a1)
0001B6E2 137C 000C 0017             		move.b	#$C,$17(a1)
0001B6E8 137C 0000 0020             		move.b	#0,$20(a1)
0001B6EE 137C 0003 0018             		move.b	#3,$18(a1)
0001B6F4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B6FA 137C 0004 0001             		move.b	#4,1(a1)
0001B700 08E9 0007 0001             		bset	#7,1(a1)
0001B706 2348 0034                  		move.l	a0,$34(a1)
0001B70A 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001B710 3228 0032                  		move.w	$32(a0),d1
0001B714 C3FC FFB1                  		muls.w	#-$4F,d1
0001B718 0641 2578                  		addi.w	#$2578,d1
0001B71C 0240 001F                  		andi.w	#$1F,d0
0001B720 0440 0010                  		subi.w	#$10,d0
0001B724 D041                       		add.w	d1,d0
0001B726 3340 0030                  		move.w	d0,$30(a1)
0001B72A 5268 0032                  		addq.w	#1,$32(a0)
0001B72E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B734 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B738                            
0001B738                            loc_1A954:
0001B738 4A68 0032                  		tst.w	$32(a0)
0001B73C 6600                       		bne.s	loc_1A95E
0001B73E 5428 0024                  		addq.b	#2,$24(a0)
0001B742                            
0001B742                            loc_1A95E:
0001B742 6000 FF0C                  		bra.w	loc_1A86C
0001B746                            ; ===========================================================================
0001B746                            
0001B746                            loc_1A962:				; XREF: Obj86_Index
0001B746 117C 0002 001C             		move.b	#2,$1C(a0)
0001B74C 4A68 0038                  		tst.w	$38(a0)
0001B750 6600                       		bne.s	loc_1A97E
0001B752 117C 0002 0024             		move.b	#2,$24(a0)
0001B758 2268 0034                  		movea.l	$34(a0),a1
0001B75C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B762                            
0001B762                            loc_1A97E:
0001B762 6000 FEEC                  		bra.w	loc_1A86C
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            loc_1A982:				; XREF: Obj86_Index
0001B766 7000                       		moveq	#0,d0
0001B768 1028 0025                  		move.b	$25(a0),d0
0001B76C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B770 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B774 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B778 4EB9 0000 AFC8             		jsr	AnimateSprite
0001B77E 4EF9 0000 DD42             		jmp	DisplaySprite
0001B784                            ; ===========================================================================
0001B784 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B786 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B788 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B78A                            ; ===========================================================================
0001B78A                            
0001B78A                            loc_1A9A6:				; XREF: Obj86_Index2
0001B78A 3028 0030                  		move.w	$30(a0),d0
0001B78E 9068 0008                  		sub.w	8(a0),d0
0001B792 EB40                       		asl.w	#5,d0
0001B794 3140 0010                  		move.w	d0,$10(a0)
0001B798 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B79E 5428 0025                  		addq.b	#2,$25(a0)
0001B7A2 4E75                       		rts	
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            loc_1A9C0:				; XREF: Obj86_Index2
0001B7A4 4A68 0010                  		tst.w	$10(a0)
0001B7A8 6700                       		beq.s	loc_1A9E6
0001B7AA 4EB9 0000 DD28             		jsr	SpeedToPos
0001B7B0 3028 0008                  		move.w	8(a0),d0
0001B7B4 9068 0030                  		sub.w	$30(a0),d0
0001B7B8 6400                       		bcc.s	loc_1A9E6
0001B7BA 4268 0010                  		clr.w	$10(a0)
0001B7BE D168 0008                  		add.w	d0,8(a0)
0001B7C2 2268 0034                  		movea.l	$34(a0),a1
0001B7C6 5369 0032                  		subq.w	#1,$32(a1)
0001B7CA                            
0001B7CA                            loc_1A9E6:
0001B7CA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B7D0 5368 0028                  		subq.w	#1,$28(a0)
0001B7D4 6600                       		bne.s	locret_1AA1C
0001B7D6 5428 0025                  		addq.b	#2,$25(a0)
0001B7DA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B7E0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B7E6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B7EC 7000                       		moveq	#0,d0
0001B7EE 3038 D008                  		move.w	($FFFFD008).w,d0
0001B7F2 9068 0008                  		sub.w    8(a0),d0
0001B7F6 E948                               lsl.w    #4,d0
0001B7F8 3140 0010                          move.w    d0,$10(a0)
0001B7FC 317C 0320 0012                     move.w    #$320,$12(a0)
0001B802                            
0001B802                            locret_1AA1C:
0001B802 4E75                               rts    
0001B804                            ; ===========================================================================
0001B804                            
0001B804                            loc_1AA1E:				; XREF: Obj86_Index2
0001B804 4EB9 0000 DD28             		jsr	SpeedToPos
0001B80A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B810 6400                       		bcc.s	loc_1AA34
0001B812 5368 0028                  		subq.w	#1,$28(a0)
0001B816 6700                       		beq.s	loc_1AA34
0001B818 4E75                       		rts	
0001B81A                            ; ===========================================================================
0001B81A                            
0001B81A                            loc_1AA34:
0001B81A 2268 0034                  		movea.l	$34(a0),a1
0001B81E 5369 0038                  		subq.w	#1,$38(a1)
0001B822 6000 F8A8                  		bra.w	Obj84_Delete
0001B826                            ; ===========================================================================
0001B826                            Ani_obj86:
0001B826                            	include "_anim\obj86.asm"
0001B826                            ; ---------------------------------------------------------------------------
0001B826                            ; Animation script - energy ball launcher (FZ)
0001B826                            ; ---------------------------------------------------------------------------
0001B826 0000                       		dc.w byte_1AA46-Ani_obj86
0001B828 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B82A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B82C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B830 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B836 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B83C                            		even
0001B83C                            		even
0001B83C                            
0001B83C                            ; ---------------------------------------------------------------------------
0001B83C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B83C                            ; ---------------------------------------------------------------------------
0001B83C                            Map_obj86:
0001B83C                            	include "_maps\obj86.asm"
0001B83C                            ; ---------------------------------------------------------------------------
0001B83C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B83C                            ; ---------------------------------------------------------------------------
0001B83C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B840 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B844 01                         byte_1AA5E:	dc.b 1
0001B845 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B84A 01                         byte_1AA64:	dc.b 1
0001B84B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B850 01                         byte_1AA6A:	dc.b 1
0001B851 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B856 01                         byte_1AA70:	dc.b 1
0001B857 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B85C                            		even
0001B85C                            		even
0001B85C                            
0001B85C                            Ani_obj86a:
0001B85C                            	include "_anim\obj86a.asm"
0001B85C                            ; ---------------------------------------------------------------------------
0001B85C                            ; Animation script - energy balls (FZ)
0001B85C                            ; ---------------------------------------------------------------------------
0001B85C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B85E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B860 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B86F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B87E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B882 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B88C                            		even
0001B88C                            		even
0001B88C                            
0001B88C                            ; ---------------------------------------------------------------------------
0001B88C                            ; Sprite mappings - energy balls (FZ)
0001B88C                            ; ---------------------------------------------------------------------------
0001B88C                            Map_obj86a:
0001B88C                            	include "_maps\obj86a.asm"
0001B88C                            ; ---------------------------------------------------------------------------
0001B88C                            ; Sprite mappings - energy balls (FZ)
0001B88C                            ; ---------------------------------------------------------------------------
0001B88C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B890 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B894 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B898 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B89C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B8A0 0000                       		dc.w byte_1AB20-Map_obj86a
0001B8A2 02                         byte_1AABC:	dc.b 2
0001B8A3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B8A8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B8AD 02                         byte_1AAC7:	dc.b 2
0001B8AE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B8B3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B8B8 02                         byte_1AAD2:	dc.b 2
0001B8B9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B8BE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B8C3 02                         byte_1AADD:	dc.b 2
0001B8C4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B8C9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B8CE 02                         byte_1AAE8:	dc.b 2
0001B8CF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B8D4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B8D9 02                         byte_1AAF3:	dc.b 2
0001B8DA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B8DF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B8E4 01                         byte_1AAFE:	dc.b 1
0001B8E5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B8EA 01                         byte_1AB04:	dc.b 1
0001B8EB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B8F0 02                         byte_1AB0A:	dc.b 2
0001B8F1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B8F6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B8FB 02                         byte_1AB15:	dc.b 2
0001B8FC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B901 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B906 00                         byte_1AB20:	dc.b 0
0001B908 00                         		even
0001B908 00                         		even
0001B908                            
0001B908                            ; ===========================================================================
0001B908                            ; ---------------------------------------------------------------------------
0001B908                            ; Object 3E - prison capsule
0001B908                            ; ---------------------------------------------------------------------------
0001B908                            
0001B908                            Obj3E:					; XREF: Obj_Index
0001B908 7000                       		moveq	#0,d0
0001B90A 1028 0024                  		move.b	$24(a0),d0
0001B90E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B912 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B916 3028 0008                  		move.w	8(a0),d0
0001B91A 0240 FF80                  		andi.w	#$FF80,d0
0001B91E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B922 0441 0080                  		subi.w	#$80,d1
0001B926 0241 FF80                  		andi.w	#$FF80,d1
0001B92A 9041                       		sub.w	d1,d0
0001B92C 0C40 0280                  		cmpi.w	#$280,d0
0001B930 6200                       		bhi.s	Obj3E_Delete
0001B932 4EF9 0000 DD42             		jmp	DisplaySprite
0001B938                            ; ===========================================================================
0001B938                            
0001B938                            Obj3E_Delete:
0001B938 4EF9 0000 DD7E             		jmp	DeleteObject
0001B93E                            ; ===========================================================================
0001B93E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B940 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B942 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B944 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B946 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B948 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B94A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B94C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B94E                            
0001B94E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B952 040C 0501                  		dc.b 4,	$C, 5, 1
0001B956 0610 0403                  		dc.b 6,	$10, 4,	3
0001B95A 0810 0305                  		dc.b 8,	$10, 3,	5
0001B95E                            ; ===========================================================================
0001B95E                            
0001B95E                            Obj3E_Main:				; XREF: Obj3E_Index
0001B95E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B966 317C 049D 0002             		move.w	#$49D,2(a0)
0001B96C 117C 0004 0001             		move.b	#4,1(a0)
0001B972 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B978 7000                       		moveq	#0,d0
0001B97A 1028 0028                  		move.b	$28(a0),d0
0001B97E E548                       		lsl.w	#2,d0
0001B980 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B984 1159 0024                  		move.b	(a1)+,$24(a0)
0001B988 1159 0019                  		move.b	(a1)+,$19(a0)
0001B98C 1159 0018                  		move.b	(a1)+,$18(a0)
0001B990 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B994 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B998 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B99A 117C 0006 0020             		move.b	#6,$20(a0)
0001B9A0 117C 0008 0021             		move.b	#8,$21(a0)
0001B9A6                            
0001B9A6                            Obj3E_Not02:
0001B9A6 4E75                       		rts	
0001B9A8                            ; ===========================================================================
0001B9A8                            
0001B9A8                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B9A8 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B9AE 6700                       		beq.s	Obj3E_ChkOpened
0001B9B0 323C 002B                  		move.w	#$2B,d1
0001B9B4 343C 0018                  		move.w	#$18,d2
0001B9B8 363C 0018                  		move.w	#$18,d3
0001B9BC 3828 0008                  		move.w	8(a0),d4
0001B9C0 4EF9 0001 02FA             		jmp	SolidObject
0001B9C6                            ; ===========================================================================
0001B9C6                            
0001B9C6                            Obj3E_ChkOpened:
0001B9C6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B9CA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B9CC 4228 0025                  		clr.b	$25(a0)
0001B9D0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B9D6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B9DC                            
0001B9DC                            Obj3E_DoOpen:
0001B9DC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B9E2 4E75                       		rts	
0001B9E4                            ; ===========================================================================
0001B9E4                            
0001B9E4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B9E4 323C 0017                  		move.w	#$17,d1
0001B9E8 343C 0008                  		move.w	#8,d2
0001B9EC 363C 0008                  		move.w	#8,d3
0001B9F0 3828 0008                  		move.w	8(a0),d4
0001B9F4 4EB9 0001 02FA             		jsr	SolidObject
0001B9FA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001BA00 4EB9 0000 AFC8             		jsr	AnimateSprite
0001BA06 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001BA0C 4A28 0025                  		tst.b	$25(a0)
0001BA10 6700                       		beq.s	locret_1AC60
0001BA12 5068 000C                  		addq.w	#8,$C(a0)
0001BA16 117C 000A 0024             		move.b	#$A,$24(a0)
0001BA1C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001BA22 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001BA26 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001BA2A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001BA30 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001BA36 4228 0025                  		clr.b	$25(a0)
0001BA3A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BA40 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BA46                            
0001BA46                            locret_1AC60:
0001BA46 4E75                       		rts	
0001BA48                            ; ===========================================================================
0001BA48                            
0001BA48                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001BA48 7007                       		moveq	#7,d0
0001BA4A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BA4E 6600                       		bne.s	loc_1ACA0
0001BA50 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001BA56 6600                       		bne.s	loc_1ACA0
0001BA58 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001BA5C 3368 0008 0008             		move.w	8(a0),8(a1)
0001BA62 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BA68 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001BA6E 7200                       		moveq	#0,d1
0001BA70 1200                       		move.b	d0,d1
0001BA72 E409                       		lsr.b	#2,d1
0001BA74 0441 0020                  		subi.w	#$20,d1
0001BA78 D369 0008                  		add.w	d1,8(a1)
0001BA7C E048                       		lsr.w	#8,d0
0001BA7E E608                       		lsr.b	#3,d0
0001BA80 D169 000C                  		add.w	d0,$C(a1)
0001BA84                            
0001BA84                            loc_1ACA0:
0001BA84 5368 001E                  		subq.w	#1,$1E(a0)
0001BA88 6700                       		beq.s	Obj3E_MakeAnimal
0001BA8A 4E75                       		rts	
0001BA8C                            ; ===========================================================================
0001BA8C                            
0001BA8C                            Obj3E_MakeAnimal:
0001BA8C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001BA92 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001BA98 117C 0006 001A             		move.b	#6,$1A(a0)
0001BA9E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001BAA4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001BAAA 7C07                       		moveq	#7,d6
0001BAAC 3A3C 009A                  		move.w	#$9A,d5
0001BAB0 78E4                       		moveq	#-$1C,d4
0001BAB2                            
0001BAB2                            Obj3E_Loop:
0001BAB2 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001BAB8 6600                       		bne.s	locret_1ACF8
0001BABA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BABE 3368 0008 0008             		move.w	8(a0),8(a1)
0001BAC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BACA D969 0008                  		add.w	d4,8(a1)
0001BACE 5E44                       		addq.w	#7,d4
0001BAD0 3345 0036                  		move.w	d5,$36(a1)
0001BAD4 5145                       		subq.w	#8,d5
0001BAD6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001BADA                            
0001BADA                            locret_1ACF8:
0001BADA 4E75                       		rts	
0001BADC                            ; ===========================================================================
0001BADC                            
0001BADC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001BADC 7007                       		moveq	#7,d0
0001BADE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BAE2 6600                       		bne.s	loc_1AD38
0001BAE4 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001BAEA 6600                       		bne.s	loc_1AD38
0001BAEC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BAF0 3368 0008 0008             		move.w	8(a0),8(a1)
0001BAF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BAFC 4EB9 0000 2D3E             		jsr	(RandomNumber).l
0001BB02 0240 001F                  		andi.w	#$1F,d0
0001BB06 5D40                       		subq.w	#6,d0
0001BB08 4A41                       		tst.w	d1
0001BB0A 6A00                       		bpl.s	loc_1AD2E
0001BB0C 4440                       		neg.w	d0
0001BB0E                            
0001BB0E                            loc_1AD2E:
0001BB0E D169 0008                  		add.w	d0,8(a1)
0001BB12 337C 000C 0036             		move.w	#$C,$36(a1)
0001BB18                            
0001BB18                            loc_1AD38:
0001BB18 5368 001E                  		subq.w	#1,$1E(a0)
0001BB1C 6600                       		bne.s	locret_1AD48
0001BB1E 5428 0024                  		addq.b	#2,$24(a0)
0001BB22 317C 00B4 001E             		move.w	#180,$1E(a0)
0001BB28                            
0001BB28                            locret_1AD48:
0001BB28 4E75                       		rts	
0001BB2A                            ; ===========================================================================
0001BB2A                            
0001BB2A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001BB2A 703E                       		moveq	#$3E,d0
0001BB2C 7228                       		moveq	#$28,d1
0001BB2E 7440                       		moveq	#$40,d2
0001BB30 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001BB34                            
0001BB34                            Obj3E_FindObj28:
0001BB34 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001BB36 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001BB38 D2C2                       		adda.w	d2,a1		; next object RAM
0001BB3A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001BB3E                            
0001BB3E 4EB9 0000 F3FA             		jsr	GotThroughAct
0001BB44 4EF9 0000 DD7E             		jmp	DeleteObject
0001BB4A                            ; ===========================================================================
0001BB4A                            
0001BB4A                            Obj3E_Obj28Found:
0001BB4A 4E75                       		rts	
0001BB4C                            ; ===========================================================================
0001BB4C                            Ani_obj3E:
0001BB4C                            	include "_anim\obj3E.asm"
0001BB4C                            ; ---------------------------------------------------------------------------
0001BB4C                            ; Animation script - prison capsule
0001BB4C                            ; ---------------------------------------------------------------------------
0001BB4C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BB4E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BB50 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001BB54                            		even
0001BB54                            		even
0001BB54                            
0001BB54                            ; ---------------------------------------------------------------------------
0001BB54                            ; Sprite mappings - prison capsule
0001BB54                            ; ---------------------------------------------------------------------------
0001BB54                            Map_obj3E:
0001BB54                            	include "_maps\obj3E.asm"
0001BB54                            ; ---------------------------------------------------------------------------
0001BB54                            ; Sprite mappings - prison capsule
0001BB54                            ; ---------------------------------------------------------------------------
0001BB54 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001BB58 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001BB5C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001BB60 0000                       		dc.w byte_1ADE2-Map_obj3E
0001BB62 07                         byte_1AD82:	dc.b 7
0001BB63 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001BB68 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001BB6D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001BB72 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001BB77 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001BB7C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BB81 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BB86 01                         byte_1ADA6:	dc.b 1
0001BB87 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001BB8C 06                         byte_1ADAC:	dc.b 6
0001BB8D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001BB92 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001BB97 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001BB9C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001BBA1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BBA6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BBAB 01                         byte_1ADCB:	dc.b 1
0001BBAC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BBB1 02                         byte_1ADD1:	dc.b 2
0001BBB2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BBB7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BBBC 01                         byte_1ADDC:	dc.b 1
0001BBBD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BBC2 00                         byte_1ADE2:	dc.b 0
0001BBC4 00                         		even
0001BBC4 00                         		even
0001BBC4                            
0001BBC4                            ; ---------------------------------------------------------------------------
0001BBC4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BBC4                            ; ---------------------------------------------------------------------------
0001BBC4                            
0001BBC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBC4                            
0001BBC4                            
0001BBC4                            TouchResponse:				; XREF: Obj01
0001BBC4 4E71                       		nop	
0001BBC6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BBCA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BBCE 5142                       		subq.w	#8,d2
0001BBD0 7A00                       		moveq	#0,d5
0001BBD2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BBD6 5705                       		subq.b	#3,d5
0001BBD8 9645                       		sub.w	d5,d3
0001BBDA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BBE0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BBE2 0643 000C                  		addi.w	#$C,d3
0001BBE6 7A0A                       		moveq	#$A,d5
0001BBE8                            
0001BBE8                            Touch_NoDuck:
0001BBE8 383C 0010                  		move.w	#$10,d4
0001BBEC DA45                       		add.w	d5,d5
0001BBEE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BBF2 3C3C 005F                  		move.w	#$5F,d6
0001BBF6                            
0001BBF6                            Touch_Loop:
0001BBF6 4A29 0001                  		tst.b	1(a1)
0001BBFA 6A00                       		bpl.s	Touch_NextObj
0001BBFC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BC00 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BC02                            
0001BC02                            Touch_NextObj:
0001BC02 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BC06 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BC0A                            
0001BC0A 7000                       		moveq	#0,d0
0001BC0C 4E75                       		rts	
0001BC0E                            ; ===========================================================================
0001BC0E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BC10 0C14                       		dc.b   $C, $14
0001BC12 140C                       		dc.b  $14,  $C
0001BC14 0410                       		dc.b	4, $10
0001BC16 0C12                       		dc.b   $C, $12
0001BC18 1010                       		dc.b  $10, $10
0001BC1A 0606                       		dc.b	6,   6
0001BC1C 180C                       		dc.b  $18,  $C
0001BC1E 0C10                       		dc.b   $C, $10
0001BC20 100C                       		dc.b  $10,  $C
0001BC22 0808                       		dc.b	8,   8
0001BC24 1410                       		dc.b  $14, $10
0001BC26 1408                       		dc.b  $14,   8
0001BC28 0E0E                       		dc.b   $E,  $E
0001BC2A 1818                       		dc.b  $18, $18
0001BC2C 2810                       		dc.b  $28, $10
0001BC2E 1018                       		dc.b  $10, $18
0001BC30 0810                       		dc.b	8, $10
0001BC32 2070                       		dc.b  $20, $70
0001BC34 4020                       		dc.b  $40, $20
0001BC36 8020                       		dc.b  $80, $20
0001BC38 2020                       		dc.b  $20, $20
0001BC3A 0808                       		dc.b	8,   8
0001BC3C 0404                       		dc.b	4,   4
0001BC3E 2008                       		dc.b  $20,   8
0001BC40 0C0C                       		dc.b   $C,  $C
0001BC42 0804                       		dc.b	8,   4
0001BC44 1804                       		dc.b  $18,   4
0001BC46 2804                       		dc.b  $28,   4
0001BC48 0408                       		dc.b	4,   8
0001BC4A 0418                       		dc.b	4, $18
0001BC4C 0428                       		dc.b	4, $28
0001BC4E 0420                       		dc.b	4, $20
0001BC50 1818                       		dc.b  $18, $18
0001BC52 0C18                       		dc.b   $C, $18
0001BC54 4808                       		dc.b  $48,   8
0001BC56                            ; ===========================================================================
0001BC56                            
0001BC56                            Touch_Height:				; XREF: TouchResponse
0001BC56 0240 003F                  		andi.w	#$3F,d0
0001BC5A D040                       		add.w	d0,d0
0001BC5C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BC60 7200                       		moveq	#0,d1
0001BC62 121A                       		move.b	(a2)+,d1
0001BC64 3029 0008                  		move.w	8(a1),d0
0001BC68 9041                       		sub.w	d1,d0
0001BC6A 9042                       		sub.w	d2,d0
0001BC6C 6400                       		bcc.s	loc_1AE98
0001BC6E D241                       		add.w	d1,d1
0001BC70 D041                       		add.w	d1,d0
0001BC72 6500                       		bcs.s	Touch_Width
0001BC74 6000 FF8C                  		bra.w	Touch_NextObj
0001BC78                            ; ===========================================================================
0001BC78                            
0001BC78                            loc_1AE98:
0001BC78 B044                       		cmp.w	d4,d0
0001BC7A 6200 FF86                  		bhi.w	Touch_NextObj
0001BC7E                            
0001BC7E                            Touch_Width:
0001BC7E 7200                       		moveq	#0,d1
0001BC80 121A                       		move.b	(a2)+,d1
0001BC82 3029 000C                  		move.w	$C(a1),d0
0001BC86 9041                       		sub.w	d1,d0
0001BC88 9043                       		sub.w	d3,d0
0001BC8A 6400                       		bcc.s	loc_1AEB6
0001BC8C D241                       		add.w	d1,d1
0001BC8E D240                       		add.w	d0,d1
0001BC90 6500                       		bcs.s	Touch_ChkValue
0001BC92 6000 FF6E                  		bra.w	Touch_NextObj
0001BC96                            ; ===========================================================================
0001BC96                            
0001BC96                            loc_1AEB6:
0001BC96 B045                       		cmp.w	d5,d0
0001BC98 6200 FF68                  		bhi.w	Touch_NextObj
0001BC9C                            
0001BC9C                            Touch_ChkValue:
0001BC9C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BCA0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BCA4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BCA8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BCAC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BCB0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BCB2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BCB6                            
0001BCB6                            ; touch	response is $40-$7F
0001BCB6                            
0001BCB6 1029 0020                  		move.b	$20(a1),d0
0001BCBA 0200 003F                  		andi.b	#$3F,d0
0001BCBE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BCC2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BCC4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BCCA 6400 0000                  		bcc.w	locret_1AEF2
0001BCCE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BCD2                            
0001BCD2                            locret_1AEF2:
0001BCD2 4E75                       		rts	
0001BCD4                            ; ===========================================================================
0001BCD4                            
0001BCD4                            Touch_Monitor:
0001BCD4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BCD8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BCDA 3028 000C                  		move.w	$C(a0),d0
0001BCDE 0440 0010                  		subi.w	#$10,d0
0001BCE2 B069 000C                  		cmp.w	$C(a1),d0
0001BCE6 6500                       		bcs.s	locret_1AF2E
0001BCE8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BCEC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BCF2 4A29 0025                  		tst.b	$25(a1)
0001BCF6 6600                       		bne.s	locret_1AF2E
0001BCF8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BCFC 4E75                       		rts	
0001BCFE                            ; ===========================================================================
0001BCFE                            
0001BCFE                            loc_1AF1E:
0001BCFE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BD04 6600                       		bne.s	locret_1AF2E
0001BD06 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BD0A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BD0E                            
0001BD0E                            locret_1AF2E:
0001BD0E 4E75                       		rts	
0001BD10                            ; ===========================================================================
0001BD10                            
0001BD10                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BD10 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BD14 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BD16 0C38 0003 FFF9             		cmpi.b	#$03, ($FFFFFFF9).w	; is the multiple character flag set to $03 (PepsiMan)
0001BD1C 6700 0000                  		beq.w	Touch_ChkHurt	; if yes, branch
0001BD20 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BD26 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BD2A                            
0001BD2A                            loc_1AF40:
0001BD2A 4A29 0021                  		tst.b	$21(a1)
0001BD2E 6700                       		beq.s	Touch_KillEnemy
0001BD30 4468 0010                  		neg.w	$10(a0)
0001BD34 4468 0012                  		neg.w	$12(a0)
0001BD38 E0E8 0010                  		asr	$10(a0)
0001BD3C E0E8 0012                  		asr	$12(a0)
0001BD40 137C 0000 0020             		move.b	#0,$20(a1)
0001BD46 5329 0021                  		subq.b	#1,$21(a1)
0001BD4A 6600                       		bne.s	locret_1AF68
0001BD4C 08E9 0007 0022             		bset	#7,$22(a1)
0001BD52                            
0001BD52                            locret_1AF68:
0001BD52 4E75                       		rts	
0001BD54                            ; ===========================================================================
0001BD54                            
0001BD54                            Touch_KillEnemy:
0001BD54 4238 FFE9                  		clr.b ($FFFFFFE9).w ; clear Pepsi drop move flag
0001BD58 4238 FFDF                  		clr.b ($FFFFFFDF).w ; clear double jump flag
0001BD5C 4238 FFEB                  		clr.b ($FFFFFFEB).w ; clear air dash flag
0001BD60 08E9 0007 0022             		bset	#7,$22(a1)
0001BD66 7000                       		moveq	#0,d0
0001BD68 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BD6C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BD70 0C40 0006                  		cmpi.w	#6,d0
0001BD74 6500                       		bcs.s	loc_1AF82
0001BD76 7006                       		moveq	#6,d0
0001BD78                            
0001BD78                            loc_1AF82:
0001BD78 3340 003E                  		move.w	d0,$3E(a1)
0001BD7C 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BD80 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BD86 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BD88 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BD8C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BD92                            
0001BD92                            loc_1AF9C:
0001BD92 6100 0000                  		bsr.w	AddPoints
0001BD96 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BD9A 137C 0000 0024             		move.b	#0,$24(a1)
0001BDA0 4A68 0012                  		tst.w	$12(a0)
0001BDA4 6B00                       		bmi.s	loc_1AFC2
0001BDA6 3028 000C                  		move.w	$C(a0),d0
0001BDAA B069 000C                  		cmp.w	$C(a1),d0
0001BDAE 6400                       		bcc.s	loc_1AFCA
0001BDB0 4468 0012                  		neg.w	$12(a0)
0001BDB4 4E75                       		rts	
0001BDB6                            ; ===========================================================================
0001BDB6                            
0001BDB6                            loc_1AFC2:
0001BDB6 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BDBC 4E75                       		rts	
0001BDBE                            ; ===========================================================================
0001BDBE                            
0001BDBE                            loc_1AFCA:
0001BDBE 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BDC4 4E75                       		rts	
0001BDC6                            ; ===========================================================================
0001BDC6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BDCE                            ; ===========================================================================
0001BDCE                            
0001BDCE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BDCE 08E9 0007 0022             		bset	#7,$22(a1)
0001BDD4                            
0001BDD4                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BDD4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BDD8 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BDDA                            
0001BDDA                            loc_1AFE6:				; XREF: Touch_Hurt
0001BDDA 70FF                       		moveq	#-1,d0
0001BDDC 4E75                       		rts	
0001BDDE                            ; ===========================================================================
0001BDDE                            
0001BDDE                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BDDE 4E71                       		nop	
0001BDE0 4A68 0030                  		tst.w	$30(a0)
0001BDE4 66F4                       		bne.s	loc_1AFE6
0001BDE6 2449                       		movea.l	a1,a2
0001BDE8                            
0001BDE8                            ; End of function TouchResponse
0001BDE8                            ; continue straight to HurtSonic
0001BDE8                            
0001BDE8                            ; ---------------------------------------------------------------------------
0001BDE8                            ; Hurting Sonic	subroutine
0001BDE8                            ; ---------------------------------------------------------------------------
0001BDE8                            
0001BDE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDE8                            
0001BDE8                            
0001BDE8                            HurtSonic:
0001BDE8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BDEC 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BDEE 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BDF2 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BDF6 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001BDFC 6600                       		bne.s	Hurt_Shield
0001BDFE 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BE02 3368 0008 0008             		move.w	8(a0),8(a1)
0001BE08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BE0E                            
0001BE0E                            Hurt_Shield:
0001BE0E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BE14 117C 0004 0024             		move.b	#4,$24(a0)
0001BE1A 6100 85DA                  		bsr.w	Sonic_ResetOnFloor
0001BE1E 08E8 0001 0022             		bset	#1,$22(a0)
0001BE24 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BE2A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BE30 0828 0006 0022             		btst	#6,$22(a0)
0001BE36 6700                       		beq.s	Hurt_Reverse
0001BE38 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BE3E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BE44                            
0001BE44                            Hurt_Reverse:
0001BE44 3028 0008                  		move.w	8(a0),d0
0001BE48 B06A 0008                  		cmp.w	8(a2),d0
0001BE4C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BE4E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BE52                            
0001BE52                            Hurt_ChkSpikes:
0001BE52 117C 0000 0039             		move.b #0,$39(a0)
0001BE58 317C 0000 0014             		move.w	#0,$14(a0)
0001BE5E 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BE64 317C 0078 0030             		move.w	#$78,$30(a0)
0001BE6A 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BE6E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BE72 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BE74 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BE78 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BE7A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BE7E                            
0001BE7E                            Hurt_Sound:
0001BE7E 4EB9 0000 11B4             		jsr	(PlaySound_Special).l
0001BE84 70FF                       		moveq	#-1,d0
0001BE86 4E75                       		rts	
0001BE88                            ; ===========================================================================
0001BE88                            
0001BE88                            Hurt_NoRings:
0001BE88 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BE8C 6600 FF80                  		bne.w	Hurt_Shield	; if yes, branch
0001BE90                            ; End of function HurtSonic
0001BE90                            
0001BE90                            ; ---------------------------------------------------------------------------
0001BE90                            ; Subroutine to	kill Sonic
0001BE90                            ; ---------------------------------------------------------------------------
0001BE90                            
0001BE90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE90                            
0001BE90                            
0001BE90                            KillSonic:
0001BE90 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BE94 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BE96 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0001BE9C 31FC 0000 F5C0             		move.w	#0,($FFFFF5C0).w ; clear pizza
0001BEA2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BEA8 117C 0006 0024             		move.b	#6,$24(a0)
0001BEAE 6100 8546                  		bsr.w	Sonic_ResetOnFloor
0001BEB2 08E8 0001 0022             		bset	#1,$22(a0)
0001BEB8 317C F900 0012             		move.w	#-$700,$12(a0)
0001BEBE 317C 0000 0010             		move.w	#0,$10(a0)
0001BEC4 317C 0000 0014             		move.w	#0,$14(a0)
0001BECA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BED0 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BED6 08E8 0007 0002             		bset	#7,2(a0)
0001BEDC 709C                       		moveq   #$FFFFFF9C,d0	; play "oh no" sound
0001BEDE 4EB8 118C                          jsr     PlaySample
0001BEE2 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BEE6 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BEEA 6600                       		bne.s	Kill_Sound
0001BEEC 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BEF0                            
0001BEF0                            Kill_Sound:
0001BEF0 4EB9 0000 11B4             		jsr	(PlaySound_Special).l
0001BEF6                            
0001BEF6                            Kill_NoDeath:
0001BEF6 70FF                       		moveq	#-1,d0
0001BEF8 4E75                       		rts	
0001BEFA                            ; End of function KillSonic
0001BEFA                            
0001BEFA                            
0001BEFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEFA                            
0001BEFA                            
0001BEFA                            Touch_Special:				; XREF: Touch_ChkValue
0001BEFA 1229 0020                  		move.b	$20(a1),d1
0001BEFE 0201 003F                  		andi.b	#$3F,d1
0001BF02 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BF06 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BF08 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BF0C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BF0E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BF12 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BF14 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BF18 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BF1A 4E75                       		rts	
0001BF1C                            ; ===========================================================================
0001BF1C                            
0001BF1C                            Touch_CatKiller:			; XREF: Touch_Special
0001BF1C 6000 FEB0                  		bra.w	loc_1AFDA
0001BF20                            ; ===========================================================================
0001BF20                            
0001BF20                            Touch_Yadrin:				; XREF: Touch_Special
0001BF20 9A40                       		sub.w	d0,d5
0001BF22 0C45 0008                  		cmpi.w	#8,d5
0001BF26 6400                       		bcc.s	loc_1B144
0001BF28 3029 0008                  		move.w	8(a1),d0
0001BF2C 5940                       		subq.w	#4,d0
0001BF2E 0829 0000 0022             		btst	#0,$22(a1)
0001BF34 6700                       		beq.s	loc_1B130
0001BF36 0440 0010                  		subi.w	#$10,d0
0001BF3A                            
0001BF3A                            loc_1B130:
0001BF3A 9042                       		sub.w	d2,d0
0001BF3C 6400                       		bcc.s	loc_1B13C
0001BF3E 0640 0018                  		addi.w	#$18,d0
0001BF42 6500                       		bcs.s	loc_1B140
0001BF44 6000                       		bra.s	loc_1B144
0001BF46                            ; ===========================================================================
0001BF46                            
0001BF46                            loc_1B13C:
0001BF46 B044                       		cmp.w	d4,d0
0001BF48 6200                       		bhi.s	loc_1B144
0001BF4A                            
0001BF4A                            loc_1B140:
0001BF4A 6000 FE88                  		bra.w	Touch_ChkHurt
0001BF4E                            ; ===========================================================================
0001BF4E                            
0001BF4E                            loc_1B144:
0001BF4E 6000 FDC0                  		bra.w	Touch_Enemy
0001BF52                            ; ===========================================================================
0001BF52                            
0001BF52                            Touch_D7orE1:				; XREF: Touch_Special
0001BF52 5229 0021                  		addq.b	#1,$21(a1)
0001BF56 4E75                       		rts	
0001BF58                            ; End of function Touch_Special
0001BF58                            
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            ; Subroutine to	show the special stage layout
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            
0001BF58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF58                            
0001BF58                            
0001BF58                            SS_ShowLayout:				; XREF: SpecialStage
0001BF58 6100 0000                  		bsr.w	SS_AniWallsRings
0001BF5C 6100 0000                  		bsr.w	SS_AniItems
0001BF60 3F05                       		move.w	d5,-(sp)
0001BF62 43F8 8000                  		lea	($FFFF8000).w,a1
0001BF66 1038 F780                  		move.b	($FFFFF780).w,d0
0001BF6A 0200 00FC                  		andi.b	#$FC,d0
0001BF6E 4EB9 0000 2D64             		jsr	(CalcSine).l
0001BF74 3800                       		move.w	d0,d4
0001BF76 3A01                       		move.w	d1,d5
0001BF78 C9FC 0018                  		muls.w	#$18,d4
0001BF7C CBFC 0018                  		muls.w	#$18,d5
0001BF80 7400                       		moveq	#0,d2
0001BF82 3438 F700                  		move.w	($FFFFF700).w,d2
0001BF86 84FC 0018                  		divu.w	#$18,d2
0001BF8A 4842                       		swap	d2
0001BF8C 4442                       		neg.w	d2
0001BF8E 0642 FF4C                  		addi.w	#-$B4,d2
0001BF92 7600                       		moveq	#0,d3
0001BF94 3638 F704                  		move.w	($FFFFF704).w,d3
0001BF98 86FC 0018                  		divu.w	#$18,d3
0001BF9C 4843                       		swap	d3
0001BF9E 4443                       		neg.w	d3
0001BFA0 0643 FF4C                  		addi.w	#-$B4,d3
0001BFA4 3E3C 000F                  		move.w	#$F,d7
0001BFA8                            
0001BFA8                            loc_1B19E:
0001BFA8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BFAC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BFB0 4440                       		neg.w	d0
0001BFB2 C3C2                       		muls.w	d2,d1
0001BFB4 C1C3                       		muls.w	d3,d0
0001BFB6 2C00                       		move.l	d0,d6
0001BFB8 DC81                       		add.l	d1,d6
0001BFBA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BFBE C1C2                       		muls.w	d2,d0
0001BFC0 C3C3                       		muls.w	d3,d1
0001BFC2 D280                       		add.l	d0,d1
0001BFC4 2406                       		move.l	d6,d2
0001BFC6 3C3C 000F                  		move.w	#$F,d6
0001BFCA                            
0001BFCA                            loc_1B1C0:
0001BFCA 2002                       		move.l	d2,d0
0001BFCC E080                       		asr.l	#8,d0
0001BFCE 32C0                       		move.w	d0,(a1)+
0001BFD0 2001                       		move.l	d1,d0
0001BFD2 E080                       		asr.l	#8,d0
0001BFD4 32C0                       		move.w	d0,(a1)+
0001BFD6 D485                       		add.l	d5,d2
0001BFD8 D284                       		add.l	d4,d1
0001BFDA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BFDE                            
0001BFDE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BFE2 0643 0018                  		addi.w	#$18,d3
0001BFE6 51CF FFC0                  		dbf	d7,loc_1B19E
0001BFEA                            
0001BFEA 3A1F                       		move.w	(sp)+,d5
0001BFEC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BFF2 7000                       		moveq	#0,d0
0001BFF4 3038 F704                  		move.w	($FFFFF704).w,d0
0001BFF8 80FC 0018                  		divu.w	#$18,d0
0001BFFC C0FC 0080                  		mulu.w	#$80,d0
0001C000 D1C0                       		adda.l	d0,a0
0001C002 7000                       		moveq	#0,d0
0001C004 3038 F700                  		move.w	($FFFFF700).w,d0
0001C008 80FC 0018                  		divu.w	#$18,d0
0001C00C D0C0                       		adda.w	d0,a0
0001C00E 49F8 8000                  		lea	($FFFF8000).w,a4
0001C012 3E3C 000F                  		move.w	#$F,d7
0001C016                            
0001C016                            loc_1B20C:
0001C016 3C3C 000F                  		move.w	#$F,d6
0001C01A                            
0001C01A                            loc_1B210:
0001C01A 7000                       		moveq	#0,d0
0001C01C 1018                       		move.b	(a0)+,d0
0001C01E 6700                       		beq.s	loc_1B268
0001C020 0C00 004E                  		cmpi.b	#$4E,d0
0001C024 6200                       		bhi.s	loc_1B268
0001C026 3614                       		move.w	(a4),d3
0001C028 0643 0120                  		addi.w	#$120,d3
0001C02C 0C43 0070                  		cmpi.w	#$70,d3
0001C030 6500                       		bcs.s	loc_1B268
0001C032 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C036 6400                       		bcc.s	loc_1B268
0001C038 342C 0002                  		move.w	2(a4),d2
0001C03C 0642 00F0                  		addi.w	#$F0,d2
0001C040 0C42 0070                  		cmpi.w	#$70,d2
0001C044 6500                       		bcs.s	loc_1B268
0001C046 0C42 0170                  		cmpi.w	#$170,d2
0001C04A 6400                       		bcc.s	loc_1B268
0001C04C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C052 E748                       		lsl.w	#3,d0
0001C054 4BF5 0000                  		lea	(a5,d0.w),a5
0001C058 225D                       		movea.l	(a5)+,a1
0001C05A 321D                       		move.w	(a5)+,d1
0001C05C D241                       		add.w	d1,d1
0001C05E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C062 365D                       		movea.w	(a5)+,a3
0001C064 7200                       		moveq	#0,d1
0001C066 1219                       		move.b	(a1)+,d1
0001C068 5301                       		subq.b	#1,d1
0001C06A 6B00                       		bmi.s	loc_1B268
0001C06C 4EB9 0000 DEA2             		jsr	sub_D762
0001C072                            
0001C072                            loc_1B268:
0001C072 584C                       		addq.w	#4,a4
0001C074 51CE FFA4                  		dbf	d6,loc_1B210
0001C078                            
0001C078 41E8 0070                  		lea	$70(a0),a0
0001C07C 51CF FF98                  		dbf	d7,loc_1B20C
0001C080                            
0001C080 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C084 0C05 0050                  		cmpi.b	#$50,d5
0001C088 6700                       		beq.s	loc_1B288
0001C08A 24BC 0000 0000             		move.l	#0,(a2)
0001C090 4E75                       		rts	
0001C092                            ; ===========================================================================
0001C092                            
0001C092                            loc_1B288:
0001C092 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C098 4E75                       		rts	
0001C09A                            ; End of function SS_ShowLayout
0001C09A                            
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            ; Subroutine to	animate	walls and rings	in the special stage
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            
0001C09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C09A                            
0001C09A                            
0001C09A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C09A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C0A0 7000                       		moveq	#0,d0
0001C0A2 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0A6 E408                       		lsr.b	#2,d0
0001C0A8 0240 000F                  		andi.w	#$F,d0
0001C0AC 7223                       		moveq	#$23,d1
0001C0AE                            
0001C0AE                            loc_1B2A4:
0001C0AE 3280                       		move.w	d0,(a1)
0001C0B0 5049                       		addq.w	#8,a1
0001C0B2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C0B6                            
0001C0B6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C0BC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C0C0 6A00                       		bpl.s	loc_1B2C8
0001C0C2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C0C8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C0CC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C0D2                            
0001C0D2                            loc_1B2C8:
0001C0D2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C0D8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C0DC 6A00                       		bpl.s	loc_1B2E4
0001C0DE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C0E4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C0E8 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C0EE                            
0001C0EE                            loc_1B2E4:
0001C0EE 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C0F2 1340 0138                  		move.b	d0,$138(a1)
0001C0F6 1340 0160                  		move.b	d0,$160(a1)
0001C0FA 1340 0148                  		move.b	d0,$148(a1)
0001C0FE 1340 0150                  		move.b	d0,$150(a1)
0001C102 1340 01D8                  		move.b	d0,$1D8(a1)
0001C106 1340 01E0                  		move.b	d0,$1E0(a1)
0001C10A 1340 01E8                  		move.b	d0,$1E8(a1)
0001C10E 1340 01F0                  		move.b	d0,$1F0(a1)
0001C112 1340 01F8                  		move.b	d0,$1F8(a1)
0001C116 1340 0200                  		move.b	d0,$200(a1)
0001C11A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C11E 6A00                       		bpl.s	loc_1B326
0001C120 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C126 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C12A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C130                            
0001C130                            loc_1B326:
0001C130 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C134 1340 0168                  		move.b	d0,$168(a1)
0001C138 1340 0170                  		move.b	d0,$170(a1)
0001C13C 1340 0178                  		move.b	d0,$178(a1)
0001C140 1340 0180                  		move.b	d0,$180(a1)
0001C144 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C148 6A00                       		bpl.s	loc_1B350
0001C14A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C150 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C154 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C15A                            
0001C15A                            loc_1B350:
0001C15A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C160 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C166 7000                       		moveq	#0,d0
0001C168 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C16C D040                       		add.w	d0,d0
0001C16E 41F0 0000                  		lea	(a0,d0.w),a0
0001C172 3290                       		move.w	(a0),(a1)
0001C174 3368 0002 0008             		move.w	2(a0),8(a1)
0001C17A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C180 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C186 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C18C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C192 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C198 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C19E D0FC 0020                  		adda.w	#$20,a0
0001C1A2 D2FC 0048                  		adda.w	#$48,a1
0001C1A6 3290                       		move.w	(a0),(a1)
0001C1A8 3368 0002 0008             		move.w	2(a0),8(a1)
0001C1AE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C1B4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C1BA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C1C0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C1C6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C1CC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C1D2 D0FC 0020                  		adda.w	#$20,a0
0001C1D6 D2FC 0048                  		adda.w	#$48,a1
0001C1DA 3290                       		move.w	(a0),(a1)
0001C1DC 3368 0002 0008             		move.w	2(a0),8(a1)
0001C1E2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C1E8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C1EE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C1F4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C1FA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C200 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C206 D0FC 0020                  		adda.w	#$20,a0
0001C20A D2FC 0048                  		adda.w	#$48,a1
0001C20E 3290                       		move.w	(a0),(a1)
0001C210 3368 0002 0008             		move.w	2(a0),8(a1)
0001C216 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C21C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C222 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C228 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C22E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C234 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C23A D0FC 0020                  		adda.w	#$20,a0
0001C23E D2FC 0048                  		adda.w	#$48,a1
0001C242 4E75                       		rts	
0001C244                            ; End of function SS_AniWallsRings
0001C244                            
0001C244                            ; ===========================================================================
0001C244 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C254 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C264 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C274 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C284 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C294 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C2A4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C2B4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C2C4                            ; ---------------------------------------------------------------------------
0001C2C4                            ; Subroutine to	remove items when you collect them in the special stage
0001C2C4                            ; ---------------------------------------------------------------------------
0001C2C4                            
0001C2C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2C4                            
0001C2C4                            
0001C2C4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C2C4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C2CA 303C 001F                  		move.w	#$1F,d0
0001C2CE                            
0001C2CE                            loc_1B4C4:
0001C2CE 4A12                       		tst.b	(a2)
0001C2D0 6700                       		beq.s	locret_1B4CE
0001C2D2 504A                       		addq.w	#8,a2
0001C2D4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C2D8                            
0001C2D8                            locret_1B4CE:
0001C2D8 4E75                       		rts	
0001C2DA                            ; End of function SS_RemoveCollectedItem
0001C2DA                            
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA                            ; Subroutine to	animate	special	stage items when you touch them
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA                            
0001C2DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2DA                            
0001C2DA                            
0001C2DA                            SS_AniItems:				; XREF: SS_ShowLayout
0001C2DA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C2E0 3E3C 001F                  		move.w	#$1F,d7
0001C2E4                            
0001C2E4                            loc_1B4DA:
0001C2E4 7000                       		moveq	#0,d0
0001C2E6 1010                       		move.b	(a0),d0
0001C2E8 6700                       		beq.s	loc_1B4E8
0001C2EA E548                       		lsl.w	#2,d0
0001C2EC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C2F0 4E91                       		jsr	(a1)
0001C2F2                            
0001C2F2                            loc_1B4E8:
0001C2F2 5048                       		addq.w	#8,a0
0001C2F4                            
0001C2F4                            loc_1B4EA:
0001C2F4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C2F8                            
0001C2F8 4E75                       		rts	
0001C2FA                            ; End of function SS_AniItems
0001C2FA                            
0001C2FA                            ; ===========================================================================
0001C2FA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C2FE 0000 0000                  		dc.l SS_AniBumper
0001C302 0000 0000                  		dc.l SS_Ani1Up
0001C306 0000 0000                  		dc.l SS_AniReverse
0001C30A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C30E 0000 0000                  		dc.l SS_AniGlassBlock
0001C312                            ; ===========================================================================
0001C312                            
0001C312                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C312 5328 0002                  		subq.b	#1,2(a0)
0001C316 6A00                       		bpl.s	locret_1B530
0001C318 117C 0005 0002             		move.b	#5,2(a0)
0001C31E 7000                       		moveq	#0,d0
0001C320 1028 0003                  		move.b	3(a0),d0
0001C324 5228 0003                  		addq.b	#1,3(a0)
0001C328 2268 0004                  		movea.l	4(a0),a1
0001C32C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C330 1280                       		move.b	d0,(a1)
0001C332 6600                       		bne.s	locret_1B530
0001C334 4290                       		clr.l	(a0)
0001C336 42A8 0004                  		clr.l	4(a0)
0001C33A                            
0001C33A                            locret_1B530:
0001C33A 4E75                       		rts	
0001C33C                            ; ===========================================================================
0001C33C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C342                            ; ===========================================================================
0001C342                            
0001C342                            SS_AniBumper:				; XREF: SS_AniIndex
0001C342 5328 0002                  		subq.b	#1,2(a0)
0001C346 6A00                       		bpl.s	locret_1B566
0001C348 117C 0007 0002             		move.b	#7,2(a0)
0001C34E 7000                       		moveq	#0,d0
0001C350 1028 0003                  		move.b	3(a0),d0
0001C354 5228 0003                  		addq.b	#1,3(a0)
0001C358 2268 0004                  		movea.l	4(a0),a1
0001C35C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C360 6600                       		bne.s	loc_1B564
0001C362 4290                       		clr.l	(a0)
0001C364 42A8 0004                  		clr.l	4(a0)
0001C368 12BC 0025                  		move.b	#$25,(a1)
0001C36C 4E75                       		rts	
0001C36E                            ; ===========================================================================
0001C36E                            
0001C36E                            loc_1B564:
0001C36E 1280                       		move.b	d0,(a1)
0001C370                            
0001C370                            locret_1B566:
0001C370 4E75                       		rts	
0001C372                            ; ===========================================================================
0001C372 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C378                            ; ===========================================================================
0001C378                            
0001C378                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C378 5328 0002                  		subq.b	#1,2(a0)
0001C37C 6A00                       		bpl.s	locret_1B596
0001C37E 117C 0005 0002             		move.b	#5,2(a0)
0001C384 7000                       		moveq	#0,d0
0001C386 1028 0003                  		move.b	3(a0),d0
0001C38A 5228 0003                  		addq.b	#1,3(a0)
0001C38E 2268 0004                  		movea.l	4(a0),a1
0001C392 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C396 1280                       		move.b	d0,(a1)
0001C398 6600                       		bne.s	locret_1B596
0001C39A 4290                       		clr.l	(a0)
0001C39C 42A8 0004                  		clr.l	4(a0)
0001C3A0                            
0001C3A0                            locret_1B596:
0001C3A0 4E75                       		rts	
0001C3A2                            ; ===========================================================================
0001C3A2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C3A8                            ; ===========================================================================
0001C3A8                            
0001C3A8                            SS_AniReverse:				; XREF: SS_AniIndex
0001C3A8 5328 0002                  		subq.b	#1,2(a0)
0001C3AC 6A00                       		bpl.s	locret_1B5CC
0001C3AE 117C 0007 0002             		move.b	#7,2(a0)
0001C3B4 7000                       		moveq	#0,d0
0001C3B6 1028 0003                  		move.b	3(a0),d0
0001C3BA 5228 0003                  		addq.b	#1,3(a0)
0001C3BE 2268 0004                  		movea.l	4(a0),a1
0001C3C2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C3C6 6600                       		bne.s	loc_1B5CA
0001C3C8 4290                       		clr.l	(a0)
0001C3CA 42A8 0004                  		clr.l	4(a0)
0001C3CE 12BC 002B                  		move.b	#$2B,(a1)
0001C3D2 4E75                       		rts	
0001C3D4                            ; ===========================================================================
0001C3D4                            
0001C3D4                            loc_1B5CA:
0001C3D4 1280                       		move.b	d0,(a1)
0001C3D6                            
0001C3D6                            locret_1B5CC:
0001C3D6 4E75                       		rts	
0001C3D8                            ; ===========================================================================
0001C3D8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C3DE                            ; ===========================================================================
0001C3DE                            
0001C3DE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C3DE 5328 0002                  		subq.b	#1,2(a0)
0001C3E2 6A00                       		bpl.s	locret_1B60C
0001C3E4 117C 0005 0002             		move.b	#5,2(a0)
0001C3EA 7000                       		moveq	#0,d0
0001C3EC 1028 0003                  		move.b	3(a0),d0
0001C3F0 5228 0003                  		addq.b	#1,3(a0)
0001C3F4 2268 0004                  		movea.l	4(a0),a1
0001C3F8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C3FC 1280                       		move.b	d0,(a1)
0001C3FE 6600                       		bne.s	locret_1B60C
0001C400 4290                       		clr.l	(a0)
0001C402 42A8 0004                  		clr.l	4(a0)
0001C406 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C40C 303C 00A8                  		move.w	#$A8,d0
0001C410 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C416                            
0001C416                            locret_1B60C:
0001C416 4E75                       		rts	
0001C418                            ; ===========================================================================
0001C418 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C41E                            ; ===========================================================================
0001C41E                            
0001C41E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C41E 5328 0002                  		subq.b	#1,2(a0)
0001C422 6A00                       		bpl.s	locret_1B640
0001C424 117C 0001 0002             		move.b	#1,2(a0)
0001C42A 7000                       		moveq	#0,d0
0001C42C 1028 0003                  		move.b	3(a0),d0
0001C430 5228 0003                  		addq.b	#1,3(a0)
0001C434 2268 0004                  		movea.l	4(a0),a1
0001C438 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C43C 1280                       		move.b	d0,(a1)
0001C43E 6600                       		bne.s	locret_1B640
0001C440 12A8 0004                  		move.b	4(a0),(a1)
0001C444 4290                       		clr.l	(a0)
0001C446 42A8 0004                  		clr.l	4(a0)
0001C44A                            
0001C44A                            locret_1B640:
0001C44A 4E75                       		rts	
0001C44C                            ; ===========================================================================
0001C44C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C456                            ; ---------------------------------------------------------------------------
0001C456                            ; Special stage	layout pointers
0001C456                            ; ---------------------------------------------------------------------------
0001C456                            SS_LayoutIndex:
0001C456                            	include "_inc\Special stage layout pointers.asm"
0001C456                            ; ---------------------------------------------------------------------------
0001C456                            ; Special stage	layout pointers
0001C456                            ; ---------------------------------------------------------------------------
0001C456 0000 0000                  	dc.l SS_1
0001C45A 0000 0000                  	dc.l SS_2
0001C45E 0000 0000                  	dc.l SS_3
0001C462 0000 0000                  	dc.l SS_4
0001C466 0000 0000                  	dc.l SS_5
0001C46A 0000 0000                  	dc.l SS_6
0001C46E                            	even
0001C46E                            	even
0001C46E                            
0001C46E                            ; ---------------------------------------------------------------------------
0001C46E                            ; Special stage	start locations
0001C46E                            ; ---------------------------------------------------------------------------
0001C46E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C486                            		even
0001C486                            
0001C486                            ; ---------------------------------------------------------------------------
0001C486                            ; Subroutine to	load special stage layout
0001C486                            ; ---------------------------------------------------------------------------
0001C486                            
0001C486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C486                            
0001C486                            
0001C486                            SS_Load:				; XREF: SpecialStage
0001C486 7000                       		moveq	#0,d0
0001C488 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C48C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C490 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C496 6500                       		bcs.s	SS_ChkEmldNum
0001C498 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C49E                            
0001C49E                            SS_ChkEmldNum:
0001C49E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C4A4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C4A6 7200                       		moveq	#0,d1
0001C4A8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C4AC 5301                       		subq.b	#1,d1
0001C4AE 6500                       		bcs.s	SS_LoadData
0001C4B0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C4B4                            
0001C4B4                            SS_ChkEmldLoop:	
0001C4B4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C4B8 6600                       		bne.s	SS_ChkEmldRepeat
0001C4BA 60CA                       		bra.s	SS_Load
0001C4BC                            ; ===========================================================================
0001C4BC                            
0001C4BC                            SS_ChkEmldRepeat:
0001C4BC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C4C0                            
0001C4C0                            SS_LoadData:
0001C4C0 E548                       		lsl.w	#2,d0
0001C4C2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C4C6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C4CA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C4CE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C4D2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C4D8 303C 0000                  		move.w	#0,d0
0001C4DC 4EB9 0000 1554             		jsr	(EniDec).l
0001C4E2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C4E8 303C 0FFF                  		move.w	#$FFF,d0
0001C4EC                            
0001C4EC                            SS_ClrRAM3:
0001C4EC 4299                       		clr.l	(a1)+
0001C4EE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C4F2                            
0001C4F2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C4F8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C4FE 723F                       		moveq	#$3F,d1
0001C500                            
0001C500                            loc_1B6F6:
0001C500 743F                       		moveq	#$3F,d2
0001C502                            
0001C502                            loc_1B6F8:
0001C502 12D8                       		move.b	(a0)+,(a1)+
0001C504 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C508                            
0001C508 43E9 0040                  		lea	$40(a1),a1
0001C50C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C510                            
0001C510 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C516 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C51C 724D                       		moveq	#$4D,d1
0001C51E                            
0001C51E                            loc_1B714:
0001C51E 22D8                       		move.l	(a0)+,(a1)+
0001C520 32FC 0000                  		move.w	#0,(a1)+
0001C524 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C52A 32D8                       		move.w	(a0)+,(a1)+
0001C52C 51C9 FFF0                  		dbf	d1,loc_1B714
0001C530                            
0001C530 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C536 323C 003F                  		move.w	#$3F,d1
0001C53A                            
0001C53A                            loc_1B730:
0001C53A                            
0001C53A 4299                       		clr.l	(a1)+
0001C53C 51C9 FFFC                  		dbf	d1,loc_1B730
0001C540                            
0001C540 4E75                       		rts	
0001C542                            ; End of function SS_Load
0001C542                            
0001C542                            ; ===========================================================================
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Special stage	mappings and VRAM pointers
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            SS_MapIndex:
0001C542                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Special stage	mappings and VRAM pointers
0001C542                            ; ---------------------------------------------------------------------------
0001C542 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C546 0142                       	dc.w $142		; VRAM setting
0001C548 0000 0000                  	dc.l Map_SSWalls
0001C54C 0142                       	dc.w $142
0001C54E 0000 0000                  	dc.l Map_SSWalls
0001C552 0142                       	dc.w $142
0001C554 0000 0000                  	dc.l Map_SSWalls
0001C558 0142                       	dc.w $142
0001C55A 0000 0000                  	dc.l Map_SSWalls
0001C55E 0142                       	dc.w $142
0001C560 0000 0000                  	dc.l Map_SSWalls
0001C564 0142                       	dc.w $142
0001C566 0000 0000                  	dc.l Map_SSWalls
0001C56A 0142                       	dc.w $142
0001C56C 0000 0000                  	dc.l Map_SSWalls
0001C570 0142                       	dc.w $142
0001C572 0000 0000                  	dc.l Map_SSWalls
0001C576 0142                       	dc.w $142
0001C578 0000 0000                  	dc.l Map_SSWalls
0001C57C 2142                       	dc.w $2142
0001C57E 0000 0000                  	dc.l Map_SSWalls
0001C582 2142                       	dc.w $2142
0001C584 0000 0000                  	dc.l Map_SSWalls
0001C588 2142                       	dc.w $2142
0001C58A 0000 0000                  	dc.l Map_SSWalls
0001C58E 2142                       	dc.w $2142
0001C590 0000 0000                  	dc.l Map_SSWalls
0001C594 2142                       	dc.w $2142
0001C596 0000 0000                  	dc.l Map_SSWalls
0001C59A 2142                       	dc.w $2142
0001C59C 0000 0000                  	dc.l Map_SSWalls
0001C5A0 2142                       	dc.w $2142
0001C5A2 0000 0000                  	dc.l Map_SSWalls
0001C5A6 2142                       	dc.w $2142
0001C5A8 0000 0000                  	dc.l Map_SSWalls
0001C5AC 2142                       	dc.w $2142
0001C5AE 0000 0000                  	dc.l Map_SSWalls
0001C5B2 4142                       	dc.w $4142
0001C5B4 0000 0000                  	dc.l Map_SSWalls
0001C5B8 4142                       	dc.w $4142
0001C5BA 0000 0000                  	dc.l Map_SSWalls
0001C5BE 4142                       	dc.w $4142
0001C5C0 0000 0000                  	dc.l Map_SSWalls
0001C5C4 4142                       	dc.w $4142
0001C5C6 0000 0000                  	dc.l Map_SSWalls
0001C5CA 4142                       	dc.w $4142
0001C5CC 0000 0000                  	dc.l Map_SSWalls
0001C5D0 4142                       	dc.w $4142
0001C5D2 0000 0000                  	dc.l Map_SSWalls
0001C5D6 4142                       	dc.w $4142
0001C5D8 0000 0000                  	dc.l Map_SSWalls
0001C5DC 4142                       	dc.w $4142
0001C5DE 0000 0000                  	dc.l Map_SSWalls
0001C5E2 4142                       	dc.w $4142
0001C5E4 0000 0000                  	dc.l Map_SSWalls
0001C5E8 6142                       	dc.w $6142
0001C5EA 0000 0000                  	dc.l Map_SSWalls
0001C5EE 6142                       	dc.w $6142
0001C5F0 0000 0000                  	dc.l Map_SSWalls
0001C5F4 6142                       	dc.w $6142
0001C5F6 0000 0000                  	dc.l Map_SSWalls
0001C5FA 6142                       	dc.w $6142
0001C5FC 0000 0000                  	dc.l Map_SSWalls
0001C600 6142                       	dc.w $6142
0001C602 0000 0000                  	dc.l Map_SSWalls
0001C606 6142                       	dc.w $6142
0001C608 0000 0000                  	dc.l Map_SSWalls
0001C60C 6142                       	dc.w $6142
0001C60E 0000 0000                  	dc.l Map_SSWalls
0001C612 6142                       	dc.w $6142
0001C614 0000 0000                  	dc.l Map_SSWalls
0001C618 6142                       	dc.w $6142
0001C61A 0000 F26E                  	dc.l Map_obj47
0001C61E 023B                       	dc.w $23B
0001C620 0000 0000                  	dc.l Map_SS_R
0001C624 0570                       	dc.w $570
0001C626 0000 0000                  	dc.l Map_SS_R
0001C62A 0251                       	dc.w $251
0001C62C 0000 0000                  	dc.l Map_SS_R
0001C630 0370                       	dc.w $370
0001C632 0000 0000                  	dc.l Map_SS_Up
0001C636 0263                       	dc.w $263
0001C638 0000 0000                  	dc.l Map_SS_Down
0001C63C 0263                       	dc.w $263
0001C63E 0000 0000                  	dc.l Map_SS_R
0001C642 22F0                       	dc.w $22F0
0001C644 0000 0000                  	dc.l Map_SS_Glass
0001C648 0470                       	dc.w $470
0001C64A 0000 0000                  	dc.l Map_SS_Glass
0001C64E 05F0                       	dc.w $5F0
0001C650 0000 0000                  	dc.l Map_SS_Glass
0001C654 65F0                       	dc.w $65F0
0001C656 0000 0000                  	dc.l Map_SS_Glass
0001C65A 25F0                       	dc.w $25F0
0001C65C 0000 0000                  	dc.l Map_SS_Glass
0001C660 45F0                       	dc.w $45F0
0001C662 0000 0000                  	dc.l Map_SS_R
0001C666 02F0                       	dc.w $2F0
0001C668 0100 F26E                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C66C 023B                       	dc.w $23B
0001C66E 0200 F26E                  	dc.l Map_obj47+$2000000
0001C672 023B                       	dc.w $23B
0001C674 0000 0000                  	dc.l Map_SS_R
0001C678 0797                       	dc.w $797
0001C67A 0000 0000                  	dc.l Map_SS_R
0001C67E 07A0                       	dc.w $7A0
0001C680 0000 0000                  	dc.l Map_SS_R
0001C684 07A9                       	dc.w $7A9
0001C686 0000 0000                  	dc.l Map_SS_R
0001C68A 0797                       	dc.w $797
0001C68C 0000 0000                  	dc.l Map_SS_R
0001C690 07A0                       	dc.w $7A0
0001C692 0000 0000                  	dc.l Map_SS_R
0001C696 07A9                       	dc.w $7A9
0001C698 0000 A786                  	dc.l Map_obj25
0001C69C 27B2                       	dc.w $27B2
0001C69E 0000 0000                  	dc.l Map_SS_Chaos3
0001C6A2 0770                       	dc.w $770
0001C6A4 0000 0000                  	dc.l Map_SS_Chaos3
0001C6A8 2770                       	dc.w $2770
0001C6AA 0000 0000                  	dc.l Map_SS_Chaos3
0001C6AE 4770                       	dc.w $4770
0001C6B0 0000 0000                  	dc.l Map_SS_Chaos3
0001C6B4 6770                       	dc.w $6770
0001C6B6 0000 0000                  	dc.l Map_SS_Chaos1
0001C6BA 0770                       	dc.w $770
0001C6BC 0000 0000                  	dc.l Map_SS_Chaos2
0001C6C0 0770                       	dc.w $770
0001C6C2 0000 0000                  	dc.l Map_SS_R
0001C6C6 04F0                       	dc.w $4F0
0001C6C8 0400 A786                  	dc.l Map_obj25+$4000000
0001C6CC 27B2                       	dc.w $27B2
0001C6CE 0500 A786                  	dc.l Map_obj25+$5000000
0001C6D2 27B2                       	dc.w $27B2
0001C6D4 0600 A786                  	dc.l Map_obj25+$6000000
0001C6D8 27B2                       	dc.w $27B2
0001C6DA 0700 A786                  	dc.l Map_obj25+$7000000
0001C6DE 27B2                       	dc.w $27B2
0001C6E0 0000 0000                  	dc.l Map_SS_Glass
0001C6E4 23F0                       	dc.w $23F0
0001C6E6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C6EA 23F0                       	dc.w $23F0
0001C6EC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C6F0 23F0                       	dc.w $23F0
0001C6F2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C6F6 23F0                       	dc.w $23F0
0001C6F8 0000 0000                  	dc.l Map_SS_R+$2000000
0001C6FC 04F0                       	dc.w $4F0
0001C6FE 0000 0000                  	dc.l Map_SS_Glass
0001C702 05F0                       	dc.w $5F0
0001C704 0000 0000                  	dc.l Map_SS_Glass
0001C708 65F0                       	dc.w $65F0
0001C70A 0000 0000                  	dc.l Map_SS_Glass
0001C70E 25F0                       	dc.w $25F0
0001C710 0000 0000                  	dc.l Map_SS_Glass
0001C714 45F0                       	dc.w $45F0
0001C714 45F0                       	dc.w $45F0
0001C716                            
0001C716                            ; ---------------------------------------------------------------------------
0001C716                            ; Sprite mappings - special stage "R" block
0001C716                            ; ---------------------------------------------------------------------------
0001C716                            Map_SS_R:
0001C716                            	include "_maps\SSRblock.asm"
0001C716                            ; ---------------------------------------------------------------------------
0001C716                            ; Sprite mappings - special stage "R" block
0001C716                            ; ---------------------------------------------------------------------------
0001C716 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C71A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C71C 01                         byte_1B912:	dc.b 1
0001C71D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C722 01                         byte_1B918:	dc.b 1
0001C723 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C728 00                         byte_1B91E:	dc.b 0
0001C72A 00                         		even
0001C72A 00                         		even
0001C72A                            
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            Map_SS_Glass:
0001C72A                            	include "_maps\SSglassblock.asm"
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C72E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C732 01                         byte_1B928:	dc.b 1
0001C733 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C738 01                         byte_1B92E:	dc.b 1
0001C739 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C73E 01                         byte_1B934:	dc.b 1
0001C73F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C744 01                         byte_1B93A:	dc.b 1
0001C745 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C74A                            		even
0001C74A                            		even
0001C74A                            
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            ; Sprite mappings - special stage "UP" block
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            Map_SS_Up:
0001C74A                            	include "_maps\SSUPblock.asm"
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            ; Sprite mappings - special stage "UP" block
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C74C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C74E 01                         byte_1B944:	dc.b 1
0001C74F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C754 01                         byte_1B94A:	dc.b 1
0001C755 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C75A                            		even
0001C75A                            		even
0001C75A                            
0001C75A                            ; ---------------------------------------------------------------------------
0001C75A                            ; Sprite mappings - special stage "DOWN" block
0001C75A                            ; ---------------------------------------------------------------------------
0001C75A                            Map_SS_Down:
0001C75A                            	include "_maps\SSDOWNblock.asm"
0001C75A                            ; ---------------------------------------------------------------------------
0001C75A                            ; Sprite mappings - special stage "DOWN" block
0001C75A                            ; ---------------------------------------------------------------------------
0001C75A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C75C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C75E 01                         byte_1B954:	dc.b 1
0001C75F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C764 01                         byte_1B95A:	dc.b 1
0001C765 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C76A                            		even
0001C76A                            		even
0001C76A                            
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A                            ; Sprite mappings - special stage chaos	emeralds
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C76C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C76E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C770 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C772 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C774 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C776 01                         byte_1B96C:	dc.b 1
0001C777 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C77C 01                         byte_1B972:	dc.b 1
0001C77D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C782 01                         byte_1B978:	dc.b 1
0001C783 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C788 01                         byte_1B97E:	dc.b 1
0001C789 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C78E                            		even
0001C78E                            ; ===========================================================================
0001C78E                            ; ---------------------------------------------------------------------------
0001C78E                            ; Object 09 - Sonic (special stage)
0001C78E                            ; ---------------------------------------------------------------------------
0001C78E                            
0001C78E                            Obj09:					; XREF: Obj_Index
0001C78E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C792 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C794 6100 0000                  		bsr.w	SS_FixCamera
0001C798 6000 0000                  		bra.w	DebugMode
0001C79C                            ; ===========================================================================
0001C79C                            
0001C79C                            Obj09_Normal:
0001C79C 7000                       		moveq	#0,d0
0001C79E 1028 0024                  		move.b	$24(a0),d0
0001C7A2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C7A6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C7AA                            ; ===========================================================================
0001C7AA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C7AC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C7AE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C7B0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C7B2                            ; ===========================================================================
0001C7B2                            
0001C7B2                            Obj09_Main:				; XREF: Obj09_Index
0001C7B2 5428 0024                  		addq.b	#2,$24(a0)
0001C7B6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C7BC 117C 0007 0017             		move.b	#7,$17(a0)
0001C7C2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C7CA 317C 0780 0002             		move.w	#$780,2(a0)
0001C7D0 117C 0004 0001             		move.b	#4,1(a0)
0001C7D6 117C 0000 0018             		move.b	#0,$18(a0)
0001C7DC 117C 0002 001C             		move.b	#2,$1C(a0)
0001C7E2 08E8 0002 0022             		bset	#2,$22(a0)
0001C7E8 08E8 0001 0022             		bset	#1,$22(a0)
0001C7EE                            
0001C7EE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C7EE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C7F2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C7F4 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C7FA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C7FC 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C802                            
0001C802                            Obj09_NoDebug:
0001C802 117C 0000 0030             		move.b	#0,$30(a0)
0001C808 7000                       		moveq	#0,d0
0001C80A 1028 0022                  		move.b	$22(a0),d0
0001C80E 0240 0002                  		andi.w	#2,d0
0001C812 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C816 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C81A 4EBA 806E                  		jsr	LoadSonicDynPLC
0001C81E 4EF9 0000 DD42             		jmp	DisplaySprite
0001C824                            ; ===========================================================================
0001C824 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C826 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C828                            ; ===========================================================================
0001C828                            
0001C828                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C828 6100 0000                  		bsr.w	Obj09_Jump
0001C82C 6100 0000                  		bsr.w	Obj09_Move
0001C830 6100 0000                  		bsr.w	Obj09_Fall
0001C834 6000                       		bra.s	Obj09_Display
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            Obj09_InAir:				; XREF: Obj09_Modes
0001C836 6100 0000                  		bsr.w	nullsub_2
0001C83A 6100 0000                  		bsr.w	Obj09_Move
0001C83E 6100 0000                  		bsr.w	Obj09_Fall
0001C842                            
0001C842                            Obj09_Display:				; XREF: Obj09_OnWall
0001C842 6100 0000                  		bsr.w	Obj09_ChkItems
0001C846 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C84A 4EB9 0000 DD28             		jsr	SpeedToPos
0001C850 6100 0000                  		bsr.w	SS_FixCamera
0001C854 3038 F780                  		move.w	($FFFFF780).w,d0
0001C858 D078 F782                  		add.w	($FFFFF782).w,d0
0001C85C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C860 4EB9 0001 4622             		jsr	Sonic_Animate
0001C866 4E75                       		rts	
0001C868                            
0001C868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C868                            
0001C868                            
0001C868                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C868 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C86E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C870 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C874                            
0001C874                            Obj09_ChkRight:
0001C874 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C87A 6700                       		beq.s	loc_1BA78	; if not, branch
0001C87C 6100 0000                  		bsr.w	Obj09_MoveRight
0001C880                            
0001C880                            loc_1BA78:
0001C880 1038 F602                  		move.b	($FFFFF602).w,d0
0001C884 0200 000C                  		andi.b	#$C,d0
0001C888 6600                       		bne.s	loc_1BAA8
0001C88A 3028 0014                  		move.w	$14(a0),d0
0001C88E 6700                       		beq.s	loc_1BAA8
0001C890 6B00                       		bmi.s	loc_1BA9A
0001C892 0440 000C                  		subi.w	#$C,d0
0001C896 6400                       		bcc.s	loc_1BA94
0001C898 303C 0000                  		move.w	#0,d0
0001C89C                            
0001C89C                            loc_1BA94:
0001C89C 3140 0014                  		move.w	d0,$14(a0)
0001C8A0 6000                       		bra.s	loc_1BAA8
0001C8A2                            ; ===========================================================================
0001C8A2                            
0001C8A2                            loc_1BA9A:
0001C8A2 0640 000C                  		addi.w	#$C,d0
0001C8A6 6400                       		bcc.s	loc_1BAA4
0001C8A8 303C 0000                  		move.w	#0,d0
0001C8AC                            
0001C8AC                            loc_1BAA4:
0001C8AC 3140 0014                  		move.w	d0,$14(a0)
0001C8B0                            
0001C8B0                            loc_1BAA8:
0001C8B0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C8B4 0600 0020                  		addi.b	#$20,d0
0001C8B8 0200 00C0                  		andi.b	#$C0,d0
0001C8BC 4400                       		neg.b	d0
0001C8BE 4EB9 0000 2D64             		jsr	(CalcSine).l
0001C8C4 C3E8 0014                  		muls.w	$14(a0),d1
0001C8C8 D3A8 0008                  		add.l	d1,8(a0)
0001C8CC C1E8 0014                  		muls.w	$14(a0),d0
0001C8D0 D1A8 000C                  		add.l	d0,$C(a0)
0001C8D4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C8D8 2428 000C                  		move.l	$C(a0),d2
0001C8DC 2628 0008                  		move.l	8(a0),d3
0001C8E0 6100 0000                  		bsr.w	sub_1BCE8
0001C8E4 6700                       		beq.s	loc_1BAF2
0001C8E6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C8EA 93A8 0008                  		sub.l	d1,8(a0)
0001C8EE 91A8 000C                  		sub.l	d0,$C(a0)
0001C8F2 317C 0000 0014             		move.w	#0,$14(a0)
0001C8F8 4E75                       		rts	
0001C8FA                            ; ===========================================================================
0001C8FA                            
0001C8FA                            loc_1BAF2:
0001C8FA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C8FE 4E75                       		rts	
0001C900                            ; End of function Obj09_Move
0001C900                            
0001C900                            
0001C900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C900                            
0001C900                            
0001C900                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C900 08E8 0000 0022             		bset	#0,$22(a0)
0001C906 3028 0014                  		move.w	$14(a0),d0
0001C90A 6700                       		beq.s	loc_1BB06
0001C90C 6A00                       		bpl.s	loc_1BB1A
0001C90E                            
0001C90E                            loc_1BB06:
0001C90E 0440 000C                  		subi.w	#$C,d0
0001C912 0C40 F800                  		cmpi.w	#-$800,d0
0001C916 6E00                       		bgt.s	loc_1BB14
0001C918 303C F800                  		move.w	#-$800,d0
0001C91C                            
0001C91C                            loc_1BB14:
0001C91C 3140 0014                  		move.w	d0,$14(a0)
0001C920 4E75                       		rts	
0001C922                            ; ===========================================================================
0001C922                            
0001C922                            loc_1BB1A:
0001C922 0440 0040                  		subi.w	#$40,d0
0001C926 6400                       		bcc.s	loc_1BB22
0001C928 4E71                       		nop	
0001C92A                            
0001C92A                            loc_1BB22:
0001C92A 3140 0014                  		move.w	d0,$14(a0)
0001C92E 4E75                       		rts	
0001C930                            ; End of function Obj09_MoveLeft
0001C930                            
0001C930                            
0001C930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C930                            
0001C930                            
0001C930                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C930 08A8 0000 0022             		bclr	#0,$22(a0)
0001C936 3028 0014                  		move.w	$14(a0),d0
0001C93A 6B00                       		bmi.s	loc_1BB48
0001C93C 0640 000C                  		addi.w	#$C,d0
0001C940 0C40 0800                  		cmpi.w	#$800,d0
0001C944 6D00                       		blt.s	loc_1BB42
0001C946 303C 0800                  		move.w	#$800,d0
0001C94A                            
0001C94A                            loc_1BB42:
0001C94A 3140 0014                  		move.w	d0,$14(a0)
0001C94E 6000                       		bra.s	locret_1BB54
0001C950                            ; ===========================================================================
0001C950                            
0001C950                            loc_1BB48:
0001C950 0640 0040                  		addi.w	#$40,d0
0001C954 6400                       		bcc.s	loc_1BB50
0001C956 4E71                       		nop	
0001C958                            
0001C958                            loc_1BB50:
0001C958 3140 0014                  		move.w	d0,$14(a0)
0001C95C                            
0001C95C                            locret_1BB54:
0001C95C 4E75                       		rts	
0001C95E                            ; End of function Obj09_MoveRight
0001C95E                            
0001C95E                            
0001C95E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C95E                            
0001C95E                            
0001C95E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C95E 1038 F603                  		move.b	($FFFFF603).w,d0
0001C962 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C966 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C968 1038 F780                  		move.b	($FFFFF780).w,d0
0001C96C 0200 00FC                  		andi.b	#$FC,d0
0001C970 4400                       		neg.b	d0
0001C972 0400 0040                  		subi.b	#$40,d0
0001C976 4EB9 0000 2D64             		jsr	(CalcSine).l
0001C97C C3FC 0680                  		muls.w	#$680,d1
0001C980 E081                       		asr.l	#8,d1
0001C982 3141 0010                  		move.w	d1,$10(a0)
0001C986 C1FC 0680                  		muls.w	#$680,d0
0001C98A E080                       		asr.l	#8,d0
0001C98C 3140 0012                  		move.w	d0,$12(a0)
0001C990 08E8 0001 0022             		bset	#1,$22(a0)
0001C996 303C 00A0                  		move.w	#$A0,d0
0001C99A 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C9A0                            
0001C9A0                            Obj09_NoJump:
0001C9A0 4E75                       		rts	
0001C9A2                            ; End of function Obj09_Jump
0001C9A2                            
0001C9A2                            
0001C9A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9A2                            
0001C9A2                            
0001C9A2                            nullsub_2:				; XREF: Obj09_InAir
0001C9A2 4E75                       		rts	
0001C9A4                            ; End of function nullsub_2
0001C9A4                            
0001C9A4                            ; ===========================================================================
0001C9A4                            ; ---------------------------------------------------------------------------
0001C9A4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C9A4                            ; ---------------------------------------------------------------------------
0001C9A4 323C FC00                  		move.w	#-$400,d1
0001C9A8 B268 0012                  		cmp.w	$12(a0),d1
0001C9AC 6F00                       		ble.s	locret_1BBB4
0001C9AE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C9B2 0200 0070                  		andi.b	#$70,d0
0001C9B6 6600                       		bne.s	locret_1BBB4
0001C9B8 3141 0012                  		move.w	d1,$12(a0)
0001C9BC                            
0001C9BC                            locret_1BBB4:
0001C9BC 4E75                       		rts	
0001C9BE                            ; ---------------------------------------------------------------------------
0001C9BE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C9BE                            ; ---------------------------------------------------------------------------
0001C9BE                            
0001C9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9BE                            
0001C9BE                            
0001C9BE                            SS_FixCamera:				; XREF: Obj09
0001C9BE 3428 000C                  		move.w	$C(a0),d2
0001C9C2 3628 0008                  		move.w	8(a0),d3
0001C9C6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C9CA 0443 00A0                  		subi.w	#$A0,d3
0001C9CE 6500                       		bcs.s	loc_1BBCE
0001C9D0 9043                       		sub.w	d3,d0
0001C9D2 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C9D6                            
0001C9D6                            loc_1BBCE:
0001C9D6 3038 F704                  		move.w	($FFFFF704).w,d0
0001C9DA 0442 0070                  		subi.w	#$70,d2
0001C9DE 6500                       		bcs.s	locret_1BBDE
0001C9E0 9042                       		sub.w	d2,d0
0001C9E2 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C9E6                            
0001C9E6                            locret_1BBDE:
0001C9E6 4E75                       		rts	
0001C9E8                            ; End of function SS_FixCamera
0001C9E8                            
0001C9E8                            ; ===========================================================================
0001C9E8                            
0001C9E8                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C9E8 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C9EE 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C9F4 6600                       		bne.s	loc_1BBF4
0001C9F6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C9FC                            
0001C9FC                            loc_1BBF4:
0001C9FC 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001CA02 6D00                       		blt.s	loc_1BC12
0001CA04 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001CA0A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001CA10 5428 0024                  		addq.b	#2,$24(a0)
0001CA14 317C 003C 0038             		move.w	#$3C,$38(a0)
0001CA1A                            
0001CA1A                            loc_1BC12:
0001CA1A 3038 F780                  		move.w	($FFFFF780).w,d0
0001CA1E D078 F782                  		add.w	($FFFFF782).w,d0
0001CA22 31C0 F780                  		move.w	d0,($FFFFF780).w
0001CA26 4EB9 0001 4622             		jsr	Sonic_Animate
0001CA2C 4EB9 0001 488A             		jsr	LoadSonicDynPLC
0001CA32 6100 FF8A                  		bsr.w	SS_FixCamera
0001CA36 4EF9 0000 DD42             		jmp	DisplaySprite
0001CA3C                            ; ===========================================================================
0001CA3C                            
0001CA3C                            Obj09_Exit2:				; XREF: Obj09_Index
0001CA3C 5368 0038                  		subq.w	#1,$38(a0)
0001CA40 6600                       		bne.s	loc_1BC40
0001CA42 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CA48                            
0001CA48                            loc_1BC40:
0001CA48 4EB9 0001 4622             		jsr	Sonic_Animate
0001CA4E 4EB9 0001 488A             		jsr	LoadSonicDynPLC
0001CA54 6100 FF68                  		bsr.w	SS_FixCamera
0001CA58 4EF9 0000 DD42             		jmp	DisplaySprite
0001CA5E                            
0001CA5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA5E                            
0001CA5E                            
0001CA5E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001CA5E 2428 000C                  		move.l	$C(a0),d2
0001CA62 2628 0008                  		move.l	8(a0),d3
0001CA66 1038 F780                  		move.b	($FFFFF780).w,d0
0001CA6A 0200 00FC                  		andi.b	#$FC,d0
0001CA6E 4EB9 0000 2D64             		jsr	(CalcSine).l
0001CA74 3828 0010                  		move.w	$10(a0),d4
0001CA78 48C4                       		ext.l	d4
0001CA7A E184                       		asl.l	#8,d4
0001CA7C C1FC 002A                  		muls.w	#$2A,d0
0001CA80 D084                       		add.l	d4,d0
0001CA82 3828 0012                  		move.w	$12(a0),d4
0001CA86 48C4                       		ext.l	d4
0001CA88 E184                       		asl.l	#8,d4
0001CA8A C3FC 002A                  		muls.w	#$2A,d1
0001CA8E D284                       		add.l	d4,d1
0001CA90 D680                       		add.l	d0,d3
0001CA92 6100 0000                  		bsr.w	sub_1BCE8
0001CA96 6700                       		beq.s	loc_1BCB0
0001CA98 9680                       		sub.l	d0,d3
0001CA9A 7000                       		moveq	#0,d0
0001CA9C 3140 0010                  		move.w	d0,$10(a0)
0001CAA0 08A8 0001 0022             		bclr	#1,$22(a0)
0001CAA6 D481                       		add.l	d1,d2
0001CAA8 6100 0000                  		bsr.w	sub_1BCE8
0001CAAC 6700                       		beq.s	loc_1BCC6
0001CAAE 9481                       		sub.l	d1,d2
0001CAB0 7200                       		moveq	#0,d1
0001CAB2 3141 0012                  		move.w	d1,$12(a0)
0001CAB6 4E75                       		rts	
0001CAB8                            ; ===========================================================================
0001CAB8                            
0001CAB8                            loc_1BCB0:
0001CAB8 D481                       		add.l	d1,d2
0001CABA 6100 0000                  		bsr.w	sub_1BCE8
0001CABE 6700                       		beq.s	loc_1BCD4
0001CAC0 9481                       		sub.l	d1,d2
0001CAC2 7200                       		moveq	#0,d1
0001CAC4 3141 0012                  		move.w	d1,$12(a0)
0001CAC8 08A8 0001 0022             		bclr	#1,$22(a0)
0001CACE                            
0001CACE                            loc_1BCC6:
0001CACE E080                       		asr.l	#8,d0
0001CAD0 E081                       		asr.l	#8,d1
0001CAD2 3140 0010                  		move.w	d0,$10(a0)
0001CAD6 3141 0012                  		move.w	d1,$12(a0)
0001CADA 4E75                       		rts	
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1BCD4:
0001CADC E080                       		asr.l	#8,d0
0001CADE E081                       		asr.l	#8,d1
0001CAE0 3140 0010                  		move.w	d0,$10(a0)
0001CAE4 3141 0012                  		move.w	d1,$12(a0)
0001CAE8 08E8 0001 0022             		bset	#1,$22(a0)
0001CAEE 4E75                       		rts	
0001CAF0                            ; End of function Obj09_Fall
0001CAF0                            
0001CAF0                            
0001CAF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAF0                            
0001CAF0                            
0001CAF0                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001CAF0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CAF6 7800                       		moveq	#0,d4
0001CAF8 4842                       		swap	d2
0001CAFA 3802                       		move.w	d2,d4
0001CAFC 4842                       		swap	d2
0001CAFE 0644 0044                  		addi.w	#$44,d4
0001CB02 88FC 0018                  		divu.w	#$18,d4
0001CB06 C8FC 0080                  		mulu.w	#$80,d4
0001CB0A D3C4                       		adda.l	d4,a1
0001CB0C 7800                       		moveq	#0,d4
0001CB0E 4843                       		swap	d3
0001CB10 3803                       		move.w	d3,d4
0001CB12 4843                       		swap	d3
0001CB14 0644 0014                  		addi.w	#$14,d4
0001CB18 88FC 0018                  		divu.w	#$18,d4
0001CB1C D2C4                       		adda.w	d4,a1
0001CB1E 7A00                       		moveq	#0,d5
0001CB20 1819                       		move.b	(a1)+,d4
0001CB22 6100                       		bsr.s	sub_1BD30
0001CB24 1819                       		move.b	(a1)+,d4
0001CB26 6100                       		bsr.s	sub_1BD30
0001CB28 D2FC 007E                  		adda.w	#$7E,a1
0001CB2C 1819                       		move.b	(a1)+,d4
0001CB2E 6100                       		bsr.s	sub_1BD30
0001CB30 1819                       		move.b	(a1)+,d4
0001CB32 6100                       		bsr.s	sub_1BD30
0001CB34 4A05                       		tst.b	d5
0001CB36 4E75                       		rts	
0001CB38                            ; End of function sub_1BCE8
0001CB38                            
0001CB38                            
0001CB38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB38                            
0001CB38                            
0001CB38                            sub_1BD30:				; XREF: sub_1BCE8
0001CB38 6700                       		beq.s	locret_1BD44
0001CB3A 0C04 0028                  		cmpi.b	#$28,d4
0001CB3E 6700                       		beq.s	locret_1BD44
0001CB40 0C04 003A                  		cmpi.b	#$3A,d4
0001CB44 6500                       		bcs.s	loc_1BD46
0001CB46 0C04 004B                  		cmpi.b	#$4B,d4
0001CB4A 6400                       		bcc.s	loc_1BD46
0001CB4C                            
0001CB4C                            locret_1BD44:
0001CB4C 4E75                       		rts	
0001CB4E                            ; ===========================================================================
0001CB4E                            
0001CB4E                            loc_1BD46:
0001CB4E 1144 0030                  		move.b	d4,$30(a0)
0001CB52 2149 0032                  		move.l	a1,$32(a0)
0001CB56 7AFF                       		moveq	#-1,d5
0001CB58 4E75                       		rts	
0001CB5A                            ; End of function sub_1BD30
0001CB5A                            
0001CB5A                            
0001CB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB5A                            
0001CB5A                            
0001CB5A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001CB5A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CB60 7800                       		moveq	#0,d4
0001CB62 3828 000C                  		move.w	$C(a0),d4
0001CB66 0644 0050                  		addi.w	#$50,d4
0001CB6A 88FC 0018                  		divu.w	#$18,d4
0001CB6E C8FC 0080                  		mulu.w	#$80,d4
0001CB72 D3C4                       		adda.l	d4,a1
0001CB74 7800                       		moveq	#0,d4
0001CB76 3828 0008                  		move.w	8(a0),d4
0001CB7A 0644 0020                  		addi.w	#$20,d4
0001CB7E 88FC 0018                  		divu.w	#$18,d4
0001CB82 D2C4                       		adda.w	d4,a1
0001CB84 1811                       		move.b	(a1),d4
0001CB86 6600                       		bne.s	Obj09_ChkCont
0001CB88 4A28 003A                  		tst.b	$3A(a0)
0001CB8C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CB90 7800                       		moveq	#0,d4
0001CB92 4E75                       		rts	
0001CB94                            ; ===========================================================================
0001CB94                            
0001CB94                            Obj09_ChkCont:
0001CB94 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CB98 6600                       		bne.s	Obj09_Chk1Up
0001CB9A 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001CB9E 6600                       		bne.s	Obj09_GetCont
0001CBA0 14BC 0001                  		move.b	#1,(a2)
0001CBA4 2549 0004                  		move.l	a1,4(a2)
0001CBA8                            
0001CBA8                            Obj09_GetCont:
0001CBA8 4EB9 0000 A45E             		jsr	CollectRing
0001CBAE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CBB4 6500                       		bcs.s	Obj09_NoCont
0001CBB6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CBBC 6600                       		bne.s	Obj09_NoCont
0001CBBE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CBC2 303C 00BF                  		move.w	#$BF,d0
0001CBC6 4EB9 0000 11AE             		jsr	(PlaySound).l	; play extra continue sound
0001CBCC                            
0001CBCC                            Obj09_NoCont:
0001CBCC 7800                       		moveq	#0,d4
0001CBCE 4E75                       		rts	
0001CBD0                            ; ===========================================================================
0001CBD0                            
0001CBD0                            Obj09_Chk1Up:
0001CBD0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CBD4 6600                       		bne.s	Obj09_ChkEmer
0001CBD6 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001CBDA 6600                       		bne.s	Obj09_Get1Up
0001CBDC 14BC 0003                  		move.b	#3,(a2)
0001CBE0 2549 0004                  		move.l	a1,4(a2)
0001CBE4                            
0001CBE4                            Obj09_Get1Up:
0001CBE4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CBE8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CBEC 303C 00BF                  		move.w	#$BF,d0
0001CBF0 4EB9 0000 11AE             		jsr	(PlaySound).l	; play extra life music
0001CBF6 7800                       		moveq	#0,d4
0001CBF8 4E75                       		rts	
0001CBFA                            ; ===========================================================================
0001CBFA                            
0001CBFA                            Obj09_ChkEmer:
0001CBFA 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CBFE 6500                       		bcs.s	Obj09_ChkGhost
0001CC00 0C04 0040                  		cmpi.b	#$40,d4
0001CC04 6200                       		bhi.s	Obj09_ChkGhost
0001CC06 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001CC0A 6600                       		bne.s	Obj09_GetEmer
0001CC0C 14BC 0005                  		move.b	#5,(a2)
0001CC10 2549 0004                  		move.l	a1,4(a2)
0001CC14                            
0001CC14                            Obj09_GetEmer:
0001CC14 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CC1A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CC1C 0404 003B                  		subi.b	#$3B,d4
0001CC20 7000                       		moveq	#0,d0
0001CC22 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CC26 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CC2A 1584 0000                  		move.b	d4,(a2,d0.w)
0001CC2E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CC32                            
0001CC32                            Obj09_NoEmer:
0001CC32 303C 0093                  		move.w	#$93,d0
0001CC36 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play emerald music
0001CC3C 7800                       		moveq	#0,d4
0001CC3E 4E75                       		rts	
0001CC40                            ; ===========================================================================
0001CC40                            
0001CC40                            Obj09_ChkGhost:
0001CC40 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CC44 6600                       		bne.s	Obj09_ChkGhostTag
0001CC46 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CC4C                            
0001CC4C                            Obj09_ChkGhostTag:
0001CC4C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CC50 6600                       		bne.s	Obj09_NoGhost
0001CC52 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CC58 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CC5A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CC60                            
0001CC60                            Obj09_NoGhost:
0001CC60 78FF                       		moveq	#-1,d4
0001CC62 4E75                       		rts	
0001CC64                            ; ===========================================================================
0001CC64                            
0001CC64                            Obj09_MakeGhostSolid:
0001CC64 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CC6A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CC6C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CC72 723F                       		moveq	#$3F,d1
0001CC74                            
0001CC74                            Obj09_GhostLoop2:
0001CC74 743F                       		moveq	#$3F,d2
0001CC76                            
0001CC76                            Obj09_GhostLoop:
0001CC76 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CC7A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CC7C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CC80                            
0001CC80                            Obj09_NoReplace:
0001CC80 5249                       		addq.w	#1,a1
0001CC82 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CC86 43E9 0040                  		lea	$40(a1),a1
0001CC8A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CC8E                            
0001CC8E                            Obj09_GhostNotSolid:
0001CC8E 4228 003A                  		clr.b	$3A(a0)
0001CC92 7800                       		moveq	#0,d4
0001CC94 4E75                       		rts	
0001CC96                            ; End of function Obj09_ChkItems
0001CC96                            
0001CC96                            
0001CC96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC96                            
0001CC96                            
0001CC96                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CC96 1028 0030                  		move.b	$30(a0),d0
0001CC9A 6600                       		bne.s	Obj09_ChkBumper
0001CC9C 5328 0036                  		subq.b	#1,$36(a0)
0001CCA0 6A00                       		bpl.s	loc_1BEA0
0001CCA2 117C 0000 0036             		move.b	#0,$36(a0)
0001CCA8                            
0001CCA8                            loc_1BEA0:
0001CCA8 5328 0037                  		subq.b	#1,$37(a0)
0001CCAC 6A00                       		bpl.s	locret_1BEAC
0001CCAE 117C 0000 0037             		move.b	#0,$37(a0)
0001CCB4                            
0001CCB4                            locret_1BEAC:
0001CCB4 4E75                       		rts	
0001CCB6                            ; ===========================================================================
0001CCB6                            
0001CCB6                            Obj09_ChkBumper:
0001CCB6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001CCBA 6600                       		bne.s	Obj09_GOAL
0001CCBC 2228 0032                  		move.l	$32(a0),d1
0001CCC0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001CCC6 3401                       		move.w	d1,d2
0001CCC8 0241 007F                  		andi.w	#$7F,d1
0001CCCC C2FC 0018                  		mulu.w	#$18,d1
0001CCD0 0441 0014                  		subi.w	#$14,d1
0001CCD4 EE4A                       		lsr.w	#7,d2
0001CCD6 0242 007F                  		andi.w	#$7F,d2
0001CCDA C4FC 0018                  		mulu.w	#$18,d2
0001CCDE 0442 0044                  		subi.w	#$44,d2
0001CCE2 9268 0008                  		sub.w	8(a0),d1
0001CCE6 9468 000C                  		sub.w	$C(a0),d2
0001CCEA 4EB9 0000 3032             		jsr	(CalcAngle).l
0001CCF0 4EB9 0000 2D64             		jsr	(CalcSine).l
0001CCF6 C3FC F900                  		muls.w	#-$700,d1
0001CCFA E081                       		asr.l	#8,d1
0001CCFC 3141 0010                  		move.w	d1,$10(a0)
0001CD00 C1FC F900                  		muls.w	#-$700,d0
0001CD04 E080                       		asr.l	#8,d0
0001CD06 3140 0012                  		move.w	d0,$12(a0)
0001CD0A 08E8 0001 0022             		bset	#1,$22(a0)
0001CD10 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001CD14 6600                       		bne.s	Obj09_BumpSnd
0001CD16 14BC 0002                  		move.b	#2,(a2)
0001CD1A 2028 0032                  		move.l	$32(a0),d0
0001CD1E 5380                       		subq.l	#1,d0
0001CD20 2540 0004                  		move.l	d0,4(a2)
0001CD24                            
0001CD24                            Obj09_BumpSnd:
0001CD24 709A                       		moveq   #$FFFFFF9A,d0
0001CD26 4EB8 118C                          jsr     PlaySample
0001CD2A 303C 00B4                  		move.w	#$B4,d0
0001CD2E 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play bumper sound
0001CD34                            ; ===========================================================================
0001CD34                            
0001CD34                            Obj09_GOAL:
0001CD34 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CD38 6600                       		bne.s	Obj09_UPblock
0001CD3A 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CD3E 303C 00A8                  		move.w	#$A8,d0		; change item
0001CD42 4EB9 0000 11B4             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CD48 4E75                       		rts	
0001CD4A                            ; ===========================================================================
0001CD4A                            
0001CD4A                            Obj09_UPblock:
0001CD4A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001CD4E 6600                       		bne.s	Obj09_DOWNblock
0001CD50 4A28 0036                  		tst.b	$36(a0)
0001CD54 6600 0000                  		bne.w	Obj09_NoGlass
0001CD58 117C 001E 0036             		move.b	#$1E,$36(a0)
0001CD5E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001CD64 6700                       		beq.s	Obj09_UPsnd
0001CD66 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001CD6A 2268 0032                  		movea.l	$32(a0),a1
0001CD6E 5389                       		subq.l	#1,a1
0001CD70 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001CD74                            
0001CD74                            Obj09_UPsnd:
0001CD74 303C 00A9                  		move.w	#$A9,d0
0001CD78 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play up/down sound
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            Obj09_DOWNblock:
0001CD7E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001CD82 6600                       		bne.s	Obj09_Rblock
0001CD84 4A28 0036                  		tst.b	$36(a0)
0001CD88 6600 0000                  		bne.w	Obj09_NoGlass
0001CD8C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001CD92 0838 0006 F783             		btst	#6,($FFFFF783).w
0001CD98 6600                       		bne.s	Obj09_DOWNsnd
0001CD9A E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001CD9E 2268 0032                  		movea.l	$32(a0),a1
0001CDA2 5389                       		subq.l	#1,a1
0001CDA4 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001CDA8                            
0001CDA8                            Obj09_DOWNsnd:
0001CDA8 303C 00A9                  		move.w	#$A9,d0
0001CDAC 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play up/down sound
0001CDB2                            ; ===========================================================================
0001CDB2                            
0001CDB2                            Obj09_Rblock:
0001CDB2 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001CDB6 6600                       		bne.s	Obj09_ChkGlass
0001CDB8 4A28 0037                  		tst.b	$37(a0)
0001CDBC 6600 0000                  		bne.w	Obj09_NoGlass
0001CDC0 117C 001E 0037             		move.b	#$1E,$37(a0)
0001CDC6 6100 F4FC                  		bsr.w	SS_RemoveCollectedItem
0001CDCA 6600                       		bne.s	Obj09_RevStage
0001CDCC 14BC 0004                  		move.b	#4,(a2)
0001CDD0 2028 0032                  		move.l	$32(a0),d0
0001CDD4 5380                       		subq.l	#1,d0
0001CDD6 2540 0004                  		move.l	d0,4(a2)
0001CDDA                            
0001CDDA                            Obj09_RevStage:
0001CDDA 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001CDDE 303C 00A9                  		move.w	#$A9,d0
0001CDE2 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play sound
0001CDE8                            ; ===========================================================================
0001CDE8                            
0001CDE8                            Obj09_ChkGlass:
0001CDE8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CDEC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CDEE 0C00 002E                  		cmpi.b	#$2E,d0
0001CDF2 6700                       		beq.s	Obj09_Glass
0001CDF4 0C00 002F                  		cmpi.b	#$2F,d0
0001CDF8 6700                       		beq.s	Obj09_Glass
0001CDFA 0C00 0030                  		cmpi.b	#$30,d0
0001CDFE 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CE00                            
0001CE00                            Obj09_Glass:
0001CE00 6100 F4C2                  		bsr.w	SS_RemoveCollectedItem
0001CE04 6600                       		bne.s	Obj09_GlassSnd
0001CE06 14BC 0006                  		move.b	#6,(a2)
0001CE0A 2268 0032                  		movea.l	$32(a0),a1
0001CE0E 5389                       		subq.l	#1,a1
0001CE10 2549 0004                  		move.l	a1,4(a2)
0001CE14 1011                       		move.b	(a1),d0
0001CE16 5200                       		addq.b	#1,d0		; change glass type when touched
0001CE18 0C00 0030                  		cmpi.b	#$30,d0
0001CE1C 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CE1E 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CE20                            
0001CE20                            Obj09_GlassUpdate:
0001CE20 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CE24                            
0001CE24                            Obj09_GlassSnd:
0001CE24 303C 00BA                  		move.w	#$BA,d0
0001CE28 4EF9 0000 11B4             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CE2E                            ; ===========================================================================
0001CE2E                            
0001CE2E                            Obj09_NoGlass:
0001CE2E 4E75                       		rts	
0001CE30                            ; End of function Obj09_ChkItems2
0001CE30                            
0001CE30                            ; ===========================================================================
0001CE30                            ; ---------------------------------------------------------------------------
0001CE30                            ; Object 10 - blank
0001CE30                            ; ---------------------------------------------------------------------------
0001CE30                            
0001CE30                            Obj10:					; XREF: Obj_Index
0001CE30 4E75                       		rts	
0001CE32                            
0001CE32                            ; ===========================================================================
0001CE32                            ; ---------------------------------------------------------------------------
0001CE32                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001CE32                            ; ---------------------------------------------------------------------------
0001CE32                            
0001CE32                            Obj03:
0001CE32 7000                       		moveq	#0,d0
0001CE34 1028 0024                  		move.b	$24(a0),d0
0001CE38 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001CE3C 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001CE40 3028 0008                  		move.w	8(a0),d0
0001CE44 0240 FF80                  		andi.w	#$FF80,d0
0001CE48 3238 F700                  		move.w	($FFFFF700).w,d1
0001CE4C 0441 0080                  		subi.w	#$80,d1
0001CE50 0241 FF80                  		andi.w	#$FF80,d1
0001CE54 9041                       		sub.w	d1,d0
0001CE56 0C40 0280                  		cmpi.w	#$280,d0
0001CE5A 6200                       		bhi.s	Obj03_MarkChkGone
0001CE5C 4E75                       		rts
0001CE5E                            
0001CE5E                            Obj03_MarkChkGone:
0001CE5E 4EF9 0000 FE38             		jmp	Mark_ChkGone
0001CE64                            ; ===========================================================================
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001CE66 0000                       		dc.w Obj03_MainX-Obj03_Index
0001CE68 0000                       		dc.w Obj03_MainY-Obj03_Index
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            ; ===========================================================================
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            ; Initiation
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            
0001CE6A                            Obj03_Init:
0001CE6A 5428 0024                  		addq.b	#2,$24(a0)
0001CE6E 217C 0000 0000 0004        		move.l	#$00000000,$04(a0)
0001CE76 317C 26BC 0002             		move.w	#$26BC,$02(a0)
0001CE7C 0028 0004 0001             		ori.b	#4,$01(a0)
0001CE82 117C 0010 0019             		move.b	#$10,$19(a0)
0001CE88 117C 0005 0018             		move.b	#5,$18(a0)
0001CE8E 1028 0028                  		move.b	$28(a0),d0
0001CE92 0800 0002                  		btst	#2,d0
0001CE96 6700                       		beq.s	Obj03_Init_CheckX
0001CE98                            
0001CE98                            ;Obj03_Init_CheckY:
0001CE98 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001CE9C 0240 0007                  		andi.w	#7,d0
0001CEA0 1140 001A                  		move.b	d0,$1A(a0)
0001CEA4 0240 0003                  		andi.w	#3,d0
0001CEA8 D040                       		add.w	d0,d0
0001CEAA 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001CEB0 3228 000C                  		move.w	$0C(a0),d1
0001CEB4 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001CEB8 B269 000C                  		cmp.w	$0C(a1),d1
0001CEBC 6400                       		bcc.s	Obj03_Init_Next
0001CEBE 117C 0001 0034             		move.b	#1,$34(a0)
0001CEC4                            Obj03_Init_Next:
0001CEC4                            	;	lea	(Sidekick).w,a1 ; a1=character
0001CEC4                            	;	cmp.w	$0C(a1),d1
0001CEC4                            	;	bcc.s	+
0001CEC4                            	;	move.b	#1,$35(a0)
0001CEC4                            ;+
0001CEC4 6000 0000                  		bra.w	Obj03_MainY
0001CEC8                            ; ===========================================================================
0001CEC8                            word_1FD68:
0001CEC8 0020                       	dc.w  $020
0001CECA 0040                       	dc.w  $040	; 1
0001CECC 0080                       	dc.w  $080	; 2
0001CECE 0100                       	dc.w  $100	; 3
0001CED0                            ; ===========================================================================
0001CED0                            ; loc_1FD70:
0001CED0                            Obj03_Init_CheckX:
0001CED0 0240 0003                  		andi.w	#3,d0
0001CED4 1140 001A                  		move.b	d0,$1A(a0)
0001CED8 D040                       		add.w	d0,d0
0001CEDA 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001CEE0 3228 0008                  		move.w	$08(a0),d1
0001CEE4 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001CEE8 B269 0008                  		cmp.w	$08(a1),d1
0001CEEC 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001CEEE 117C 0001 0034             		move.b	#1,$34(a0)
0001CEF4                            Obj03_Init_CheckX_Next:
0001CEF4                            	;	lea	(Sidekick).w,a1 ; a1=character
0001CEF4                            	;	cmp.w	$08(a1),d1
0001CEF4                            	;	bcc.s	+
0001CEF4                            	;	move.b	#1,$35(a0)
0001CEF4                            ;+
0001CEF4                            ;fucking gamer shit haha gotem
0001CEF4                            Obj03_MainX:
0001CEF4 4A78 FE08                  		tst.w	($FFFFFE08).w
0001CEF8 6600 0000                  		bne.w	return_1FEAC
0001CEFC 3228 0008                  		move.w	$08(a0),d1
0001CF00 45E8 0034                  		lea	$34(a0),a2
0001CF04 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001CF08                            ;		bsr.s	+
0001CF08                            ;		lea	(Sidekick).w,a1 ; a1=character
0001CF08                            
0001CF08                            ;+
0001CF08 4A1A                       		tst.b	(a2)+
0001CF0A 6600                       		bne.s	Obj03_MainX_Alt
0001CF0C B269 0008                  		cmp.w	$08(a1),d1
0001CF10 6200 0000                  		bhi.w	return_1FEAC
0001CF14 157C 0001 FFFF             		move.b	#1,-1(a2)
0001CF1A 3428 000C                  		move.w	$0C(a0),d2
0001CF1E 3602                       		move.w	d2,d3
0001CF20 3828 0032                  		move.w	$32(a0),d4
0001CF24 9444                       		sub.w	d4,d2
0001CF26 D644                       		add.w	d4,d3
0001CF28 3829 000C                  		move.w	$0C(a1),d4
0001CF2C B842                       		cmp.w	d2,d4
0001CF2E 6D00 0000                  		blt.w	return_1FEAC
0001CF32 B843                       		cmp.w	d3,d4
0001CF34 6C00 0000                  		bge.w	return_1FEAC
0001CF38 1028 0028                  		move.b	$28(a0),d0
0001CF3C 6A00                       		bpl.s	Obj03_ICX_B1
0001CF3E 0829 0001 002B             		btst	#1,$2B(a1)
0001CF44 6600 0000                  		bne.w	return_1FEAC
0001CF48                            
0001CF48                            Obj03_ICX_B1:
0001CF48 0828 0000 0001             		btst	#0,$01(a0)
0001CF4E 6600                       		bne.s	Obj03_ICX_B2
0001CF50 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001CF56                            	;	move.b	#$C,$3E(a1)
0001CF56                            	;	move.b	#$D,$3F(a1)
0001CF56 0800 0003                  		btst	#3,d0
0001CF5A 6700                       		beq.s	Obj03_ICX_B2
0001CF5C 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001CF62                            	;	move.b	#$E,$3E(a1)
0001CF62                            	;	move.b	#$F,$3F(a1)
0001CF62                            
0001CF62                            Obj03_ICX_B2:
0001CF62 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001CF68 0800 0005                  		btst	#5,d0
0001CF6C 6700                       		beq.s	return_1FEAC
0001CF6E 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001CF74 6000                       		bra.s	return_1FEAC
0001CF76                            ; ===========================================================================
0001CF76                            
0001CF76                            Obj03_MainX_Alt:
0001CF76 B269 0008                  		cmp.w	$08(a1),d1
0001CF7A 6300 0000                  		bls.w	return_1FEAC
0001CF7E 157C 0000 FFFF             		move.b	#0,-1(a2)
0001CF84 3428 000C                  		move.w	$0C(a0),d2
0001CF88 3602                       		move.w	d2,d3
0001CF8A 3828 0032                  		move.w	$32(a0),d4
0001CF8E 9444                       		sub.w	d4,d2
0001CF90 D644                       		add.w	d4,d3
0001CF92 3829 000C                  		move.w	$0C(a1),d4
0001CF96 B842                       		cmp.w	d2,d4
0001CF98 6D00 0000                  		blt.w	return_1FEAC
0001CF9C B843                       		cmp.w	d3,d4
0001CF9E 6C00 0000                  		bge.w	return_1FEAC
0001CFA2 1028 0028                  		move.b	$28(a0),d0
0001CFA6 6A00                       		bpl.s	Obj03_MXA_B1
0001CFA8 0829 0001 002B             		btst	#1,$2B(a1)
0001CFAE 6600 0000                  		bne.w	return_1FEAC
0001CFB2                            
0001CFB2                            Obj03_MXA_B1:
0001CFB2 0828 0000 0001             		btst	#0,$01(a0)
0001CFB8 6600                       		bne.s	Obj03_MXA_B2
0001CFBA 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001CFC0                            	;	move.b	#$C,$3E(a1)
0001CFC0                            	;	move.b	#$D,$3F(a1)
0001CFC0 0800 0004                  		btst	#4,d0
0001CFC4 6700                       		beq.s	Obj03_MXA_B2
0001CFC6 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001CFCC                            	;	move.b	#$E,$3E(a1)
0001CFCC                            	;	move.b	#$F,$3F(a1)
0001CFCC                            
0001CFCC                            Obj03_MXA_B2:
0001CFCC 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001CFD2 0800 0006                  		btst	#6,d0
0001CFD6 6700                       		beq.s	return_1FEAC
0001CFD8 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001CFDE                            
0001CFDE                            return_1FEAC:
0001CFDE 4E75                       		rts
0001CFE0                            
0001CFE0                            ; ===========================================================================
0001CFE0                            
0001CFE0                            Obj03_MainY:
0001CFE0 4A78 FE08                  		tst.w	($FFFFFE08).w
0001CFE4 6600 0000                  		bne.w	return_1FFB6
0001CFE8 3228 000C                  		move.w	$0C(a0),d1
0001CFEC 45E8 0034                  		lea	$34(a0),a2
0001CFF0 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001CFF4                            ;		bsr.s	+
0001CFF4                            ;		lea	(Sidekick).w,a1 ; a1=character
0001CFF4                            
0001CFF4                            ;+
0001CFF4 4A1A                       		tst.b	(a2)+
0001CFF6 6600                       		bne.s	Obj03_MainY_Alt
0001CFF8 B269 000C                  		cmp.w	$0C(a1),d1
0001CFFC 6200 0000                  		bhi.w	return_1FFB6
0001D000 157C 0001 FFFF             		move.b	#1,-1(a2)
0001D006 3428 0008                  		move.w	$08(a0),d2
0001D00A 3602                       		move.w	d2,d3
0001D00C 3828 0032                  		move.w	$32(a0),d4
0001D010 9444                       		sub.w	d4,d2
0001D012 D644                       		add.w	d4,d3
0001D014 3829 0008                  		move.w	$08(a1),d4
0001D018 B842                       		cmp.w	d2,d4
0001D01A 6D00 0000                  		blt.w	return_1FFB6
0001D01E B843                       		cmp.w	d3,d4
0001D020 6C00 0000                  		bge.w	return_1FFB6
0001D024 1028 0028                  		move.b	$28(a0),d0
0001D028 6A00                       		bpl.s	Obj03_MY_B1
0001D02A 0829 0001 002B             		btst	#1,$2B(a1)
0001D030 6600 0000                  		bne.w	return_1FFB6
0001D034                            
0001D034                            Obj03_MY_B1:
0001D034 0828 0000 0001             		btst	#0,$01(a0)
0001D03A 6600                       		bne.s	Obj03_MY_B2
0001D03C 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001D042                            	;	move.b	#$C,$3E(a1)
0001D042                            	;	move.b	#$D,$3F(a1)
0001D042 0800 0003                  		btst	#3,d0
0001D046 6700                       		beq.s	Obj03_MY_B2
0001D048 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001D04E                            	;	move.b	#$E,$3E(a1)
0001D04E                            	;	move.b	#$F,$3F(a1)
0001D04E                            
0001D04E                            Obj03_MY_B2:
0001D04E 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001D054 0800 0005                  		btst	#5,d0
0001D058 6700                       		beq.s	return_1FFB6
0001D05A 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001D060 6000                       		bra.s	return_1FFB6
0001D062                            
0001D062                            ; ===========================================================================
0001D062                            
0001D062                            Obj03_MainY_Alt:
0001D062 B269 000C                  		cmp.w	$0C(a1),d1
0001D066 6300 0000                  		bls.w	return_1FFB6
0001D06A 157C 0000 FFFF             		move.b	#0,-1(a2)
0001D070 3428 0008                  		move.w	$08(a0),d2
0001D074 3602                       		move.w	d2,d3
0001D076 3828 0032                  		move.w	$32(a0),d4
0001D07A 9444                       		sub.w	d4,d2
0001D07C D644                       		add.w	d4,d3
0001D07E 3829 0008                  		move.w	$08(a1),d4
0001D082 B842                       		cmp.w	d2,d4
0001D084 6D00 0000                  		blt.w	return_1FFB6
0001D088 B843                       		cmp.w	d3,d4
0001D08A 6C00 0000                  		bge.w	return_1FFB6
0001D08E 1028 0028                  		move.b	$28(a0),d0
0001D092 6A00                       		bpl.s	Obj03_MYA_B1
0001D094 0829 0001 002B             		btst	#1,$2B(a1)
0001D09A 6600 0000                  		bne.w	return_1FFB6
0001D09E                            
0001D09E                            Obj03_MYA_B1
0001D09E 0828 0000 0001             		btst	#0,$01(a0)
0001D0A4 6600                       		bne.s	Obj03_MYA_B2
0001D0A6 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001D0AC                            	;	move.b	#$C,$3E(a1)
0001D0AC                            	;	move.b	#$D,$3F(a1)
0001D0AC 0800 0004                  		btst	#4,d0
0001D0B0 6700                       		beq.s	Obj03_MYA_B2
0001D0B2 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001D0B8                            	;	move.b	#$E,$3E(a1)
0001D0B8                            	;	move.b	#$F,$3F(a1)
0001D0B8                            
0001D0B8                            Obj03_MYA_B2:
0001D0B8 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001D0BE 0800 0006                  		btst	#6,d0
0001D0C2 6700                       		beq.s	return_1FFB6
0001D0C4 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001D0CA                            
0001D0CA                            return_1FFB6:
0001D0CA 4E75                       		rts
0001D0CC                            
0001D0CC                            ; ===========================================================================
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            ; Subroutine to	animate	level graphics
0001D0CC                            ; ---------------------------------------------------------------------------
0001D0CC                            
0001D0CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0CC                            
0001D0CC                            
0001D0CC                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D0CC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D0D0 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D0D2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D0D8 6100 0000                  		bsr.w	AniArt_GiantRing
0001D0DC 7000                       		moveq	#0,d0
0001D0DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D0E2 D040                       		add.w	d0,d0
0001D0E4 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D0E8 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D0EC                            ; ===========================================================================
0001D0EC                            
0001D0EC                            AniArt_Pause:
0001D0EC 4E75                       		rts	
0001D0EE                            ; End of function AniArt_Load
0001D0EE                            
0001D0EE                            ; ===========================================================================
0001D0EE 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D0F2 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D0F6 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D0FA 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_none-AniArt_Index
0001D0FE 0000                       		dc.w AniArt_none-AniArt_Index
0001D100                            ; ===========================================================================
0001D100                            ; ---------------------------------------------------------------------------
0001D100                            ; Animated pattern routine - Green Hill
0001D100                            ; ---------------------------------------------------------------------------
0001D100                            
0001D100                            AniArt_GHZ:				; XREF: AniArt_Index
0001D100 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D104 6A00                       		bpl.s	loc_1C08A
0001D106 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001D10C 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001D112 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D116 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D11A 0240 0001                  		andi.w	#1,d0
0001D11E 6700                       		beq.s	loc_1C078
0001D120 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001D124                            
0001D124                            loc_1C078:
0001D124 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001D12E 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001D132 6000 0000                  		bra.w	LoadTiles
0001D136                            ; ===========================================================================
0001D136                            
0001D136                            loc_1C08A:
0001D136 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D13A 6A00                       		bpl.s	loc_1C0C0
0001D13C 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001D142 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D148 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D14C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D150 0240 0001                  		andi.w	#1,d0
0001D154 6700                       		beq.s	loc_1C0AE
0001D156 43E9 0200                  		lea	$200(a1),a1
0001D15A                            
0001D15A                            loc_1C0AE:
0001D15A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D164 323C 000F                  		move.w	#$F,d1
0001D168 6000 0000                  		bra.w	LoadTiles
0001D16C                            ; ===========================================================================
0001D16C                            
0001D16C                            loc_1C0C0:
0001D16C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D170 6A00                       		bpl.s	locret_1C10C
0001D172 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D178 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D17C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D180 0240 0003                  		andi.w	#3,d0
0001D184 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001D188 0800 0000                  		btst	#0,d0
0001D18C 6600                       		bne.s	loc_1C0E8
0001D18E 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001D194                            
0001D194                            loc_1C0E8:
0001D194 EF48                       		lsl.w	#7,d0
0001D196 3200                       		move.w	d0,d1
0001D198 D040                       		add.w	d0,d0
0001D19A D041                       		add.w	d1,d0
0001D19C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D1A6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D1AC 43F1 0000                  		lea	(a1,d0.w),a1
0001D1B0 323C 000B                  		move.w	#$B,d1
0001D1B4 6100 0000                  		bsr.w	LoadTiles
0001D1B8                            
0001D1B8                            locret_1C10C:
0001D1B8 4E75                       		rts	
0001D1BA                            ; ===========================================================================
0001D1BA 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001D1BE                            ; ===========================================================================
0001D1BE                            ; ---------------------------------------------------------------------------
0001D1BE                            ; Animated pattern routine - Marble
0001D1BE                            ; ---------------------------------------------------------------------------
0001D1BE                            
0001D1BE                            AniArt_MZ:				; XREF: AniArt_Index
0001D1BE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D1C2 6A00                       		bpl.s	loc_1C150
0001D1C4 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001D1CA 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001D1D0 7000                       		moveq	#0,d0
0001D1D2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D1D6 5200                       		addq.b	#1,d0
0001D1D8 0C00 0003                  		cmpi.b	#3,d0
0001D1DC 6600                       		bne.s	loc_1C134
0001D1DE 7000                       		moveq	#0,d0
0001D1E0                            
0001D1E0                            loc_1C134:
0001D1E0 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001D1E4 C0FC 0100                  		mulu.w	#$100,d0
0001D1E8 D2C0                       		adda.w	d0,a1
0001D1EA 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001D1F4 323C 0007                  		move.w	#7,d1
0001D1F8 6100 0000                  		bsr.w	LoadTiles
0001D1FC                            
0001D1FC                            loc_1C150:
0001D1FC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D200 6A00                       		bpl.s	loc_1C1AE
0001D202 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D208 7000                       		moveq	#0,d0
0001D20A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D20E 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D214 EE58                       		ror.w	#7,d0
0001D216 D8C0                       		adda.w	d0,a4
0001D218 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D222 7600                       		moveq	#0,d3
0001D224 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D228 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D22C 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D230 343C 0003                  		move.w	#3,d2
0001D234                            
0001D234                            loc_1C188:
0001D234 3003                       		move.w	d3,d0
0001D236 D040                       		add.w	d0,d0
0001D238 0240 001E                  		andi.w	#$1E,d0
0001D23C 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D242 3033 0000                  		move.w	(a3,d0.w),d0
0001D246 47F3 0000                  		lea	(a3,d0.w),a3
0001D24A 224C                       		movea.l	a4,a1
0001D24C 323C 001F                  		move.w	#$1F,d1
0001D250 4E93                       		jsr	(a3)
0001D252 5843                       		addq.w	#4,d3
0001D254 51CA FFDE                  		dbf	d2,loc_1C188
0001D258 4E75                       		rts	
0001D25A                            ; ===========================================================================
0001D25A                            
0001D25A                            loc_1C1AE:
0001D25A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D25E 6A00 0000                  		bpl.w	locret_1C1EA
0001D262 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D268 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D26E 7000                       		moveq	#0,d0
0001D270 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D274 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D278 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D27E C0FC 00C0                  		mulu.w	#$C0,d0
0001D282 D2C0                       		adda.w	d0,a1
0001D284 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D28E 323C 0005                  		move.w	#5,d1
0001D292 6000 0000                  		bra.w	LoadTiles
0001D296                            ; ===========================================================================
0001D296                            
0001D296                            locret_1C1EA:
0001D296 4E75                       		rts	
0001D298                            ; ===========================================================================
0001D298                            ; ---------------------------------------------------------------------------
0001D298                            ; Animated pattern routine - Scrap Brain
0001D298                            ; ---------------------------------------------------------------------------
0001D298                            
0001D298                            AniArt_SBZ:				; XREF: AniArt_Index
0001D298 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D29C 6700                       		beq.s	loc_1C1F8
0001D29E 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D2A2 6000                       		bra.s	loc_1C250
0001D2A4                            ; ===========================================================================
0001D2A4                            
0001D2A4                            loc_1C1F8:
0001D2A4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D2A8 6A00                       		bpl.s	loc_1C250
0001D2AA 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D2B0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D2B6 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D2C0 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D2C4 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D2C8 0240 0007                  		andi.w	#7,d0
0001D2CC 6700                       		beq.s	loc_1C234
0001D2CE 5340                       		subq.w	#1,d0
0001D2D0 C0FC 0180                  		mulu.w	#$180,d0
0001D2D4 43F1 0000                  		lea	(a1,d0.w),a1
0001D2D8 323C 000B                  		move.w	#$B,d1
0001D2DC 6000 0000                  		bra.w	LoadTiles
0001D2E0                            ; ===========================================================================
0001D2E0                            
0001D2E0                            loc_1C234:
0001D2E0 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D2E6                            
0001D2E6                            loc_1C23A:
0001D2E6 323C 0005                  		move.w	#5,d1
0001D2EA 6100 0000                  		bsr.w	LoadTiles
0001D2EE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D2F4 323C 0005                  		move.w	#5,d1
0001D2F8 6000 0000                  		bra.w	LoadTiles
0001D2FC                            ; ===========================================================================
0001D2FC                            
0001D2FC                            loc_1C250:
0001D2FC 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D300 6700                       		beq.s	loc_1C25C
0001D302 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D306 6000                       		bra.s	locret_1C2A0
0001D308                            ; ===========================================================================
0001D308                            
0001D308                            loc_1C25C:
0001D308 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D30C 6A00                       		bpl.s	locret_1C2A0
0001D30E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D314 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D31A 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D324 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D328 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D32C 0240 0007                  		andi.w	#7,d0
0001D330 6700                       		beq.s	loc_1C298
0001D332 5340                       		subq.w	#1,d0
0001D334 C0FC 0180                  		mulu.w	#$180,d0
0001D338 43F1 0000                  		lea	(a1,d0.w),a1
0001D33C 323C 000B                  		move.w	#$B,d1
0001D340 6000 0000                  		bra.w	LoadTiles
0001D344                            ; ===========================================================================
0001D344                            
0001D344                            loc_1C298:
0001D344 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D34A 609A                       		bra.s	loc_1C23A
0001D34C                            ; ===========================================================================
0001D34C                            
0001D34C                            locret_1C2A0:
0001D34C 4E75                       		rts	
0001D34E                            ; ===========================================================================
0001D34E                            ; ---------------------------------------------------------------------------
0001D34E                            ; Animated pattern routine - ending sequence
0001D34E                            ; ---------------------------------------------------------------------------
0001D34E                            
0001D34E                            AniArt_Ending:				; XREF: AniArt_Index
0001D34E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D352 6A00                       		bpl.s	loc_1C2F4
0001D354 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D35A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D360 45F8 9400                  		lea	($FFFF9400).w,a2
0001D364 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D368 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D36C 0240 0001                  		andi.w	#1,d0
0001D370 6700                       		beq.s	loc_1C2CE
0001D372 43E9 0200                  		lea	$200(a1),a1
0001D376 45EA 0200                  		lea	$200(a2),a2
0001D37A                            
0001D37A                            loc_1C2CE:
0001D37A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D384 323C 000F                  		move.w	#$F,d1
0001D388 6100 0000                  		bsr.w	LoadTiles
0001D38C 224A                       		movea.l	a2,a1
0001D38E 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D398 323C 000F                  		move.w	#$F,d1
0001D39C 6000 0000                  		bra.w	LoadTiles
0001D3A0                            ; ===========================================================================
0001D3A0                            
0001D3A0                            loc_1C2F4:
0001D3A0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D3A4 6A00                       		bpl.s	loc_1C33C
0001D3A6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D3AC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D3B0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D3B4 0240 0007                  		andi.w	#7,d0
0001D3B8 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D3BC EF48                       		lsl.w	#7,d0
0001D3BE 3200                       		move.w	d0,d1
0001D3C0 D040                       		add.w	d0,d0
0001D3C2 D041                       		add.w	d1,d0
0001D3C4 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D3CE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D3D4 43F1 0000                  		lea	(a1,d0.w),a1
0001D3D8 323C 000B                  		move.w	#$B,d1
0001D3DC 6000 0000                  		bra.w	LoadTiles
0001D3E0                            ; ===========================================================================
0001D3E0 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D3E8                            ; ===========================================================================
0001D3E8                            
0001D3E8                            loc_1C33C:
0001D3E8 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D3EC 6A00                       		bpl.s	loc_1C37A
0001D3EE 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D3F4 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D3F8 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D3FC 0240 0003                  		andi.w	#3,d0
0001D400 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D404 E148                       		lsl.w	#8,d0
0001D406 D040                       		add.w	d0,d0
0001D408 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D412 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D416 43F1 0000                  		lea	(a1,d0.w),a1
0001D41A 323C 000F                  		move.w	#$F,d1
0001D41E 6000 0000                  		bra.w	LoadTiles
0001D422                            ; ===========================================================================
0001D422 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D426                            ; ===========================================================================
0001D426                            
0001D426                            loc_1C37A:
0001D426 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D42A 6A00                       		bpl.s	locret_1C3B4
0001D42C 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D432 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D436 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D43A 0240 0003                  		andi.w	#3,d0
0001D43E 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D442 E148                       		lsl.w	#8,d0
0001D444 D040                       		add.w	d0,d0
0001D446 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D450 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D454 43F1 0000                  		lea	(a1,d0.w),a1
0001D458 323C 000F                  		move.w	#$F,d1
0001D45C 6000 0000                  		bra.w	LoadTiles
0001D460                            ; ===========================================================================
0001D460                            
0001D460                            locret_1C3B4:
0001D460 4E75                       		rts	
0001D462                            ; ===========================================================================
0001D462                            
0001D462                            AniArt_none:				; XREF: AniArt_Index
0001D462 4E75                       		rts	
0001D464                            
0001D464                            ; ---------------------------------------------------------------------------
0001D464                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D464                            ; ---------------------------------------------------------------------------
0001D464                            
0001D464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D464                            
0001D464                            
0001D464                            LoadTiles:
0001D464 2C99                       		move.l	(a1)+,(a6)
0001D466 2C99                       		move.l	(a1)+,(a6)
0001D468 2C99                       		move.l	(a1)+,(a6)
0001D46A 2C99                       		move.l	(a1)+,(a6)
0001D46C 2C99                       		move.l	(a1)+,(a6)
0001D46E 2C99                       		move.l	(a1)+,(a6)
0001D470 2C99                       		move.l	(a1)+,(a6)
0001D472 2C99                       		move.l	(a1)+,(a6)
0001D474 51C9 FFEE                  		dbf	d1,LoadTiles
0001D478 4E75                       		rts	
0001D47A                            ; End of function LoadTiles
0001D47A                            
0001D47A                            ; ===========================================================================
0001D47A                            ; ---------------------------------------------------------------------------
0001D47A                            ; Animated pattern routine - more Marble Zone
0001D47A                            ; ---------------------------------------------------------------------------
0001D47A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D47E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D482 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D486 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D48A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D48E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D492 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D496 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D49A                            ; ===========================================================================
0001D49A                            
0001D49A                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D49A 2C91                       		move.l	(a1),(a6)
0001D49C 43E9 0010                  		lea	$10(a1),a1
0001D4A0 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D4A4 4E75                       		rts	
0001D4A6                            ; ===========================================================================
0001D4A6                            
0001D4A6                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D4A6 2029 0002                  		move.l	2(a1),d0
0001D4AA 1029 0001                  		move.b	1(a1),d0
0001D4AE E098                       		ror.l	#8,d0
0001D4B0 2C80                       		move.l	d0,(a6)
0001D4B2 43E9 0010                  		lea	$10(a1),a1
0001D4B6 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D4BA 4E75                       		rts	
0001D4BC                            ; ===========================================================================
0001D4BC                            
0001D4BC                            loc_1C410:				; XREF: AniArt_MZextra
0001D4BC 2CA9 0002                  		move.l	2(a1),(a6)
0001D4C0 43E9 0010                  		lea	$10(a1),a1
0001D4C4 51C9 FFF6                  		dbf	d1,loc_1C410
0001D4C8 4E75                       		rts	
0001D4CA                            ; ===========================================================================
0001D4CA                            
0001D4CA                            loc_1C41E:				; XREF: AniArt_MZextra
0001D4CA 2029 0004                  		move.l	4(a1),d0
0001D4CE 1029 0003                  		move.b	3(a1),d0
0001D4D2 E098                       		ror.l	#8,d0
0001D4D4 2C80                       		move.l	d0,(a6)
0001D4D6 43E9 0010                  		lea	$10(a1),a1
0001D4DA 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D4DE 4E75                       		rts	
0001D4E0                            ; ===========================================================================
0001D4E0                            
0001D4E0                            loc_1C434:				; XREF: AniArt_MZextra
0001D4E0 2CA9 0004                  		move.l	4(a1),(a6)
0001D4E4 43E9 0010                  		lea	$10(a1),a1
0001D4E8 51C9 FFF6                  		dbf	d1,loc_1C434
0001D4EC 4E75                       		rts	
0001D4EE                            ; ===========================================================================
0001D4EE                            
0001D4EE                            loc_1C442:				; XREF: AniArt_MZextra
0001D4EE 2029 0006                  		move.l	6(a1),d0
0001D4F2 1029 0005                  		move.b	5(a1),d0
0001D4F6 E098                       		ror.l	#8,d0
0001D4F8 2C80                       		move.l	d0,(a6)
0001D4FA 43E9 0010                  		lea	$10(a1),a1
0001D4FE 51C9 FFEE                  		dbf	d1,loc_1C442
0001D502 4E75                       		rts	
0001D504                            ; ===========================================================================
0001D504                            
0001D504                            loc_1C458:				; XREF: AniArt_MZextra
0001D504 2CA9 0006                  		move.l	6(a1),(a6)
0001D508 43E9 0010                  		lea	$10(a1),a1
0001D50C 51C9 FFF6                  		dbf	d1,loc_1C458
0001D510 4E75                       		rts	
0001D512                            ; ===========================================================================
0001D512                            
0001D512                            loc_1C466:				; XREF: AniArt_MZextra
0001D512 2029 0008                  		move.l	8(a1),d0
0001D516 1029 0007                  		move.b	7(a1),d0
0001D51A E098                       		ror.l	#8,d0
0001D51C 2C80                       		move.l	d0,(a6)
0001D51E 43E9 0010                  		lea	$10(a1),a1
0001D522 51C9 FFEE                  		dbf	d1,loc_1C466
0001D526 4E75                       		rts	
0001D528                            ; ===========================================================================
0001D528                            
0001D528                            loc_1C47C:				; XREF: AniArt_MZextra
0001D528 2CA9 0008                  		move.l	8(a1),(a6)
0001D52C 43E9 0010                  		lea	$10(a1),a1
0001D530 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D534 4E75                       		rts	
0001D536                            ; ===========================================================================
0001D536                            
0001D536                            loc_1C48A:				; XREF: AniArt_MZextra
0001D536 2029 000A                  		move.l	$A(a1),d0
0001D53A 1029 0009                  		move.b	9(a1),d0
0001D53E E098                       		ror.l	#8,d0
0001D540 2C80                       		move.l	d0,(a6)
0001D542 43E9 0010                  		lea	$10(a1),a1
0001D546 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D54A 4E75                       		rts	
0001D54C                            ; ===========================================================================
0001D54C                            
0001D54C                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D54C 2CA9 000A                  		move.l	$A(a1),(a6)
0001D550 43E9 0010                  		lea	$10(a1),a1
0001D554 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D558 4E75                       		rts	
0001D55A                            ; ===========================================================================
0001D55A                            
0001D55A                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D55A 2029 000C                  		move.l	$C(a1),d0
0001D55E 1029 000B                  		move.b	$B(a1),d0
0001D562 E098                       		ror.l	#8,d0
0001D564 2C80                       		move.l	d0,(a6)
0001D566 43E9 0010                  		lea	$10(a1),a1
0001D56A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D56E 4E75                       		rts	
0001D570                            ; ===========================================================================
0001D570                            
0001D570                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D570 2CA9 000C                  		move.l	$C(a1),(a6)
0001D574 43E9 0010                  		lea	$10(a1),a1
0001D578 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D57C 4E75                       		rts	
0001D57E                            ; ===========================================================================
0001D57E                            
0001D57E                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D57E 2029 000C                  		move.l	$C(a1),d0
0001D582 E198                       		rol.l	#8,d0
0001D584 1011                       		move.b	0(a1),d0
0001D586 2C80                       		move.l	d0,(a6)
0001D588 43E9 0010                  		lea	$10(a1),a1
0001D58C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D590 4E75                       		rts	
0001D592                            ; ===========================================================================
0001D592                            
0001D592                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D592 3CA9 000E                  		move.w	$E(a1),(a6)
0001D596 3C91                       		move.w	0(a1),(a6)
0001D598 43E9 0010                  		lea	$10(a1),a1
0001D59C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D5A0 4E75                       		rts	
0001D5A2                            ; ===========================================================================
0001D5A2                            
0001D5A2                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D5A2 2011                       		move.l	0(a1),d0
0001D5A4 1029 000F                  		move.b	$F(a1),d0
0001D5A8 E098                       		ror.l	#8,d0
0001D5AA 2C80                       		move.l	d0,(a6)
0001D5AC 43E9 0010                  		lea	$10(a1),a1
0001D5B0 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D5B4 4E75                       		rts	
0001D5B6                            
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            ; Animated pattern routine - giant ring
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            
0001D5B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5B6                            
0001D5B6                            
0001D5B6                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D5B6 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D5BA 6600                       		bne.s	loc_1C518
0001D5BC 4E75                       		rts	
0001D5BE                            ; ===========================================================================
0001D5BE                            
0001D5BE                            loc_1C518:
0001D5BE 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D5C4 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D5CA 7000                       		moveq	#0,d0
0001D5CC 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D5D0 43F1 0000                  		lea	(a1,d0.w),a1
0001D5D4 0640 8000                  		addi.w	#$8000,d0
0001D5D8 E588                       		lsl.l	#2,d0
0001D5DA E448                       		lsr.w	#2,d0
0001D5DC 0040 4000                  		ori.w	#$4000,d0
0001D5E0 4840                       		swap	d0
0001D5E2 2D40 0004                  		move.l	d0,4(a6)
0001D5E6 323C 000D                  		move.w	#$D,d1
0001D5EA 6000 FE78                  		bra.w	LoadTiles
0001D5EE                            ; End of function AniArt_GiantRing
0001D5EE                            
0001D5EE                            ; ===========================================================================
0001D5EE                            ; ---------------------------------------------------------------------------
0001D5EE                            ; Object 21 - SCORE, TIME, RINGS
0001D5EE                            ; ---------------------------------------------------------------------------
0001D5EE                            
0001D5EE                            Obj21:					; XREF: Obj_Index
0001D5EE 7000                       		moveq	#0,d0
0001D5F0 1028 0024                  		move.b	$24(a0),d0
0001D5F4 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D5F8 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D5FC                            ; ===========================================================================
0001D5FC 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D5FE 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D600                            ; ===========================================================================
0001D600                            
0001D600                            Obj21_Main:				; XREF: Obj21_Main
0001D600 5428 0024                  		addq.b	#2,$24(a0)
0001D604 317C 0090 0008             		move.w	#$90,8(a0)
0001D60A 317C 0108 000A             		move.w	#$108,$A(a0)
0001D610 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D618 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D61E 117C 0000 0001             		move.b	#0,1(a0)
0001D624 117C 0000 0018             		move.b	#0,$18(a0)
0001D62A                            
0001D62A                            Obj21_Flash:				; XREF: Obj21_Main
0001D62A 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D62E 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D630 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D634 4EF9 0000 DD42             		jmp	DisplaySprite
0001D63A                            ; ===========================================================================
0001D63A                            
0001D63A                            Obj21_Flash2:
0001D63A 7000                       		moveq	#0,d0
0001D63C 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D642 6600                       		bne.s	Obj21_Display
0001D644 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D646 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D64C 6600                       		bne.s	Obj21_Display	; if not, branch
0001D64E 5440                       		addq.w	#2,d0		; make time counter flash red
0001D650                            
0001D650                            Obj21_Display:
0001D650 1140 001A                  		move.b	d0,$1A(a0)
0001D654 4EF9 0000 DD42             		jmp	DisplaySprite
0001D65A                            ; ===========================================================================
0001D65A                            ; ---------------------------------------------------------------------------
0001D65A                            ; Sprite mappings - SCORE, TIME, RINGS
0001D65A                            ; ---------------------------------------------------------------------------
0001D65A                            Map_obj21:
0001D65A                            	include "_maps\obj21.asm"
0001D65A                            ; ---------------------------------------------------------------------------
0001D65A                            ; Sprite mappings - SCORE, TIME, RINGS
0001D65A                            ; ---------------------------------------------------------------------------
0001D65A 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D65E 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D662 0A                         byte_1C5BC:	dc.b $A
0001D663 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D668 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D66D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D672 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D677 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D67C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D681 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D686 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D68B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D690 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D695 00                         		dc.b 0
0001D696 0A                         byte_1C5F0:	dc.b $A
0001D697 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D69C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D6A1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D6A6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D6AB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D6B0 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D6B5 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D6BA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D6BF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D6C4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D6C9 00                         		dc.b 0
0001D6CA 0A                         byte_1C624:	dc.b $A
0001D6CB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D6D0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D6D5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D6DA 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D6DF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D6E4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D6E9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D6EE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D6F3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D6F8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D6FD 00                         		dc.b 0
0001D6FE 0A                         byte_1C658:	dc.b $A
0001D6FF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D704 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D709 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D70E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D713 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D718 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D71D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D722 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D727 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D72C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D732 00                         		even
0001D732 00                         		even
0001D732                            
0001D732                            ; ---------------------------------------------------------------------------
0001D732                            ; Add points subroutine
0001D732                            ; ---------------------------------------------------------------------------
0001D732                            
0001D732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D732                            
0001D732                            
0001D732                            AddPoints:
0001D732 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D738 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D73C 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D740 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D742 223C 000F 423F             		move.l	#999999,d1
0001D748 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D74A 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D74E 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D750 2481                       		move.l	d1,(a2)
0001D752                            
0001D752                            loc_1C6AC:
0001D752 2013                       		move.l	(a3),d0
0001D754 B092                       		cmp.l	(a2),d0
0001D756 6500 0000                  		bcs.w	locret_1C6B6
0001D75A 2480                       		move.l	d0,(a2)
0001D75C                            
0001D75C                            locret_1C6B6:
0001D75C 4E75                       		rts	
0001D75E                            ; End of function AddPoints
0001D75E                            
0001D75E                            ; ---------------------------------------------------------------------------
0001D75E                            ; Subroutine to	update the HUD
0001D75E                            ; ---------------------------------------------------------------------------
0001D75E                            
0001D75E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D75E                            
0001D75E                            
0001D75E                            ;HudUpdate:
0001D75E                            ;		rts				; this thing is gay lol
0001D75E                            ;		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D75E                            ;		bne.w	HudDebug	; if yes, branch
0001D75E                            ;		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D75E                            ;		beq.s	Hud_ChkRings	; if not, branch
0001D75E                            ;;		clr.b	($FFFFFE1F).w
0001D75E                            ;		move.l	#$5C800003,d0	; set VRAM address
0001D75E                            ;		move.l	($FFFFFE26).w,d1 ; load	score
0001D75E                            ;		bsr.w	Hud_Score
0001D75E                            
0001D75E                            Hud_ChkRings:
0001D75E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D762 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D764 6A00                       		bpl.s	loc_1C6E4
0001D766 6100 0000                  		bsr.w	Hud_LoadZero
0001D76A                            
0001D76A                            loc_1C6E4:
0001D76A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D76E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D774 7200                       		moveq	#0,d1
0001D776 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D77A 6100 0000                  		bsr.w	Hud_Rings
0001D77E                            
0001D77E                            Hud_ChkTime:
0001D77E 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D782 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D784 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D788 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D78A 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D78E 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D794 6700                       		beq.s	TimeOver	; if yes, branch
0001D796 5221                       		addq.b	#1,-(a1)
0001D798 0C11 003C                  		cmpi.b	#60,(a1)
0001D79C 6500                       		bcs.s	Hud_ChkLives
0001D79E 12BC 0000                  		move.b	#0,(a1)
0001D7A2 5221                       		addq.b	#1,-(a1)
0001D7A4 0C11 003C                  		cmpi.b	#60,(a1)
0001D7A8 6500                       		bcs.s	loc_1C734
0001D7AA 12BC 0000                  		move.b	#0,(a1)
0001D7AE 5221                       		addq.b	#1,-(a1)
0001D7B0 0C11 0009                  		cmpi.b	#9,(a1)
0001D7B4 6500                       		bcs.s	loc_1C734
0001D7B6 12BC 0009                  		move.b	#9,(a1)
0001D7BA                            
0001D7BA                            loc_1C734:
0001D7BA 203C 5E40 0003             		move.l	#$5E400003,d0
0001D7C0 7200                       		moveq	#0,d1
0001D7C2 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D7C6 6100 0000                  		bsr.w	Hud_Mins
0001D7CA 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D7D0 7200                       		moveq	#0,d1
0001D7D2 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D7D6 6100 0000                  		bsr.w	Hud_Secs
0001D7DA                            
0001D7DA                            Hud_ChkLives:
0001D7DA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D7DE 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D7E0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D7E4 6100 0000                  		bsr.w	Hud_Lives
0001D7E8                            
0001D7E8                            Hud_ChkBonus:
0001D7E8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D7EC 6700                       		beq.s	Hud_End		; if not, branch
0001D7EE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D7F2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D7FC 7200                       		moveq	#0,d1
0001D7FE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D802 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D806 7200                       		moveq	#0,d1
0001D808 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D80C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D810                            
0001D810                            Hud_End:
0001D810 4E75                       		rts	
0001D812                            ; ===========================================================================
0001D812                            
0001D812                            TimeOver:				; XREF: Hud_ChkTime
0001D812 4E75                       		rts
0001D814 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D818 41F8 D000                  		lea	($FFFFD000).w,a0
0001D81C 2448                       		movea.l	a0,a2
0001D81E 6100 E670                  		bsr.w	KillSonic
0001D822 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D828 4E75                       		rts	
0001D82A                            ; ===========================================================================
0001D82A                            
0001D82A                            HudDebug:				; XREF: HudUpdate
0001D82A 6100 0000                  		bsr.w	HudDb_XY
0001D82E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D832 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D834 6A00                       		bpl.s	HudDb_Rings
0001D836 6100 0000                  		bsr.w	Hud_LoadZero
0001D83A                            
0001D83A                            HudDb_Rings:
0001D83A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D83E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D844 7200                       		moveq	#0,d1
0001D846 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D84A 6100 0000                  		bsr.w	Hud_Rings
0001D84E                            
0001D84E                            HudDb_ObjCount:
0001D84E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D854 7200                       		moveq	#0,d1
0001D856 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D85A 6100 0000                  		bsr.w	Hud_Secs
0001D85E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D862 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D864 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D868 6100 0000                  		bsr.w	Hud_Lives
0001D86C                            
0001D86C                            HudDb_ChkBonus:
0001D86C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D870 6700                       		beq.s	HudDb_End	; if not, branch
0001D872 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D876 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D880 7200                       		moveq	#0,d1
0001D882 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D886 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D88A 7200                       		moveq	#0,d1
0001D88C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D890 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D894                            
0001D894                            HudDb_End:
0001D894 4E75                       		rts	
0001D896                            ; End of function HudUpdate
0001D896                            
0001D896                            ; ---------------------------------------------------------------------------
0001D896                            ; Subroutine to	load "0" on the	HUD
0001D896                            ; ---------------------------------------------------------------------------
0001D896                            
0001D896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D896                            
0001D896                            
0001D896                            Hud_LoadZero:				; XREF: HudUpdate
0001D896 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D8A0 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D8A4 343C 0002                  		move.w	#2,d2
0001D8A8 4EF9 0000 0000             		jmp	loc_1C83E
0001D8AE                            ; End of function Hud_LoadZero
0001D8AE                            
0001D8AE                            ; ---------------------------------------------------------------------------
0001D8AE                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D8AE                            ; ---------------------------------------------------------------------------
0001D8AE                            
0001D8AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8AE                            
0001D8AE                            
0001D8AE                            ;Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D8AE                            ;		rts
0001D8AE                            ;		lea	($C00000).l,a6
0001D8AE                            ;		bsr.w	Hud_Lives
0001D8AE                            ;		move.l	#$5C400003,($C00004).l
0001D8AE                            ;		lea	Hud_TilesBase(pc),a2
0001D8AE                            ;		move.w	#$E,d2
0001D8AE                            
0001D8AE                            loc_1C83E:				; XREF: Hud_LoadZero
0001D8AE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D8B2                            
0001D8B2                            loc_1C842:
0001D8B2 323C 000F                  		move.w	#$F,d1
0001D8B6 101A                       		move.b	(a2)+,d0
0001D8B8 6B00                       		bmi.s	loc_1C85E
0001D8BA 4880                       		ext.w	d0
0001D8BC EB48                       		lsl.w	#5,d0
0001D8BE 47F1 0000                  		lea	(a1,d0.w),a3
0001D8C2                            
0001D8C2                            loc_1C852:
0001D8C2 2C9B                       		move.l	(a3)+,(a6)
0001D8C4 51C9 FFFC                  		dbf	d1,loc_1C852
0001D8C8                            
0001D8C8                            loc_1C858:
0001D8C8 51CA FFE8                  		dbf	d2,loc_1C842
0001D8CC                            
0001D8CC 4E75                       		rts	
0001D8CE                            ; ===========================================================================
0001D8CE                            
0001D8CE                            loc_1C85E:
0001D8CE 2CBC 0000 0000             		move.l	#0,(a6)
0001D8D4 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D8D8                            
0001D8D8 60EE                       		bra.s	loc_1C858
0001D8DA                            ; End of function Hud_Base
0001D8DA                            
0001D8DA                            ; ===========================================================================
0001D8DA 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D8E6 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D8EA                            ; ---------------------------------------------------------------------------
0001D8EA                            ; Subroutine to	load debug mode	numbers	patterns
0001D8EA                            ; ---------------------------------------------------------------------------
0001D8EA                            
0001D8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8EA                            
0001D8EA                            
0001D8EA                            HudDb_XY:				; XREF: HudDebug
0001D8EA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D8F4 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D8F8 4841                       		swap	d1
0001D8FA 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D8FE 6100                       		bsr.s	HudDb_XY2
0001D900 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D904 4841                       		swap	d1
0001D906 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D90A                            ; End of function HudDb_XY
0001D90A                            
0001D90A                            
0001D90A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D90A                            
0001D90A                            
0001D90A                            HudDb_XY2:
0001D90A 7C07                       		moveq	#7,d6
0001D90C 43F9 0000 0534             		lea	(Art_Text).l,a1
0001D912                            
0001D912                            HudDb_XYLoop:
0001D912 E959                       		rol.w	#4,d1
0001D914 3401                       		move.w	d1,d2
0001D916 0242 000F                  		andi.w	#$F,d2
0001D91A 0C42 000A                  		cmpi.w	#$A,d2
0001D91E 6500                       		bcs.s	loc_1C8B2
0001D920 5E42                       		addq.w	#7,d2
0001D922                            
0001D922                            loc_1C8B2:
0001D922 EB4A                       		lsl.w	#5,d2
0001D924 47F1 2000                  		lea	(a1,d2.w),a3
0001D928 2C9B                       		move.l	(a3)+,(a6)
0001D92A 2C9B                       		move.l	(a3)+,(a6)
0001D92C 2C9B                       		move.l	(a3)+,(a6)
0001D92E 2C9B                       		move.l	(a3)+,(a6)
0001D930 2C9B                       		move.l	(a3)+,(a6)
0001D932 2C9B                       		move.l	(a3)+,(a6)
0001D934 2C9B                       		move.l	(a3)+,(a6)
0001D936 2C9B                       		move.l	(a3)+,(a6)
0001D938 4841                       		swap	d1
0001D93A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D93E                            
0001D93E 4E75                       		rts	
0001D940                            ; End of function HudDb_XY2
0001D940                            
0001D940                            ; ---------------------------------------------------------------------------
0001D940                            ; Subroutine to	load rings numbers patterns
0001D940                            ; ---------------------------------------------------------------------------
0001D940                            
0001D940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D940                            
0001D940                            
0001D940                            Hud_Rings:				; XREF: HudUpdate
0001D940 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D946 7C02                       		moveq	#2,d6
0001D948 6000                       		bra.s	Hud_LoadArt
0001D94A                            ; End of function Hud_Rings
0001D94A                            
0001D94A                            ; ---------------------------------------------------------------------------
0001D94A                            ; Subroutine to	load score numbers patterns
0001D94A                            ; ---------------------------------------------------------------------------
0001D94A                            
0001D94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D94A                            
0001D94A                            
0001D94A                            Hud_Score:				; XREF: HudUpdate
0001D94A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D950 7C05                       		moveq	#5,d6
0001D952                            
0001D952                            Hud_LoadArt:
0001D952 7800                       		moveq	#0,d4
0001D954 43FA 0000                  		lea	Art_Hud(pc),a1
0001D958                            
0001D958                            Hud_ScoreLoop:
0001D958 7400                       		moveq	#0,d2
0001D95A 261A                       		move.l	(a2)+,d3
0001D95C                            
0001D95C                            loc_1C8EC:
0001D95C 9283                       		sub.l	d3,d1
0001D95E 6500                       		bcs.s	loc_1C8F4
0001D960 5242                       		addq.w	#1,d2
0001D962 60F8                       		bra.s	loc_1C8EC
0001D964                            ; ===========================================================================
0001D964                            
0001D964                            loc_1C8F4:
0001D964 D283                       		add.l	d3,d1
0001D966 4A42                       		tst.w	d2
0001D968 6700                       		beq.s	loc_1C8FE
0001D96A 383C 0001                  		move.w	#1,d4
0001D96E                            
0001D96E                            loc_1C8FE:
0001D96E 4A44                       		tst.w	d4
0001D970 6700                       		beq.s	loc_1C92C
0001D972 ED4A                       		lsl.w	#6,d2
0001D974 2D40 0004                  		move.l	d0,4(a6)
0001D978 47F1 2000                  		lea	(a1,d2.w),a3
0001D97C 2C9B                       		move.l	(a3)+,(a6)
0001D97E 2C9B                       		move.l	(a3)+,(a6)
0001D980 2C9B                       		move.l	(a3)+,(a6)
0001D982 2C9B                       		move.l	(a3)+,(a6)
0001D984 2C9B                       		move.l	(a3)+,(a6)
0001D986 2C9B                       		move.l	(a3)+,(a6)
0001D988 2C9B                       		move.l	(a3)+,(a6)
0001D98A 2C9B                       		move.l	(a3)+,(a6)
0001D98C 2C9B                       		move.l	(a3)+,(a6)
0001D98E 2C9B                       		move.l	(a3)+,(a6)
0001D990 2C9B                       		move.l	(a3)+,(a6)
0001D992 2C9B                       		move.l	(a3)+,(a6)
0001D994 2C9B                       		move.l	(a3)+,(a6)
0001D996 2C9B                       		move.l	(a3)+,(a6)
0001D998 2C9B                       		move.l	(a3)+,(a6)
0001D99A 2C9B                       		move.l	(a3)+,(a6)
0001D99C                            
0001D99C                            loc_1C92C:
0001D99C 0680 0040 0000             		addi.l	#$400000,d0
0001D9A2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D9A6                            
0001D9A6 4E75                       		rts	
0001D9A8                            ; End of function Hud_Score
0001D9A8                            
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; Subroutine to	load countdown numbers on the continue screen
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            
0001D9A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9A8                            
0001D9A8                            
0001D9A8                            ContScrCounter:				; XREF: ContinueScreen
0001D9A8 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D9B2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D9B8 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D9BE 7C01                       		moveq	#1,d6
0001D9C0 7800                       		moveq	#0,d4
0001D9C2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D9C6                            
0001D9C6                            ContScr_Loop:
0001D9C6 7400                       		moveq	#0,d2
0001D9C8 261A                       		move.l	(a2)+,d3
0001D9CA                            
0001D9CA                            loc_1C95A:
0001D9CA 9283                       		sub.l	d3,d1
0001D9CC 6500                       		bcs.s	loc_1C962
0001D9CE 5242                       		addq.w	#1,d2
0001D9D0 60F8                       		bra.s	loc_1C95A
0001D9D2                            ; ===========================================================================
0001D9D2                            
0001D9D2                            loc_1C962:
0001D9D2 D283                       		add.l	d3,d1
0001D9D4 ED4A                       		lsl.w	#6,d2
0001D9D6 47F1 2000                  		lea	(a1,d2.w),a3
0001D9DA 2C9B                       		move.l	(a3)+,(a6)
0001D9DC 2C9B                       		move.l	(a3)+,(a6)
0001D9DE 2C9B                       		move.l	(a3)+,(a6)
0001D9E0 2C9B                       		move.l	(a3)+,(a6)
0001D9E2 2C9B                       		move.l	(a3)+,(a6)
0001D9E4 2C9B                       		move.l	(a3)+,(a6)
0001D9E6 2C9B                       		move.l	(a3)+,(a6)
0001D9E8 2C9B                       		move.l	(a3)+,(a6)
0001D9EA 2C9B                       		move.l	(a3)+,(a6)
0001D9EC 2C9B                       		move.l	(a3)+,(a6)
0001D9EE 2C9B                       		move.l	(a3)+,(a6)
0001D9F0 2C9B                       		move.l	(a3)+,(a6)
0001D9F2 2C9B                       		move.l	(a3)+,(a6)
0001D9F4 2C9B                       		move.l	(a3)+,(a6)
0001D9F6 2C9B                       		move.l	(a3)+,(a6)
0001D9F8 2C9B                       		move.l	(a3)+,(a6)
0001D9FA 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D9FE                            
0001D9FE 4E75                       		rts	
0001DA00                            ; End of function ContScrCounter
0001DA00                            
0001DA00                            ; ===========================================================================
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            ; HUD counter sizes
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001DA04 0000 2710                  Hud_10000:	dc.l 10000
0001DA08 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001DA0C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001DA10 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001DA14 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001DA18                            
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            ; Subroutine to	load time numbers patterns
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            
0001DA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA18                            
0001DA18                            
0001DA18                            Hud_Mins:				; XREF: Hud_ChkTime
0001DA18 45F9 0001 DA14             		lea	(Hud_1).l,a2
0001DA1E 7C00                       		moveq	#0,d6
0001DA20 6000                       		bra.s	loc_1C9BA
0001DA22                            ; End of function Hud_Mins
0001DA22                            
0001DA22                            
0001DA22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA22                            
0001DA22                            
0001DA22                            Hud_Secs:				; XREF: Hud_ChkTime
0001DA22 45F9 0001 DA10             		lea	(Hud_10).l,a2
0001DA28 7C01                       		moveq	#1,d6
0001DA2A                            
0001DA2A                            loc_1C9BA:
0001DA2A 7800                       		moveq	#0,d4
0001DA2C 43FA 0000                  		lea	Art_Hud(pc),a1
0001DA30                            
0001DA30                            Hud_TimeLoop:
0001DA30 7400                       		moveq	#0,d2
0001DA32 261A                       		move.l	(a2)+,d3
0001DA34                            
0001DA34                            loc_1C9C4:
0001DA34 9283                       		sub.l	d3,d1
0001DA36 6500                       		bcs.s	loc_1C9CC
0001DA38 5242                       		addq.w	#1,d2
0001DA3A 60F8                       		bra.s	loc_1C9C4
0001DA3C                            ; ===========================================================================
0001DA3C                            
0001DA3C                            loc_1C9CC:
0001DA3C D283                       		add.l	d3,d1
0001DA3E 4A42                       		tst.w	d2
0001DA40 6700                       		beq.s	loc_1C9D6
0001DA42 383C 0001                  		move.w	#1,d4
0001DA46                            
0001DA46                            loc_1C9D6:
0001DA46 ED4A                       		lsl.w	#6,d2
0001DA48 2D40 0004                  		move.l	d0,4(a6)
0001DA4C 47F1 2000                  		lea	(a1,d2.w),a3
0001DA50 2C9B                       		move.l	(a3)+,(a6)
0001DA52 2C9B                       		move.l	(a3)+,(a6)
0001DA54 2C9B                       		move.l	(a3)+,(a6)
0001DA56 2C9B                       		move.l	(a3)+,(a6)
0001DA58 2C9B                       		move.l	(a3)+,(a6)
0001DA5A 2C9B                       		move.l	(a3)+,(a6)
0001DA5C 2C9B                       		move.l	(a3)+,(a6)
0001DA5E 2C9B                       		move.l	(a3)+,(a6)
0001DA60 2C9B                       		move.l	(a3)+,(a6)
0001DA62 2C9B                       		move.l	(a3)+,(a6)
0001DA64 2C9B                       		move.l	(a3)+,(a6)
0001DA66 2C9B                       		move.l	(a3)+,(a6)
0001DA68 2C9B                       		move.l	(a3)+,(a6)
0001DA6A 2C9B                       		move.l	(a3)+,(a6)
0001DA6C 2C9B                       		move.l	(a3)+,(a6)
0001DA6E 2C9B                       		move.l	(a3)+,(a6)
0001DA70 0680 0040 0000             		addi.l	#$400000,d0
0001DA76 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001DA7A                            
0001DA7A 4E75                       		rts	
0001DA7C                            ; End of function Hud_Secs
0001DA7C                            
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            ; Subroutine to	load time/ring bonus numbers patterns
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            
0001DA7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA7C                            
0001DA7C                            
0001DA7C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001DA7C 45F9 0001 DA08             		lea	(Hud_1000).l,a2
0001DA82 7C03                       		moveq	#3,d6
0001DA84 7800                       		moveq	#0,d4
0001DA86 43FA 0000                  		lea	Art_Hud(pc),a1
0001DA8A                            
0001DA8A                            Hud_BonusLoop:
0001DA8A 7400                       		moveq	#0,d2
0001DA8C 261A                       		move.l	(a2)+,d3
0001DA8E                            
0001DA8E                            loc_1CA1E:
0001DA8E 9283                       		sub.l	d3,d1
0001DA90 6500                       		bcs.s	loc_1CA26
0001DA92 5242                       		addq.w	#1,d2
0001DA94 60F8                       		bra.s	loc_1CA1E
0001DA96                            ; ===========================================================================
0001DA96                            
0001DA96                            loc_1CA26:
0001DA96 D283                       		add.l	d3,d1
0001DA98 4A42                       		tst.w	d2
0001DA9A 6700                       		beq.s	loc_1CA30
0001DA9C 383C 0001                  		move.w	#1,d4
0001DAA0                            
0001DAA0                            loc_1CA30:
0001DAA0 4A44                       		tst.w	d4
0001DAA2 6700                       		beq.s	Hud_ClrBonus
0001DAA4 ED4A                       		lsl.w	#6,d2
0001DAA6 47F1 2000                  		lea	(a1,d2.w),a3
0001DAAA 2C9B                       		move.l	(a3)+,(a6)
0001DAAC 2C9B                       		move.l	(a3)+,(a6)
0001DAAE 2C9B                       		move.l	(a3)+,(a6)
0001DAB0 2C9B                       		move.l	(a3)+,(a6)
0001DAB2 2C9B                       		move.l	(a3)+,(a6)
0001DAB4 2C9B                       		move.l	(a3)+,(a6)
0001DAB6 2C9B                       		move.l	(a3)+,(a6)
0001DAB8 2C9B                       		move.l	(a3)+,(a6)
0001DABA 2C9B                       		move.l	(a3)+,(a6)
0001DABC 2C9B                       		move.l	(a3)+,(a6)
0001DABE 2C9B                       		move.l	(a3)+,(a6)
0001DAC0 2C9B                       		move.l	(a3)+,(a6)
0001DAC2 2C9B                       		move.l	(a3)+,(a6)
0001DAC4 2C9B                       		move.l	(a3)+,(a6)
0001DAC6 2C9B                       		move.l	(a3)+,(a6)
0001DAC8 2C9B                       		move.l	(a3)+,(a6)
0001DACA                            
0001DACA                            loc_1CA5A:
0001DACA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001DACE                            
0001DACE 4E75                       		rts	
0001DAD0                            ; ===========================================================================
0001DAD0                            
0001DAD0                            Hud_ClrBonus:
0001DAD0 7A0F                       		moveq	#$F,d5
0001DAD2                            
0001DAD2                            Hud_ClrBonusLoop:
0001DAD2 2CBC 0000 0000             		move.l	#0,(a6)
0001DAD8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001DADC                            
0001DADC 60EC                       		bra.s	loc_1CA5A
0001DADE                            ; End of function Hud_TimeRingBonus
0001DADE                            
0001DADE                            ; ---------------------------------------------------------------------------
0001DADE                            ; Subroutine to	load uncompressed lives	counter	patterns
0001DADE                            ; ---------------------------------------------------------------------------
0001DADE                            
0001DADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DADE                            
0001DADE                            
0001DADE                            Hud_Lives:				; XREF: Hud_ChkLives
0001DADE 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001DAE4 7200                       		moveq	#0,d1
0001DAE6 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001DAEA 45F9 0001 DA10             		lea	(Hud_10).l,a2
0001DAF0 7C01                       		moveq	#1,d6
0001DAF2 7800                       		moveq	#0,d4
0001DAF4 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001DAF8                            
0001DAF8                            Hud_LivesLoop:
0001DAF8 2D40 0004                  		move.l	d0,4(a6)
0001DAFC 7400                       		moveq	#0,d2
0001DAFE 261A                       		move.l	(a2)+,d3
0001DB00                            
0001DB00                            loc_1CA90:
0001DB00 9283                       		sub.l	d3,d1
0001DB02 6500                       		bcs.s	loc_1CA98
0001DB04 5242                       		addq.w	#1,d2
0001DB06 60F8                       		bra.s	loc_1CA90
0001DB08                            ; ===========================================================================
0001DB08                            
0001DB08                            loc_1CA98:
0001DB08 D283                       		add.l	d3,d1
0001DB0A 4A42                       		tst.w	d2
0001DB0C 6700                       		beq.s	loc_1CAA2
0001DB0E 383C 0001                  		move.w	#1,d4
0001DB12                            
0001DB12                            loc_1CAA2:
0001DB12 4A44                       		tst.w	d4
0001DB14 6700                       		beq.s	Hud_ClrLives
0001DB16                            
0001DB16                            loc_1CAA6:
0001DB16 EB4A                       		lsl.w	#5,d2
0001DB18 47F1 2000                  		lea	(a1,d2.w),a3
0001DB1C 2C9B                       		move.l	(a3)+,(a6)
0001DB1E 2C9B                       		move.l	(a3)+,(a6)
0001DB20 2C9B                       		move.l	(a3)+,(a6)
0001DB22 2C9B                       		move.l	(a3)+,(a6)
0001DB24 2C9B                       		move.l	(a3)+,(a6)
0001DB26 2C9B                       		move.l	(a3)+,(a6)
0001DB28 2C9B                       		move.l	(a3)+,(a6)
0001DB2A 2C9B                       		move.l	(a3)+,(a6)
0001DB2C                            
0001DB2C                            loc_1CABC:
0001DB2C 0680 0040 0000             		addi.l	#$400000,d0
0001DB32 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001DB36                            
0001DB36 4E75                       		rts	
0001DB38                            ; ===========================================================================
0001DB38                            
0001DB38                            Hud_ClrLives:
0001DB38 4A46                       		tst.w	d6
0001DB3A 67DA                       		beq.s	loc_1CAA6
0001DB3C 7A07                       		moveq	#7,d5
0001DB3E                            
0001DB3E                            Hud_ClrLivesLoop:
0001DB3E 2CBC 0000 0000             		move.l	#0,(a6)
0001DB44 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001DB48 60E2                       		bra.s	loc_1CABC
0001DB4A                            ; End of function Hud_Lives
0001DB4A                            
0001DB4A                            ; ===========================================================================
0001DB4A                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DE4A                            		even
0001DE4A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DF8A                            		even
0001DF8A                            ; ===========================================================================
0001DF8A                            ; ---------------------------------------------------------------------------
0001DF8A                            ; When debug mode is currently in use
0001DF8A                            ; ---------------------------------------------------------------------------
0001DF8A                            
0001DF8A                            DebugMode:				; XREF: Obj01; Obj09
0001DF8A 7000                       		moveq	#0,d0
0001DF8C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DF90 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DF94 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DF98                            ; ===========================================================================
0001DF98 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DF9A 0000                       		dc.w Debug_Skip-Debug_Index
0001DF9C                            ; ===========================================================================
0001DF9C                            
0001DF9C                            Debug_Main:				; XREF: Debug_Index
0001DF9C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DFA0 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DFA6 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DFAC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DFB2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DFB8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DFBE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DFC4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DFCA 117C 0000 001A             		move.b	#0,$1A(a0)
0001DFD0 117C 0000 001C             		move.b	#0,$1C(a0)
0001DFD6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DFDC 6600                       		bne.s	Debug_Zone	; if not, branch
0001DFDE 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DFE4 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DFEA 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DFEC 6000                       		bra.s	Debug_UseList
0001DFEE                            ; ===========================================================================
0001DFEE                            
0001DFEE                            Debug_Zone:
0001DFEE 7000                       		moveq	#0,d0
0001DFF0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DFF4                            
0001DFF4                            Debug_UseList:
0001DFF4 45F9 0000 0000             		lea	(DebugList).l,a2
0001DFFA D040                       		add.w	d0,d0
0001DFFC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E000 3C1A                       		move.w	(a2)+,d6
0001E002 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E006 6200                       		bhi.s	loc_1CF9E
0001E008 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001E00E                            
0001E00E                            loc_1CF9E:
0001E00E 6100 0000                  		bsr.w	Debug_ShowItem
0001E012 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E018 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001E01E                            
0001E01E                            Debug_Skip:				; XREF: Debug_Index
0001E01E 7006                       		moveq	#6,d0
0001E020 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001E026 6700                       		beq.s	loc_1CFBE
0001E028 7000                       		moveq	#0,d0
0001E02A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E02E                            
0001E02E                            loc_1CFBE:
0001E02E 45F9 0000 0000             		lea	(DebugList).l,a2
0001E034 D040                       		add.w	d0,d0
0001E036 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E03A 3C1A                       		move.w	(a2)+,d6
0001E03C 6100 0000                  		bsr.w	Debug_Control
0001E040 4EF9 0000 DD42             		jmp	DisplaySprite
0001E046                            
0001E046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E046                            
0001E046                            
0001E046                            Debug_Control:
0001E046 7800                       		moveq	#0,d4
0001E048 323C 0001                  		move.w	#1,d1
0001E04C 1838 F605                  		move.b	($FFFFF605).w,d4
0001E050 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001E054 6600                       		bne.s	loc_1D018	; if yes, branch
0001E056 1038 F604                  		move.b	($FFFFF604).w,d0
0001E05A 0240 000F                  		andi.w	#$F,d0
0001E05E 6600                       		bne.s	loc_1D000
0001E060 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E066 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001E06C 6000 0000                  		bra.w	Debug_BackItem
0001E070                            ; ===========================================================================
0001E070                            
0001E070                            loc_1D000:
0001E070 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001E074 6600                       		bne.s	loc_1D01C
0001E076 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001E07C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001E080 6600                       		bne.s	loc_1D018
0001E082 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001E088                            
0001E088                            loc_1D018:
0001E088 1838 F604                  		move.b	($FFFFF604).w,d4
0001E08C                            
0001E08C                            loc_1D01C:
0001E08C 7200                       		moveq	#0,d1
0001E08E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001E092 5241                       		addq.w	#1,d1
0001E094 4841                       		swap	d1
0001E096 E881                       		asr.l	#4,d1
0001E098 2428 000C                  		move.l	$C(a0),d2
0001E09C 2628 0008                  		move.l	8(a0),d3
0001E0A0 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001E0A4 6700                       		beq.s	loc_1D03C	; if not, branch
0001E0A6 9481                       		sub.l	d1,d2
0001E0A8 6400                       		bcc.s	loc_1D03C
0001E0AA 7400                       		moveq	#0,d2
0001E0AC                            
0001E0AC                            loc_1D03C:
0001E0AC 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001E0B0 6700                       		beq.s	loc_1D052	; if not, branch
0001E0B2 D481                       		add.l	d1,d2
0001E0B4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001E0BA 6500                       		bcs.s	loc_1D052
0001E0BC 243C 07FF 0000             		move.l	#$7FF0000,d2
0001E0C2                            
0001E0C2                            loc_1D052:
0001E0C2 0804 0002                  		btst	#2,d4
0001E0C6 6700                       		beq.s	loc_1D05E
0001E0C8 9681                       		sub.l	d1,d3
0001E0CA 6400                       		bcc.s	loc_1D05E
0001E0CC 7600                       		moveq	#0,d3
0001E0CE                            
0001E0CE                            loc_1D05E:
0001E0CE 0804 0003                  		btst	#3,d4
0001E0D2 6700                       		beq.s	loc_1D066
0001E0D4 D681                       		add.l	d1,d3
0001E0D6                            
0001E0D6                            loc_1D066:
0001E0D6 2142 000C                  		move.l	d2,$C(a0)
0001E0DA 2143 0008                  		move.l	d3,8(a0)
0001E0DE                            
0001E0DE                            Debug_BackItem:
0001E0DE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001E0E4 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E0E6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E0EC 6700                       		beq.s	Debug_NextItem	; if not, branch
0001E0EE 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001E0F2 6400                       		bcc.s	Debug_NoLoop
0001E0F4 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001E0F8 6000                       		bra.s	Debug_NoLoop
0001E0FA                            ; ===========================================================================
0001E0FA                            
0001E0FA                            Debug_NextItem:
0001E0FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001E100 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E102 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001E106 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E10A 6200                       		bhi.s	Debug_NoLoop
0001E10C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001E112                            
0001E112                            Debug_NoLoop:
0001E112 6000 0000                  		bra.w	Debug_ShowItem
0001E116                            ; ===========================================================================
0001E116                            
0001E116                            Debug_MakeItem:
0001E116 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E11C 6700                       		beq.s	Debug_Exit	; if not, branch
0001E11E 4EB9 0000 E1EE             		jsr	SingleObjLoad
0001E124 6600                       		bne.s	Debug_Exit
0001E126 3368 0008 0008             		move.w	8(a0),8(a1)
0001E12C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E132 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001E136 1368 0001 0001             		move.b	1(a0),1(a1)
0001E13C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001E142 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001E148 7000                       		moveq	#0,d0
0001E14A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E14E E748                       		lsl.w	#3,d0
0001E150 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001E156 4E75                       		rts	
0001E158                            ; ===========================================================================
0001E158                            
0001E158                            Debug_Exit:
0001E158 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001E15E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001E160 7000                       		moveq	#0,d0
0001E162 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001E166 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E16E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E174 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001E178 3140 000A                  		move.w	d0,$A(a0)
0001E17C 3140 000E                  		move.w	d0,$E(a0)
0001E180 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001E186 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001E18C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001E192 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001E194 4278 F780                  		clr.w	($FFFFF780).w
0001E198 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001E19E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E1A6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E1AC 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001E1B2 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001E1B8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E1BE                            
0001E1BE                            Debug_DoNothing:
0001E1BE 4E75                       		rts	
0001E1C0                            ; End of function Debug_Control
0001E1C0                            
0001E1C0                            
0001E1C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1C0                            
0001E1C0                            
0001E1C0                            Debug_ShowItem:				; XREF: Debug_Main
0001E1C0 7000                       		moveq	#0,d0
0001E1C2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E1C6 E748                       		lsl.w	#3,d0
0001E1C8 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001E1CE 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001E1D4 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001E1DA 4E75                       		rts	
0001E1DC                            ; End of function Debug_ShowItem
0001E1DC                            
0001E1DC                            ; ===========================================================================
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC                            ; Debug	list pointers
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC                            DebugList:
0001E1DC                            	include "_inc\Debug list pointers.asm"
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC                            ; Debug	list pointers
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC 0000                       	dc.w Debug_GHZ-DebugList
0001E1DE 0000                       	dc.w Debug_LZ-DebugList
0001E1E0 0000                       	dc.w Debug_MZ-DebugList
0001E1E2 0000                       	dc.w Debug_SLZ-DebugList
0001E1E4 0000                       	dc.w Debug_SYZ-DebugList
0001E1E6 0000                       	dc.w Debug_SBZ-DebugList
0001E1E8 0000                       	dc.w Debug_Ending-DebugList
0001E1EA 0000                       	dc.w Debug_GHZ-DebugList
0001E1EC 0000                       	dc.w Debug_GHZ-DebugList
0001E1EC 0000                       	dc.w Debug_GHZ-DebugList
0001E1EE                            
0001E1EE                            ; ---------------------------------------------------------------------------
0001E1EE                            ; Debug	list - Green Hill
0001E1EE                            ; ---------------------------------------------------------------------------
0001E1EE                            Debug_GHZ:
0001E1EE                            	include "_inc\Debug list - GHZ.asm"
0001E1EE                            ; ---------------------------------------------------------------------------
0001E1EE                            ; Debug	list - Green Hill
0001E1EE                            ; ---------------------------------------------------------------------------
0001E1EE 0010                       	dc.w $10			; number of items in list
0001E1F0 2500 A786                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E1F4 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E1F8 2600 ADEA                  	dc.l Map_obj26+$26000000
0001E1FC 0000 0680                  	dc.b 0,	0, 6, $80
0001E200 1F00 9F4A                  	dc.l Map_obj1F+$1F000000
0001E204 0000 0400                  	dc.b 0,	0, 4, 0
0001E208 2200 A22A                  	dc.l Map_obj22+$22000000
0001E20C 0000 0444                  	dc.b 0,	0, 4, $44
0001E210 2B00 B480                  	dc.l Map_obj2B+$2B000000
0001E214 0000 047B                  	dc.b 0,	0, 4, $7B
0001E218 3600 D742                  	dc.l Map_obj36+$36000000
0001E21C 0000 051B                  	dc.b 0,	0, 5, $1B
0001E220 1800 88EE                  	dc.l Map_obj18+$18000000
0001E224 0000 4000                  	dc.b 0,	0, $40,	0
0001E228 3B00 D868                  	dc.l Map_obj3B+$3B000000
0001E22C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E230 4000 FF08                  	dc.l Map_obj40+$40000000
0001E234 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E238 4100 E47C                  	dc.l Map_obj41+$41000000
0001E23C 0000 0523                  	dc.b 0,	0, 5, $23
0001E240 4200 E6A2                  	dc.l Map_obj42+$42000000
0001E244 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E248 4400 E9B0                  	dc.l Map_obj44+$44000000
0001E24C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E250 1900 8A20                  	dc.l Map_obj48+$19000000
0001E254 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E258 7901 7D42                  	dc.l Map_obj79+$79000000
0001E25C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E260 4B00 A7E8                  	dc.l Map_obj4B+$4B000000
0001E264 0000 2400                  	dc.b 0,	0, $24,	0
0001E268 7D01 7E92                  	dc.l Map_obj7D+$7D000000
0001E26C 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E270                            	even
0001E270                            	even
0001E270                            
0001E270                            ; ---------------------------------------------------------------------------
0001E270                            ; Debug	list - Labyrinth
0001E270                            ; ---------------------------------------------------------------------------
0001E270                            Debug_LZ:
0001E270                            	include "_inc\Debug list - LZ.asm"
0001E270                            ; ---------------------------------------------------------------------------
0001E270                            ; Debug	list - Labyrinth
0001E270                            ; ---------------------------------------------------------------------------
0001E270 0019                       	dc.w $19
0001E272 2500 A786                  	dc.l Map_obj25+$25000000
0001E276 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E27A 2600 ADEA                  	dc.l Map_obj26+$26000000
0001E27E 0000 0680                  	dc.b 0,	0, 6, $80
0001E282 4100 E47C                  	dc.l Map_obj41+$41000000
0001E286 0000 0523                  	dc.b 0,	0, 5, $23
0001E28A 2C00 B526                  	dc.l Map_obj2C+$2C000000
0001E28E 0800 2486                  	dc.b 8,	0, $24,	$86
0001E292 2D00 B712                  	dc.l Map_obj2D+$2D000000
0001E296 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E29A 1601 28F4                  	dc.l Map_obj16+$16000000
0001E29E 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E2A2 1601 28F4                  	dc.l Map_obj16+$16000000
0001E2A6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E2AA 3300 CB90                  	dc.l Map_obj33+$33000000
0001E2AE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E2B2 3200 C750                  	dc.l Map_obj32+$32000000
0001E2B6 0000 0513                  	dc.b 0,	0, 5, $13
0001E2BA 3600 D742                  	dc.l Map_obj36+$36000000
0001E2BE 0000 051B                  	dc.b 0,	0, 5, $1B
0001E2C2 5201 09C6                  	dc.l Map_obj52a+$52000000
0001E2C6 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E2CA 6101 2B1C                  	dc.l Map_obj61+$61000000
0001E2CE 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E2D2 6101 2B1C                  	dc.l Map_obj61+$61000000
0001E2D6 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E2DA 6101 2B1C                  	dc.l Map_obj61+$61000000
0001E2DE 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E2E2 6201 2C70                  	dc.l Map_obj62+$62000000
0001E2E6 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E2EA 6101 2B1C                  	dc.l Map_obj61+$61000000
0001E2EE 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E2F2 6101 2B1C                  	dc.l Map_obj61+$61000000
0001E2F6 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E2FA 6301 2FD4                  	dc.l Map_obj63+$63000000
0001E2FE 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E302 6001 283E                  	dc.l Map_obj60+$60000000
0001E306 0000 0467                  	dc.b 0,	0, 4, $67
0001E30A 6401 331A                  	dc.l Map_obj64+$64000000
0001E30E 8413 8348                  	dc.b $84, $13, $83, $48
0001E312 6501 34A2                  	dc.l Map_obj65+$65000000
0001E316 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E31A 6501 34A2                  	dc.l Map_obj65+$65000000
0001E31E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E322 0B01 1C8E                  	dc.l Map_obj0B+$B000000
0001E326 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E32A 0C01 1D5E                  	dc.l Map_obj0C+$C000000
0001E32E 0200 4328                  	dc.b 2,	0, $43,	$28
0001E332 7901 7D42                  	dc.l Map_obj79+$79000000
0001E336 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E33A                            	even
0001E33A                            	even
0001E33A                            
0001E33A                            ; ---------------------------------------------------------------------------
0001E33A                            ; Debug	list - Marble
0001E33A                            ; ---------------------------------------------------------------------------
0001E33A                            Debug_MZ:
0001E33A                            	include "_inc\Debug list - MZ.asm"
0001E33A                            ; ---------------------------------------------------------------------------
0001E33A                            ; Debug	list - Marble
0001E33A                            ; ---------------------------------------------------------------------------
0001E33A 0012                       	dc.w $12
0001E33C 2500 A786                  	dc.l Map_obj25+$25000000
0001E340 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E344 2600 ADEA                  	dc.l Map_obj26+$26000000
0001E348 0000 0680                  	dc.b 0,	0, 6, $80
0001E34C 2200 A22A                  	dc.l Map_obj22+$22000000
0001E350 0000 0444                  	dc.b 0,	0, 4, $44
0001E354 3600 D742                  	dc.l Map_obj36+$36000000
0001E358 0000 051B                  	dc.b 0,	0, 5, $1B
0001E35C 4100 E47C                  	dc.l Map_obj41+$41000000
0001E360 0000 0523                  	dc.b 0,	0, 5, $23
0001E364 1300 BC20                  	dc.l Map_obj14+$13000000
0001E368 0000 0345                  	dc.b 0,	0, 3, $45
0001E36C 4600 F062                  	dc.l Map_obj46+$46000000
0001E370 0000 4000                  	dc.b 0,	0, $40,	0
0001E374 4C00 F9B4                  	dc.l Map_obj4C+$4C000000
0001E378 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E37C 4E00 FC98                  	dc.l Map_obj4E+$4E000000
0001E380 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E384 3300 CB90                  	dc.l Map_obj33+$33000000
0001E388 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E38C 5001 00CC                  	dc.l Map_obj50+$50000000
0001E390 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E394 5101 06FA                  	dc.l Map_obj51+$51000000
0001E398 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E39C 5201 0970                  	dc.l Map_obj52+$52000000
0001E3A0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E3A4 5300 8F86                  	dc.l Map_obj53+$53000000
0001E3A8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E3AC 5400 F97A                  	dc.l Map_obj54+$54000000
0001E3B0 0000 8680                  	dc.b 0,	0, $86,	$80
0001E3B4 5501 0B64                  	dc.l Map_obj55+$55000000
0001E3B8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E3BC 7801 79BC                  	dc.l Map_obj78+$78000000
0001E3C0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E3C4 7901 7D42                  	dc.l Map_obj79+$79000000
0001E3C8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E3CC                            	even
0001E3CC                            	even
0001E3CC                            
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC                            ; Debug	list - Star Light
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC                            Debug_SLZ:
0001E3CC                            	include "_inc\Debug list - SLZ.asm"
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC                            ; Debug	list - Star Light
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC 000F                       	dc.w $F
0001E3CE 2500 A786                  	dc.l Map_obj25+$25000000
0001E3D2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E3D6 2600 ADEA                  	dc.l Map_obj26+$26000000
0001E3DA 0000 0680                  	dc.b 0,	0, 6, $80
0001E3DE 5901 1666                  	dc.l Map_obj59+$59000000
0001E3E2 0000 4000                  	dc.b 0,	0, $40,	0
0001E3E6 5300 8F86                  	dc.l Map_obj53+$53000000
0001E3EA 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E3EE 1800 8988                  	dc.l Map_obj18b+$18000000
0001E3F2 0000 4000                  	dc.b 0,	0, $40,	0
0001E3F6 5A01 17F0                  	dc.l Map_obj5A+$5A000000
0001E3FA 0000 4000                  	dc.b 0,	0, $40,	0
0001E3FE 5B01 19A8                  	dc.l Map_obj5B+$5B000000
0001E402 0000 4000                  	dc.b 0,	0, $40,	0
0001E406 5D01 1F78                  	dc.l Map_obj5D+$5D000000
0001E40A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E40E 5E01 230A                  	dc.l Map_obj5E+$5E000000
0001E412 0000 0374                  	dc.b 0,	0, 3, $74
0001E416 4100 E47C                  	dc.l Map_obj41+$41000000
0001E41A 0000 0523                  	dc.b 0,	0, 5, $23
0001E41E 1300 BC20                  	dc.l Map_obj14+$13000000
0001E422 0000 0480                  	dc.b 0,	0, 4, $80
0001E426 1C00 9096                  	dc.l Map_obj1C+$1C000000
0001E42A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E42E 5F01 2588                  	dc.l Map_obj5F+$5F000000
0001E432 0000 0400                  	dc.b 0,	0, 4, 0
0001E436 6001 283E                  	dc.l Map_obj60+$60000000
0001E43A 0000 2429                  	dc.b 0,	0, $24,	$29
0001E43E 7901 7D42                  	dc.l Map_obj79+$79000000
0001E442 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E446                            	even
0001E446                            	even
0001E446                            
0001E446                            ; ---------------------------------------------------------------------------
0001E446                            ; Debug	list - Spring Yard
0001E446                            ; ---------------------------------------------------------------------------
0001E446                            Debug_SYZ:
0001E446                            	include "_inc\Debug list - SYZ.asm"
0001E446                            ; ---------------------------------------------------------------------------
0001E446                            ; Debug	list - Spring Yard
0001E446                            ; ---------------------------------------------------------------------------
0001E446 000F                       	dc.w $F
0001E448 2500 A786                  	dc.l Map_obj25+$25000000
0001E44C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E450 2600 ADEA                  	dc.l Map_obj26+$26000000
0001E454 0000 0680                  	dc.b 0,	0, 6, $80
0001E458 3600 D742                  	dc.l Map_obj36+$36000000
0001E45C 0000 051B                  	dc.b 0,	0, 5, $1B
0001E460 4100 E47C                  	dc.l Map_obj41+$41000000
0001E464 0000 0523                  	dc.b 0,	0, 5, $23
0001E468 4300 E902                  	dc.l Map_obj43+$43000000
0001E46C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E470 1200 F0E0                  	dc.l Map_obj12+$12000000
0001E474 0000 0000                  	dc.b 0,	0, 0, 0
0001E478 4700 F26E                  	dc.l Map_obj47+$47000000
0001E47C 0000 0380                  	dc.b 0,	0, 3, $80
0001E480 1F00 9F4A                  	dc.l Map_obj1F+$1F000000
0001E484 0000 0400                  	dc.b 0,	0, 4, 0
0001E488 2200 A22A                  	dc.l Map_obj22+$22000000
0001E48C 0000 0444                  	dc.b 0,	0, 4, $44
0001E490 5001 00CC                  	dc.l Map_obj50+$50000000
0001E494 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E498 1800 8976                  	dc.l Map_obj18a+$18000000
0001E49C 0000 4000                  	dc.b 0,	0, $40,	0
0001E4A0 5601 1026                  	dc.l Map_obj56+$56000000
0001E4A4 0000 4000                  	dc.b 0,	0, $40,	0
0001E4A8 3200 C750                  	dc.l Map_obj32+$32000000
0001E4AC 0000 0513                  	dc.b 0,	0, 5, $13
0001E4B0 7801 79BC                  	dc.l Map_obj78+$78000000
0001E4B4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E4B8 7901 7D42                  	dc.l Map_obj79+$79000000
0001E4BC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E4C0                            	even
0001E4C0                            	even
0001E4C0                            
0001E4C0                            ; ---------------------------------------------------------------------------
0001E4C0                            ; Debug	list - Scrap Brain
0001E4C0                            ; ---------------------------------------------------------------------------
0001E4C0                            Debug_SBZ:
0001E4C0                            	include "_inc\Debug list - SBZ.asm"
0001E4C0                            ; ---------------------------------------------------------------------------
0001E4C0                            ; Debug	list - Scrap Brain
0001E4C0                            ; ---------------------------------------------------------------------------
0001E4C0 001D                       	dc.w $1D
0001E4C2 2500 A786                  	dc.l Map_obj25+$25000000
0001E4C6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E4CA 2600 ADEA                  	dc.l Map_obj26+$26000000
0001E4CE 0000 0680                  	dc.b 0,	0, 6, $80
0001E4D2 5F01 2588                  	dc.l Map_obj5F+$5F000000
0001E4D6 0000 0400                  	dc.b 0,	0, 4, 0
0001E4DA 6001 283E                  	dc.l Map_obj60+$60000000
0001E4DE 0000 0429                  	dc.b 0,	0, 4, $29
0001E4E2 7801 79BC                  	dc.l Map_obj78+$78000000
0001E4E6 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E4EA 1501 13C2                  	dc.l Map_obj15b+$15000000
0001E4EE 0702 4391                  	dc.b 7,	2, $43,	$91
0001E4F2 6701 62F4                  	dc.l Map_obj67+$67000000
0001E4F6 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E4FA 5201 0970                  	dc.l Map_obj52+$52000000
0001E4FE 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E502 3200 C750                  	dc.l Map_obj32+$32000000
0001E506 0000 0513                  	dc.b 0,	0, 5, $13
0001E50A 6901 6548                  	dc.l Map_obj69+$69000000
0001E50E 0300 4492                  	dc.b 3,	0, $44,	$92
0001E512 6901 65A2                  	dc.l Map_obj69a+$69000000
0001E516 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E51A 6A01 6800                  	dc.l Map_obj6A+$6A000000
0001E51E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E522 5300 8F86                  	dc.l Map_obj53+$53000000
0001E526 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E52A 5201 0970                  	dc.l Map_obj52+$52000000
0001E52E 3903 4460                  	dc.b $39, 3, $44, $60
0001E532 6B01 6BD0                  	dc.l Map_obj6B+$6B000000
0001E536 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E53A 2A00 922C                  	dc.l Map_obj2A+$2A000000
0001E53E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E542 6B01 6BD0                  	dc.l Map_obj6B+$6B000000
0001E546 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E54A 6A01 6800                  	dc.l Map_obj6A+$6A000000
0001E54E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E552 6B01 6BD0                  	dc.l Map_obj6B+$6B000000
0001E556 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E55A 6A01 6800                  	dc.l Map_obj6A+$6A000000
0001E55E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E562 6B01 6BD0                  	dc.l Map_obj6B+$6B000000
0001E566 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E56A 6C01 6D92                  	dc.l Map_obj6C+$6C000000
0001E56E 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E572 6D00 ED52                  	dc.l Map_obj6D+$6D000000
0001E576 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E57A 6D00 ED52                  	dc.l Map_obj6D+$6D000000
0001E57E 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E582 6E01 6E48                  	dc.l Map_obj6E+$6E000000
0001E586 0400 047E                  	dc.b 4,	0, 4, $7E
0001E58A 7001 7294                  	dc.l Map_obj70+$70000000
0001E58E 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E592 7101 1E1E                  	dc.l Map_obj71+$71000000
0001E596 1100 8680                  	dc.b $11, 0, $86, $80
0001E59A 1E00 9696                  	dc.l Map_obj1E+$1E000000
0001E59E 0400 2302                  	dc.b 4,	0, $23,	2
0001E5A2 7901 7D42                  	dc.l Map_obj79+$79000000
0001E5A6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E5AA                            	even
0001E5AA                            	even
0001E5AA                            
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA                            ; Debug	list - ending sequence / special stage
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA                            Debug_Ending:
0001E5AA                            	include "_inc\Debug list - Ending and SS.asm"
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA                            ; Debug	list - ending sequence / special stage
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA 000D                       	dc.w $D
0001E5AC 2500 A786                  	dc.l Map_obj25+$25000000
0001E5B0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E5B4 4700 F26E                  	dc.l Map_obj47+$47000000
0001E5B8 0000 0380                  	dc.b 0,	0, 3, $80
0001E5BC 2800 9CB0                  	dc.l Map_obj28a+$28000000
0001E5C0 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E5C4 2800 9CB0                  	dc.l Map_obj28a+$28000000
0001E5C8 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E5CC 2800 9CB0                  	dc.l Map_obj28a+$28000000
0001E5D0 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E5D4 2800 9C98                  	dc.l Map_obj28+$28000000
0001E5D8 0D00 0553                  	dc.b $D, 0, 5, $53
0001E5DC 2800 9C98                  	dc.l Map_obj28+$28000000
0001E5E0 0E00 0553                  	dc.b $E, 0, 5, $53
0001E5E4 2800 9C98                  	dc.l Map_obj28+$28000000
0001E5E8 0F00 0573                  	dc.b $F, 0, 5, $73
0001E5EC 2800 9C98                  	dc.l Map_obj28+$28000000
0001E5F0 1000 0573                  	dc.b $10, 0, 5,	$73
0001E5F4 2800 9CB0                  	dc.l Map_obj28a+$28000000
0001E5F8 1100 0585                  	dc.b $11, 0, 5,	$85
0001E5FC 2800 9CC8                  	dc.l Map_obj28b+$28000000
0001E600 1200 0593                  	dc.b $12, 0, 5,	$93
0001E604 2800 9CB0                  	dc.l Map_obj28a+$28000000
0001E608 1300 0565                  	dc.b $13, 0, 5,	$65
0001E60C 2800 9CC8                  	dc.l Map_obj28b+$28000000
0001E610 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E614                            	even
0001E614                            	even
0001E614                            
0001E614                            ; ---------------------------------------------------------------------------
0001E614                            ; Main level load blocks
0001E614                            ; ---------------------------------------------------------------------------
0001E614                            MainLoadBlocks:
0001E614                            	include "_inc\Main level load blocks.asm"
0001E614                            ; ---------------------------------------------------------------------------
0001E614                            ; Main level load blocks
0001E614                            ;
0001E614                            ; ===FORMAT===
0001E614                            ; level	patterns + (1st	PLC num	* 10^6)
0001E614                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E614                            ; 256x256 mappings
0001E614                            ; blank, music (unused), pal index (unused), pal index
0001E614                            ; ---------------------------------------------------------------------------
0001E614 0000 0000                  	dc.l Nem_GHZ+$4000000
0001E618 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001E61C 0000 0000                  	dc.l Blk256_GHZ
0001E620 0081 0404                  	dc.b 0,	$81, 4,	4
0001E624 0000 0000                  	dc.l Nem_LZ+$6000000
0001E628 0000 0000                  	dc.l Blk16_LZ+$7000000
0001E62C 0000 0000                  	dc.l Blk256_LZ
0001E630 0082 0505                  	dc.b 0,	$82, 5,	5
0001E634 0000 0000                  	dc.l Nem_MZ+$8000000
0001E638 0000 0000                  	dc.l Blk16_MZ+$9000000
0001E63C 0000 0000                  	dc.l Blk256_MZ
0001E640 0083 0606                  	dc.b 0,	$83, 6,	6
0001E644 0000 0000                  	dc.l Nem_SLZ+$A000000
0001E648 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001E64C 0000 0000                  	dc.l Blk256_SLZ
0001E650 0084 0707                  	dc.b 0,	$84, 7,	7
0001E654 0000 0000                  	dc.l Nem_SYZ+$C000000
0001E658 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001E65C 0000 0000                  	dc.l Blk256_SYZ
0001E660 0085 0808                  	dc.b 0,	$85, 8,	8
0001E664 0000 0000                  	dc.l Nem_SBZ+$E000000
0001E668 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001E66C 0000 0000                  	dc.l Blk256_SBZ
0001E670 0086 0909                  	dc.b 0,	$86, 9,	9
0001E674 0000 0000                  	dc.l Nem_GHZ	; main load block for ending
0001E678 0000 0000                  	dc.l Blk16_GHZ
0001E67C 0000 0000                  	dc.l Blk256_GHZ
0001E680 0086 1313                  	dc.b 0,	$86, $13, $13
0001E684 0000 0000                  	dc.l Nem_EPZ+$20000000
0001E688 0000 0000                  	dc.l Blk16_EPZ+$21000000
0001E68C 0000 0000                  	dc.l Blk256_EPZ
0001E690 008C 1414                  	dc.b 0,	$8C, $14, $14
0001E694 0000 0000                  	dc.l Nem_INZ+$22000000
0001E698 0000 0000                  	dc.l Blk16_INZ+$23000000
0001E69C 0000 0000                  	dc.l Blk256_INZ
0001E6A0 008D 1515                  	dc.b 0,	$8D, $15, $15
0001E6A4                            	even
0001E6A4                            	even
0001E6A4                            
0001E6A4                            ; ---------------------------------------------------------------------------
0001E6A4                            ; Pattern load cues
0001E6A4                            ; ---------------------------------------------------------------------------
0001E6A4                            ArtLoadCues:
0001E6A4                            	include "_inc\Pattern load cues.asm"
0001E6A4                            ; ---------------------------------------------------------------------------
0001E6A4                            ; Pattern load cues - index
0001E6A4                            ; ---------------------------------------------------------------------------
0001E6A4 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001E6A8 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001E6AC 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001E6B0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E6B4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E6B8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E6BC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E6C0 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E6C4 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001E6C8 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E6CC 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E6D0 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E6D4 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E6D8 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E6DC 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E6E0 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E6E4 0000 0000 0000             	dc.w PLC_EPZ-ArtLoadCues, PLC_EPZ2-ArtLoadCues, PLC_EPZAnimals-ArtLoadCues
0001E6EA 0000 0000 0000             	dc.w PLC_INZ-ArtLoadCues, PLC_INZ2-ArtLoadCues, PLC_INZAnimals-ArtLoadCues
0001E6F0                            ; ---------------------------------------------------------------------------
0001E6F0                            ; Pattern load cues - standard block 1
0001E6F0                            ; ---------------------------------------------------------------------------
0001E6F0 0003                       PLC_Main:	dc.w 3
0001E6F2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E6F6 F400                       		dc.w $F400
0001E6F8 0000 0000                  		dc.l Nem_Lives		; lives	counter (MAYBE UNUSED I FORGOT)
0001E6FC FA80                       		dc.w $FA80
0001E6FE 0000 0000                  		dc.l Nem_Ring		; rings
0001E702 D940                       		dc.w $D940
0001E704 0000 0000                  		dc.l Nem_Points		; points from enemy (UNUSED)
0001E708 D800                       		dc.w $D800			
0001E70A                            ; ---------------------------------------------------------------------------
0001E70A                            ; Pattern load cues - standard block 2
0001E70A                            ; ---------------------------------------------------------------------------
0001E70A 0000                       PLC_Main2:	dc.w 0
0001E70C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E710 D000                       		dc.w $D000
0001E712                            ; ---------------------------------------------------------------------------
0001E712                            ; Pattern load cues - explosion
0001E712                            ; ---------------------------------------------------------------------------
0001E712 0000                       PLC_Explode:	dc.w 0
0001E714 0000 0000                  		dc.l Nem_Explode	; explosion
0001E718 B400                       		dc.w $B400
0001E71A                            ; ---------------------------------------------------------------------------
0001E71A                            ; Pattern load cues - game/time	over
0001E71A                            ; ---------------------------------------------------------------------------
0001E71A 0000                       PLC_GameOver:	dc.w 0
0001E71C 0000 0000                  		dc.l Nem_GameOver	; game/time over (UNUSED)
0001E720 ABC0                       		dc.w $ABC0
0001E722                            ; ---------------------------------------------------------------------------
0001E722                            ; Pattern load cues - Green Hill (Bright Sky Zone)
0001E722                            ; ---------------------------------------------------------------------------
0001E722 000A                       PLC_GHZ:	dc.w $A
0001E724 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001E728 0000                       		dc.w 0
0001E72A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E72E 0000                       		dc.w 0
0001E730 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E734 0000                       		dc.w 0
0001E736 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy (UNUSED)
0001E73A 8000                       		dc.w $8000
0001E73C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E740 8880                       		dc.w $8880
0001E742 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E746 8F60                       		dc.w $8F60
0001E748 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E74C 9360                       		dc.w $9360
0001E74E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E752 9E00                       		dc.w $9E00
0001E754 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E758 A360                       		dc.w $A360
0001E75A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E75E A460                       		dc.w $A460
0001E760 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E764 A660                       		dc.w $A660
0001E766 0005                       PLC_GHZ2:	dc.w 5
0001E768 0000 0000                  		dc.l Nem_Swing		; swinging platform (UNUSED)
0001E76C 7000                       		dc.w $7000
0001E76E 0000 0000                  		dc.l Nem_Bridge		; bridge (UNUSED)
0001E772 71C0                       		dc.w $71C0
0001E774 0000 0000                  		dc.l Nem_SpikePole	; spiked pole (UNUSED)
0001E778 7300                       		dc.w $7300
0001E77A 0000 0000                  		dc.l Nem_Ball		; giant	ball (UNUSED)
0001E77E 7540                       		dc.w $7540
0001E780 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall (UNUSED)
0001E784 A1E0                       		dc.w $A1E0
0001E786 0000 0000                  		dc.l Nem_GhzWall2	; normal wall (UNUSED)
0001E78A 6980                       		dc.w $6980
0001E78C                            ; ---------------------------------------------------------------------------
0001E78C                            ; Pattern load cues - Labyrinth (UNUSED)
0001E78C                            ; ---------------------------------------------------------------------------
0001E78C 0000                       PLC_LZ:		dc.w $0
0001E78E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E792 0000                       		dc.w 0
0001E794                            ;		dc.l Nem_LzBlock1	; block
0001E794                            ;		dc.w $3C00
0001E794                            ;		dc.l Nem_LzBlock2	; blocks
0001E794                            ;		dc.w $3E00
0001E794                            ;		dc.l Nem_Splash		; waterfalls and splash
0001E794                            ;		dc.w $4B20
0001E794                            ;		dc.l Nem_Water		; water	surface
0001E794                            ;		dc.w $6000
0001E794                            ;		dc.l Nem_LzSpikeBall	; spiked ball
0001E794                            ;		dc.w $6200
0001E794                            ;		dc.l Nem_FlapDoor	; flapping door
0001E794                            ;		dc.w $6500
0001E794                            ;		dc.l Nem_Bubbles	; bubbles and numbers
0001E794                            ;		dc.w $6900
0001E794                            ;		dc.l Nem_LzBlock3	; block
0001E794                            ;		dc.w $7780
0001E794                            ;		dc.l Nem_LzDoor1	; vertical door
0001E794                            ;		dc.w $7880
0001E794                            ;		dc.l Nem_Harpoon	; harpoon
0001E794                            ;		dc.w $7980
0001E794                            ;		dc.l Nem_Burrobot	; burrobot enemy
0001E794                            ;		dc.w $94C0
0001E794 0002                       PLC_LZ2:	dc.w $2
0001E796                            ;		dc.l Nem_LzPole		; pole that breaks
0001E796                            ;		dc.w $7BC0
0001E796                            ;		dc.l Nem_LzDoor2	; large	horizontal door
0001E796                            ;		dc.w $7CC0
0001E796                            ;		dc.l Nem_LzWheel	; wheel
0001E796                            ;		dc.w $7EC0
0001E796                            ;		dc.l Nem_Gargoyle	; gargoyle head
0001E796                            ;		dc.w $5D20
0001E796                            ;		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E796                            ;		dc.w $8800
0001E796                            ;		dc.l Nem_LzPlatfm	; rising platform
0001E796                            ;		dc.w $89E0
0001E796                            ;		dc.l Nem_Orbinaut	; orbinaut enemy
0001E796                            ;		dc.w $8CE0
0001E796                            ;		dc.l Nem_Jaws		; jaws enemy
0001E796                            ;		dc.w $90C0
0001E796                            ;		dc.l Nem_LzSwitch	; switch
0001E796                            ;		dc.w $A1E0
0001E796                            ;		dc.l Nem_Cork		; cork block
0001E796                            ;		dc.w $A000
0001E796 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E79A A360                       		dc.w $A360
0001E79C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E7A0 A460                       		dc.w $A460
0001E7A2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E7A6 A660                       		dc.w $A660
0001E7A8                            ; ---------------------------------------------------------------------------
0001E7A8                            ; Pattern load cues - Marble (Cold Gates Zone)
0001E7A8                            ; ---------------------------------------------------------------------------
0001E7A8 0009                       PLC_MZ:		dc.w 9
0001E7AA 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E7AE 0000                       		dc.w 0
0001E7B0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E7B4 6000                       		dc.w $6000
0001E7B6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E7BA 68A0                       		dc.w $68A0
0001E7BC 0000 0000                  		dc.l Nem_Swing		; swinging platform (UNSUED?)
0001E7C0 7000                       		dc.w $7000
0001E7C2 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block (UNUSED)
0001E7C6 71C0                       		dc.w $71C0
0001E7C8 0000 0000                  		dc.l Nem_Ball		; giant	ball (UNUSED)
0001E7CC 7540                       		dc.w $7540
0001E7CE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E7D2 8520                       		dc.w $8520
0001E7D4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E7D8 8F60                       		dc.w $8F60
0001E7DA 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E7DE 9700                       		dc.w $9700
0001E7E0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E7E4 9FE0                       		dc.w $9FE0
0001E7E6 0004                       PLC_MZ2:	dc.w 4
0001E7E8 0000 0000                  		dc.l Nem_MzSwitch	; switch (UNUSED)
0001E7EC A260                       		dc.w $A260
0001E7EE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E7F2 A360                       		dc.w $A360
0001E7F4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E7F8 A460                       		dc.w $A460
0001E7FA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E7FE A660                       		dc.w $A660
0001E800 0000 0000                  		dc.l Nem_MzBlock	; green	stone block (UNUSED)
0001E804 5700                       		dc.w $5700
0001E806                            ; ---------------------------------------------------------------------------
0001E806                            ; Pattern load cues - Star Light (Unused)
0001E806                            ; ---------------------------------------------------------------------------
0001E806 0000                       PLC_SLZ:	dc.w 0
0001E808 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E80C 0000                       		dc.w 0
0001E80E                            ;		dc.l Nem_Bomb		; bomb enemy
0001E80E                            ;		dc.w $8000
0001E80E                            ;		dc.l Nem_Orbinaut	; orbinaut enemy
0001E80E                            ;		dc.w $8520
0001E80E                            ;		dc.l Nem_MzFire		; fireballs
0001E80E                            ;		dc.w $9000
0001E80E                            ;		dc.l Nem_SlzBlock	; block
0001E80E                            ;		dc.w $9C00
0001E80E                            ;		dc.l Nem_SlzWall	; breakable wall
0001E80E                            ;		dc.w $A260
0001E80E                            ;		dc.l Nem_Spikes		; spikes
0001E80E                            ;		dc.w $A360
0001E80E                            ;		dc.l Nem_HSpring	; horizontal spring
0001E80E                            ;		dc.w $A460
0001E80E                            ;		dc.l Nem_VSpring	; vertical spring
0001E80E                            ;		dc.w $A660
0001E80E 0000                       PLC_SLZ2:	dc.w 0
0001E810 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E814 F2E0                       		dc.w $F2E0
0001E816                            ;		dc.l Nem_Seesaw		; seesaw
0001E816                            ;		dc.w $6E80
0001E816                            ;		dc.l Nem_Fan		; fan
0001E816                            ;		dc.w $7400
0001E816                            ;		dc.l Nem_Pylon		; foreground pylon
0001E816                            ;		dc.w $7980
0001E816                            ;		dc.l Nem_SlzSwing	; swinging platform
0001E816                            ;		dc.w $7B80
0001E816                            ;		dc.l Nem_SlzCannon	; fireball launcher
0001E816                            ;		dc.w $9B00
0001E816                            ;		dc.l Nem_SlzSpike	; spikeball
0001E816                            ;		dc.w $9E00
0001E816                            ; ---------------------------------------------------------------------------
0001E816                            ; Pattern load cues - Spring Yard (Pepsi City Zone)
0001E816                            ; ---------------------------------------------------------------------------
0001E816 0003                       PLC_SYZ:	dc.w 3
0001E818 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E81C 0000                       		dc.w 0
0001E81E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (obj5F)
0001E822 8000                       		dc.w $8000
0001E824 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy (obj60)
0001E828 8520                       		dc.w $8520
0001E82A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E82E 8F60                       		dc.w $8F60
0001E830 0007                       PLC_SYZ2:	dc.w 7
0001E832 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E836 7000                       		dc.w $7000
0001E838 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E83C 72C0                       		dc.w $72C0
0001E83E 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E842 7740                       		dc.w $7740
0001E844 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E848 9FE0                       		dc.w $9FE0
0001E84A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E84E A1E0                       		dc.w $A1E0
0001E850 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E854 A360                       		dc.w $A360
0001E856 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E85A A460                       		dc.w $A460
0001E85C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E860 A660                       		dc.w $A660
0001E862                            ; ---------------------------------------------------------------------------
0001E862                            ; Pattern load cues - Scrap Brain (Unused)
0001E862                            ; ---------------------------------------------------------------------------
0001E862 0000                       PLC_SBZ:	dc.w $0
0001E864 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E868 0000                       		dc.w 0
0001E86A                            ;		dc.l Nem_Stomper	; moving platform and stomper
0001E86A                            ;		dc.w $5800
0001E86A                            ;		dc.l Nem_SbzDoor1	; door
0001E86A                            ;		dc.w $5D00
0001E86A                            ;		dc.l Nem_Girder		; girder
0001E86A                            ;		dc.w $5E00
0001E86A                            ;		dc.l Nem_BallHog	; ball hog enemy
0001E86A                            ;		dc.w $6040
0001E86A                            ;		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E86A                            ;		dc.w $6880
0001E86A                            ;		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E86A                            ;		dc.w $6900
0001E86A                            ;		dc.l Nem_SyzSpike1	; large	spikeball
0001E86A                            ;		dc.w $7220
0001E86A                            ;		dc.l Nem_Cutter		; pizza	cutter
0001E86A                            ;		dc.w $76A0
0001E86A                            ;		dc.l Nem_FlamePipe	; flaming pipe
0001E86A                            ;		dc.w $7B20
0001E86A                            ;		dc.l Nem_SbzFloor	; collapsing floor
0001E86A                            ;		dc.w $7EA0
0001E86A                            ;		dc.l Nem_SbzBlock	; vanishing block
0001E86A                            ;		dc.w $9860
0001E86A 0003                       PLC_SBZ2:	dc.w $3
0001E86C                            ;		dc.l Nem_Cater		; caterkiller enemy
0001E86C                            ;		dc.w $5600
0001E86C                            ;		dc.l Nem_Bomb		; bomb enemy
0001E86C                            ;		dc.w $8000
0001E86C                            ;		dc.l Nem_Buzz		; buzz bomber enemy (UNUSED)
0001E86C                            ;		dc.w $8880
0001E86C                            ;		dc.l Nem_SlideFloor	; floor	that slides away
0001E86C                            ;		dc.w $8C00
0001E86C                            ;		dc.l Nem_SbzDoor2	; horizontal door
0001E86C                            ;		dc.w $8DE0
0001E86C 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E870 8FC0                       		dc.w $8FC0
0001E872                            ;		dc.l Nem_TrapDoor	; trapdoor
0001E872                            ;		dc.w $9240
0001E872                            ;		dc.l Nem_SbzFloor	; collapsing floor
0001E872                            ;		dc.w $7F20
0001E872                            ;		dc.l Nem_SpinPform	; small	spinning platform
0001E872                            ;		dc.w $9BE0
0001E872                            ;		dc.l Nem_LzSwitch	; switch
0001E872                            ;		dc.w $A1E0
0001E872 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E876 A360                       		dc.w $A360
0001E878 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E87C A460                       		dc.w $A460
0001E87E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E882 A660                       		dc.w $A660
0001E884                            ; ---------------------------------------------------------------------------
0001E884                            ; Pattern load cues - title card
0001E884                            ; ---------------------------------------------------------------------------
0001E884 0000                       PLC_TitleCard:	dc.w 0
0001E886 0000 0000                  		dc.l Nem_TitleCard
0001E88A B000                       		dc.w $B000
0001E88C                            ; ---------------------------------------------------------------------------
0001E88C                            ; Pattern load cues - act 3 boss
0001E88C                            ; ---------------------------------------------------------------------------
0001E88C 0005                       PLC_Boss:	dc.w 5
0001E88E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E892 8000                       		dc.w $8000
0001E894 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E898 8D80                       		dc.w $8D80
0001E89A 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E89E 93A0                       		dc.w $93A0
0001E8A0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E8A4 A300                       		dc.w $A300
0001E8A6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E8AA A300                       		dc.w $A300
0001E8AC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E8B0 A540                       		dc.w $A540
0001E8B2                            ; ---------------------------------------------------------------------------
0001E8B2                            ; Pattern load cues - act 1/2 signpost (Unused)
0001E8B2                            ; ---------------------------------------------------------------------------
0001E8B2 0002                       PLC_Signpost:	dc.w 2
0001E8B4 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E8B8 D000                       		dc.w $D000
0001E8BA 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E8BE 96C0                       		dc.w $96C0
0001E8C0 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E8C4 8C40                       		dc.w $8C40
0001E8C6                            ; ---------------------------------------------------------------------------
0001E8C6                            ; Pattern load cues - beta special stage warp effect
0001E8C6                            ; ---------------------------------------------------------------------------
0001E8C6 0000                       PLC_Warp:	dc.w 0
0001E8C8 0000 0000                  		dc.l Nem_Warp
0001E8CC A820                       		dc.w $A820
0001E8CE                            ; ---------------------------------------------------------------------------
0001E8CE                            ; Pattern load cues - special stage (ultra unused)
0001E8CE                            ; ---------------------------------------------------------------------------
0001E8CE 0010                       PLC_SpeStage:	dc.w $10
0001E8D0 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E8D4 0000                       		dc.w 0
0001E8D6 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E8DA 0A20                       		dc.w $A20
0001E8DC 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E8E0 2840                       		dc.w $2840
0001E8E2 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E8E6 4760                       		dc.w $4760
0001E8E8 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E8EC 4A20                       		dc.w $4A20
0001E8EE 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E8F2 4C60                       		dc.w $4C60
0001E8F4 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E8F8 5E00                       		dc.w $5E00
0001E8FA 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E8FE 6E00                       		dc.w $6E00
0001E900 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E904 7E00                       		dc.w $7E00
0001E906 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E90A 8E00                       		dc.w $8E00
0001E90C 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E910 9E00                       		dc.w $9E00
0001E912 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E916 AE00                       		dc.w $AE00
0001E918 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E91C BE00                       		dc.w $BE00
0001E91E 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E922 EE00                       		dc.w $EE00
0001E924 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E928 F2E0                       		dc.w $F2E0
0001E92A 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E92E F400                       		dc.w $F400
0001E930 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E934 F520                       		dc.w $F520
0001E936 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E93A F2E0                       		dc.w $F2E0
0001E93C 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E940 F400                       		dc.w $F400
0001E942 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E946 F520                       		dc.w $F520
0001E948                            		
0001E948                            ;If whomever is doing this stuff wants to save stuff I guess they could get rid of the animals since we dont really need them anyways
0001E948                            ; ---------------------------------------------------------------------------
0001E948                            ; Pattern load cues - GHZ animals
0001E948                            ; ---------------------------------------------------------------------------
0001E948 0001                       PLC_GHZAnimals:	dc.w 1
0001E94A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E94E B000                       		dc.w $B000
0001E950 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E954 B240                       		dc.w $B240
0001E956                            ; ---------------------------------------------------------------------------
0001E956                            ; Pattern load cues - LZ animals
0001E956                            ; ---------------------------------------------------------------------------
0001E956 0001                       PLC_LZAnimals:	dc.w 1
0001E958 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E95C B000                       		dc.w $B000
0001E95E 0000 0000                  		dc.l Nem_Seal		; seal
0001E962 B240                       		dc.w $B240
0001E964                            ; ---------------------------------------------------------------------------
0001E964                            ; Pattern load cues - MZ animals
0001E964                            ; ---------------------------------------------------------------------------
0001E964 0001                       PLC_MZAnimals:	dc.w 1
0001E966 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E96A B000                       		dc.w $B000
0001E96C 0000 0000                  		dc.l Nem_Seal		; seal
0001E970 B240                       		dc.w $B240
0001E972                            ; ---------------------------------------------------------------------------
0001E972                            ; Pattern load cues - SLZ animals
0001E972                            ; ---------------------------------------------------------------------------
0001E972 0001                       PLC_SLZAnimals:	dc.w 1
0001E974 0000 0000                  		dc.l Nem_Pig		; pig
0001E978 B000                       		dc.w $B000
0001E97A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E97E B240                       		dc.w $B240
0001E980                            ; ---------------------------------------------------------------------------
0001E980                            ; Pattern load cues - SYZ animals
0001E980                            ; ---------------------------------------------------------------------------
0001E980 0001                       PLC_SYZAnimals:	dc.w 1
0001E982 0000 0000                  		dc.l Nem_Pig		; pig
0001E986 B000                       		dc.w $B000
0001E988 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E98C B240                       		dc.w $B240
0001E98E                            ; ---------------------------------------------------------------------------
0001E98E                            ; Pattern load cues - SBZ animals
0001E98E                            ; ---------------------------------------------------------------------------
0001E98E 0001                       PLC_SBZAnimals:	dc.w 1
0001E990 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E994 B000                       		dc.w $B000
0001E996 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E99A B240                       		dc.w $B240
0001E99C                            ; ---------------------------------------------------------------------------
0001E99C                            ; Pattern load cues - special stage results screen (unused)
0001E99C                            ; ---------------------------------------------------------------------------
0001E99C 0001                       PLC_SpeStResult:dc.w 1
0001E99E 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E9A2 A820                       		dc.w $A820
0001E9A4 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E9A8 AA20                       		dc.w $AA20
0001E9AA                            ; ---------------------------------------------------------------------------
0001E9AA                            ; Pattern load cues - ending sequence (literally all of this is unused lol)
0001E9AA                            ; ---------------------------------------------------------------------------
0001E9AA 000E                       PLC_Ending:	dc.w $E
0001E9AC 0000 0000                  		dc.l Nem_TIT_1st	; Title main patterns
0001E9B0 0000                       		dc.w 0
0001E9B2 0000 0000                  		dc.l Nem_TIT_2nd	; Title secondary patterns
0001E9B6 39A0                       		dc.w $39A0
0001E9B8 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E9BC 6B00                       		dc.w $6B00
0001E9BE 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E9C2 7400                       		dc.w $7400
0001E9C4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E9C8 78A0                       		dc.w $78A0
0001E9CA 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E9CE 7C20                       		dc.w $7C20
0001E9D0 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E9D4 A480                       		dc.w $A480
0001E9D6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E9DA AA60                       		dc.w $AA60
0001E9DC 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E9E0 ACA0                       		dc.w $ACA0
0001E9E2 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E9E6 AE60                       		dc.w $AE60
0001E9E8 0000 0000                  		dc.l Nem_Seal		; seal
0001E9EC B0A0                       		dc.w $B0A0
0001E9EE 0000 0000                  		dc.l Nem_Pig		; pig
0001E9F2 B260                       		dc.w $B260
0001E9F4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E9F8 B4A0                       		dc.w $B4A0
0001E9FA 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E9FE B660                       		dc.w $B660
0001EA00 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001EA04 B8A0                       		dc.w $B8A0
0001EA06                            ; ---------------------------------------------------------------------------
0001EA06                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001EA06                            ; ---------------------------------------------------------------------------
0001EA06 0002                       PLC_TryAgain:	dc.w 2
0001EA08 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001EA0C 78A0                       		dc.w $78A0
0001EA0E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001EA12 7C20                       		dc.w $7C20
0001EA14 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001EA18 B400                       		dc.w $B400
0001EA1A                            ; ---------------------------------------------------------------------------
0001EA1A                            ; Pattern load cues - Eggman on SBZ 2
0001EA1A                            ; ---------------------------------------------------------------------------
0001EA1A 0002                       PLC_EggmanSBZ2:	dc.w 2
0001EA1C 0000 0000                  		dc.l Nem_SbzBlock	; block
0001EA20 A300                       		dc.w $A300
0001EA22 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001EA26 8000                       		dc.w $8000
0001EA28 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EA2C 9400                       		dc.w $9400
0001EA2E                            ; ---------------------------------------------------------------------------
0001EA2E                            ; Pattern load cues - final boss
0001EA2E                            ; ---------------------------------------------------------------------------
0001EA2E 0004                       PLC_FZBoss:	dc.w 4
0001EA30 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001EA34 7400                       		dc.w $7400
0001EA36 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001EA3A 6000                       		dc.w $6000
0001EA3C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EA40 8000                       		dc.w $8000
0001EA42 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001EA46 8E00                       		dc.w $8E00
0001EA48 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EA4C A540                       		dc.w $A540
0001EA4E                            ; ---------------------------------------------------------------------------
0001EA4E                            ; Pattern load cues - Egg Plant Zone
0001EA4E                            ; ---------------------------------------------------------------------------
0001EA4E 000A                       PLC_EPZ:	dc.w $A
0001EA50 0000 0000                  		dc.l Nem_EPZ		; GHZ main patterns
0001EA54 0000                       		dc.w 0
0001EA56 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EA5A 6B00                       		dc.w $6B00
0001EA5C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EA60 7A00                       		dc.w $7A00
0001EA62 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EA66 8000                       		dc.w $8000
0001EA68 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EA6C 8880                       		dc.w $8880
0001EA6E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EA72 8F60                       		dc.w $8F60
0001EA74 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EA78 9360                       		dc.w $9360
0001EA7A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EA7E 9E00                       		dc.w $9E00
0001EA80 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EA84 A360                       		dc.w $A360
0001EA86 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EA8A A460                       		dc.w $A460
0001EA8C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EA90 A660                       		dc.w $A660
0001EA92 0005                       PLC_EPZ2:	dc.w 5
0001EA94 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EA98 7000                       		dc.w $7000
0001EA9A 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EA9E 71C0                       		dc.w $71C0
0001EAA0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EAA4 7300                       		dc.w $7300
0001EAA6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EAAA 7540                       		dc.w $7540
0001EAAC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EAB0 A1E0                       		dc.w $A1E0
0001EAB2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EAB6 6980                       		dc.w $6980
0001EAB8                            ; ---------------------------------------------------------------------------
0001EAB8                            ; Pattern load cues - GHZ animals
0001EAB8                            ; ---------------------------------------------------------------------------
0001EAB8 0001                       PLC_EPZAnimals:	dc.w 1
0001EABA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EABE B000                       		dc.w $B000
0001EAC0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EAC4 B240                       		dc.w $B240
0001EAC6                            		even
0001EAC6                            ; ---------------------------------------------------------------------------
0001EAC6                            ; Pattern load cues - Island Nowhere
0001EAC6                            ; ---------------------------------------------------------------------------
0001EAC6 0008                       PLC_INZ:	dc.w 8	; UT: Make sure that if you change the amount of stuff being used, make sure to change this value!
0001EAC8 0000 0000                  		dc.l Nem_INZ		; GHZ main patterns
0001EACC 0000                       		dc.w 0
0001EACE                            ;		dc.l Nem_Stalk		; flower stalk
0001EACE                            ;		dc.w $6B00
0001EACE                            ;		dc.l Nem_PplRock	; purple rock
0001EACE                            ;		dc.w $7A00
0001EACE                            ;		dc.l Nem_Crabmeat	; crabmeat enemy
0001EACE                            ;		dc.w $8000
0001EACE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EAD2 8520                       		dc.w $8520
0001EAD4                            ;		dc.l Nem_Buzz		; buzz bomber enemy
0001EAD4                            ;		dc.w $8880		
0001EAD4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001EAD8 8F60                       		dc.w $8F60
0001EADA 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001EADE 9700                       		dc.w $9700
0001EAE0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EAE4 9FE0                       		dc.w $9FE0
0001EAE6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EAEA A360                       		dc.w $A360
0001EAEC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EAF0 A460                       		dc.w $A460
0001EAF2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EAF6 A660                       		dc.w $A660
0001EAF8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EAFC 7000                       		dc.w $7000
0001EAFE 0000                       PLC_INZ2:	dc.w 0
0001EB00 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EB04 7000                       		dc.w $7000
0001EB06                            ;		dc.l Nem_Bridge		; bridge
0001EB06                            ;		dc.w $71C0
0001EB06                            ;		dc.l Nem_SpikePole	; spiked pole
0001EB06                            ;		dc.w $7300
0001EB06                            ;		dc.l Nem_Ball		; giant	ball
0001EB06                            ;		dc.w $7540
0001EB06                            ;		dc.l Nem_GhzWall1	; breakable wall
0001EB06                            ;		dc.w $A1E0
0001EB06                            ;		dc.l Nem_GhzWall2	; normal wall
0001EB06                            ;		dc.w $6980
0001EB06                            ; ---------------------------------------------------------------------------
0001EB06                            ; Pattern load cues - GHZ animals
0001EB06                            ; ---------------------------------------------------------------------------
0001EB06 0001                       PLC_INZAnimals:	dc.w 1
0001EB08 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EB0C B000                       		dc.w $B000
0001EB0E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EB12 B240                       		dc.w $B240
0001EB14                            		even
0001EB14                            		even
0001EB14                            
0001EB14                            		incbin	misc\padding.bin
0001EC02                            		even
0001EC02                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001F064                            		even
0001F064                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F15C                            		even
0001F15C                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F1F6                            		even
0001F1F6                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000200BC                            		even
000200BC                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00021A8A                            		even
00021A8A                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00021ABE                            		even
00021ABE                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00021BD4                            		even
00021BD4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000221E4                            		even
000221E4                            Eni_UTScreen:	incbin	mapeni\utscreen.bin	; UT Screen mappings
000222AE                            		even
000222AE                            Nem_UTScreen:	incbin	artnem\utscreen.bin	; UT Screen
00022726                            		even
00022726                            Eni_HiddenScreen:	incbin	mapeni\hiddenscreen.bin	; UT Screen mappings
00022784                            		even
00022784                            Nem_HiddenScreen:	incbin	artnem\hiddenscreen.bin	; UT Screen
0002291E                            		even
0002291E                            ; ---------------------------------------------------------------------------
0002291E                            ; Sprite mappings - Sonic
0002291E                            ; ---------------------------------------------------------------------------
0002291E                            Map_Sonic:
0002291E                            	include "_maps\Sonic.asm"
0002291E                            ; ================================================================================
0002291E                            ; Sprite Mappings - generated by Flex 2 Sat Jun 23 2018 14:02:35 GMT-0700 (Pacific Daylight Time)
0002291E                            ; ================================================================================
0002291E                            
0002291E                            DATAE84JSC6H85R:
0002291E 0000 0000                  	dc.w $0, DATAE84JSC6H85R_1-DATAE84JSC6H85R
00022922 0000 0000                  	dc.w DATAE84JSC6H85R_2-DATAE84JSC6H85R, DATAE84JSC6H85R_3-DATAE84JSC6H85R
00022926 0000 0000                  	dc.w DATAE84JSC6H85R_4-DATAE84JSC6H85R, DATAE84JSC6H85R_5-DATAE84JSC6H85R
0002292A 0000 0000                  	dc.w DATAE84JSC6H85R_6-DATAE84JSC6H85R, DATAE84JSC6H85R_7-DATAE84JSC6H85R
0002292E 0000 0000                  	dc.w DATAE84JSC6H85R_8-DATAE84JSC6H85R, DATAE84JSC6H85R_9-DATAE84JSC6H85R
00022932 0000 0000                  	dc.w DATAE84JSC6H85R_A-DATAE84JSC6H85R, DATAE84JSC6H85R_B-DATAE84JSC6H85R
00022936 0000 0000                  	dc.w DATAE84JSC6H85R_C-DATAE84JSC6H85R, DATAE84JSC6H85R_D-DATAE84JSC6H85R
0002293A 0000 0000                  	dc.w DATAE84JSC6H85R_E-DATAE84JSC6H85R, DATAE84JSC6H85R_F-DATAE84JSC6H85R
0002293E 0000 0000                  	dc.w DATAE84JSC6H85R_10-DATAE84JSC6H85R, DATAE84JSC6H85R_11-DATAE84JSC6H85R
00022942 0000 0000                  	dc.w DATAE84JSC6H85R_12-DATAE84JSC6H85R, DATAE84JSC6H85R_13-DATAE84JSC6H85R
00022946 0000 0000                  	dc.w DATAE84JSC6H85R_14-DATAE84JSC6H85R, DATAE84JSC6H85R_15-DATAE84JSC6H85R
0002294A 0000 0000                  	dc.w DATAE84JSC6H85R_16-DATAE84JSC6H85R, DATAE84JSC6H85R_17-DATAE84JSC6H85R
0002294E 0000 0000                  	dc.w DATAE84JSC6H85R_18-DATAE84JSC6H85R, DATAE84JSC6H85R_19-DATAE84JSC6H85R
00022952 0000 0000                  	dc.w DATAE84JSC6H85R_1A-DATAE84JSC6H85R, DATAE84JSC6H85R_1B-DATAE84JSC6H85R
00022956 0000 0000                  	dc.w DATAE84JSC6H85R_1C-DATAE84JSC6H85R, DATAE84JSC6H85R_1D-DATAE84JSC6H85R
0002295A 0000 0000                  	dc.w DATAE84JSC6H85R_1E-DATAE84JSC6H85R, DATAE84JSC6H85R_1F-DATAE84JSC6H85R
0002295E 0000 0000                  	dc.w DATAE84JSC6H85R_20-DATAE84JSC6H85R, DATAE84JSC6H85R_21-DATAE84JSC6H85R
00022962 0000 0000                  	dc.w DATAE84JSC6H85R_22-DATAE84JSC6H85R, DATAE84JSC6H85R_23-DATAE84JSC6H85R
00022966 0000 0000                  	dc.w DATAE84JSC6H85R_24-DATAE84JSC6H85R, DATAE84JSC6H85R_25-DATAE84JSC6H85R
0002296A 0000 0000                  	dc.w DATAE84JSC6H85R_26-DATAE84JSC6H85R, DATAE84JSC6H85R_27-DATAE84JSC6H85R
0002296E 0000 0000                  	dc.w DATAE84JSC6H85R_28-DATAE84JSC6H85R, DATAE84JSC6H85R_29-DATAE84JSC6H85R
00022972 0000 0000                  	dc.w DATAE84JSC6H85R_2A-DATAE84JSC6H85R, DATAE84JSC6H85R_2B-DATAE84JSC6H85R
00022976 0000 0000                  	dc.w DATAE84JSC6H85R_2C-DATAE84JSC6H85R, DATAE84JSC6H85R_2D-DATAE84JSC6H85R
0002297A 0000 0000                  	dc.w DATAE84JSC6H85R_2E-DATAE84JSC6H85R, DATAE84JSC6H85R_2F-DATAE84JSC6H85R
0002297E 0000 0000                  	dc.w DATAE84JSC6H85R_30-DATAE84JSC6H85R, DATAE84JSC6H85R_31-DATAE84JSC6H85R
00022982 0000 0000                  	dc.w DATAE84JSC6H85R_32-DATAE84JSC6H85R, DATAE84JSC6H85R_33-DATAE84JSC6H85R
00022986 0000 0000                  	dc.w DATAE84JSC6H85R_34-DATAE84JSC6H85R, DATAE84JSC6H85R_35-DATAE84JSC6H85R
0002298A 0000 0000                  	dc.w DATAE84JSC6H85R_36-DATAE84JSC6H85R, DATAE84JSC6H85R_37-DATAE84JSC6H85R
0002298E 0000 0000                  	dc.w DATAE84JSC6H85R_38-DATAE84JSC6H85R, DATAE84JSC6H85R_39-DATAE84JSC6H85R
00022992 0000 0000                  	dc.w DATAE84JSC6H85R_3A-DATAE84JSC6H85R, DATAE84JSC6H85R_3B-DATAE84JSC6H85R
00022996 0000 0000                  	dc.w DATAE84JSC6H85R_3C-DATAE84JSC6H85R, DATAE84JSC6H85R_3D-DATAE84JSC6H85R
0002299A 0000 0000                  	dc.w DATAE84JSC6H85R_3E-DATAE84JSC6H85R, DATAE84JSC6H85R_3F-DATAE84JSC6H85R
0002299E 0000 0000                  	dc.w DATAE84JSC6H85R_40-DATAE84JSC6H85R, DATAE84JSC6H85R_41-DATAE84JSC6H85R
000229A2 0000 0000                  	dc.w DATAE84JSC6H85R_42-DATAE84JSC6H85R, DATAE84JSC6H85R_43-DATAE84JSC6H85R
000229A6 0000 0000                  	dc.w DATAE84JSC6H85R_44-DATAE84JSC6H85R, DATAE84JSC6H85R_45-DATAE84JSC6H85R
000229AA 0000 0000                  	dc.w DATAE84JSC6H85R_46-DATAE84JSC6H85R, DATAE84JSC6H85R_47-DATAE84JSC6H85R
000229AE 0000 0000                  	dc.w DATAE84JSC6H85R_48-DATAE84JSC6H85R, DATAE84JSC6H85R_49-DATAE84JSC6H85R
000229B2 0000 0000                  	dc.w DATAE84JSC6H85R_4A-DATAE84JSC6H85R, DATAE84JSC6H85R_4B-DATAE84JSC6H85R
000229B6 0000 0000                  	dc.w DATAE84JSC6H85R_4C-DATAE84JSC6H85R, DATAE84JSC6H85R_4D-DATAE84JSC6H85R
000229BA 0000 0000                  	dc.w DATAE84JSC6H85R_4E-DATAE84JSC6H85R, DATAE84JSC6H85R_4F-DATAE84JSC6H85R
000229BE 0000 0000                  	dc.w DATAE84JSC6H85R_50-DATAE84JSC6H85R, DATAE84JSC6H85R_51-DATAE84JSC6H85R
000229C2 0000 0000                  	dc.w DATAE84JSC6H85R_52-DATAE84JSC6H85R, DATAE84JSC6H85R_53-DATAE84JSC6H85R
000229C6 0000 0000                  	dc.w DATAE84JSC6H85R_54-DATAE84JSC6H85R, DATAE84JSC6H85R_55-DATAE84JSC6H85R
000229CA 0000 0000                  	dc.w DATAE84JSC6H85R_56-DATAE84JSC6H85R, DATAE84JSC6H85R_57-DATAE84JSC6H85R
000229CE 07                         DATAE84JSC6H85R_1: dc.b $7
000229CF EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000229D4 F40D 0003 F0               	dc.b $F4, $D, $0, $3, $F0
000229D9 0408 000B F0               	dc.b $4, $8, $0, $B, $F0
000229DE 0C08 000E F8               	dc.b $C, $8, $0, $E, $F8
000229E3 EC00 0011 08               	dc.b $EC, $0, $0, $11, $8
000229E8 0C00 0012 F0               	dc.b $C, $0, $0, $12, $F0
000229ED 0400 0013 08               	dc.b $4, $0, $0, $13, $8
000229F2 03                         DATAE84JSC6H85R_2: dc.b $3
000229F3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000229F8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000229FD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022A02 03                         DATAE84JSC6H85R_3: dc.b $3
00022A03 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022A08 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022A0D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022A12 03                         DATAE84JSC6H85R_4: dc.b $3
00022A13 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022A18 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022A1D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022A22 03                         DATAE84JSC6H85R_5: dc.b $3
00022A23 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00022A28 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00022A2D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022A32 04                         DATAE84JSC6H85R_6: dc.b $4
00022A33 EA0C 0000 F0               	dc.b $EA, $C, $0, $0, $F0
00022A38 F20F 0004 F0               	dc.b $F2, $F, $0, $4, $F0
00022A3D F203 0014 10               	dc.b $F2, $3, $0, $14, $10
00022A42 0A00 0018 E8               	dc.b $A, $0, $0, $18, $E8
00022A47 02                         DATAE84JSC6H85R_7: dc.b $2
00022A48 FB0E 0000 F1               	dc.b $FB, $E, $0, $0, $F1
00022A4D EB0D 000C F1               	dc.b $EB, $D, $0, $C, $F1
00022A52 04                         DATAE84JSC6H85R_8: dc.b $4
00022A53 ED09 0000 F1               	dc.b $ED, $9, $0, $0, $F1
00022A58 FD0A 0006 F1               	dc.b $FD, $A, $0, $6, $F1
00022A5D 0D00 000F 09               	dc.b $D, $0, $0, $F, $9
00022A62 ED02 0010 09               	dc.b $ED, $2, $0, $10, $9
00022A67 04                         DATAE84JSC6H85R_9: dc.b $4
00022A68 FC09 0000 F1               	dc.b $FC, $9, $0, $0, $F1
00022A6D 0C0C 0006 F1               	dc.b $C, $C, $0, $6, $F1
00022A72 EC03 000A 09               	dc.b $EC, $3, $0, $A, $9
00022A77 EC09 000E F1               	dc.b $EC, $9, $0, $E, $F1
00022A7C 04                         DATAE84JSC6H85R_A: dc.b $4
00022A7D FC0E 0000 F1               	dc.b $FC, $E, $0, $0, $F1
00022A82 EC01 000C 09               	dc.b $EC, $1, $0, $C, $9
00022A87 EC09 000E F1               	dc.b $EC, $9, $0, $E, $F1
00022A8C 0401 0014 11               	dc.b $4, $1, $0, $14, $11
00022A91 06                         DATAE84JSC6H85R_B: dc.b $6
00022A92 FB0C 0000 F1               	dc.b $FB, $C, $0, $0, $F1
00022A97 0309 0004 01               	dc.b $3, $9, $0, $4, $1
00022A9C EB0D 000A F1               	dc.b $EB, $D, $0, $A, $F1
00022AA1 0308 0012 E9               	dc.b $3, $8, $0, $12, $E9
00022AA6 0B00 0015 E9               	dc.b $B, $0, $0, $15, $E9
00022AAB FB00 0016 11               	dc.b $FB, $0, $0, $16, $11
00022AB0 08                         DATAE84JSC6H85R_C: dc.b $8
00022AB1 E309 0000 EB               	dc.b $E3, $9, $0, $0, $EB
00022AB6 E306 0006 03               	dc.b $E3, $6, $0, $6, $3
00022ABB F308 000C EB               	dc.b $F3, $8, $0, $C, $EB
00022AC0 FB09 000F EB               	dc.b $FB, $9, $0, $F, $EB
00022AC5 FB00 0015 03               	dc.b $FB, $0, $0, $15, $3
00022ACA 0B01 0016 F3               	dc.b $B, $1, $0, $16, $F3
00022ACF 0B01 0018 FB               	dc.b $B, $1, $0, $18, $FB
00022AD4 FB00 001A 0B               	dc.b $FB, $0, $0, $1A, $B
00022AD9 05                         DATAE84JSC6H85R_D: dc.b $5
00022ADA FB0C 0000 EB               	dc.b $FB, $C, $0, $0, $EB
00022ADF 0309 0004 F3               	dc.b $3, $9, $0, $4, $F3
00022AE4 E30E 000A EB               	dc.b $E3, $E, $0, $A, $EB
00022AE9 F301 0016 0B               	dc.b $F3, $1, $0, $16, $B
00022AEE 0300 0018 0B               	dc.b $3, $0, $0, $18, $B
00022AF3 05                         DATAE84JSC6H85R_E: dc.b $5
00022AF4 E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
00022AF9 E901 0006 04               	dc.b $E9, $1, $0, $6, $4
00022AFE F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
00022B03 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
00022B08 F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
00022B0D 05                         DATAE84JSC6H85R_F: dc.b $5
00022B0E EA09 0000 EC               	dc.b $EA, $9, $0, $0, $EC
00022B13 FA0D 0006 EC               	dc.b $FA, $D, $0, $6, $EC
00022B18 0A08 000E FC               	dc.b $A, $8, $0, $E, $FC
00022B1D EA01 0011 04               	dc.b $EA, $1, $0, $11, $4
00022B22 FA01 0013 0C               	dc.b $FA, $1, $0, $13, $C
00022B27 07                         DATAE84JSC6H85R_10: dc.b $7
00022B28 E801 0000 04               	dc.b $E8, $1, $0, $0, $4
00022B2D F80D 0002 F4               	dc.b $F8, $D, $0, $2, $F4
00022B32 0808 000A FC               	dc.b $8, $8, $0, $A, $FC
00022B37 E80D 000D E4               	dc.b $E8, $D, $0, $D, $E4
00022B3C F804 0015 E4               	dc.b $F8, $4, $0, $15, $E4
00022B41 0800 0017 F4               	dc.b $8, $0, $0, $17, $F4
00022B46 100C 0018 F4               	dc.b $10, $C, $0, $18, $F4
00022B4B 07                         DATAE84JSC6H85R_11: dc.b $7
00022B4C EA01 0000 FF               	dc.b $EA, $1, $0, $0, $FF
00022B51 FA0D 0002 EF               	dc.b $FA, $D, $0, $2, $EF
00022B56 0A08 000A F7               	dc.b $A, $8, $0, $A, $F7
00022B5B EA09 000D E7               	dc.b $EA, $9, $0, $D, $E7
00022B60 F204 0013 07               	dc.b $F2, $4, $0, $13, $7
00022B65 FA01 0015 0F               	dc.b $FA, $1, $0, $15, $F
00022B6A 1200 0017 F7               	dc.b $12, $0, $0, $17, $F7
00022B6F 06                         DATAE84JSC6H85R_12: dc.b $6
00022B70 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00022B75 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00022B7A FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00022B7F 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00022B84 FC00 0016 0B               	dc.b $FC, $0, $0, $16, $B
00022B89 1400 0017 0B               	dc.b $14, $0, $0, $17, $B
00022B8E 02                         DATAE84JSC6H85R_13: dc.b $2
00022B8F F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00022B94 F40B 0008 FB               	dc.b $F4, $B, $0, $8, $FB
00022B99 04                         DATAE84JSC6H85R_14: dc.b $4
00022B9A FB0A 0000 FB               	dc.b $FB, $A, $0, $0, $FB
00022B9F F307 0009 EB               	dc.b $F3, $7, $0, $9, $EB
00022BA4 F300 0011 FB               	dc.b $F3, $0, $0, $11, $FB
00022BA9 F300 0012 0B               	dc.b $F3, $0, $0, $12, $B
00022BAE 04                         DATAE84JSC6H85R_15: dc.b $4
00022BAF F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
00022BB4 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
00022BB9 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
00022BBE F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
00022BC3 03                         DATAE84JSC6H85R_16: dc.b $3
00022BC4 F40B 0000 FB               	dc.b $F4, $B, $0, $0, $FB
00022BC9 F407 000C EB               	dc.b $F4, $7, $0, $C, $EB
00022BCE EC04 0014 03               	dc.b $EC, $4, $0, $14, $3
00022BD3 07                         DATAE84JSC6H85R_17: dc.b $7
00022BD4 0F00 0000 0B               	dc.b $F, $0, $0, $0, $B
00022BD9 F703 0001 03               	dc.b $F7, $3, $0, $1, $3
00022BDE EF03 0005 FB               	dc.b $EF, $3, $0, $5, $FB
00022BE3 E708 0009 FB               	dc.b $E7, $8, $0, $9, $FB
00022BE8 EF04 000C 03               	dc.b $EF, $4, $0, $C, $3
00022BED F700 000E 0B               	dc.b $F7, $0, $0, $E, $B
00022BF2 EF07 000F EB               	dc.b $EF, $7, $0, $F, $EB
00022BF7 09                         DATAE84JSC6H85R_18: dc.b $9
00022BF8 FC06 0000 E3               	dc.b $FC, $6, $0, $0, $E3
00022BFD EC04 0006 E3               	dc.b $EC, $4, $0, $6, $E3
00022C02 F404 0008 E3               	dc.b $F4, $4, $0, $8, $E3
00022C07 F40A 000A F3               	dc.b $F4, $A, $0, $A, $F3
00022C0C 0C00 0013 F3               	dc.b $C, $0, $0, $13, $F3
00022C11 0C00 0014 FB               	dc.b $C, $0, $0, $14, $FB
00022C16 EC04 0015 F3               	dc.b $EC, $4, $0, $15, $F3
00022C1B 0C00 0017 03               	dc.b $C, $0, $0, $17, $3
00022C20 FC05 0018 0B               	dc.b $FC, $5, $0, $18, $B
00022C25 06                         DATAE84JSC6H85R_19: dc.b $6
00022C26 FB08 0000 00               	dc.b $FB, $8, $0, $0, $0
00022C2B EB04 0003 F8               	dc.b $EB, $4, $0, $3, $F8
00022C30 0304 0005 00               	dc.b $3, $4, $0, $5, $0
00022C35 F30A 0007 E8               	dc.b $F3, $A, $0, $7, $E8
00022C3A 0B0C 0010 E8               	dc.b $B, $C, $0, $10, $E8
00022C3F F300 0014 00               	dc.b $F3, $0, $0, $14, $0
00022C44 05                         DATAE84JSC6H85R_1A: dc.b $5
00022C45 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022C4A F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00022C4F EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00022C54 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00022C59 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
00022C5E 05                         DATAE84JSC6H85R_1B: dc.b $5
00022C5F FB06 0000 EC               	dc.b $FB, $6, $0, $0, $EC
00022C64 0B04 0006 FC               	dc.b $B, $4, $0, $6, $FC
00022C69 0304 0008 FC               	dc.b $3, $4, $0, $8, $FC
00022C6E EB0A 000A FC               	dc.b $EB, $A, $0, $A, $FC
00022C73 F304 0013 EC               	dc.b $F3, $4, $0, $13, $EC
00022C78 09                         DATAE84JSC6H85R_1C: dc.b $9
00022C79 EF04 0000 E9               	dc.b $EF, $4, $0, $0, $E9
00022C7E E70A 0002 F9               	dc.b $E7, $A, $0, $2, $F9
00022C83 FF04 000B F9               	dc.b $FF, $4, $0, $B, $F9
00022C88 F701 000D 11               	dc.b $F7, $1, $0, $D, $11
00022C8D FF00 000F 09               	dc.b $FF, $0, $0, $F, $9
00022C92 F703 0010 E9               	dc.b $F7, $3, $0, $10, $E9
00022C97 F703 0014 F1               	dc.b $F7, $3, $0, $14, $F1
00022C9C 0705 0018 F8               	dc.b $7, $5, $0, $18, $F8
00022CA1 0700 001C 08               	dc.b $7, $0, $0, $1C, $8
00022CA6 07                         DATAE84JSC6H85R_1D: dc.b $7
00022CA7 FE0A 0000 EA               	dc.b $FE, $A, $0, $0, $EA
00022CAC 0604 0009 02               	dc.b $6, $4, $0, $9, $2
00022CB1 FE08 000B 02               	dc.b $FE, $8, $0, $B, $2
00022CB6 F608 000E EA               	dc.b $F6, $8, $0, $E, $EA
00022CBB F600 0011 02               	dc.b $F6, $0, $0, $11, $2
00022CC0 EE08 0012 F2               	dc.b $EE, $8, $0, $12, $F2
00022CC5 E608 0015 F2               	dc.b $E6, $8, $0, $15, $F2
00022CCA 03                         DATAE84JSC6H85R_1E: dc.b $3
00022CCB EE09 0000 FC               	dc.b $EE, $9, $0, $0, $FC
00022CD0 FE0E 0006 F4               	dc.b $FE, $E, $0, $6, $F4
00022CD5 F600 0012 F4               	dc.b $F6, $0, $0, $12, $F4
00022CDA 02                         DATAE84JSC6H85R_1F: dc.b $2
00022CDB FE0E 0000 F4               	dc.b $FE, $E, $0, $0, $F4
00022CE0 EE0D 000C F4               	dc.b $EE, $D, $0, $C, $F4
00022CE5 02                         DATAE84JSC6H85R_20: dc.b $2
00022CE6 FE0E 0000 F4               	dc.b $FE, $E, $0, $0, $F4
00022CEB EE09 000C FC               	dc.b $EE, $9, $0, $C, $FC
00022CF0 03                         DATAE84JSC6H85R_21: dc.b $3
00022CF1 FE0E 0000 F4               	dc.b $FE, $E, $0, $0, $F4
00022CF6 F60C 000C F4               	dc.b $F6, $C, $0, $C, $F4
00022CFB EE08 0010 FC               	dc.b $EE, $8, $0, $10, $FC
00022D00 04                         DATAE84JSC6H85R_22: dc.b $4
00022D01 EA09 0000 EE               	dc.b $EA, $9, $0, $0, $EE
00022D06 EA01 0006 06               	dc.b $EA, $1, $0, $6, $6
00022D0B FA0E 0008 F6               	dc.b $FA, $E, $0, $8, $F6
00022D10 FA00 0014 EE               	dc.b $FA, $0, $0, $14, $EE
00022D15 03                         DATAE84JSC6H85R_23: dc.b $3
00022D16 EA09 0000 EE               	dc.b $EA, $9, $0, $0, $EE
00022D1B EA01 0006 06               	dc.b $EA, $1, $0, $6, $6
00022D20 FA0E 0008 F6               	dc.b $FA, $E, $0, $8, $F6
00022D25 03                         DATAE84JSC6H85R_24: dc.b $3
00022D26 FA0E 0000 F4               	dc.b $FA, $E, $0, $0, $F4
00022D2B EA0D 000C EC               	dc.b $EA, $D, $0, $C, $EC
00022D30 FA00 0014 EC               	dc.b $FA, $0, $0, $14, $EC
00022D35 02                         DATAE84JSC6H85R_25: dc.b $2
00022D36 F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00022D3B E90D 000C EC               	dc.b $E9, $D, $0, $C, $EC
00022D40 03                         DATAE84JSC6H85R_26: dc.b $3
00022D41 EC06 0000 EE               	dc.b $EC, $6, $0, $0, $EE
00022D46 EC0B 0006 FE               	dc.b $EC, $B, $0, $6, $FE
00022D4B 0400 0012 F6               	dc.b $4, $0, $0, $12, $F6
00022D50 03                         DATAE84JSC6H85R_27: dc.b $3
00022D51 EC06 0000 EE               	dc.b $EC, $6, $0, $0, $EE
00022D56 EC0B 0006 FE               	dc.b $EC, $B, $0, $6, $FE
00022D5B 0404 0012 EE               	dc.b $4, $4, $0, $12, $EE
00022D60 02                         DATAE84JSC6H85R_28: dc.b $2
00022D61 EC0B 0000 FE               	dc.b $EC, $B, $0, $0, $FE
00022D66 EC06 000C EE               	dc.b $EC, $6, $0, $C, $EE
00022D6B 03                         DATAE84JSC6H85R_29: dc.b $3
00022D6C EC0B 0000 FE               	dc.b $EC, $B, $0, $0, $FE
00022D71 0400 000C F6               	dc.b $4, $0, $0, $C, $F6
00022D76 EC06 000D EE               	dc.b $EC, $6, $0, $D, $EE
00022D7B 04                         DATAE84JSC6H85R_2A: dc.b $4
00022D7C FA06 0000 EA               	dc.b $FA, $6, $0, $0, $EA
00022D81 F204 0006 EA               	dc.b $F2, $4, $0, $6, $EA
00022D86 EA0B 0008 FA               	dc.b $EA, $B, $0, $8, $FA
00022D8B 0A00 0014 FA               	dc.b $A, $0, $0, $14, $FA
00022D90 02                         DATAE84JSC6H85R_2B: dc.b $2
00022D91 F207 0000 EA               	dc.b $F2, $7, $0, $0, $EA
00022D96 EA0B 0008 FA               	dc.b $EA, $B, $0, $8, $FA
00022D9B 03                         DATAE84JSC6H85R_2C: dc.b $3
00022D9C EC0B 0000 FA               	dc.b $EC, $B, $0, $0, $FA
00022DA1 F407 000C EA               	dc.b $F4, $7, $0, $C, $EA
00022DA6 0C00 0014 FA               	dc.b $C, $0, $0, $14, $FA
00022DAB 02                         DATAE84JSC6H85R_2D: dc.b $2
00022DAC EC0B 0000 FA               	dc.b $EC, $B, $0, $0, $FA
00022DB1 F407 000C EA               	dc.b $F4, $7, $0, $C, $EA
00022DB6 01                         DATAE84JSC6H85R_2E: dc.b $1
00022DB7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DBC 01                         DATAE84JSC6H85R_2F: dc.b $1
00022DBD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DC2 01                         DATAE84JSC6H85R_30: dc.b $1
00022DC3 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DC8 01                         DATAE84JSC6H85R_31: dc.b $1
00022DC9 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DCE 01                         DATAE84JSC6H85R_32: dc.b $1
00022DCF F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DD4 02                         DATAE84JSC6H85R_33: dc.b $2
00022DD5 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00022DDA F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00022DDF 01                         DATAE84JSC6H85R_34: dc.b $1
00022DE0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DE5 02                         DATAE84JSC6H85R_35: dc.b $2
00022DE6 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00022DEB 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00022DF0 01                         DATAE84JSC6H85R_36: dc.b $1
00022DF1 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022DF6 02                         DATAE84JSC6H85R_37: dc.b $2
00022DF7 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00022DFC FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00022E01 04                         DATAE84JSC6H85R_38: dc.b $4
00022E02 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00022E07 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00022E0C 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00022E11 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00022E16 04                         DATAE84JSC6H85R_39: dc.b $4
00022E17 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00022E1C FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00022E21 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00022E26 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00022E2B 03                         DATAE84JSC6H85R_3A: dc.b $3
00022E2C EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00022E31 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00022E36 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00022E3B 03                         DATAE84JSC6H85R_3B: dc.b $3
00022E3C EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00022E41 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00022E46 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00022E4B 03                         DATAE84JSC6H85R_3C: dc.b $3
00022E4C F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00022E51 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00022E56 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00022E5B 02                         DATAE84JSC6H85R_3D: dc.b $2
00022E5C F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00022E61 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00022E66 03                         DATAE84JSC6H85R_3E: dc.b $3
00022E67 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00022E6C FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00022E71 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00022E76 03                         DATAE84JSC6H85R_3F: dc.b $3
00022E77 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00022E7C FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00022E81 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00022E86 03                         DATAE84JSC6H85R_40: dc.b $3
00022E87 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00022E8C 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00022E91 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00022E96 04                         DATAE84JSC6H85R_41: dc.b $4
00022E97 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00022E9C 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00022EA1 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00022EA6 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00022EAB 04                         DATAE84JSC6H85R_42: dc.b $4
00022EAC F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00022EB1 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00022EB6 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00022EBB F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00022EC0 05                         DATAE84JSC6H85R_43: dc.b $5
00022EC1 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00022EC6 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00022ECB 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00022ED0 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00022ED5 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00022EDA 05                         DATAE84JSC6H85R_44: dc.b $5
00022EDB E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00022EE0 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00022EE5 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00022EEA 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00022EEF 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00022EF4 02                         DATAE84JSC6H85R_45: dc.b $2
00022EF5 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00022EFA 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00022EFF 03                         DATAE84JSC6H85R_46: dc.b $3
00022F00 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00022F05 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00022F0A 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00022F0F 02                         DATAE84JSC6H85R_47: dc.b $2
00022F10 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00022F15 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00022F1A 03                         DATAE84JSC6H85R_48: dc.b $3
00022F1B EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00022F20 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00022F25 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00022F2A 02                         DATAE84JSC6H85R_49: dc.b $2
00022F2B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022F30 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00022F35 03                         DATAE84JSC6H85R_4A: dc.b $3
00022F36 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00022F3B 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00022F40 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00022F45 03                         DATAE84JSC6H85R_4B: dc.b $3
00022F46 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00022F4B E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00022F50 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00022F55 05                         DATAE84JSC6H85R_4C: dc.b $5
00022F56 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00022F5B E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00022F60 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00022F65 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00022F6A 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00022F6F 05                         DATAE84JSC6H85R_4D: dc.b $5
00022F70 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00022F75 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00022F7A F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00022F7F 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00022F84 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00022F89 02                         DATAE84JSC6H85R_4E: dc.b $2
00022F8A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00022F8F F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00022F94 03                         DATAE84JSC6H85R_4F: dc.b $3
00022F95 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00022F9A F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00022F9F 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00022FA4 01                         DATAE84JSC6H85R_50: dc.b $1
00022FA5 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00022FAA 01                         DATAE84JSC6H85R_51: dc.b $1
00022FAB F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00022FB0 01                         DATAE84JSC6H85R_52: dc.b $1
00022FB1 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00022FB6 03                         DATAE84JSC6H85R_53: dc.b $3
00022FB7 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00022FBC FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00022FC1 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00022FC6 03                         DATAE84JSC6H85R_54: dc.b $3
00022FC7 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
00022FCC FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00022FD1 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00022FD6 03                         DATAE84JSC6H85R_55: dc.b $3
00022FD7 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00022FDC F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00022FE1 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00022FE6 03                         DATAE84JSC6H85R_56: dc.b $3
00022FE7 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00022FEC FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00022FF1 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00022FF6 02                         DATAE84JSC6H85R_57: dc.b $2
00022FF7 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00022FFC F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00023002 00                         	even
00023002 00                         	even
00023002                            ; ---------------------------------------------------------------------------
00023002                            ; Sprite mappings - Pepsi
00023002                            ; ---------------------------------------------------------------------------
00023002                            Map_Pepsi:
00023002                            	include "_maps\Pepsi.asm"
00023002                            ; ================================================================================
00023002                            ; Sprite Mappings - generated by Flex 2 Wed Jul 11 2018 11:05:27 GMT-0700 (Pacific Daylight Time)
00023002                            ; ================================================================================
00023002                            
00023002                            DATA9CNCSL68IDD:
00023002 0000 0000                  	dc.w $0, DATA9CNCSL68IDD_1-DATA9CNCSL68IDD
00023006 0000 0000                  	dc.w DATA9CNCSL68IDD_2-DATA9CNCSL68IDD, DATA9CNCSL68IDD_3-DATA9CNCSL68IDD
0002300A 0000 0000                  	dc.w DATA9CNCSL68IDD_4-DATA9CNCSL68IDD, DATA9CNCSL68IDD_5-DATA9CNCSL68IDD
0002300E 0000 0000                  	dc.w DATA9CNCSL68IDD_6-DATA9CNCSL68IDD, DATA9CNCSL68IDD_7-DATA9CNCSL68IDD
00023012 0000 0000                  	dc.w DATA9CNCSL68IDD_8-DATA9CNCSL68IDD, DATA9CNCSL68IDD_9-DATA9CNCSL68IDD
00023016 0000 0000                  	dc.w DATA9CNCSL68IDD_A-DATA9CNCSL68IDD, DATA9CNCSL68IDD_B-DATA9CNCSL68IDD
0002301A 0000 0000                  	dc.w DATA9CNCSL68IDD_C-DATA9CNCSL68IDD, DATA9CNCSL68IDD_D-DATA9CNCSL68IDD
0002301E 0000 0000                  	dc.w DATA9CNCSL68IDD_E-DATA9CNCSL68IDD, DATA9CNCSL68IDD_F-DATA9CNCSL68IDD
00023022 0000 0000                  	dc.w DATA9CNCSL68IDD_10-DATA9CNCSL68IDD, DATA9CNCSL68IDD_11-DATA9CNCSL68IDD
00023026 0000 0000                  	dc.w DATA9CNCSL68IDD_12-DATA9CNCSL68IDD, DATA9CNCSL68IDD_13-DATA9CNCSL68IDD
0002302A 0000 0000                  	dc.w DATA9CNCSL68IDD_14-DATA9CNCSL68IDD, DATA9CNCSL68IDD_15-DATA9CNCSL68IDD
0002302E 0000 0000                  	dc.w DATA9CNCSL68IDD_16-DATA9CNCSL68IDD, DATA9CNCSL68IDD_17-DATA9CNCSL68IDD
00023032 0000 0000                  	dc.w DATA9CNCSL68IDD_18-DATA9CNCSL68IDD, DATA9CNCSL68IDD_19-DATA9CNCSL68IDD
00023036 0000 0000                  	dc.w DATA9CNCSL68IDD_1A-DATA9CNCSL68IDD, DATA9CNCSL68IDD_1B-DATA9CNCSL68IDD
0002303A 0000 0000                  	dc.w DATA9CNCSL68IDD_1C-DATA9CNCSL68IDD, DATA9CNCSL68IDD_1D-DATA9CNCSL68IDD
0002303E 0000 0000                  	dc.w DATA9CNCSL68IDD_1E-DATA9CNCSL68IDD, DATA9CNCSL68IDD_1F-DATA9CNCSL68IDD
00023042 0000 0000                  	dc.w DATA9CNCSL68IDD_20-DATA9CNCSL68IDD, DATA9CNCSL68IDD_21-DATA9CNCSL68IDD
00023046 0000 0000                  	dc.w DATA9CNCSL68IDD_22-DATA9CNCSL68IDD, DATA9CNCSL68IDD_23-DATA9CNCSL68IDD
0002304A 0000 0000                  	dc.w DATA9CNCSL68IDD_24-DATA9CNCSL68IDD, DATA9CNCSL68IDD_25-DATA9CNCSL68IDD
0002304E 0000 0000                  	dc.w DATA9CNCSL68IDD_26-DATA9CNCSL68IDD, DATA9CNCSL68IDD_27-DATA9CNCSL68IDD
00023052 0000 0000                  	dc.w DATA9CNCSL68IDD_28-DATA9CNCSL68IDD, DATA9CNCSL68IDD_29-DATA9CNCSL68IDD
00023056 0000 0000                  	dc.w DATA9CNCSL68IDD_2A-DATA9CNCSL68IDD, DATA9CNCSL68IDD_2B-DATA9CNCSL68IDD
0002305A 0000 0000                  	dc.w DATA9CNCSL68IDD_2C-DATA9CNCSL68IDD, DATA9CNCSL68IDD_2D-DATA9CNCSL68IDD
0002305E 0000 0000                  	dc.w DATA9CNCSL68IDD_2E-DATA9CNCSL68IDD, DATA9CNCSL68IDD_2F-DATA9CNCSL68IDD
00023062 0000 0000                  	dc.w DATA9CNCSL68IDD_30-DATA9CNCSL68IDD, DATA9CNCSL68IDD_31-DATA9CNCSL68IDD
00023066 0000 0000                  	dc.w DATA9CNCSL68IDD_32-DATA9CNCSL68IDD, DATA9CNCSL68IDD_33-DATA9CNCSL68IDD
0002306A 0000 0000                  	dc.w DATA9CNCSL68IDD_34-DATA9CNCSL68IDD, DATA9CNCSL68IDD_35-DATA9CNCSL68IDD
0002306E 0000 0000                  	dc.w DATA9CNCSL68IDD_36-DATA9CNCSL68IDD, DATA9CNCSL68IDD_37-DATA9CNCSL68IDD
00023072 0000 0000                  	dc.w DATA9CNCSL68IDD_38-DATA9CNCSL68IDD, DATA9CNCSL68IDD_39-DATA9CNCSL68IDD
00023076 0000 0000                  	dc.w DATA9CNCSL68IDD_3A-DATA9CNCSL68IDD, DATA9CNCSL68IDD_3B-DATA9CNCSL68IDD
0002307A 0000 0000                  	dc.w DATA9CNCSL68IDD_3C-DATA9CNCSL68IDD, DATA9CNCSL68IDD_3D-DATA9CNCSL68IDD
0002307E 0000 0000                  	dc.w DATA9CNCSL68IDD_3E-DATA9CNCSL68IDD, DATA9CNCSL68IDD_3F-DATA9CNCSL68IDD
00023082 0000 0000                  	dc.w DATA9CNCSL68IDD_40-DATA9CNCSL68IDD, DATA9CNCSL68IDD_41-DATA9CNCSL68IDD
00023086 0000 0000                  	dc.w DATA9CNCSL68IDD_42-DATA9CNCSL68IDD, DATA9CNCSL68IDD_43-DATA9CNCSL68IDD
0002308A 0000 0000                  	dc.w DATA9CNCSL68IDD_44-DATA9CNCSL68IDD, DATA9CNCSL68IDD_45-DATA9CNCSL68IDD
0002308E 0000 0000                  	dc.w DATA9CNCSL68IDD_46-DATA9CNCSL68IDD, DATA9CNCSL68IDD_47-DATA9CNCSL68IDD
00023092 0000 0000                  	dc.w DATA9CNCSL68IDD_48-DATA9CNCSL68IDD, DATA9CNCSL68IDD_49-DATA9CNCSL68IDD
00023096 0000 0000                  	dc.w DATA9CNCSL68IDD_4A-DATA9CNCSL68IDD, DATA9CNCSL68IDD_4B-DATA9CNCSL68IDD
0002309A 0000 0000                  	dc.w DATA9CNCSL68IDD_4C-DATA9CNCSL68IDD, DATA9CNCSL68IDD_4D-DATA9CNCSL68IDD
0002309E 0000 0000                  	dc.w DATA9CNCSL68IDD_4E-DATA9CNCSL68IDD, DATA9CNCSL68IDD_4F-DATA9CNCSL68IDD
000230A2 0000 0000                  	dc.w DATA9CNCSL68IDD_50-DATA9CNCSL68IDD, DATA9CNCSL68IDD_51-DATA9CNCSL68IDD
000230A6 0000 0000                  	dc.w DATA9CNCSL68IDD_52-DATA9CNCSL68IDD, DATA9CNCSL68IDD_53-DATA9CNCSL68IDD
000230AA 0000 0000                  	dc.w DATA9CNCSL68IDD_54-DATA9CNCSL68IDD, DATA9CNCSL68IDD_55-DATA9CNCSL68IDD
000230AE 0000 0000                  	dc.w DATA9CNCSL68IDD_56-DATA9CNCSL68IDD, DATA9CNCSL68IDD_57-DATA9CNCSL68IDD
000230B2 07                         DATA9CNCSL68IDD_1: dc.b $7
000230B3 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000230B8 F40D 0003 F0               	dc.b $F4, $D, $0, $3, $F0
000230BD 0408 000B F0               	dc.b $4, $8, $0, $B, $F0
000230C2 0C08 000E F8               	dc.b $C, $8, $0, $E, $F8
000230C7 EC00 0011 08               	dc.b $EC, $0, $0, $11, $8
000230CC 0C00 0012 F0               	dc.b $C, $0, $0, $12, $F0
000230D1 0400 0013 08               	dc.b $4, $0, $0, $13, $8
000230D6 03                         DATA9CNCSL68IDD_2: dc.b $3
000230D7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000230DC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000230E1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000230E6 03                         DATA9CNCSL68IDD_3: dc.b $3
000230E7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000230EC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000230F1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000230F6 03                         DATA9CNCSL68IDD_4: dc.b $3
000230F7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000230FC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023101 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023106 03                         DATA9CNCSL68IDD_5: dc.b $3
00023107 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002310C 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023111 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023116 03                         DATA9CNCSL68IDD_6: dc.b $3
00023117 EA0C 0000 F0               	dc.b $EA, $C, $0, $0, $F0
0002311C F20F 0004 F0               	dc.b $F2, $F, $0, $4, $F0
00023121 F203 0014 10               	dc.b $F2, $3, $0, $14, $10
00023126 02                         DATA9CNCSL68IDD_7: dc.b $2
00023127 FB0E 0000 F1               	dc.b $FB, $E, $0, $0, $F1
0002312C EB0D 000C F1               	dc.b $EB, $D, $0, $C, $F1
00023131 05                         DATA9CNCSL68IDD_8: dc.b $5
00023132 ED09 0000 F1               	dc.b $ED, $9, $0, $0, $F1
00023137 FD0A 0006 F1               	dc.b $FD, $A, $0, $6, $F1
0002313C 0D00 000F 09               	dc.b $D, $0, $0, $F, $9
00023141 ED02 0010 09               	dc.b $ED, $2, $0, $10, $9
00023146 0500 0013 09               	dc.b $5, $0, $0, $13, $9
0002314B 04                         DATA9CNCSL68IDD_9: dc.b $4
0002314C FC09 0000 F1               	dc.b $FC, $9, $0, $0, $F1
00023151 0C0C 0006 F1               	dc.b $C, $C, $0, $6, $F1
00023156 EC03 000A 09               	dc.b $EC, $3, $0, $A, $9
0002315B EC09 000E F1               	dc.b $EC, $9, $0, $E, $F1
00023160 04                         DATA9CNCSL68IDD_A: dc.b $4
00023161 FC0E 0000 F1               	dc.b $FC, $E, $0, $0, $F1
00023166 EC01 000C 09               	dc.b $EC, $1, $0, $C, $9
0002316B EC09 000E F1               	dc.b $EC, $9, $0, $E, $F1
00023170 0401 0014 11               	dc.b $4, $1, $0, $14, $11
00023175 06                         DATA9CNCSL68IDD_B: dc.b $6
00023176 FB0C 0000 F1               	dc.b $FB, $C, $0, $0, $F1
0002317B 0309 0004 01               	dc.b $3, $9, $0, $4, $1
00023180 EB0D 000A F1               	dc.b $EB, $D, $0, $A, $F1
00023185 0308 0012 E9               	dc.b $3, $8, $0, $12, $E9
0002318A 0B00 0015 F9               	dc.b $B, $0, $0, $15, $F9
0002318F 0B00 0016 F1               	dc.b $B, $0, $0, $16, $F1
00023194 05                         DATA9CNCSL68IDD_C: dc.b $5
00023195 E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
0002319A E901 0006 04               	dc.b $E9, $1, $0, $6, $4
0002319F F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
000231A4 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
000231A9 F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
000231AE 05                         DATA9CNCSL68IDD_D: dc.b $5
000231AF E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
000231B4 E901 0006 04               	dc.b $E9, $1, $0, $6, $4
000231B9 F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
000231BE 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
000231C3 F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
000231C8 05                         DATA9CNCSL68IDD_E: dc.b $5
000231C9 E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
000231CE E901 0006 04               	dc.b $E9, $1, $0, $6, $4
000231D3 F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
000231D8 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
000231DD F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
000231E2 05                         DATA9CNCSL68IDD_F: dc.b $5
000231E3 E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
000231E8 E901 0006 04               	dc.b $E9, $1, $0, $6, $4
000231ED F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
000231F2 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
000231F7 F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
000231FC 05                         DATA9CNCSL68IDD_10: dc.b $5
000231FD E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
00023202 E901 0006 04               	dc.b $E9, $1, $0, $6, $4
00023207 F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
0002320C 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
00023211 F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
00023216 05                         DATA9CNCSL68IDD_11: dc.b $5
00023217 E909 0000 EC               	dc.b $E9, $9, $0, $0, $EC
0002321C E901 0006 04               	dc.b $E9, $1, $0, $6, $4
00023221 F90D 0008 F4               	dc.b $F9, $D, $0, $8, $F4
00023226 0908 0010 FC               	dc.b $9, $8, $0, $10, $FC
0002322B F900 0013 EC               	dc.b $F9, $0, $0, $13, $EC
00023230 04                         DATA9CNCSL68IDD_12: dc.b $4
00023231 F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
00023236 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
0002323B 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
00023240 F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
00023245 04                         DATA9CNCSL68IDD_13: dc.b $4
00023246 F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
0002324B 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
00023250 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
00023255 F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
0002325A 04                         DATA9CNCSL68IDD_14: dc.b $4
0002325B F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
00023260 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
00023265 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
0002326A F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
0002326F 04                         DATA9CNCSL68IDD_15: dc.b $4
00023270 F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
00023275 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
0002327A 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
0002327F F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
00023284 04                         DATA9CNCSL68IDD_16: dc.b $4
00023285 F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
0002328A 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
0002328F 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
00023294 F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
00023299 04                         DATA9CNCSL68IDD_17: dc.b $4
0002329A F409 0000 FB               	dc.b $F4, $9, $0, $0, $FB
0002329F 0C04 0006 EB               	dc.b $C, $4, $0, $6, $EB
000232A4 0409 0008 FB               	dc.b $4, $9, $0, $8, $FB
000232A9 F406 000E EB               	dc.b $F4, $6, $0, $E, $EB
000232AE 05                         DATA9CNCSL68IDD_18: dc.b $5
000232AF FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000232B4 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000232B9 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000232BE 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000232C3 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
000232C8 05                         DATA9CNCSL68IDD_19: dc.b $5
000232C9 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000232CE F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000232D3 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000232D8 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000232DD 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
000232E2 05                         DATA9CNCSL68IDD_1A: dc.b $5
000232E3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000232E8 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000232ED EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000232F2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000232F7 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
000232FC 05                         DATA9CNCSL68IDD_1B: dc.b $5
000232FD FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023302 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023307 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002330C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023311 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
00023316 05                         DATA9CNCSL68IDD_1C: dc.b $5
00023317 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002331C F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023321 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023326 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
0002332B 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
00023330 05                         DATA9CNCSL68IDD_1D: dc.b $5
00023331 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023336 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002333B EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023340 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023345 0C04 0013 FC               	dc.b $C, $4, $0, $13, $FC
0002334A 06                         DATA9CNCSL68IDD_1E: dc.b $6
0002334B EE09 0000 FC               	dc.b $EE, $9, $0, $0, $FC
00023350 FE0E 0006 F4               	dc.b $FE, $E, $0, $6, $F4
00023355 F600 0012 F4               	dc.b $F6, $0, $0, $12, $F4
0002335A F603 0013 EC               	dc.b $F6, $3, $0, $13, $EC
0002335F F603 0017 E4               	dc.b $F6, $3, $0, $17, $E4
00023364 EE08 001B E4               	dc.b $EE, $8, $0, $1B, $E4
00023369 04                         DATA9CNCSL68IDD_1F: dc.b $4
0002336A FE0E 0000 F4               	dc.b $FE, $E, $0, $0, $F4
0002336F EE0D 000C F4               	dc.b $EE, $D, $0, $C, $F4
00023374 0E04 0014 E4               	dc.b $E, $4, $0, $14, $E4
00023379 EE07 0016 E4               	dc.b $EE, $7, $0, $16, $E4
0002337E 05                         DATA9CNCSL68IDD_20: dc.b $5
0002337F FE0E 0000 F4               	dc.b $FE, $E, $0, $0, $F4
00023384 EE09 000C FC               	dc.b $EE, $9, $0, $C, $FC
00023389 EE01 0012 F4               	dc.b $EE, $1, $0, $12, $F4
0002338E EE07 0014 E4               	dc.b $EE, $7, $0, $14, $E4
00023393 0E04 001C E4               	dc.b $E, $4, $0, $1C, $E4
00023398 06                         DATA9CNCSL68IDD_21: dc.b $6
00023399 FE0E 0000 F4               	dc.b $FE, $E, $0, $0, $F4
0002339E F60C 000C F4               	dc.b $F6, $C, $0, $C, $F4
000233A3 EE08 0010 FC               	dc.b $EE, $8, $0, $10, $FC
000233A8 EE00 0013 F4               	dc.b $EE, $0, $0, $13, $F4
000233AD EE04 0014 E4               	dc.b $EE, $4, $0, $14, $E4
000233B2 F607 0016 E4               	dc.b $F6, $7, $0, $16, $E4
000233B7 04                         DATA9CNCSL68IDD_22: dc.b $4
000233B8 EA09 0000 EE               	dc.b $EA, $9, $0, $0, $EE
000233BD EA01 0006 06               	dc.b $EA, $1, $0, $6, $6
000233C2 FA0E 0008 F6               	dc.b $FA, $E, $0, $8, $F6
000233C7 FA00 0014 EE               	dc.b $FA, $0, $0, $14, $EE
000233CC 04                         DATA9CNCSL68IDD_23: dc.b $4
000233CD EA09 0000 EE               	dc.b $EA, $9, $0, $0, $EE
000233D2 EA01 0006 06               	dc.b $EA, $1, $0, $6, $6
000233D7 FA0E 0008 F6               	dc.b $FA, $E, $0, $8, $F6
000233DC FA00 0014 EE               	dc.b $FA, $0, $0, $14, $EE
000233E1 04                         DATA9CNCSL68IDD_24: dc.b $4
000233E2 EA09 0000 EE               	dc.b $EA, $9, $0, $0, $EE
000233E7 EA01 0006 06               	dc.b $EA, $1, $0, $6, $6
000233EC FA0E 0008 F6               	dc.b $FA, $E, $0, $8, $F6
000233F1 FA00 0014 EE               	dc.b $FA, $0, $0, $14, $EE
000233F6 04                         DATA9CNCSL68IDD_25: dc.b $4
000233F7 EA09 0000 EE               	dc.b $EA, $9, $0, $0, $EE
000233FC EA01 0006 06               	dc.b $EA, $1, $0, $6, $6
00023401 FA0E 0008 F6               	dc.b $FA, $E, $0, $8, $F6
00023406 FA00 0014 EE               	dc.b $FA, $0, $0, $14, $EE
0002340B 04                         DATA9CNCSL68IDD_26: dc.b $4
0002340C EC06 0000 EE               	dc.b $EC, $6, $0, $0, $EE
00023411 EC0B 0006 FE               	dc.b $EC, $B, $0, $6, $FE
00023416 0400 0012 F6               	dc.b $4, $0, $0, $12, $F6
0002341B 0C0C 0013 F6               	dc.b $C, $C, $0, $13, $F6
00023420 04                         DATA9CNCSL68IDD_27: dc.b $4
00023421 EC06 0000 EE               	dc.b $EC, $6, $0, $0, $EE
00023426 EC0B 0006 FE               	dc.b $EC, $B, $0, $6, $FE
0002342B 0400 0012 F6               	dc.b $4, $0, $0, $12, $F6
00023430 0C0C 0013 F6               	dc.b $C, $C, $0, $13, $F6
00023435 04                         DATA9CNCSL68IDD_28: dc.b $4
00023436 EC06 0000 EE               	dc.b $EC, $6, $0, $0, $EE
0002343B EC0B 0006 FE               	dc.b $EC, $B, $0, $6, $FE
00023440 0400 0012 F6               	dc.b $4, $0, $0, $12, $F6
00023445 0C0C 0013 F6               	dc.b $C, $C, $0, $13, $F6
0002344A 04                         DATA9CNCSL68IDD_29: dc.b $4
0002344B EC06 0000 EE               	dc.b $EC, $6, $0, $0, $EE
00023450 EC0B 0006 FE               	dc.b $EC, $B, $0, $6, $FE
00023455 0400 0012 F6               	dc.b $4, $0, $0, $12, $F6
0002345A 0C0C 0013 F6               	dc.b $C, $C, $0, $13, $F6
0002345F 02                         DATA9CNCSL68IDD_2A: dc.b $2
00023460 F207 0000 EA               	dc.b $F2, $7, $0, $0, $EA
00023465 EA0B 0008 FA               	dc.b $EA, $B, $0, $8, $FA
0002346A 02                         DATA9CNCSL68IDD_2B: dc.b $2
0002346B F207 0000 EA               	dc.b $F2, $7, $0, $0, $EA
00023470 EA0B 0008 FA               	dc.b $EA, $B, $0, $8, $FA
00023475 02                         DATA9CNCSL68IDD_2C: dc.b $2
00023476 F207 0000 EA               	dc.b $F2, $7, $0, $0, $EA
0002347B EA0B 0008 FA               	dc.b $EA, $B, $0, $8, $FA
00023480 02                         DATA9CNCSL68IDD_2D: dc.b $2
00023481 F207 0000 EA               	dc.b $F2, $7, $0, $0, $EA
00023486 EA0B 0008 FA               	dc.b $EA, $B, $0, $8, $FA
0002348B 01                         DATA9CNCSL68IDD_2E: dc.b $1
0002348C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023491 01                         DATA9CNCSL68IDD_2F: dc.b $1
00023492 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023497 01                         DATA9CNCSL68IDD_30: dc.b $1
00023498 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002349D 01                         DATA9CNCSL68IDD_31: dc.b $1
0002349E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000234A3 01                         DATA9CNCSL68IDD_32: dc.b $1
000234A4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000234A9 02                         DATA9CNCSL68IDD_33: dc.b $2
000234AA F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000234AF F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000234B4 01                         DATA9CNCSL68IDD_34: dc.b $1
000234B5 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000234BA 02                         DATA9CNCSL68IDD_35: dc.b $2
000234BB EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000234C0 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000234C5 01                         DATA9CNCSL68IDD_36: dc.b $1
000234C6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000234CB 02                         DATA9CNCSL68IDD_37: dc.b $2
000234CC ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000234D1 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000234D6 04                         DATA9CNCSL68IDD_38: dc.b $4
000234D7 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000234DC FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000234E1 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000234E6 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000234EB 04                         DATA9CNCSL68IDD_39: dc.b $4
000234EC F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
000234F1 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
000234F6 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000234FB 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00023500 03                         DATA9CNCSL68IDD_3A: dc.b $3
00023501 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00023506 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
0002350B F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00023510 03                         DATA9CNCSL68IDD_3B: dc.b $3
00023511 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00023516 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
0002351B 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00023520 03                         DATA9CNCSL68IDD_3C: dc.b $3
00023521 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00023526 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002352B 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00023530 02                         DATA9CNCSL68IDD_3D: dc.b $2
00023531 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00023536 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002353B 03                         DATA9CNCSL68IDD_3E: dc.b $3
0002353C F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00023541 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00023546 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002354B 03                         DATA9CNCSL68IDD_3F: dc.b $3
0002354C F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00023551 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00023556 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002355B 03                         DATA9CNCSL68IDD_40: dc.b $3
0002355C E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00023561 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00023566 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002356B 04                         DATA9CNCSL68IDD_41: dc.b $4
0002356C F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00023571 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00023576 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002357B F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00023580 04                         DATA9CNCSL68IDD_42: dc.b $4
00023581 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00023586 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002358B F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00023590 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00023595 05                         DATA9CNCSL68IDD_43: dc.b $5
00023596 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002359B F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000235A0 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000235A5 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000235AA 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000235AF 05                         DATA9CNCSL68IDD_44: dc.b $5
000235B0 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000235B5 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000235BA 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000235BF 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000235C4 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000235C9 02                         DATA9CNCSL68IDD_45: dc.b $2
000235CA ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000235CF 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000235D4 03                         DATA9CNCSL68IDD_46: dc.b $3
000235D5 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000235DA 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000235DF 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000235E4 02                         DATA9CNCSL68IDD_47: dc.b $2
000235E5 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000235EA 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000235EF 03                         DATA9CNCSL68IDD_48: dc.b $3
000235F0 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000235F5 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000235FA 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000235FF 02                         DATA9CNCSL68IDD_49: dc.b $2
00023600 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023605 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002360A 03                         DATA9CNCSL68IDD_4A: dc.b $3
0002360B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023610 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00023615 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002361A 03                         DATA9CNCSL68IDD_4B: dc.b $3
0002361B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023620 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023625 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002362A 05                         DATA9CNCSL68IDD_4C: dc.b $5
0002362B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023630 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023635 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002363A 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002363F 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00023644 05                         DATA9CNCSL68IDD_4D: dc.b $5
00023645 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002364A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002364F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00023654 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00023659 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002365E 02                         DATA9CNCSL68IDD_4E: dc.b $2
0002365F EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00023664 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00023669 03                         DATA9CNCSL68IDD_4F: dc.b $3
0002366A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002366F F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00023674 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00023679 01                         DATA9CNCSL68IDD_50: dc.b $1
0002367A F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002367F 01                         DATA9CNCSL68IDD_51: dc.b $1
00023680 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00023685 01                         DATA9CNCSL68IDD_52: dc.b $1
00023686 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002368B 03                         DATA9CNCSL68IDD_53: dc.b $3
0002368C F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00023691 FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00023696 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
0002369B 03                         DATA9CNCSL68IDD_54: dc.b $3
0002369C F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000236A1 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000236A6 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000236AB 03                         DATA9CNCSL68IDD_55: dc.b $3
000236AC F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000236B1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000236B6 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000236BB 03                         DATA9CNCSL68IDD_56: dc.b $3
000236BC EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000236C1 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000236C6 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000236CB 02                         DATA9CNCSL68IDD_57: dc.b $2
000236CC F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000236D1 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000236D6                            	even
000236D6                            	even
000236D6                            ; ---------------------------------------------------------------------------
000236D6                            ; Sprite mappings - Pepsi
000236D6                            ; ---------------------------------------------------------------------------
000236D6                            Map_Pepsiman:
000236D6                            	include "_maps\Pepsiman.asm"
000236D6                            ; ================================================================================
000236D6                            ; Sprite Mappings - generated by Flex 2 Fri Sep 07 2018 20:27:38 GMT-0700 (Pacific Daylight Time)
000236D6                            ; ================================================================================
000236D6                            
000236D6                            DATAHQKXO4QZ259:
000236D6 0000 0000                  	dc.w $0, DATAHQKXO4QZ259_1-DATAHQKXO4QZ259
000236DA 0000 0000                  	dc.w $0, $0
000236DE 0000 0000                  	dc.w $0, $0
000236E2 0000 0000                  	dc.w DATAHQKXO4QZ259_6-DATAHQKXO4QZ259, DATAHQKXO4QZ259_7-DATAHQKXO4QZ259
000236E6 0000 0000                  	dc.w DATAHQKXO4QZ259_8-DATAHQKXO4QZ259, DATAHQKXO4QZ259_9-DATAHQKXO4QZ259
000236EA 0000 0000                  	dc.w DATAHQKXO4QZ259_A-DATAHQKXO4QZ259, DATAHQKXO4QZ259_B-DATAHQKXO4QZ259
000236EE 0000 0000                  	dc.w DATAHQKXO4QZ259_C-DATAHQKXO4QZ259, DATAHQKXO4QZ259_D-DATAHQKXO4QZ259
000236F2 0000 0000                  	dc.w DATAHQKXO4QZ259_E-DATAHQKXO4QZ259, DATAHQKXO4QZ259_F-DATAHQKXO4QZ259
000236F6 0000 0000                  	dc.w DATAHQKXO4QZ259_10-DATAHQKXO4QZ259, DATAHQKXO4QZ259_11-DATAHQKXO4QZ259
000236FA 0000 0000                  	dc.w DATAHQKXO4QZ259_12-DATAHQKXO4QZ259, DATAHQKXO4QZ259_13-DATAHQKXO4QZ259
000236FE 0000 0000                  	dc.w DATAHQKXO4QZ259_14-DATAHQKXO4QZ259, DATAHQKXO4QZ259_15-DATAHQKXO4QZ259
00023702 0000 0000                  	dc.w DATAHQKXO4QZ259_16-DATAHQKXO4QZ259, DATAHQKXO4QZ259_17-DATAHQKXO4QZ259
00023706 0000 0000                  	dc.w DATAHQKXO4QZ259_18-DATAHQKXO4QZ259, DATAHQKXO4QZ259_19-DATAHQKXO4QZ259
0002370A 0000 0000                  	dc.w DATAHQKXO4QZ259_1A-DATAHQKXO4QZ259, DATAHQKXO4QZ259_1B-DATAHQKXO4QZ259
0002370E 0000 0000                  	dc.w DATAHQKXO4QZ259_1C-DATAHQKXO4QZ259, DATAHQKXO4QZ259_1D-DATAHQKXO4QZ259
00023712 0000 0000                  	dc.w DATAHQKXO4QZ259_1E-DATAHQKXO4QZ259, DATAHQKXO4QZ259_1F-DATAHQKXO4QZ259
00023716 0000 0000                  	dc.w DATAHQKXO4QZ259_20-DATAHQKXO4QZ259, DATAHQKXO4QZ259_21-DATAHQKXO4QZ259
0002371A 0000 0000                  	dc.w DATAHQKXO4QZ259_22-DATAHQKXO4QZ259, DATAHQKXO4QZ259_23-DATAHQKXO4QZ259
0002371E 0000 0000                  	dc.w DATAHQKXO4QZ259_24-DATAHQKXO4QZ259, DATAHQKXO4QZ259_25-DATAHQKXO4QZ259
00023722 0000 0000                  	dc.w DATAHQKXO4QZ259_26-DATAHQKXO4QZ259, DATAHQKXO4QZ259_27-DATAHQKXO4QZ259
00023726 0000 0000                  	dc.w DATAHQKXO4QZ259_28-DATAHQKXO4QZ259, DATAHQKXO4QZ259_29-DATAHQKXO4QZ259
0002372A 0000 0000                  	dc.w DATAHQKXO4QZ259_2A-DATAHQKXO4QZ259, DATAHQKXO4QZ259_2B-DATAHQKXO4QZ259
0002372E 0000 0000                  	dc.w DATAHQKXO4QZ259_2C-DATAHQKXO4QZ259, DATAHQKXO4QZ259_2D-DATAHQKXO4QZ259
00023732 0000 0000                  	dc.w DATAHQKXO4QZ259_2E-DATAHQKXO4QZ259, DATAHQKXO4QZ259_2F-DATAHQKXO4QZ259
00023736 0000 0000                  	dc.w DATAHQKXO4QZ259_30-DATAHQKXO4QZ259, DATAHQKXO4QZ259_31-DATAHQKXO4QZ259
0002373A 0000 0000                  	dc.w DATAHQKXO4QZ259_32-DATAHQKXO4QZ259, $0
0002373E 0000 0000                  	dc.w $0, $0
00023742 0000 0000                  	dc.w $0, $0
00023746 0000 0000                  	dc.w DATAHQKXO4QZ259_38-DATAHQKXO4QZ259, $0
0002374A 0000 0000                  	dc.w $0, $0
0002374E 0000 0000                  	dc.w $0, $0
00023752 0000 0000                  	dc.w $0, $0
00023756 0000 0000                  	dc.w $0, $0
0002375A 0000 0000                  	dc.w $0, $0
0002375E 0000 0000                  	dc.w $0, $0
00023762 0000 0000                  	dc.w $0, $0
00023766 0000 0000                  	dc.w $0, $0
0002376A 0000 0000                  	dc.w $0, $0
0002376E 0000 0000                  	dc.w DATAHQKXO4QZ259_4C-DATAHQKXO4QZ259, $0
00023772 0000 0000                  	dc.w $0, $0
00023776 0000 0000                  	dc.w $0, $0
0002377A 0000 0000                  	dc.w $0, $0
0002377E 0000 0000                  	dc.w $0, DATAHQKXO4QZ259_55-DATAHQKXO4QZ259
00023782 0000 0000                  	dc.w $0, $0
00023786 08                         DATAHQKXO4QZ259_1: dc.b $8
00023787 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002378C F40D 0003 F0               	dc.b $F4, $D, $0, $3, $F0
00023791 0408 000B F0               	dc.b $4, $8, $0, $B, $F0
00023796 0C08 000E F8               	dc.b $C, $8, $0, $E, $F8
0002379B EC00 0011 08               	dc.b $EC, $0, $0, $11, $8
000237A0 0C00 0012 F0               	dc.b $C, $0, $0, $12, $F0
000237A5 0400 0013 08               	dc.b $4, $0, $0, $13, $8
000237AA CC0F 0014 F0               	dc.b $CC, $F, $0, $14, $F0
000237AF 09                         DATAHQKXO4QZ259_6: dc.b $9
000237B0 F20F 0000 FC               	dc.b $F2, $F, $0, $0, $FC
000237B5 D203 0010 0C               	dc.b $D2, $3, $0, $10, $C
000237BA E201 0014 14               	dc.b $E2, $1, $0, $14, $14
000237BF D203 0016 04               	dc.b $D2, $3, $0, $16, $4
000237C4 DA02 001A FC               	dc.b $DA, $2, $0, $1A, $FC
000237C9 E201 001D E4               	dc.b $E2, $1, $0, $1D, $E4
000237CE DA05 001F EC               	dc.b $DA, $5, $0, $1F, $EC
000237D3 EA00 0023 EC               	dc.b $EA, $0, $0, $23, $EC
000237D8 F20E 0024 DC               	dc.b $F2, $E, $0, $24, $DC
000237DD 08                         DATAHQKXO4QZ259_7: dc.b $8
000237DE FB0E 0000 F3               	dc.b $FB, $E, $0, $0, $F3
000237E3 EB0D 000C F3               	dc.b $EB, $D, $0, $C, $F3
000237E8 F303 0014 EB               	dc.b $F3, $3, $0, $14, $EB
000237ED E301 0018 EB               	dc.b $E3, $1, $0, $18, $EB
000237F2 E30C 001A F3               	dc.b $E3, $C, $0, $1A, $F3
000237F7 FB00 001E 13               	dc.b $FB, $0, $0, $1E, $13
000237FC 0300 001F E3               	dc.b $3, $0, $0, $1F, $E3
00023801 D305 0020 03               	dc.b $D3, $5, $0, $20, $3
00023806 08                         DATAHQKXO4QZ259_8: dc.b $8
00023807 ED09 0000 FA               	dc.b $ED, $9, $0, $0, $FA
0002380C FD0A 0006 FA               	dc.b $FD, $A, $0, $6, $FA
00023811 0D00 000F 12               	dc.b $D, $0, $0, $F, $12
00023816 D502 0010 0A               	dc.b $D5, $2, $0, $10, $A
0002381B 0D00 0013 F2               	dc.b $D, $0, $0, $13, $F2
00023820 D502 0014 02               	dc.b $D5, $2, $0, $14, $2
00023825 E500 0017 FA               	dc.b $E5, $0, $0, $17, $FA
0002382A ED01 0018 F2               	dc.b $ED, $1, $0, $18, $F2
0002382F 0B                         DATAHQKXO4QZ259_9: dc.b $B
00023830 FB09 0000 EA               	dc.b $FB, $9, $0, $0, $EA
00023835 0B0C 0006 EA               	dc.b $B, $C, $0, $6, $EA
0002383A EB03 000A 02               	dc.b $EB, $3, $0, $A, $2
0002383F EB09 000E EA               	dc.b $EB, $9, $0, $E, $EA
00023844 EB03 0014 E2               	dc.b $EB, $3, $0, $14, $E2
00023849 F303 0018 DA               	dc.b $F3, $3, $0, $18, $DA
0002384E E303 001C 12               	dc.b $E3, $3, $0, $1C, $12
00023853 0301 0020 12               	dc.b $3, $1, $0, $20, $12
00023858 DB09 0022 EA               	dc.b $DB, $9, $0, $22, $EA
0002385D D306 0028 02               	dc.b $D3, $6, $0, $28, $2
00023862 EB03 002E 0A               	dc.b $EB, $3, $0, $2E, $A
00023867 08                         DATAHQKXO4QZ259_A: dc.b $8
00023868 ED09 0000 FA               	dc.b $ED, $9, $0, $0, $FA
0002386D FD0A 0006 FA               	dc.b $FD, $A, $0, $6, $FA
00023872 0D00 000F 12               	dc.b $D, $0, $0, $F, $12
00023877 D502 0010 0A               	dc.b $D5, $2, $0, $10, $A
0002387C 0D00 0013 F2               	dc.b $D, $0, $0, $13, $F2
00023881 D502 0014 02               	dc.b $D5, $2, $0, $14, $2
00023886 E500 0017 FA               	dc.b $E5, $0, $0, $17, $FA
0002388B ED01 0018 F2               	dc.b $ED, $1, $0, $18, $F2
00023890 08                         DATAHQKXO4QZ259_B: dc.b $8
00023891 FB0E 0000 F3               	dc.b $FB, $E, $0, $0, $F3
00023896 EB0D 000C F3               	dc.b $EB, $D, $0, $C, $F3
0002389B F303 0014 EB               	dc.b $F3, $3, $0, $14, $EB
000238A0 E301 0018 EB               	dc.b $E3, $1, $0, $18, $EB
000238A5 E30C 001A F3               	dc.b $E3, $C, $0, $1A, $F3
000238AA FB00 001E 13               	dc.b $FB, $0, $0, $1E, $13
000238AF 0300 001F E3               	dc.b $3, $0, $0, $1F, $E3
000238B4 D305 0020 03               	dc.b $D3, $5, $0, $20, $3
000238B9 0D                         DATAHQKXO4QZ259_C: dc.b $D
000238BA DD09 0000 F8               	dc.b $DD, $9, $0, $0, $F8
000238BF DD01 0006 10               	dc.b $DD, $1, $0, $6, $10
000238C4 ED0D 0008 00               	dc.b $ED, $D, $0, $8, $0
000238C9 FD08 0010 08               	dc.b $FD, $8, $0, $10, $8
000238CE ED00 0013 F8               	dc.b $ED, $0, $0, $13, $F8
000238D3 FD04 0014 F8               	dc.b $FD, $4, $0, $14, $F8
000238D8 F500 0016 F8               	dc.b $F5, $0, $0, $16, $F8
000238DD D508 0017 E8               	dc.b $D5, $8, $0, $17, $E8
000238E2 DD07 001A E8               	dc.b $DD, $7, $0, $1A, $E8
000238E7 E503 0022 E0               	dc.b $E5, $3, $0, $22, $E0
000238EC FD04 0026 E8               	dc.b $FD, $4, $0, $26, $E8
000238F1 0509 0028 E8               	dc.b $5, $9, $0, $28, $E8
000238F6 1504 002E E8               	dc.b $15, $4, $0, $2E, $E8
000238FB 07                         DATAHQKXO4QZ259_D: dc.b $7
000238FC F007 0000 05               	dc.b $F0, $7, $0, $0, $5
00023901 D004 0008 ED               	dc.b $D0, $4, $0, $8, $ED
00023906 F801 000A 15               	dc.b $F8, $1, $0, $A, $15
0002390B 0000 000C FD               	dc.b $0, $0, $0, $C, $FD
00023910 E00B 000D ED               	dc.b $E0, $B, $0, $D, $ED
00023915 D808 0019 ED               	dc.b $D8, $8, $0, $19, $ED
0002391A E804 001C 05               	dc.b $E8, $4, $0, $1C, $5
0002391F 0D                         DATAHQKXO4QZ259_E: dc.b $D
00023920 DD09 0000 F8               	dc.b $DD, $9, $0, $0, $F8
00023925 DD01 0006 10               	dc.b $DD, $1, $0, $6, $10
0002392A ED0D 0008 00               	dc.b $ED, $D, $0, $8, $0
0002392F FD08 0010 08               	dc.b $FD, $8, $0, $10, $8
00023934 ED00 0013 F8               	dc.b $ED, $0, $0, $13, $F8
00023939 FD04 0014 F8               	dc.b $FD, $4, $0, $14, $F8
0002393E F500 0016 F8               	dc.b $F5, $0, $0, $16, $F8
00023943 D508 0017 E8               	dc.b $D5, $8, $0, $17, $E8
00023948 DD07 001A E8               	dc.b $DD, $7, $0, $1A, $E8
0002394D E503 0022 E0               	dc.b $E5, $3, $0, $22, $E0
00023952 FD04 0026 E8               	dc.b $FD, $4, $0, $26, $E8
00023957 0509 0028 E8               	dc.b $5, $9, $0, $28, $E8
0002395C 1504 002E E8               	dc.b $15, $4, $0, $2E, $E8
00023961 07                         DATAHQKXO4QZ259_F: dc.b $7
00023962 F007 0000 05               	dc.b $F0, $7, $0, $0, $5
00023967 D004 0008 ED               	dc.b $D0, $4, $0, $8, $ED
0002396C F801 000A 15               	dc.b $F8, $1, $0, $A, $15
00023971 0000 000C FD               	dc.b $0, $0, $0, $C, $FD
00023976 E00B 000D ED               	dc.b $E0, $B, $0, $D, $ED
0002397B D808 0019 ED               	dc.b $D8, $8, $0, $19, $ED
00023980 E804 001C 05               	dc.b $E8, $4, $0, $1C, $5
00023985 0D                         DATAHQKXO4QZ259_10: dc.b $D
00023986 DD09 0000 F8               	dc.b $DD, $9, $0, $0, $F8
0002398B DD01 0006 10               	dc.b $DD, $1, $0, $6, $10
00023990 ED0D 0008 00               	dc.b $ED, $D, $0, $8, $0
00023995 FD08 0010 08               	dc.b $FD, $8, $0, $10, $8
0002399A ED00 0013 F8               	dc.b $ED, $0, $0, $13, $F8
0002399F FD04 0014 F8               	dc.b $FD, $4, $0, $14, $F8
000239A4 F500 0016 F8               	dc.b $F5, $0, $0, $16, $F8
000239A9 D508 0017 E8               	dc.b $D5, $8, $0, $17, $E8
000239AE DD07 001A E8               	dc.b $DD, $7, $0, $1A, $E8
000239B3 E503 0022 E0               	dc.b $E5, $3, $0, $22, $E0
000239B8 FD04 0026 E8               	dc.b $FD, $4, $0, $26, $E8
000239BD 0509 0028 E8               	dc.b $5, $9, $0, $28, $E8
000239C2 1504 002E E8               	dc.b $15, $4, $0, $2E, $E8
000239C7 07                         DATAHQKXO4QZ259_11: dc.b $7
000239C8 F007 0000 05               	dc.b $F0, $7, $0, $0, $5
000239CD D004 0008 ED               	dc.b $D0, $4, $0, $8, $ED
000239D2 F801 000A 15               	dc.b $F8, $1, $0, $A, $15
000239D7 0000 000C FD               	dc.b $0, $0, $0, $C, $FD
000239DC E00B 000D ED               	dc.b $E0, $B, $0, $D, $ED
000239E1 D808 0019 ED               	dc.b $D8, $8, $0, $19, $ED
000239E6 E804 001C 05               	dc.b $E8, $4, $0, $1C, $5
000239EB 0C                         DATAHQKXO4QZ259_12: dc.b $C
000239EC E309 0000 E8               	dc.b $E3, $9, $0, $0, $E8
000239F1 FB04 0006 D8               	dc.b $FB, $4, $0, $6, $D8
000239F6 F309 0008 E8               	dc.b $F3, $9, $0, $8, $E8
000239FB E306 000E D8               	dc.b $E3, $6, $0, $E, $D8
00023A00 EB01 0014 D0               	dc.b $EB, $1, $0, $14, $D0
00023A05 030D 0016 D8               	dc.b $3, $D, $0, $16, $D8
00023A0A 0305 001E F8               	dc.b $3, $5, $0, $1E, $F8
00023A0F 130C 0022 E0               	dc.b $13, $C, $0, $22, $E0
00023A14 1301 0026 00               	dc.b $13, $1, $0, $26, $0
00023A19 1B04 0028 F0               	dc.b $1B, $4, $0, $28, $F0
00023A1E EB05 002A 00               	dc.b $EB, $5, $0, $2A, $0
00023A23 E300 002E 08               	dc.b $E3, $0, $0, $2E, $8
00023A28 07                         DATAHQKXO4QZ259_13: dc.b $7
00023A29 EC0D 0000 D0               	dc.b $EC, $D, $0, $0, $D0
00023A2E EC0D 0008 F0               	dc.b $EC, $D, $0, $8, $F0
00023A33 0400 0010 08               	dc.b $4, $0, $0, $10, $8
00023A38 FC0C 0011 E0               	dc.b $FC, $C, $0, $11, $E0
00023A3D 0404 0015 E8               	dc.b $4, $4, $0, $15, $E8
00023A42 FC04 0017 00               	dc.b $FC, $4, $0, $17, $0
00023A47 E400 0019 08               	dc.b $E4, $0, $0, $19, $8
00023A4C 0C                         DATAHQKXO4QZ259_14: dc.b $C
00023A4D E309 0000 E8               	dc.b $E3, $9, $0, $0, $E8
00023A52 FB04 0006 D8               	dc.b $FB, $4, $0, $6, $D8
00023A57 F309 0008 E8               	dc.b $F3, $9, $0, $8, $E8
00023A5C E306 000E D8               	dc.b $E3, $6, $0, $E, $D8
00023A61 EB01 0014 D0               	dc.b $EB, $1, $0, $14, $D0
00023A66 030D 0016 D8               	dc.b $3, $D, $0, $16, $D8
00023A6B 0305 001E F8               	dc.b $3, $5, $0, $1E, $F8
00023A70 130C 0022 E0               	dc.b $13, $C, $0, $22, $E0
00023A75 1301 0026 00               	dc.b $13, $1, $0, $26, $0
00023A7A 1B04 0028 F0               	dc.b $1B, $4, $0, $28, $F0
00023A7F EB05 002A 00               	dc.b $EB, $5, $0, $2A, $0
00023A84 E300 002E 08               	dc.b $E3, $0, $0, $2E, $8
00023A89 07                         DATAHQKXO4QZ259_15: dc.b $7
00023A8A EC0D 0000 D0               	dc.b $EC, $D, $0, $0, $D0
00023A8F EC0D 0008 F0               	dc.b $EC, $D, $0, $8, $F0
00023A94 0400 0010 08               	dc.b $4, $0, $0, $10, $8
00023A99 FC0C 0011 E0               	dc.b $FC, $C, $0, $11, $E0
00023A9E 0404 0015 E8               	dc.b $4, $4, $0, $15, $E8
00023AA3 FC04 0017 00               	dc.b $FC, $4, $0, $17, $0
00023AA8 E400 0019 08               	dc.b $E4, $0, $0, $19, $8
00023AAD 0C                         DATAHQKXO4QZ259_16: dc.b $C
00023AAE E309 0000 E8               	dc.b $E3, $9, $0, $0, $E8
00023AB3 FB04 0006 D8               	dc.b $FB, $4, $0, $6, $D8
00023AB8 F309 0008 E8               	dc.b $F3, $9, $0, $8, $E8
00023ABD E306 000E D8               	dc.b $E3, $6, $0, $E, $D8
00023AC2 EB01 0014 D0               	dc.b $EB, $1, $0, $14, $D0
00023AC7 030D 0016 D8               	dc.b $3, $D, $0, $16, $D8
00023ACC 0305 001E F8               	dc.b $3, $5, $0, $1E, $F8
00023AD1 130C 0022 E0               	dc.b $13, $C, $0, $22, $E0
00023AD6 1301 0026 00               	dc.b $13, $1, $0, $26, $0
00023ADB 1B04 0028 F0               	dc.b $1B, $4, $0, $28, $F0
00023AE0 EB05 002A 00               	dc.b $EB, $5, $0, $2A, $0
00023AE5 E300 002E 08               	dc.b $E3, $0, $0, $2E, $8
00023AEA 07                         DATAHQKXO4QZ259_17: dc.b $7
00023AEB EC0D 0000 D0               	dc.b $EC, $D, $0, $0, $D0
00023AF0 EC0D 0008 F0               	dc.b $EC, $D, $0, $8, $F0
00023AF5 0400 0010 08               	dc.b $4, $0, $0, $10, $8
00023AFA FC0C 0011 E0               	dc.b $FC, $C, $0, $11, $E0
00023AFF 0404 0015 E8               	dc.b $4, $4, $0, $15, $E8
00023B04 FC04 0017 00               	dc.b $FC, $4, $0, $17, $0
00023B09 E400 0019 08               	dc.b $E4, $0, $0, $19, $8
00023B0E 09                         DATAHQKXO4QZ259_18: dc.b $9
00023B0F 0007 0000 E5               	dc.b $0, $7, $0, $0, $E5
00023B14 000B 0008 F5               	dc.b $0, $B, $0, $8, $F5
00023B19 0002 0014 DD               	dc.b $0, $2, $0, $14, $DD
00023B1E 0006 0017 0D               	dc.b $0, $6, $0, $17, $D
00023B23 0801 001D 1D               	dc.b $8, $1, $0, $1D, $1D
00023B28 F00D 001F E5               	dc.b $F0, $D, $0, $1F, $E5
00023B2D F800 0027 05               	dc.b $F8, $0, $0, $27, $5
00023B32 E800 0028 ED               	dc.b $E8, $0, $0, $28, $ED
00023B37 E009 0029 F5               	dc.b $E0, $9, $0, $29, $F5
00023B3C 09                         DATAHQKXO4QZ259_19: dc.b $9
00023B3D FD06 0000 DD               	dc.b $FD, $6, $0, $0, $DD
00023B42 E504 0006 FD               	dc.b $E5, $4, $0, $6, $FD
00023B47 ED0A 0008 ED               	dc.b $ED, $A, $0, $8, $ED
00023B4C 0504 0011 ED               	dc.b $5, $4, $0, $11, $ED
00023B51 0D04 0013 ED               	dc.b $D, $4, $0, $13, $ED
00023B56 0501 0015 D5               	dc.b $5, $1, $0, $15, $D5
00023B5B ED05 0017 05               	dc.b $ED, $5, $0, $17, $5
00023B60 FD00 001B 05               	dc.b $FD, $0, $0, $1B, $5
00023B65 0501 001C FD               	dc.b $5, $1, $0, $1C, $FD
00023B6A 09                         DATAHQKXO4QZ259_1A: dc.b $9
00023B6B 0007 0000 E5               	dc.b $0, $7, $0, $0, $E5
00023B70 000B 0008 F5               	dc.b $0, $B, $0, $8, $F5
00023B75 0002 0014 DD               	dc.b $0, $2, $0, $14, $DD
00023B7A 0006 0017 0D               	dc.b $0, $6, $0, $17, $D
00023B7F 0801 001D 1D               	dc.b $8, $1, $0, $1D, $1D
00023B84 F00D 001F E5               	dc.b $F0, $D, $0, $1F, $E5
00023B89 F800 0027 05               	dc.b $F8, $0, $0, $27, $5
00023B8E E800 0028 ED               	dc.b $E8, $0, $0, $28, $ED
00023B93 E009 0029 F5               	dc.b $E0, $9, $0, $29, $F5
00023B98 09                         DATAHQKXO4QZ259_1B: dc.b $9
00023B99 FD06 0000 DD               	dc.b $FD, $6, $0, $0, $DD
00023B9E E504 0006 FD               	dc.b $E5, $4, $0, $6, $FD
00023BA3 ED0A 0008 ED               	dc.b $ED, $A, $0, $8, $ED
00023BA8 0504 0011 ED               	dc.b $5, $4, $0, $11, $ED
00023BAD 0D04 0013 ED               	dc.b $D, $4, $0, $13, $ED
00023BB2 0501 0015 D5               	dc.b $5, $1, $0, $15, $D5
00023BB7 ED05 0017 05               	dc.b $ED, $5, $0, $17, $5
00023BBC FD00 001B 05               	dc.b $FD, $0, $0, $1B, $5
00023BC1 0501 001C FD               	dc.b $5, $1, $0, $1C, $FD
00023BC6 09                         DATAHQKXO4QZ259_1C: dc.b $9
00023BC7 0007 0000 E5               	dc.b $0, $7, $0, $0, $E5
00023BCC 000B 0008 F5               	dc.b $0, $B, $0, $8, $F5
00023BD1 0002 0014 DD               	dc.b $0, $2, $0, $14, $DD
00023BD6 0006 0017 0D               	dc.b $0, $6, $0, $17, $D
00023BDB 0801 001D 1D               	dc.b $8, $1, $0, $1D, $1D
00023BE0 F00D 001F E5               	dc.b $F0, $D, $0, $1F, $E5
00023BE5 F800 0027 05               	dc.b $F8, $0, $0, $27, $5
00023BEA E800 0028 ED               	dc.b $E8, $0, $0, $28, $ED
00023BEF E009 0029 F5               	dc.b $E0, $9, $0, $29, $F5
00023BF4 09                         DATAHQKXO4QZ259_1D: dc.b $9
00023BF5 FD06 0000 DD               	dc.b $FD, $6, $0, $0, $DD
00023BFA E504 0006 FD               	dc.b $E5, $4, $0, $6, $FD
00023BFF ED0A 0008 ED               	dc.b $ED, $A, $0, $8, $ED
00023C04 0504 0011 ED               	dc.b $5, $4, $0, $11, $ED
00023C09 0D04 0013 ED               	dc.b $D, $4, $0, $13, $ED
00023C0E 0501 0015 D5               	dc.b $5, $1, $0, $15, $D5
00023C13 ED05 0017 05               	dc.b $ED, $5, $0, $17, $5
00023C18 FD00 001B 05               	dc.b $FD, $0, $0, $1B, $5
00023C1D 0501 001C FD               	dc.b $5, $1, $0, $1C, $FD
00023C22 0C                         DATAHQKXO4QZ259_1E: dc.b $C
00023C23 EE09 0000 10               	dc.b $EE, $9, $0, $0, $10
00023C28 FE0E 0006 08               	dc.b $FE, $E, $0, $6, $8
00023C2D F600 0012 08               	dc.b $F6, $0, $0, $12, $8
00023C32 F603 0013 00               	dc.b $F6, $3, $0, $13, $0
00023C37 F603 0017 F8               	dc.b $F6, $3, $0, $17, $F8
00023C3C EE08 001B F8               	dc.b $EE, $8, $0, $1B, $F8
00023C41 E608 001E F8               	dc.b $E6, $8, $0, $1E, $F8
00023C46 E608 0021 10               	dc.b $E6, $8, $0, $21, $10
00023C4B DE04 0024 0F               	dc.b $DE, $4, $0, $24, $F
00023C50 DE0C 0026 E0               	dc.b $DE, $C, $0, $26, $E0
00023C55 E60A 002A E0               	dc.b $E6, $A, $0, $2A, $E0
00023C5A FE05 0033 E0               	dc.b $FE, $5, $0, $33, $E0
00023C5F 0B                         DATAHQKXO4QZ259_1F: dc.b $B
00023C60 FE0E 0000 08               	dc.b $FE, $E, $0, $0, $8
00023C65 EE0D 000C 08               	dc.b $EE, $D, $0, $C, $8
00023C6A 0E04 0014 F8               	dc.b $E, $4, $0, $14, $F8
00023C6F EE07 0016 F8               	dc.b $EE, $7, $0, $16, $F8
00023C74 E608 001E F8               	dc.b $E6, $8, $0, $1E, $F8
00023C79 E608 0021 10               	dc.b $E6, $8, $0, $21, $10
00023C7E DE04 0024 10               	dc.b $DE, $4, $0, $24, $10
00023C83 DE0C 0026 E0               	dc.b $DE, $C, $0, $26, $E0
00023C88 E60A 002A E0               	dc.b $E6, $A, $0, $2A, $E0
00023C8D FE04 0033 E8               	dc.b $FE, $4, $0, $33, $E8
00023C92 0600 0035 F0               	dc.b $6, $0, $0, $35, $F0
00023C97 0C                         DATAHQKXO4QZ259_20: dc.b $C
00023C98 FE0E 0000 10               	dc.b $FE, $E, $0, $0, $10
00023C9D EE09 000C 18               	dc.b $EE, $9, $0, $C, $18
00023CA2 EE01 0012 10               	dc.b $EE, $1, $0, $12, $10
00023CA7 EE07 0014 00               	dc.b $EE, $7, $0, $14, $0
00023CAC 0E04 001C 00               	dc.b $E, $4, $0, $1C, $0
00023CB1 DE04 001E 10               	dc.b $DE, $4, $0, $1E, $10
00023CB6 E608 0020 00               	dc.b $E6, $8, $0, $20, $0
00023CBB E608 0023 18               	dc.b $E6, $8, $0, $23, $18
00023CC0 DE0F 0026 E0               	dc.b $DE, $F, $0, $26, $E0
00023CC5 FE0C 0036 E0               	dc.b $FE, $C, $0, $36, $E0
00023CCA 0E0C 003A E0               	dc.b $E, $C, $0, $3A, $E0
00023CCF 0604 003E E0               	dc.b $6, $4, $0, $3E, $E0
00023CD4 0C                         DATAHQKXO4QZ259_21: dc.b $C
00023CD5 FE0E 0000 10               	dc.b $FE, $E, $0, $0, $10
00023CDA F60C 000C 10               	dc.b $F6, $C, $0, $C, $10
00023CDF EE08 0010 18               	dc.b $EE, $8, $0, $10, $18
00023CE4 EE00 0013 10               	dc.b $EE, $0, $0, $13, $10
00023CE9 EE04 0014 00               	dc.b $EE, $4, $0, $14, $0
00023CEE F607 0016 00               	dc.b $F6, $7, $0, $16, $0
00023CF3 E608 001E 00               	dc.b $E6, $8, $0, $1E, $0
00023CF8 E608 0021 18               	dc.b $E6, $8, $0, $21, $18
00023CFD E60C 0024 E0               	dc.b $E6, $C, $0, $24, $E0
00023D02 EE0F 0028 E0               	dc.b $EE, $F, $0, $28, $E0
00023D07 0E0C 0038 E0               	dc.b $E, $C, $0, $38, $E0
00023D0C DE0C 003C E0               	dc.b $DE, $C, $0, $3C, $E0
00023D11 0C                         DATAHQKXO4QZ259_22: dc.b $C
00023D12 E009 0000 FA               	dc.b $E0, $9, $0, $0, $FA
00023D17 F801 0006 FA               	dc.b $F8, $1, $0, $6, $FA
00023D1C F00E 0008 02               	dc.b $F0, $E, $0, $8, $2
00023D21 F000 0014 FA               	dc.b $F0, $0, $0, $14, $FA
00023D26 080C 0015 FA               	dc.b $8, $C, $0, $15, $FA
00023D2B 0800 0019 1A               	dc.b $8, $0, $0, $19, $1A
00023D30 100C 001A F2               	dc.b $10, $C, $0, $1A, $F2
00023D35 F003 001E F2               	dc.b $F0, $3, $0, $1E, $F2
00023D3A E800 0022 F2               	dc.b $E8, $0, $0, $22, $F2
00023D3F F003 0023 EA               	dc.b $F0, $3, $0, $23, $EA
00023D44 1001 0027 EA               	dc.b $10, $1, $0, $27, $EA
00023D49 F80B 0029 D2               	dc.b $F8, $B, $0, $29, $D2
00023D4E 0B                         DATAHQKXO4QZ259_23: dc.b $B
00023D4F DB0C 0000 FD               	dc.b $DB, $C, $0, $0, $FD
00023D54 E30D 0004 05               	dc.b $E3, $D, $0, $4, $5
00023D59 E305 000C F5               	dc.b $E3, $5, $0, $C, $F5
00023D5E F30D 0010 05               	dc.b $F3, $D, $0, $10, $5
00023D63 F30D 0018 E5               	dc.b $F3, $D, $0, $18, $E5
00023D68 FB07 0020 D5               	dc.b $FB, $7, $0, $20, $D5
00023D6D 1B0D 0028 E5               	dc.b $1B, $D, $0, $28, $E5
00023D72 1B01 0030 05               	dc.b $1B, $1, $0, $30, $5
00023D77 130C 0032 E5               	dc.b $13, $C, $0, $32, $E5
00023D7C 0B0C 0036 E5               	dc.b $B, $C, $0, $36, $E5
00023D81 030C 003A E5               	dc.b $3, $C, $0, $3A, $E5
00023D86 0C                         DATAHQKXO4QZ259_24: dc.b $C
00023D87 E009 0000 FA               	dc.b $E0, $9, $0, $0, $FA
00023D8C F801 0006 FA               	dc.b $F8, $1, $0, $6, $FA
00023D91 F00E 0008 02               	dc.b $F0, $E, $0, $8, $2
00023D96 F000 0014 FA               	dc.b $F0, $0, $0, $14, $FA
00023D9B 080C 0015 FA               	dc.b $8, $C, $0, $15, $FA
00023DA0 0800 0019 1A               	dc.b $8, $0, $0, $19, $1A
00023DA5 100C 001A F2               	dc.b $10, $C, $0, $1A, $F2
00023DAA F003 001E F2               	dc.b $F0, $3, $0, $1E, $F2
00023DAF E800 0022 F2               	dc.b $E8, $0, $0, $22, $F2
00023DB4 F003 0023 EA               	dc.b $F0, $3, $0, $23, $EA
00023DB9 1001 0027 EA               	dc.b $10, $1, $0, $27, $EA
00023DBE F80B 0029 D2               	dc.b $F8, $B, $0, $29, $D2
00023DC3 0B                         DATAHQKXO4QZ259_25: dc.b $B
00023DC4 DB0C 0000 FD               	dc.b $DB, $C, $0, $0, $FD
00023DC9 E30D 0004 05               	dc.b $E3, $D, $0, $4, $5
00023DCE E305 000C F5               	dc.b $E3, $5, $0, $C, $F5
00023DD3 F30D 0010 05               	dc.b $F3, $D, $0, $10, $5
00023DD8 F30D 0018 E5               	dc.b $F3, $D, $0, $18, $E5
00023DDD FB07 0020 D5               	dc.b $FB, $7, $0, $20, $D5
00023DE2 1B0D 0028 E5               	dc.b $1B, $D, $0, $28, $E5
00023DE7 1B01 0030 05               	dc.b $1B, $1, $0, $30, $5
00023DEC 130C 0032 E5               	dc.b $13, $C, $0, $32, $E5
00023DF1 0B0C 0036 E5               	dc.b $B, $C, $0, $36, $E5
00023DF6 030C 003A E5               	dc.b $3, $C, $0, $3A, $E5
00023DFB 09                         DATAHQKXO4QZ259_26: dc.b $9
00023DFC D80F 0000 E8               	dc.b $D8, $F, $0, $0, $E8
00023E01 D807 0010 08               	dc.b $D8, $7, $0, $10, $8
00023E06 F80D 0018 E8               	dc.b $F8, $D, $0, $18, $E8
00023E0B F805 0020 08               	dc.b $F8, $5, $0, $20, $8
00023E10 E001 0024 E0               	dc.b $E0, $1, $0, $24, $E0
00023E15 0000 0026 E0               	dc.b $0, $0, $0, $26, $E0
00023E1A 080D 0027 E0               	dc.b $8, $D, $0, $27, $E0
00023E1F 180C 002F E0               	dc.b $18, $C, $0, $2F, $E0
00023E24 1005 0033 00               	dc.b $10, $5, $0, $33, $0
00023E29 0C                         DATAHQKXO4QZ259_27: dc.b $C
00023E2A 0006 0000 E0               	dc.b $0, $6, $0, $0, $E0
00023E2F 000B 0006 F0               	dc.b $0, $B, $0, $6, $F0
00023E34 D80C 0012 E8               	dc.b $D8, $C, $0, $12, $E8
00023E39 1804 0016 E0               	dc.b $18, $4, $0, $16, $E0
00023E3E 1005 0018 08               	dc.b $10, $5, $0, $18, $8
00023E43 0001 001C 10               	dc.b $0, $1, $0, $1C, $10
00023E48 F00D 001E E8               	dc.b $F0, $D, $0, $1E, $E8
00023E4D F005 0026 08               	dc.b $F0, $5, $0, $26, $8
00023E52 E00D 002A E0               	dc.b $E0, $D, $0, $2A, $E0
00023E57 E009 0032 00               	dc.b $E0, $9, $0, $32, $0
00023E5C D005 0038 08               	dc.b $D0, $5, $0, $38, $8
00023E61 D008 003C F0               	dc.b $D0, $8, $0, $3C, $F0
00023E66 09                         DATAHQKXO4QZ259_28: dc.b $9
00023E67 D80F 0000 E8               	dc.b $D8, $F, $0, $0, $E8
00023E6C D807 0010 08               	dc.b $D8, $7, $0, $10, $8
00023E71 F80D 0018 E8               	dc.b $F8, $D, $0, $18, $E8
00023E76 F805 0020 08               	dc.b $F8, $5, $0, $20, $8
00023E7B E001 0024 E0               	dc.b $E0, $1, $0, $24, $E0
00023E80 0000 0026 E0               	dc.b $0, $0, $0, $26, $E0
00023E85 080D 0027 E0               	dc.b $8, $D, $0, $27, $E0
00023E8A 180C 002F E0               	dc.b $18, $C, $0, $2F, $E0
00023E8F 1005 0033 00               	dc.b $10, $5, $0, $33, $0
00023E94 0C                         DATAHQKXO4QZ259_29: dc.b $C
00023E95 0006 0000 E0               	dc.b $0, $6, $0, $0, $E0
00023E9A 000B 0006 F0               	dc.b $0, $B, $0, $6, $F0
00023E9F D80C 0012 E8               	dc.b $D8, $C, $0, $12, $E8
00023EA4 1804 0016 E0               	dc.b $18, $4, $0, $16, $E0
00023EA9 1005 0018 08               	dc.b $10, $5, $0, $18, $8
00023EAE 0001 001C 10               	dc.b $0, $1, $0, $1C, $10
00023EB3 F00D 001E E8               	dc.b $F0, $D, $0, $1E, $E8
00023EB8 F005 0026 08               	dc.b $F0, $5, $0, $26, $8
00023EBD E00D 002A E0               	dc.b $E0, $D, $0, $2A, $E0
00023EC2 E009 0032 00               	dc.b $E0, $9, $0, $32, $0
00023EC7 D005 0038 08               	dc.b $D0, $5, $0, $38, $8
00023ECC D008 003C F0               	dc.b $D0, $8, $0, $3C, $F0
00023ED1 09                         DATAHQKXO4QZ259_2A: dc.b $9
00023ED2 D10D 0000 ED               	dc.b $D1, $D, $0, $0, $ED
00023ED7 090E 0008 F5               	dc.b $9, $E, $0, $8, $F5
00023EDC E10A 0014 DD               	dc.b $E1, $A, $0, $14, $DD
00023EE1 F904 001D 05               	dc.b $F9, $4, $0, $1D, $5
00023EE6 F90C 001F E5               	dc.b $F9, $C, $0, $1F, $E5
00023EEB 0104 0023 ED               	dc.b $1, $4, $0, $23, $ED
00023EF0 010C 0025 FD               	dc.b $1, $C, $0, $25, $FD
00023EF5 E10E 0029 F5               	dc.b $E1, $E, $0, $29, $F5
00023EFA 0901 0035 15               	dc.b $9, $1, $0, $35, $15
00023EFF 08                         DATAHQKXO4QZ259_2B: dc.b $8
00023F00 0F0D 0000 F7               	dc.b $F, $D, $0, $0, $F7
00023F05 FF0D 0008 EF               	dc.b $FF, $D, $0, $8, $EF
00023F0A FF09 0010 0F               	dc.b $FF, $9, $0, $10, $F
00023F0F E70E 0016 DF               	dc.b $E7, $E, $0, $16, $DF
00023F14 E70E 0022 FF               	dc.b $E7, $E, $0, $22, $FF
00023F19 D703 002E D7               	dc.b $D7, $3, $0, $2E, $D7
00023F1E CF0C 0032 DF               	dc.b $CF, $C, $0, $32, $DF
00023F23 D70D 0036 DF               	dc.b $D7, $D, $0, $36, $DF
00023F28 09                         DATAHQKXO4QZ259_2C: dc.b $9
00023F29 D10D 0000 ED               	dc.b $D1, $D, $0, $0, $ED
00023F2E 090E 0008 F5               	dc.b $9, $E, $0, $8, $F5
00023F33 E10A 0014 DD               	dc.b $E1, $A, $0, $14, $DD
00023F38 F904 001D 05               	dc.b $F9, $4, $0, $1D, $5
00023F3D F90C 001F E5               	dc.b $F9, $C, $0, $1F, $E5
00023F42 0104 0023 ED               	dc.b $1, $4, $0, $23, $ED
00023F47 010C 0025 FD               	dc.b $1, $C, $0, $25, $FD
00023F4C E10E 0029 F5               	dc.b $E1, $E, $0, $29, $F5
00023F51 0901 0035 15               	dc.b $9, $1, $0, $35, $15
00023F56 08                         DATAHQKXO4QZ259_2D: dc.b $8
00023F57 0F0D 0000 F7               	dc.b $F, $D, $0, $0, $F7
00023F5C FF0D 0008 EF               	dc.b $FF, $D, $0, $8, $EF
00023F61 FF09 0010 0F               	dc.b $FF, $9, $0, $10, $F
00023F66 E70E 0016 DF               	dc.b $E7, $E, $0, $16, $DF
00023F6B E70E 0022 FF               	dc.b $E7, $E, $0, $22, $FF
00023F70 D703 002E D7               	dc.b $D7, $3, $0, $2E, $D7
00023F75 CF0C 0032 DF               	dc.b $CF, $C, $0, $32, $DF
00023F7A D70D 0036 DF               	dc.b $D7, $D, $0, $36, $DF
00023F7F 04                         DATAHQKXO4QZ259_2E: dc.b $4
00023F80 F80F 0000 E8               	dc.b $F8, $F, $0, $0, $E8
00023F85 F807 0010 08               	dc.b $F8, $7, $0, $10, $8
00023F8A E80D 0018 E8               	dc.b $E8, $D, $0, $18, $E8
00023F8F E805 0020 08               	dc.b $E8, $5, $0, $20, $8
00023F94 04                         DATAHQKXO4QZ259_2F: dc.b $4
00023F95 F80F 0000 E8               	dc.b $F8, $F, $0, $0, $E8
00023F9A F807 0010 08               	dc.b $F8, $7, $0, $10, $8
00023F9F E80D 0018 E8               	dc.b $E8, $D, $0, $18, $E8
00023FA4 E805 0020 08               	dc.b $E8, $5, $0, $20, $8
00023FA9 04                         DATAHQKXO4QZ259_30: dc.b $4
00023FAA F80F 0000 E8               	dc.b $F8, $F, $0, $0, $E8
00023FAF F807 0010 08               	dc.b $F8, $7, $0, $10, $8
00023FB4 E80D 0018 E8               	dc.b $E8, $D, $0, $18, $E8
00023FB9 E805 0020 08               	dc.b $E8, $5, $0, $20, $8
00023FBE 04                         DATAHQKXO4QZ259_31: dc.b $4
00023FBF F80F 0000 E8               	dc.b $F8, $F, $0, $0, $E8
00023FC4 F807 0010 08               	dc.b $F8, $7, $0, $10, $8
00023FC9 E80D 0018 E8               	dc.b $E8, $D, $0, $18, $E8
00023FCE E805 0020 08               	dc.b $E8, $5, $0, $20, $8
00023FD3 04                         DATAHQKXO4QZ259_32: dc.b $4
00023FD4 F80F 0000 E8               	dc.b $F8, $F, $0, $0, $E8
00023FD9 F807 0010 08               	dc.b $F8, $7, $0, $10, $8
00023FDE E80D 0018 E8               	dc.b $E8, $D, $0, $18, $E8
00023FE3 E805 0020 08               	dc.b $E8, $5, $0, $20, $8
00023FE8 09                         DATAHQKXO4QZ259_38: dc.b $9
00023FE9 F509 0000 F8               	dc.b $F5, $9, $0, $0, $F8
00023FEE 050D 0006 F0               	dc.b $5, $D, $0, $6, $F0
00023FF3 ED04 000E F8               	dc.b $ED, $4, $0, $E, $F8
00023FF8 ED00 0010 08               	dc.b $ED, $0, $0, $10, $8
00023FFD E50C 0011 F0               	dc.b $E5, $C, $0, $11, $F0
00024002 CD0E 0015 E8               	dc.b $CD, $E, $0, $15, $E8
00024007 CD0B 0021 D0               	dc.b $CD, $B, $0, $21, $D0
0002400C ED08 002D D0               	dc.b $ED, $8, $0, $2D, $D0
00024011 F505 0030 D8               	dc.b $F5, $5, $0, $30, $D8
00024016 09                         DATAHQKXO4QZ259_4C: dc.b $9
00024017 E00D 0000 F4               	dc.b $E0, $D, $0, $0, $F4
0002401C F001 0008 0C               	dc.b $F0, $1, $0, $8, $C
00024021 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024026 1000 0010 F4               	dc.b $10, $0, $0, $10, $F4
0002402B 1000 0011 04               	dc.b $10, $0, $0, $11, $4
00024030 0808 0012 F4               	dc.b $8, $8, $0, $12, $F4
00024035 F008 0015 F4               	dc.b $F0, $8, $0, $15, $F4
0002403A F005 0018 E4               	dc.b $F0, $5, $0, $18, $E4
0002403F F004 001C 14               	dc.b $F0, $4, $0, $1C, $14
00024044 0B                         DATAHQKXO4QZ259_55: dc.b $B
00024045 D80E 0000 DC               	dc.b $D8, $E, $0, $0, $DC
0002404A 0801 000C FC               	dc.b $8, $1, $0, $C, $FC
0002404F F00C 000E DC               	dc.b $F0, $C, $0, $E, $DC
00024054 F80E 0012 DC               	dc.b $F8, $E, $0, $12, $DC
00024059 1004 001E DC               	dc.b $10, $4, $0, $1E, $DC
0002405E F804 0020 FC               	dc.b $F8, $4, $0, $20, $FC
00024063 D803 0022 FC               	dc.b $D8, $3, $0, $22, $FC
00024068 D802 0026 04               	dc.b $D8, $2, $0, $26, $4
0002406D E002 0029 0C               	dc.b $E0, $2, $0, $29, $C
00024072 E003 002C 14               	dc.b $E0, $3, $0, $2C, $14
00024077 1000 0030 F4               	dc.b $10, $0, $0, $30, $F4
0002407C                            	even
0002407C                            	even
0002407C                            ; ---------------------------------------------------------------------------
0002407C                            ; Uncompressed graphics	loading	array for Sonic
0002407C                            ; ---------------------------------------------------------------------------
0002407C                            SonicDynPLC:
0002407C                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002407C                            ; ================================================================================
0002407C                            ; Sprite DPLCs - generated by Flex 2 Sat Jun 23 2018 14:02:36 GMT-0700 (Pacific Daylight Time)
0002407C                            ; ================================================================================
0002407C                            
0002407C                            DATAJ0KSBGAD2L:
0002407C 0000 0000                  	dc.w DATAJ0KSBGAD2L_0-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_1-DATAJ0KSBGAD2L
00024080 0000 0000                  	dc.w DATAJ0KSBGAD2L_2-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_3-DATAJ0KSBGAD2L
00024084 0000 0000                  	dc.w DATAJ0KSBGAD2L_4-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_5-DATAJ0KSBGAD2L
00024088 0000 0000                  	dc.w DATAJ0KSBGAD2L_6-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_7-DATAJ0KSBGAD2L
0002408C 0000 0000                  	dc.w DATAJ0KSBGAD2L_8-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_9-DATAJ0KSBGAD2L
00024090 0000 0000                  	dc.w DATAJ0KSBGAD2L_A-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_B-DATAJ0KSBGAD2L
00024094 0000 0000                  	dc.w DATAJ0KSBGAD2L_C-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_D-DATAJ0KSBGAD2L
00024098 0000 0000                  	dc.w DATAJ0KSBGAD2L_E-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_F-DATAJ0KSBGAD2L
0002409C 0000 0000                  	dc.w DATAJ0KSBGAD2L_10-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_11-DATAJ0KSBGAD2L
000240A0 0000 0000                  	dc.w DATAJ0KSBGAD2L_12-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_13-DATAJ0KSBGAD2L
000240A4 0000 0000                  	dc.w DATAJ0KSBGAD2L_14-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_15-DATAJ0KSBGAD2L
000240A8 0000 0000                  	dc.w DATAJ0KSBGAD2L_16-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_17-DATAJ0KSBGAD2L
000240AC 0000 0000                  	dc.w DATAJ0KSBGAD2L_18-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_19-DATAJ0KSBGAD2L
000240B0 0000 0000                  	dc.w DATAJ0KSBGAD2L_1A-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_1B-DATAJ0KSBGAD2L
000240B4 0000 0000                  	dc.w DATAJ0KSBGAD2L_1C-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_1D-DATAJ0KSBGAD2L
000240B8 0000 0000                  	dc.w DATAJ0KSBGAD2L_1E-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_1F-DATAJ0KSBGAD2L
000240BC 0000 0000                  	dc.w DATAJ0KSBGAD2L_20-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_21-DATAJ0KSBGAD2L
000240C0 0000 0000                  	dc.w DATAJ0KSBGAD2L_22-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_23-DATAJ0KSBGAD2L
000240C4 0000 0000                  	dc.w DATAJ0KSBGAD2L_24-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_25-DATAJ0KSBGAD2L
000240C8 0000 0000                  	dc.w DATAJ0KSBGAD2L_26-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_27-DATAJ0KSBGAD2L
000240CC 0000 0000                  	dc.w DATAJ0KSBGAD2L_28-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_29-DATAJ0KSBGAD2L
000240D0 0000 0000                  	dc.w DATAJ0KSBGAD2L_2A-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_2B-DATAJ0KSBGAD2L
000240D4 0000 0000                  	dc.w DATAJ0KSBGAD2L_2C-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_2D-DATAJ0KSBGAD2L
000240D8 0000 0000                  	dc.w DATAJ0KSBGAD2L_2E-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_2F-DATAJ0KSBGAD2L
000240DC 0000 0000                  	dc.w DATAJ0KSBGAD2L_30-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_31-DATAJ0KSBGAD2L
000240E0 0000 0000                  	dc.w DATAJ0KSBGAD2L_32-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_33-DATAJ0KSBGAD2L
000240E4 0000 0000                  	dc.w DATAJ0KSBGAD2L_34-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_35-DATAJ0KSBGAD2L
000240E8 0000 0000                  	dc.w DATAJ0KSBGAD2L_36-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_37-DATAJ0KSBGAD2L
000240EC 0000 0000                  	dc.w DATAJ0KSBGAD2L_38-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_39-DATAJ0KSBGAD2L
000240F0 0000 0000                  	dc.w DATAJ0KSBGAD2L_3A-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_3B-DATAJ0KSBGAD2L
000240F4 0000 0000                  	dc.w DATAJ0KSBGAD2L_3C-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_3D-DATAJ0KSBGAD2L
000240F8 0000 0000                  	dc.w DATAJ0KSBGAD2L_3E-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_3F-DATAJ0KSBGAD2L
000240FC 0000 0000                  	dc.w DATAJ0KSBGAD2L_40-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_41-DATAJ0KSBGAD2L
00024100 0000 0000                  	dc.w DATAJ0KSBGAD2L_42-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_43-DATAJ0KSBGAD2L
00024104 0000 0000                  	dc.w DATAJ0KSBGAD2L_44-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_45-DATAJ0KSBGAD2L
00024108 0000 0000                  	dc.w DATAJ0KSBGAD2L_46-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_47-DATAJ0KSBGAD2L
0002410C 0000 0000                  	dc.w DATAJ0KSBGAD2L_48-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_49-DATAJ0KSBGAD2L
00024110 0000 0000                  	dc.w DATAJ0KSBGAD2L_4A-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_4B-DATAJ0KSBGAD2L
00024114 0000 0000                  	dc.w DATAJ0KSBGAD2L_4C-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_4D-DATAJ0KSBGAD2L
00024118 0000 0000                  	dc.w DATAJ0KSBGAD2L_4E-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_4F-DATAJ0KSBGAD2L
0002411C 0000 0000                  	dc.w DATAJ0KSBGAD2L_50-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_51-DATAJ0KSBGAD2L
00024120 0000 0000                  	dc.w DATAJ0KSBGAD2L_52-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_53-DATAJ0KSBGAD2L
00024124 0000 0000                  	dc.w DATAJ0KSBGAD2L_54-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_55-DATAJ0KSBGAD2L
00024128 0000 0000                  	dc.w DATAJ0KSBGAD2L_56-DATAJ0KSBGAD2L, DATAJ0KSBGAD2L_57-DATAJ0KSBGAD2L
0002412C 00                         DATAJ0KSBGAD2L_0: dc.b $0
0002412D 04                         DATAJ0KSBGAD2L_1: dc.b $4
0002412E F000                       	dc.b $F0, $0
00024130 0010                       	dc.b $0, $10
00024132 1509                       	dc.b $15, $9
00024134 050C                       	dc.b $5, $C
00024136 03                         DATAJ0KSBGAD2L_2: dc.b $3
00024137 5011                       	dc.b $50, $11
00024139 5017                       	dc.b $50, $17
0002413B 201D                       	dc.b $20, $1D
0002413D 03                         DATAJ0KSBGAD2L_3: dc.b $3
0002413E 5020                       	dc.b $50, $20
00024140 5017                       	dc.b $50, $17
00024142 201D                       	dc.b $20, $1D
00024144 03                         DATAJ0KSBGAD2L_4: dc.b $3
00024145 5020                       	dc.b $50, $20
00024147 5017                       	dc.b $50, $17
00024149 2026                       	dc.b $20, $26
0002414B 03                         DATAJ0KSBGAD2L_5: dc.b $3
0002414C 8029                       	dc.b $80, $29
0002414E 200B                       	dc.b $20, $B
00024150 200E                       	dc.b $20, $E
00024152 03                         DATAJ0KSBGAD2L_6: dc.b $3
00024153 3035                       	dc.b $30, $35
00024155 F011                       	dc.b $F0, $11
00024157 4021                       	dc.b $40, $21
00024159 02                         DATAJ0KSBGAD2L_7: dc.b $2
0002415A B048                       	dc.b $B0, $48
0002415C 750D                       	dc.b $75, $D
0002415E 03                         DATAJ0KSBGAD2L_8: dc.b $3
0002415F E054                       	dc.b $E0, $54
00024161 0515                       	dc.b $5, $15
00024163 24AC                       	dc.b $24, $AC
00024165 04                         DATAJ0KSBGAD2L_9: dc.b $4
00024166 5063                       	dc.b $50, $63
00024168 335B                       	dc.b $33, $5B
0002416A 3361                       	dc.b $33, $61
0002416C 54A3                       	dc.b $54, $A3
0002416E 04                         DATAJ0KSBGAD2L_A: dc.b $4
0002416F B071                       	dc.b $B0, $71
00024171 134F                       	dc.b $13, $4F
00024173 5353                       	dc.b $53, $53
00024175 1375                       	dc.b $13, $75
00024177 02                         DATAJ0KSBGAD2L_B: dc.b $2
00024178 907D                       	dc.b $90, $7D
0002417A C377                       	dc.b $C3, $77
0002417C 04                         DATAJ0KSBGAD2L_C: dc.b $4
0002417D F087                       	dc.b $F0, $87
0002417F 5097                       	dc.b $50, $97
00024181 3421                       	dc.b $34, $21
00024183 0426                       	dc.b $4, $26
00024185 03                         DATAJ0KSBGAD2L_D: dc.b $3
00024186 909F                       	dc.b $90, $9F
00024188 B323                       	dc.b $B3, $23
0002418A 20A9                       	dc.b $20, $A9
0002418C 03                         DATAJ0KSBGAD2L_E: dc.b $3
0002418D F0AE                       	dc.b $F0, $AE
0002418F 20BE                       	dc.b $20, $BE
00024191 02ED                       	dc.b $2, $ED
00024193 03                         DATAJ0KSBGAD2L_F: dc.b $3
00024194 50C1                       	dc.b $50, $C1
00024196 A0CB                       	dc.b $A0, $CB
00024198 30C7                       	dc.b $30, $C7
0002419A 02                         DATAJ0KSBGAD2L_10: dc.b $2
0002419B C0D8                       	dc.b $C0, $D8
0002419D E413                       	dc.b $E4, $13
0002419F 03                         DATAJ0KSBGAD2L_11: dc.b $3
000241A0 109D                       	dc.b $10, $9D
000241A2 A0E5                       	dc.b $A0, $E5
000241A4 A42B                       	dc.b $A4, $2B
000241A6 03                         DATAJ0KSBGAD2L_12: dc.b $3
000241A7 F0F0                       	dc.b $F0, $F0
000241A9 5100                       	dc.b $51, $0
000241AB 148E                       	dc.b $14, $8E
000241AD 02                         DATAJ0KSBGAD2L_13: dc.b $2
000241AE 7490                       	dc.b $74, $90
000241B0 B365                       	dc.b $B3, $65
000241B2 02                         DATAJ0KSBGAD2L_14: dc.b $2
000241B3 8118                       	dc.b $81, $18
000241B5 9499                       	dc.b $94, $99
000241B7 02                         DATAJ0KSBGAD2L_15: dc.b $2
000241B8 D121                       	dc.b $D1, $21
000241BA 54B0                       	dc.b $54, $B0
000241BC 02                         DATAJ0KSBGAD2L_16: dc.b $2
000241BD B12F                       	dc.b $B1, $2F
000241BF 94B6                       	dc.b $94, $B6
000241C1 04                         DATAJ0KSBGAD2L_17: dc.b $4
000241C2 0106                       	dc.b $1, $6
000241C4 713B                       	dc.b $71, $3B
000241C6 54C6                       	dc.b $54, $C6
000241C8 7452                       	dc.b $74, $52
000241CA 04                         DATAJ0KSBGAD2L_18: dc.b $4
000241CB F144                       	dc.b $F1, $44
000241CD 4154                       	dc.b $41, $54
000241CF 2427                       	dc.b $24, $27
000241D1 3437                       	dc.b $34, $37
000241D3 02                         DATAJ0KSBGAD2L_19: dc.b $2
000241D4 F159                       	dc.b $F1, $59
000241D6 4445                       	dc.b $44, $45
000241D8 03                         DATAJ0KSBGAD2L_1A: dc.b $3
000241D9 F169                       	dc.b $F1, $69
000241DB 2179                       	dc.b $21, $79
000241DD 144A                       	dc.b $14, $4A
000241DF 03                         DATAJ0KSBGAD2L_1B: dc.b $3
000241E0 917C                       	dc.b $91, $7C
000241E2 8188                       	dc.b $81, $88
000241E4 143E                       	dc.b $14, $3E
000241E6 07                         DATAJ0KSBGAD2L_1C: dc.b $7
000241E7 C192                       	dc.b $C1, $92
000241E9 144E                       	dc.b $14, $4E
000241EB 044D                       	dc.b $4, $4D
000241ED 34C2                       	dc.b $34, $C2
000241EF 34CD                       	dc.b $34, $CD
000241F1 340F                       	dc.b $34, $F
000241F3 050B                       	dc.b $5, $B
000241F5 05                         DATAJ0KSBGAD2L_1D: dc.b $5
000241F6 A19F                       	dc.b $A1, $9F
000241F8 2029                       	dc.b $20, $29
000241FA 2026                       	dc.b $20, $26
000241FC 002C                       	dc.b $0, $2C
000241FE 53BE                       	dc.b $53, $BE
00024200 03                         DATAJ0KSBGAD2L_1E: dc.b $3
00024201 F1AA                       	dc.b $F1, $AA
00024203 11BA                       	dc.b $11, $BA
00024205 02E0                       	dc.b $2, $E0
00024207 02                         DATAJ0KSBGAD2L_1F: dc.b $2
00024208 B1BC                       	dc.b $B1, $BC
0002420A 72EF                       	dc.b $72, $EF
0002420C 02                         DATAJ0KSBGAD2L_20: dc.b $2
0002420D B1C8                       	dc.b $B1, $C8
0002420F 52FF                       	dc.b $52, $FF
00024211 02                         DATAJ0KSBGAD2L_21: dc.b $2
00024212 B1D4                       	dc.b $B1, $D4
00024214 62E1                       	dc.b $62, $E1
00024216 04                         DATAJ0KSBGAD2L_22: dc.b $4
00024217 51E0                       	dc.b $51, $E0
00024219 11E6                       	dc.b $11, $E6
0002421B B1E8                       	dc.b $B1, $E8
0002421D 01F4                       	dc.b $1, $F4
0002421F 03                         DATAJ0KSBGAD2L_23: dc.b $3
00024220 51F5                       	dc.b $51, $F5
00024222 11FB                       	dc.b $11, $FB
00024224 B1FD                       	dc.b $B1, $FD
00024226 02                         DATAJ0KSBGAD2L_24: dc.b $2
00024227 B20B                       	dc.b $B2, $B
00024229 83F2                       	dc.b $83, $F2
0002422B 02                         DATAJ0KSBGAD2L_25: dc.b $2
0002422C B217                       	dc.b $B2, $17
0002422E 7405                       	dc.b $74, $5
00024230 03                         DATAJ0KSBGAD2L_26: dc.b $3
00024231 F223                       	dc.b $F2, $23
00024233 1233                       	dc.b $12, $33
00024235 03E7                       	dc.b $3, $E7
00024237 03                         DATAJ0KSBGAD2L_27: dc.b $3
00024238 5112                       	dc.b $51, $12
0002423A B235                       	dc.b $B2, $35
0002423C 13F0                       	dc.b $13, $F0
0002423E 02                         DATAJ0KSBGAD2L_28: dc.b $2
0002423F B241                       	dc.b $B2, $41
00024241 53EA                       	dc.b $53, $EA
00024243 02                         DATAJ0KSBGAD2L_29: dc.b $2
00024244 B24D                       	dc.b $B2, $4D
00024246 63FE                       	dc.b $63, $FE
00024248 04                         DATAJ0KSBGAD2L_2A: dc.b $4
00024249 5259                       	dc.b $52, $59
0002424B 125F                       	dc.b $12, $5F
0002424D B261                       	dc.b $B2, $61
0002424F 026D                       	dc.b $2, $6D
00024251 02                         DATAJ0KSBGAD2L_2B: dc.b $2
00024252 726E                       	dc.b $72, $6E
00024254 B276                       	dc.b $B2, $76
00024256 02                         DATAJ0KSBGAD2L_2C: dc.b $2
00024257 B284                       	dc.b $B2, $84
00024259 830B                       	dc.b $83, $B
0002425B 02                         DATAJ0KSBGAD2L_2D: dc.b $2
0002425C B290                       	dc.b $B2, $90
0002425E 7314                       	dc.b $73, $14
00024260 01                         DATAJ0KSBGAD2L_2E: dc.b $1
00024261 F29C                       	dc.b $F2, $9C
00024263 01                         DATAJ0KSBGAD2L_2F: dc.b $1
00024264 F2AC                       	dc.b $F2, $AC
00024266 01                         DATAJ0KSBGAD2L_30: dc.b $1
00024267 F2BC                       	dc.b $F2, $BC
00024269 01                         DATAJ0KSBGAD2L_31: dc.b $1
0002426A F2CC                       	dc.b $F2, $CC
0002426C 01                         DATAJ0KSBGAD2L_32: dc.b $1
0002426D F461                       	dc.b $F4, $61
0002426F 02                         DATAJ0KSBGAD2L_33: dc.b $2
00024270 B2EC                       	dc.b $B2, $EC
00024272 22F8                       	dc.b $22, $F8
00024274 01                         DATAJ0KSBGAD2L_34: dc.b $1
00024275 F2FB                       	dc.b $F2, $FB
00024277 02                         DATAJ0KSBGAD2L_35: dc.b $2
00024278 B30B                       	dc.b $B3, $B
0002427A 2317                       	dc.b $23, $17
0002427C 01                         DATAJ0KSBGAD2L_36: dc.b $1
0002427D F31A                       	dc.b $F3, $1A
0002427F 02                         DATAJ0KSBGAD2L_37: dc.b $2
00024280 532A                       	dc.b $53, $2A
00024282 B330                       	dc.b $B3, $30
00024284 04                         DATAJ0KSBGAD2L_38: dc.b $4
00024285 533C                       	dc.b $53, $3C
00024287 7342                       	dc.b $73, $42
00024289 134A                       	dc.b $13, $4A
0002428B 034C                       	dc.b $3, $4C
0002428D 04                         DATAJ0KSBGAD2L_39: dc.b $4
0002428E 134D                       	dc.b $13, $4D
00024290 734F                       	dc.b $73, $4F
00024292 2357                       	dc.b $23, $57
00024294 035A                       	dc.b $3, $5A
00024296 03                         DATAJ0KSBGAD2L_3A: dc.b $3
00024297 235B                       	dc.b $23, $5B
00024299 235E                       	dc.b $23, $5E
0002429B F361                       	dc.b $F3, $61
0002429D 03                         DATAJ0KSBGAD2L_3B: dc.b $3
0002429E B371                       	dc.b $B3, $71
000242A0 737D                       	dc.b $73, $7D
000242A2 0071                       	dc.b $0, $71
000242A4 03                         DATAJ0KSBGAD2L_3C: dc.b $3
000242A5 7385                       	dc.b $73, $85
000242A7 338D                       	dc.b $33, $8D
000242A9 2391                       	dc.b $23, $91
000242AB 01                         DATAJ0KSBGAD2L_3D: dc.b $1
000242AC 8394                       	dc.b $83, $94
000242AE 03                         DATAJ0KSBGAD2L_3E: dc.b $3
000242AF 739D                       	dc.b $73, $9D
000242B1 03A5                       	dc.b $3, $A5
000242B3 33A6                       	dc.b $33, $A6
000242B5 03                         DATAJ0KSBGAD2L_3F: dc.b $3
000242B6 73AA                       	dc.b $73, $AA
000242B8 33B2                       	dc.b $33, $B2
000242BA 23B6                       	dc.b $23, $B6
000242BC 03                         DATAJ0KSBGAD2L_40: dc.b $3
000242BD B3B9                       	dc.b $B3, $B9
000242BF 13C5                       	dc.b $13, $C5
000242C1 03C7                       	dc.b $3, $C7
000242C3 04                         DATAJ0KSBGAD2L_41: dc.b $4
000242C4 B3C8                       	dc.b $B3, $C8
000242C6 33D4                       	dc.b $33, $D4
000242C8 03D8                       	dc.b $3, $D8
000242CA 03D9                       	dc.b $3, $D9
000242CC 04                         DATAJ0KSBGAD2L_42: dc.b $4
000242CD B3DA                       	dc.b $B3, $DA
000242CF 33E6                       	dc.b $33, $E6
000242D1 03EA                       	dc.b $3, $EA
000242D3 03EB                       	dc.b $3, $EB
000242D5 05                         DATAJ0KSBGAD2L_43: dc.b $5
000242D6 83EC                       	dc.b $83, $EC
000242D8 13F5                       	dc.b $13, $F5
000242DA 53F7                       	dc.b $53, $F7
000242DC 13FD                       	dc.b $13, $FD
000242DE 03FF                       	dc.b $3, $FF
000242E0 05                         DATAJ0KSBGAD2L_44: dc.b $5
000242E1 8400                       	dc.b $84, $0
000242E3 1409                       	dc.b $14, $9
000242E5 53F7                       	dc.b $53, $F7
000242E7 13FD                       	dc.b $13, $FD
000242E9 03FF                       	dc.b $3, $FF
000242EB 02                         DATAJ0KSBGAD2L_45: dc.b $2
000242EC 840B                       	dc.b $84, $B
000242EE 7414                       	dc.b $74, $14
000242F0 03                         DATAJ0KSBGAD2L_46: dc.b $3
000242F1 841C                       	dc.b $84, $1C
000242F3 2425                       	dc.b $24, $25
000242F5 1428                       	dc.b $14, $28
000242F7 02                         DATAJ0KSBGAD2L_47: dc.b $2
000242F8 842A                       	dc.b $84, $2A
000242FA 7433                       	dc.b $74, $33
000242FC 03                         DATAJ0KSBGAD2L_48: dc.b $3
000242FD 841C                       	dc.b $84, $1C
000242FF 243B                       	dc.b $24, $3B
00024301 143E                       	dc.b $14, $3E
00024303 02                         DATAJ0KSBGAD2L_49: dc.b $2
00024304 5440                       	dc.b $54, $40
00024306 B446                       	dc.b $B4, $46
00024308 03                         DATAJ0KSBGAD2L_4A: dc.b $3
00024309 8452                       	dc.b $84, $52
0002430B 345B                       	dc.b $34, $5B
0002430D 045F                       	dc.b $4, $5F
0002430F 03                         DATAJ0KSBGAD2L_4B: dc.b $3
00024310 7460                       	dc.b $74, $60
00024312 1468                       	dc.b $14, $68
00024314 B46A                       	dc.b $B4, $6A
00024316 05                         DATAJ0KSBGAD2L_4C: dc.b $5
00024317 7476                       	dc.b $74, $76
00024319 147E                       	dc.b $14, $7E
0002431B 5480                       	dc.b $54, $80
0002431D 3486                       	dc.b $34, $86
0002431F 048A                       	dc.b $4, $8A
00024321 05                         DATAJ0KSBGAD2L_4D: dc.b $5
00024322 748B                       	dc.b $74, $8B
00024324 147E                       	dc.b $14, $7E
00024326 5493                       	dc.b $54, $93
00024328 3486                       	dc.b $34, $86
0002432A 048A                       	dc.b $4, $8A
0002432C 02                         DATAJ0KSBGAD2L_4E: dc.b $2
0002432D 2499                       	dc.b $24, $99
0002432F F49C                       	dc.b $F4, $9C
00024331 03                         DATAJ0KSBGAD2L_4F: dc.b $3
00024332 24AC                       	dc.b $24, $AC
00024334 B4AF                       	dc.b $B4, $AF
00024336 24BB                       	dc.b $24, $BB
00024338 01                         DATAJ0KSBGAD2L_50: dc.b $1
00024339 B4BE                       	dc.b $B4, $BE
0002433B 01                         DATAJ0KSBGAD2L_51: dc.b $1
0002433C 54CA                       	dc.b $54, $CA
0002433E 01                         DATAJ0KSBGAD2L_52: dc.b $1
0002433F 14D0                       	dc.b $14, $D0
00024341 03                         DATAJ0KSBGAD2L_53: dc.b $3
00024342 7385                       	dc.b $73, $85
00024344 338D                       	dc.b $33, $8D
00024346 2391                       	dc.b $23, $91
00024348 03                         DATAJ0KSBGAD2L_54: dc.b $3
00024349 739D                       	dc.b $73, $9D
0002434B 03A5                       	dc.b $3, $A5
0002434D 33A6                       	dc.b $33, $A6
0002434F 03                         DATAJ0KSBGAD2L_55: dc.b $3
00024350 B4D2                       	dc.b $B4, $D2
00024352 14DE                       	dc.b $14, $DE
00024354 34E0                       	dc.b $34, $E0
00024356 03                         DATAJ0KSBGAD2L_56: dc.b $3
00024357 54E4                       	dc.b $54, $E4
00024359 B4EA                       	dc.b $B4, $EA
0002435B 106D                       	dc.b $10, $6D
0002435D 02                         DATAJ0KSBGAD2L_57: dc.b $2
0002435E F4F6                       	dc.b $F4, $F6
00024360 2506                       	dc.b $25, $6
00024362                            	even
00024362                            	even
00024362                            ; ---------------------------------------------------------------------------
00024362                            ; Uncompressed graphics	loading	array for Pepsi
00024362                            ; ---------------------------------------------------------------------------
00024362                            PepsiDynPLC:
00024362                            	include "_inc\Pepsi dynamic pattern load cues.asm"
00024362                            ; ================================================================================
00024362                            ; Sprite DPLCs - generated by Flex 2 Wed Jul 11 2018 11:05:27 GMT-0700 (Pacific Daylight Time)
00024362                            ; ================================================================================
00024362                            
00024362                            DATACB02R94ZJ8:
00024362 0000 0000                  	dc.w DATACB02R94ZJ8_0-DATACB02R94ZJ8, DATACB02R94ZJ8_1-DATACB02R94ZJ8
00024366 0000 0000                  	dc.w DATACB02R94ZJ8_2-DATACB02R94ZJ8, DATACB02R94ZJ8_3-DATACB02R94ZJ8
0002436A 0000 0000                  	dc.w DATACB02R94ZJ8_4-DATACB02R94ZJ8, DATACB02R94ZJ8_5-DATACB02R94ZJ8
0002436E 0000 0000                  	dc.w DATACB02R94ZJ8_6-DATACB02R94ZJ8, DATACB02R94ZJ8_7-DATACB02R94ZJ8
00024372 0000 0000                  	dc.w DATACB02R94ZJ8_8-DATACB02R94ZJ8, DATACB02R94ZJ8_9-DATACB02R94ZJ8
00024376 0000 0000                  	dc.w DATACB02R94ZJ8_A-DATACB02R94ZJ8, DATACB02R94ZJ8_B-DATACB02R94ZJ8
0002437A 0000 0000                  	dc.w DATACB02R94ZJ8_C-DATACB02R94ZJ8, DATACB02R94ZJ8_D-DATACB02R94ZJ8
0002437E 0000 0000                  	dc.w DATACB02R94ZJ8_E-DATACB02R94ZJ8, DATACB02R94ZJ8_F-DATACB02R94ZJ8
00024382 0000 0000                  	dc.w DATACB02R94ZJ8_10-DATACB02R94ZJ8, DATACB02R94ZJ8_11-DATACB02R94ZJ8
00024386 0000 0000                  	dc.w DATACB02R94ZJ8_12-DATACB02R94ZJ8, DATACB02R94ZJ8_13-DATACB02R94ZJ8
0002438A 0000 0000                  	dc.w DATACB02R94ZJ8_14-DATACB02R94ZJ8, DATACB02R94ZJ8_15-DATACB02R94ZJ8
0002438E 0000 0000                  	dc.w DATACB02R94ZJ8_16-DATACB02R94ZJ8, DATACB02R94ZJ8_17-DATACB02R94ZJ8
00024392 0000 0000                  	dc.w DATACB02R94ZJ8_18-DATACB02R94ZJ8, DATACB02R94ZJ8_19-DATACB02R94ZJ8
00024396 0000 0000                  	dc.w DATACB02R94ZJ8_1A-DATACB02R94ZJ8, DATACB02R94ZJ8_1B-DATACB02R94ZJ8
0002439A 0000 0000                  	dc.w DATACB02R94ZJ8_1C-DATACB02R94ZJ8, DATACB02R94ZJ8_1D-DATACB02R94ZJ8
0002439E 0000 0000                  	dc.w DATACB02R94ZJ8_1E-DATACB02R94ZJ8, DATACB02R94ZJ8_1F-DATACB02R94ZJ8
000243A2 0000 0000                  	dc.w DATACB02R94ZJ8_20-DATACB02R94ZJ8, DATACB02R94ZJ8_21-DATACB02R94ZJ8
000243A6 0000 0000                  	dc.w DATACB02R94ZJ8_22-DATACB02R94ZJ8, DATACB02R94ZJ8_23-DATACB02R94ZJ8
000243AA 0000 0000                  	dc.w DATACB02R94ZJ8_24-DATACB02R94ZJ8, DATACB02R94ZJ8_25-DATACB02R94ZJ8
000243AE 0000 0000                  	dc.w DATACB02R94ZJ8_26-DATACB02R94ZJ8, DATACB02R94ZJ8_27-DATACB02R94ZJ8
000243B2 0000 0000                  	dc.w DATACB02R94ZJ8_28-DATACB02R94ZJ8, DATACB02R94ZJ8_29-DATACB02R94ZJ8
000243B6 0000 0000                  	dc.w DATACB02R94ZJ8_2A-DATACB02R94ZJ8, DATACB02R94ZJ8_2B-DATACB02R94ZJ8
000243BA 0000 0000                  	dc.w DATACB02R94ZJ8_2C-DATACB02R94ZJ8, DATACB02R94ZJ8_2D-DATACB02R94ZJ8
000243BE 0000 0000                  	dc.w DATACB02R94ZJ8_2E-DATACB02R94ZJ8, DATACB02R94ZJ8_2F-DATACB02R94ZJ8
000243C2 0000 0000                  	dc.w DATACB02R94ZJ8_30-DATACB02R94ZJ8, DATACB02R94ZJ8_31-DATACB02R94ZJ8
000243C6 0000 0000                  	dc.w DATACB02R94ZJ8_32-DATACB02R94ZJ8, DATACB02R94ZJ8_33-DATACB02R94ZJ8
000243CA 0000 0000                  	dc.w DATACB02R94ZJ8_34-DATACB02R94ZJ8, DATACB02R94ZJ8_35-DATACB02R94ZJ8
000243CE 0000 0000                  	dc.w DATACB02R94ZJ8_36-DATACB02R94ZJ8, DATACB02R94ZJ8_37-DATACB02R94ZJ8
000243D2 0000 0000                  	dc.w DATACB02R94ZJ8_38-DATACB02R94ZJ8, DATACB02R94ZJ8_39-DATACB02R94ZJ8
000243D6 0000 0000                  	dc.w DATACB02R94ZJ8_3A-DATACB02R94ZJ8, DATACB02R94ZJ8_3B-DATACB02R94ZJ8
000243DA 0000 0000                  	dc.w DATACB02R94ZJ8_3C-DATACB02R94ZJ8, DATACB02R94ZJ8_3D-DATACB02R94ZJ8
000243DE 0000 0000                  	dc.w DATACB02R94ZJ8_3E-DATACB02R94ZJ8, DATACB02R94ZJ8_3F-DATACB02R94ZJ8
000243E2 0000 0000                  	dc.w DATACB02R94ZJ8_40-DATACB02R94ZJ8, DATACB02R94ZJ8_41-DATACB02R94ZJ8
000243E6 0000 0000                  	dc.w DATACB02R94ZJ8_42-DATACB02R94ZJ8, DATACB02R94ZJ8_43-DATACB02R94ZJ8
000243EA 0000 0000                  	dc.w DATACB02R94ZJ8_44-DATACB02R94ZJ8, DATACB02R94ZJ8_45-DATACB02R94ZJ8
000243EE 0000 0000                  	dc.w DATACB02R94ZJ8_46-DATACB02R94ZJ8, DATACB02R94ZJ8_47-DATACB02R94ZJ8
000243F2 0000 0000                  	dc.w DATACB02R94ZJ8_48-DATACB02R94ZJ8, DATACB02R94ZJ8_49-DATACB02R94ZJ8
000243F6 0000 0000                  	dc.w DATACB02R94ZJ8_4A-DATACB02R94ZJ8, DATACB02R94ZJ8_4B-DATACB02R94ZJ8
000243FA 0000 0000                  	dc.w DATACB02R94ZJ8_4C-DATACB02R94ZJ8, DATACB02R94ZJ8_4D-DATACB02R94ZJ8
000243FE 0000 0000                  	dc.w DATACB02R94ZJ8_4E-DATACB02R94ZJ8, DATACB02R94ZJ8_4F-DATACB02R94ZJ8
00024402 0000 0000                  	dc.w DATACB02R94ZJ8_50-DATACB02R94ZJ8, DATACB02R94ZJ8_51-DATACB02R94ZJ8
00024406 0000 0000                  	dc.w DATACB02R94ZJ8_52-DATACB02R94ZJ8, DATACB02R94ZJ8_53-DATACB02R94ZJ8
0002440A 0000 0000                  	dc.w DATACB02R94ZJ8_54-DATACB02R94ZJ8, DATACB02R94ZJ8_55-DATACB02R94ZJ8
0002440E 0000 0000                  	dc.w DATACB02R94ZJ8_56-DATACB02R94ZJ8, DATACB02R94ZJ8_57-DATACB02R94ZJ8
00024412 00                         DATACB02R94ZJ8_0: dc.b $0
00024413 04                         DATACB02R94ZJ8_1: dc.b $4
00024414 F000                       	dc.b $F0, $0
00024416 0010                       	dc.b $0, $10
00024418 1509                       	dc.b $15, $9
0002441A 050C                       	dc.b $5, $C
0002441C 03                         DATACB02R94ZJ8_2: dc.b $3
0002441D 5011                       	dc.b $50, $11
0002441F 5017                       	dc.b $50, $17
00024421 201D                       	dc.b $20, $1D
00024423 03                         DATACB02R94ZJ8_3: dc.b $3
00024424 5020                       	dc.b $50, $20
00024426 5017                       	dc.b $50, $17
00024428 201D                       	dc.b $20, $1D
0002442A 03                         DATACB02R94ZJ8_4: dc.b $3
0002442B 5020                       	dc.b $50, $20
0002442D 5017                       	dc.b $50, $17
0002442F 2026                       	dc.b $20, $26
00024431 03                         DATACB02R94ZJ8_5: dc.b $3
00024432 8029                       	dc.b $80, $29
00024434 200B                       	dc.b $20, $B
00024436 200E                       	dc.b $20, $E
00024438 03                         DATACB02R94ZJ8_6: dc.b $3
00024439 3035                       	dc.b $30, $35
0002443B F011                       	dc.b $F0, $11
0002443D 3021                       	dc.b $30, $21
0002443F 02                         DATACB02R94ZJ8_7: dc.b $2
00024440 B048                       	dc.b $B0, $48
00024442 750D                       	dc.b $75, $D
00024444 04                         DATACB02R94ZJ8_8: dc.b $4
00024445 E054                       	dc.b $E0, $54
00024447 0515                       	dc.b $5, $15
00024449 24AC                       	dc.b $24, $AC
0002444B 0025                       	dc.b $0, $25
0002444D 04                         DATACB02R94ZJ8_9: dc.b $4
0002444E 5063                       	dc.b $50, $63
00024450 335B                       	dc.b $33, $5B
00024452 3361                       	dc.b $33, $61
00024454 54A3                       	dc.b $54, $A3
00024456 04                         DATACB02R94ZJ8_A: dc.b $4
00024457 B071                       	dc.b $B0, $71
00024459 134F                       	dc.b $13, $4F
0002445B 5353                       	dc.b $53, $53
0002445D 1375                       	dc.b $13, $75
0002445F 02                         DATACB02R94ZJ8_B: dc.b $2
00024460 907D                       	dc.b $90, $7D
00024462 C377                       	dc.b $C3, $77
00024464 03                         DATACB02R94ZJ8_C: dc.b $3
00024465 F0AE                       	dc.b $F0, $AE
00024467 20BE                       	dc.b $20, $BE
00024469 02ED                       	dc.b $2, $ED
0002446B 03                         DATACB02R94ZJ8_D: dc.b $3
0002446C F0AE                       	dc.b $F0, $AE
0002446E 20BE                       	dc.b $20, $BE
00024470 02ED                       	dc.b $2, $ED
00024472 03                         DATACB02R94ZJ8_E: dc.b $3
00024473 F0AE                       	dc.b $F0, $AE
00024475 20BE                       	dc.b $20, $BE
00024477 02ED                       	dc.b $2, $ED
00024479 03                         DATACB02R94ZJ8_F: dc.b $3
0002447A F0AE                       	dc.b $F0, $AE
0002447C 20BE                       	dc.b $20, $BE
0002447E 02ED                       	dc.b $2, $ED
00024480 03                         DATACB02R94ZJ8_10: dc.b $3
00024481 F0AE                       	dc.b $F0, $AE
00024483 20BE                       	dc.b $20, $BE
00024485 02ED                       	dc.b $2, $ED
00024487 03                         DATACB02R94ZJ8_11: dc.b $3
00024488 F0AE                       	dc.b $F0, $AE
0002448A 20BE                       	dc.b $20, $BE
0002448C 02ED                       	dc.b $2, $ED
0002448E 02                         DATACB02R94ZJ8_12: dc.b $2
0002448F D121                       	dc.b $D1, $21
00024491 54B0                       	dc.b $54, $B0
00024493 02                         DATACB02R94ZJ8_13: dc.b $2
00024494 D121                       	dc.b $D1, $21
00024496 54B0                       	dc.b $54, $B0
00024498 02                         DATACB02R94ZJ8_14: dc.b $2
00024499 D121                       	dc.b $D1, $21
0002449B 54B0                       	dc.b $54, $B0
0002449D 02                         DATACB02R94ZJ8_15: dc.b $2
0002449E D121                       	dc.b $D1, $21
000244A0 54B0                       	dc.b $54, $B0
000244A2 02                         DATACB02R94ZJ8_16: dc.b $2
000244A3 D121                       	dc.b $D1, $21
000244A5 54B0                       	dc.b $54, $B0
000244A7 02                         DATACB02R94ZJ8_17: dc.b $2
000244A8 D121                       	dc.b $D1, $21
000244AA 54B0                       	dc.b $54, $B0
000244AC 03                         DATACB02R94ZJ8_18: dc.b $3
000244AD F169                       	dc.b $F1, $69
000244AF 2179                       	dc.b $21, $79
000244B1 144A                       	dc.b $14, $4A
000244B3 03                         DATACB02R94ZJ8_19: dc.b $3
000244B4 F169                       	dc.b $F1, $69
000244B6 2179                       	dc.b $21, $79
000244B8 144A                       	dc.b $14, $4A
000244BA 03                         DATACB02R94ZJ8_1A: dc.b $3
000244BB F169                       	dc.b $F1, $69
000244BD 2179                       	dc.b $21, $79
000244BF 144A                       	dc.b $14, $4A
000244C1 03                         DATACB02R94ZJ8_1B: dc.b $3
000244C2 F169                       	dc.b $F1, $69
000244C4 2179                       	dc.b $21, $79
000244C6 144A                       	dc.b $14, $4A
000244C8 03                         DATACB02R94ZJ8_1C: dc.b $3
000244C9 F169                       	dc.b $F1, $69
000244CB 2179                       	dc.b $21, $79
000244CD 144A                       	dc.b $14, $4A
000244CF 03                         DATACB02R94ZJ8_1D: dc.b $3
000244D0 F169                       	dc.b $F1, $69
000244D2 2179                       	dc.b $21, $79
000244D4 144A                       	dc.b $14, $4A
000244D6 04                         DATACB02R94ZJ8_1E: dc.b $4
000244D7 F1AA                       	dc.b $F1, $AA
000244D9 11BA                       	dc.b $11, $BA
000244DB 02E0                       	dc.b $2, $E0
000244DD A039                       	dc.b $A0, $39
000244DF 04                         DATACB02R94ZJ8_1F: dc.b $4
000244E0 B1BC                       	dc.b $B1, $BC
000244E2 72EF                       	dc.b $72, $EF
000244E4 1044                       	dc.b $10, $44
000244E6 7389                       	dc.b $73, $89
000244E8 03                         DATACB02R94ZJ8_20: dc.b $3
000244E9 B1C8                       	dc.b $B1, $C8
000244EB 52FF                       	dc.b $52, $FF
000244ED B391                       	dc.b $B3, $91
000244EF 03                         DATACB02R94ZJ8_21: dc.b $3
000244F0 B1D4                       	dc.b $B1, $D4
000244F2 62E1                       	dc.b $62, $E1
000244F4 A39D                       	dc.b $A3, $9D
000244F6 04                         DATACB02R94ZJ8_22: dc.b $4
000244F7 51E0                       	dc.b $51, $E0
000244F9 11E6                       	dc.b $11, $E6
000244FB B1E8                       	dc.b $B1, $E8
000244FD 01F4                       	dc.b $1, $F4
000244FF 04                         DATACB02R94ZJ8_23: dc.b $4
00024500 51E0                       	dc.b $51, $E0
00024502 11E6                       	dc.b $11, $E6
00024504 B1E8                       	dc.b $B1, $E8
00024506 01F4                       	dc.b $1, $F4
00024508 04                         DATACB02R94ZJ8_24: dc.b $4
00024509 51E0                       	dc.b $51, $E0
0002450B 11E6                       	dc.b $11, $E6
0002450D B1E8                       	dc.b $B1, $E8
0002450F 01F4                       	dc.b $1, $F4
00024511 04                         DATACB02R94ZJ8_25: dc.b $4
00024512 51E0                       	dc.b $51, $E0
00024514 11E6                       	dc.b $11, $E6
00024516 B1E8                       	dc.b $B1, $E8
00024518 01F4                       	dc.b $1, $F4
0002451A 04                         DATACB02R94ZJ8_26: dc.b $4
0002451B F223                       	dc.b $F2, $23
0002451D 1233                       	dc.b $12, $33
0002451F 03E7                       	dc.b $3, $E7
00024521 3236                       	dc.b $32, $36
00024523 04                         DATACB02R94ZJ8_27: dc.b $4
00024524 F223                       	dc.b $F2, $23
00024526 1233                       	dc.b $12, $33
00024528 03E7                       	dc.b $3, $E7
0002452A 3236                       	dc.b $32, $36
0002452C 04                         DATACB02R94ZJ8_28: dc.b $4
0002452D F223                       	dc.b $F2, $23
0002452F 1233                       	dc.b $12, $33
00024531 03E7                       	dc.b $3, $E7
00024533 3236                       	dc.b $32, $36
00024535 04                         DATACB02R94ZJ8_29: dc.b $4
00024536 F223                       	dc.b $F2, $23
00024538 1233                       	dc.b $12, $33
0002453A 03E7                       	dc.b $3, $E7
0002453C 3236                       	dc.b $32, $36
0002453E 02                         DATACB02R94ZJ8_2A: dc.b $2
0002453F 726E                       	dc.b $72, $6E
00024541 B276                       	dc.b $B2, $76
00024543 02                         DATACB02R94ZJ8_2B: dc.b $2
00024544 726E                       	dc.b $72, $6E
00024546 B276                       	dc.b $B2, $76
00024548 02                         DATACB02R94ZJ8_2C: dc.b $2
00024549 726E                       	dc.b $72, $6E
0002454B B276                       	dc.b $B2, $76
0002454D 02                         DATACB02R94ZJ8_2D: dc.b $2
0002454E 726E                       	dc.b $72, $6E
00024550 B276                       	dc.b $B2, $76
00024552 01                         DATACB02R94ZJ8_2E: dc.b $1
00024553 F29C                       	dc.b $F2, $9C
00024555 01                         DATACB02R94ZJ8_2F: dc.b $1
00024556 F2AC                       	dc.b $F2, $AC
00024558 01                         DATACB02R94ZJ8_30: dc.b $1
00024559 F2BC                       	dc.b $F2, $BC
0002455B 01                         DATACB02R94ZJ8_31: dc.b $1
0002455C F2CC                       	dc.b $F2, $CC
0002455E 01                         DATACB02R94ZJ8_32: dc.b $1
0002455F F461                       	dc.b $F4, $61
00024561 02                         DATACB02R94ZJ8_33: dc.b $2
00024562 B2EC                       	dc.b $B2, $EC
00024564 22F8                       	dc.b $22, $F8
00024566 01                         DATACB02R94ZJ8_34: dc.b $1
00024567 F2FB                       	dc.b $F2, $FB
00024569 02                         DATACB02R94ZJ8_35: dc.b $2
0002456A B30B                       	dc.b $B3, $B
0002456C 2317                       	dc.b $23, $17
0002456E 01                         DATACB02R94ZJ8_36: dc.b $1
0002456F F31A                       	dc.b $F3, $1A
00024571 02                         DATACB02R94ZJ8_37: dc.b $2
00024572 532A                       	dc.b $53, $2A
00024574 B330                       	dc.b $B3, $30
00024576 04                         DATACB02R94ZJ8_38: dc.b $4
00024577 533C                       	dc.b $53, $3C
00024579 7342                       	dc.b $73, $42
0002457B 134A                       	dc.b $13, $4A
0002457D 034C                       	dc.b $3, $4C
0002457F 04                         DATACB02R94ZJ8_39: dc.b $4
00024580 134D                       	dc.b $13, $4D
00024582 734F                       	dc.b $73, $4F
00024584 2357                       	dc.b $23, $57
00024586 035A                       	dc.b $3, $5A
00024588 03                         DATACB02R94ZJ8_3A: dc.b $3
00024589 235B                       	dc.b $23, $5B
0002458B 235E                       	dc.b $23, $5E
0002458D F361                       	dc.b $F3, $61
0002458F 03                         DATACB02R94ZJ8_3B: dc.b $3
00024590 B371                       	dc.b $B3, $71
00024592 737D                       	dc.b $73, $7D
00024594 0071                       	dc.b $0, $71
00024596 03                         DATACB02R94ZJ8_3C: dc.b $3
00024597 7385                       	dc.b $73, $85
00024599 338D                       	dc.b $33, $8D
0002459B 2391                       	dc.b $23, $91
0002459D 01                         DATACB02R94ZJ8_3D: dc.b $1
0002459E 8394                       	dc.b $83, $94
000245A0 03                         DATACB02R94ZJ8_3E: dc.b $3
000245A1 739D                       	dc.b $73, $9D
000245A3 03A5                       	dc.b $3, $A5
000245A5 33A6                       	dc.b $33, $A6
000245A7 03                         DATACB02R94ZJ8_3F: dc.b $3
000245A8 73AA                       	dc.b $73, $AA
000245AA 33B2                       	dc.b $33, $B2
000245AC 23B6                       	dc.b $23, $B6
000245AE 03                         DATACB02R94ZJ8_40: dc.b $3
000245AF B3B9                       	dc.b $B3, $B9
000245B1 13C5                       	dc.b $13, $C5
000245B3 03C7                       	dc.b $3, $C7
000245B5 04                         DATACB02R94ZJ8_41: dc.b $4
000245B6 B3C8                       	dc.b $B3, $C8
000245B8 33D4                       	dc.b $33, $D4
000245BA 03D8                       	dc.b $3, $D8
000245BC 03D9                       	dc.b $3, $D9
000245BE 04                         DATACB02R94ZJ8_42: dc.b $4
000245BF B3DA                       	dc.b $B3, $DA
000245C1 33E6                       	dc.b $33, $E6
000245C3 03EA                       	dc.b $3, $EA
000245C5 03EB                       	dc.b $3, $EB
000245C7 05                         DATACB02R94ZJ8_43: dc.b $5
000245C8 83EC                       	dc.b $83, $EC
000245CA 13F5                       	dc.b $13, $F5
000245CC 53F7                       	dc.b $53, $F7
000245CE 13FD                       	dc.b $13, $FD
000245D0 03FF                       	dc.b $3, $FF
000245D2 05                         DATACB02R94ZJ8_44: dc.b $5
000245D3 8400                       	dc.b $84, $0
000245D5 1409                       	dc.b $14, $9
000245D7 53F7                       	dc.b $53, $F7
000245D9 13FD                       	dc.b $13, $FD
000245DB 03FF                       	dc.b $3, $FF
000245DD 02                         DATACB02R94ZJ8_45: dc.b $2
000245DE 840B                       	dc.b $84, $B
000245E0 7414                       	dc.b $74, $14
000245E2 03                         DATACB02R94ZJ8_46: dc.b $3
000245E3 841C                       	dc.b $84, $1C
000245E5 2425                       	dc.b $24, $25
000245E7 1428                       	dc.b $14, $28
000245E9 02                         DATACB02R94ZJ8_47: dc.b $2
000245EA 842A                       	dc.b $84, $2A
000245EC 7433                       	dc.b $74, $33
000245EE 03                         DATACB02R94ZJ8_48: dc.b $3
000245EF 841C                       	dc.b $84, $1C
000245F1 243B                       	dc.b $24, $3B
000245F3 143E                       	dc.b $14, $3E
000245F5 02                         DATACB02R94ZJ8_49: dc.b $2
000245F6 5440                       	dc.b $54, $40
000245F8 B446                       	dc.b $B4, $46
000245FA 03                         DATACB02R94ZJ8_4A: dc.b $3
000245FB 8452                       	dc.b $84, $52
000245FD 345B                       	dc.b $34, $5B
000245FF 045F                       	dc.b $4, $5F
00024601 03                         DATACB02R94ZJ8_4B: dc.b $3
00024602 7460                       	dc.b $74, $60
00024604 1468                       	dc.b $14, $68
00024606 B46A                       	dc.b $B4, $6A
00024608 05                         DATACB02R94ZJ8_4C: dc.b $5
00024609 7476                       	dc.b $74, $76
0002460B 147E                       	dc.b $14, $7E
0002460D 5480                       	dc.b $54, $80
0002460F 3486                       	dc.b $34, $86
00024611 048A                       	dc.b $4, $8A
00024613 05                         DATACB02R94ZJ8_4D: dc.b $5
00024614 748B                       	dc.b $74, $8B
00024616 147E                       	dc.b $14, $7E
00024618 5493                       	dc.b $54, $93
0002461A 3486                       	dc.b $34, $86
0002461C 048A                       	dc.b $4, $8A
0002461E 02                         DATACB02R94ZJ8_4E: dc.b $2
0002461F 2499                       	dc.b $24, $99
00024621 F49C                       	dc.b $F4, $9C
00024623 03                         DATACB02R94ZJ8_4F: dc.b $3
00024624 24AC                       	dc.b $24, $AC
00024626 B4AF                       	dc.b $B4, $AF
00024628 24BB                       	dc.b $24, $BB
0002462A 01                         DATACB02R94ZJ8_50: dc.b $1
0002462B B4BE                       	dc.b $B4, $BE
0002462D 01                         DATACB02R94ZJ8_51: dc.b $1
0002462E 54CA                       	dc.b $54, $CA
00024630 01                         DATACB02R94ZJ8_52: dc.b $1
00024631 14D0                       	dc.b $14, $D0
00024633 03                         DATACB02R94ZJ8_53: dc.b $3
00024634 7385                       	dc.b $73, $85
00024636 338D                       	dc.b $33, $8D
00024638 2391                       	dc.b $23, $91
0002463A 03                         DATACB02R94ZJ8_54: dc.b $3
0002463B 739D                       	dc.b $73, $9D
0002463D 03A5                       	dc.b $3, $A5
0002463F 33A6                       	dc.b $33, $A6
00024641 03                         DATACB02R94ZJ8_55: dc.b $3
00024642 B4D2                       	dc.b $B4, $D2
00024644 14DE                       	dc.b $14, $DE
00024646 34E0                       	dc.b $34, $E0
00024648 03                         DATACB02R94ZJ8_56: dc.b $3
00024649 54E4                       	dc.b $54, $E4
0002464B B4EA                       	dc.b $B4, $EA
0002464D 106D                       	dc.b $10, $6D
0002464F 02                         DATACB02R94ZJ8_57: dc.b $2
00024650 F4F6                       	dc.b $F4, $F6
00024652 2506                       	dc.b $25, $6
00024654                            	even
00024654                            	even
00024654                            ; ---------------------------------------------------------------------------
00024654                            ; Uncompressed graphics	loading	array for Pepsi
00024654                            ; ---------------------------------------------------------------------------
00024654                            PepsimanDynPLC:
00024654                            	include "_inc\Pepsiman dynamic pattern load cues.asm"
00024654                            ; ================================================================================
00024654                            ; Sprite DPLCs - generated by Flex 2 Fri Sep 07 2018 20:27:38 GMT-0700 (Pacific Daylight Time)
00024654                            ; ================================================================================
00024654                            
00024654                            DATALN6OG66R86I:
00024654 0000 0000                  	dc.w DATALN6OG66R86I_0-DATALN6OG66R86I, DATALN6OG66R86I_1-DATALN6OG66R86I
00024658 0000 0000                  	dc.w DATALN6OG66R86I_2-DATALN6OG66R86I, DATALN6OG66R86I_3-DATALN6OG66R86I
0002465C 0000 0000                  	dc.w DATALN6OG66R86I_4-DATALN6OG66R86I, DATALN6OG66R86I_5-DATALN6OG66R86I
00024660 0000 0000                  	dc.w DATALN6OG66R86I_6-DATALN6OG66R86I, DATALN6OG66R86I_7-DATALN6OG66R86I
00024664 0000 0000                  	dc.w DATALN6OG66R86I_8-DATALN6OG66R86I, DATALN6OG66R86I_9-DATALN6OG66R86I
00024668 0000 0000                  	dc.w DATALN6OG66R86I_A-DATALN6OG66R86I, DATALN6OG66R86I_B-DATALN6OG66R86I
0002466C 0000 0000                  	dc.w DATALN6OG66R86I_C-DATALN6OG66R86I, DATALN6OG66R86I_D-DATALN6OG66R86I
00024670 0000 0000                  	dc.w DATALN6OG66R86I_E-DATALN6OG66R86I, DATALN6OG66R86I_F-DATALN6OG66R86I
00024674 0000 0000                  	dc.w DATALN6OG66R86I_10-DATALN6OG66R86I, DATALN6OG66R86I_11-DATALN6OG66R86I
00024678 0000 0000                  	dc.w DATALN6OG66R86I_12-DATALN6OG66R86I, DATALN6OG66R86I_13-DATALN6OG66R86I
0002467C 0000 0000                  	dc.w DATALN6OG66R86I_14-DATALN6OG66R86I, DATALN6OG66R86I_15-DATALN6OG66R86I
00024680 0000 0000                  	dc.w DATALN6OG66R86I_16-DATALN6OG66R86I, DATALN6OG66R86I_17-DATALN6OG66R86I
00024684 0000 0000                  	dc.w DATALN6OG66R86I_18-DATALN6OG66R86I, DATALN6OG66R86I_19-DATALN6OG66R86I
00024688 0000 0000                  	dc.w DATALN6OG66R86I_1A-DATALN6OG66R86I, DATALN6OG66R86I_1B-DATALN6OG66R86I
0002468C 0000 0000                  	dc.w DATALN6OG66R86I_1C-DATALN6OG66R86I, DATALN6OG66R86I_1D-DATALN6OG66R86I
00024690 0000 0000                  	dc.w DATALN6OG66R86I_1E-DATALN6OG66R86I, DATALN6OG66R86I_1F-DATALN6OG66R86I
00024694 0000 0000                  	dc.w DATALN6OG66R86I_20-DATALN6OG66R86I, DATALN6OG66R86I_21-DATALN6OG66R86I
00024698 0000 0000                  	dc.w DATALN6OG66R86I_22-DATALN6OG66R86I, DATALN6OG66R86I_23-DATALN6OG66R86I
0002469C 0000 0000                  	dc.w DATALN6OG66R86I_24-DATALN6OG66R86I, DATALN6OG66R86I_25-DATALN6OG66R86I
000246A0 0000 0000                  	dc.w DATALN6OG66R86I_26-DATALN6OG66R86I, DATALN6OG66R86I_27-DATALN6OG66R86I
000246A4 0000 0000                  	dc.w DATALN6OG66R86I_28-DATALN6OG66R86I, DATALN6OG66R86I_29-DATALN6OG66R86I
000246A8 0000 0000                  	dc.w DATALN6OG66R86I_2A-DATALN6OG66R86I, DATALN6OG66R86I_2B-DATALN6OG66R86I
000246AC 0000 0000                  	dc.w DATALN6OG66R86I_2C-DATALN6OG66R86I, DATALN6OG66R86I_2D-DATALN6OG66R86I
000246B0 0000 0000                  	dc.w DATALN6OG66R86I_2E-DATALN6OG66R86I, DATALN6OG66R86I_2F-DATALN6OG66R86I
000246B4 0000 0000                  	dc.w DATALN6OG66R86I_30-DATALN6OG66R86I, DATALN6OG66R86I_31-DATALN6OG66R86I
000246B8 0000 0000                  	dc.w DATALN6OG66R86I_32-DATALN6OG66R86I, DATALN6OG66R86I_33-DATALN6OG66R86I
000246BC 0000 0000                  	dc.w DATALN6OG66R86I_34-DATALN6OG66R86I, DATALN6OG66R86I_35-DATALN6OG66R86I
000246C0 0000 0000                  	dc.w DATALN6OG66R86I_36-DATALN6OG66R86I, DATALN6OG66R86I_37-DATALN6OG66R86I
000246C4 0000 0000                  	dc.w DATALN6OG66R86I_38-DATALN6OG66R86I, DATALN6OG66R86I_39-DATALN6OG66R86I
000246C8 0000 0000                  	dc.w DATALN6OG66R86I_3A-DATALN6OG66R86I, DATALN6OG66R86I_3B-DATALN6OG66R86I
000246CC 0000 0000                  	dc.w DATALN6OG66R86I_3C-DATALN6OG66R86I, DATALN6OG66R86I_3D-DATALN6OG66R86I
000246D0 0000 0000                  	dc.w DATALN6OG66R86I_3E-DATALN6OG66R86I, DATALN6OG66R86I_3F-DATALN6OG66R86I
000246D4 0000 0000                  	dc.w DATALN6OG66R86I_40-DATALN6OG66R86I, DATALN6OG66R86I_41-DATALN6OG66R86I
000246D8 0000 0000                  	dc.w DATALN6OG66R86I_42-DATALN6OG66R86I, DATALN6OG66R86I_43-DATALN6OG66R86I
000246DC 0000 0000                  	dc.w DATALN6OG66R86I_44-DATALN6OG66R86I, DATALN6OG66R86I_45-DATALN6OG66R86I
000246E0 0000 0000                  	dc.w DATALN6OG66R86I_46-DATALN6OG66R86I, DATALN6OG66R86I_47-DATALN6OG66R86I
000246E4 0000 0000                  	dc.w DATALN6OG66R86I_48-DATALN6OG66R86I, DATALN6OG66R86I_49-DATALN6OG66R86I
000246E8 0000 0000                  	dc.w DATALN6OG66R86I_4A-DATALN6OG66R86I, DATALN6OG66R86I_4B-DATALN6OG66R86I
000246EC 0000 0000                  	dc.w DATALN6OG66R86I_4C-DATALN6OG66R86I, DATALN6OG66R86I_4D-DATALN6OG66R86I
000246F0 0000 0000                  	dc.w DATALN6OG66R86I_4E-DATALN6OG66R86I, DATALN6OG66R86I_4F-DATALN6OG66R86I
000246F4 0000 0000                  	dc.w DATALN6OG66R86I_50-DATALN6OG66R86I, DATALN6OG66R86I_51-DATALN6OG66R86I
000246F8 0000 0000                  	dc.w DATALN6OG66R86I_52-DATALN6OG66R86I, DATALN6OG66R86I_53-DATALN6OG66R86I
000246FC 0000 0000                  	dc.w DATALN6OG66R86I_54-DATALN6OG66R86I, DATALN6OG66R86I_55-DATALN6OG66R86I
00024700 0000 0000                  	dc.w DATALN6OG66R86I_56-DATALN6OG66R86I, DATALN6OG66R86I_57-DATALN6OG66R86I
00024704 00                         DATALN6OG66R86I_0: dc.b $0
00024705 05                         DATALN6OG66R86I_1: dc.b $5
00024706 F000                       	dc.b $F0, $0
00024708 0010                       	dc.b $0, $10
0002470A 1212                       	dc.b $12, $12
0002470C 0214                       	dc.b $2, $14
0002470E F17F                       	dc.b $F1, $7F
00024710 00                         DATALN6OG66R86I_2: dc.b $0
00024711 00                         DATALN6OG66R86I_3: dc.b $0
00024712 00                         DATALN6OG66R86I_4: dc.b $0
00024713 00                         DATALN6OG66R86I_5: dc.b $0
00024714 05                         DATALN6OG66R86I_6: dc.b $5
00024715 F011                       	dc.b $F0, $11
00024717 3021                       	dc.b $30, $21
00024719 1026                       	dc.b $10, $26
0002471B C13A                       	dc.b $C1, $3A
0002471D C18F                       	dc.b $C1, $8F
0002471F 03                         DATALN6OG66R86I_7: dc.b $3
00024720 B035                       	dc.b $B0, $35
00024722 7215                       	dc.b $72, $15
00024724 F19C                       	dc.b $F1, $9C
00024726 06                         DATALN6OG66R86I_8: dc.b $6
00024727 E041                       	dc.b $E0, $41
00024729 021D                       	dc.b $2, $1D
0002472B 21DB                       	dc.b $21, $DB
0002472D 0025                       	dc.b $0, $25
0002472F 31C0                       	dc.b $31, $C0
00024731 11BE                       	dc.b $11, $BE
00024733 07                         DATALN6OG66R86I_9: dc.b $7
00024734 5050                       	dc.b $50, $50
00024736 7158                       	dc.b $71, $58
00024738 51D5                       	dc.b $51, $D5
0002473A 71B2                       	dc.b $71, $B2
0002473C 51AC                       	dc.b $51, $AC
0002473E B1F6                       	dc.b $B1, $F6
00024740 3498                       	dc.b $34, $98
00024742 06                         DATALN6OG66R86I_A: dc.b $6
00024743 E041                       	dc.b $E0, $41
00024745 021D                       	dc.b $2, $1D
00024747 21DB                       	dc.b $21, $DB
00024749 0025                       	dc.b $0, $25
0002474B 31C0                       	dc.b $31, $C0
0002474D 11BE                       	dc.b $11, $BE
0002474F 03                         DATALN6OG66R86I_B: dc.b $3
00024750 B035                       	dc.b $B0, $35
00024752 7215                       	dc.b $72, $15
00024754 F19C                       	dc.b $F1, $9C
00024756 05                         DATALN6OG66R86I_C: dc.b $5
00024757 F056                       	dc.b $F0, $56
00024759 2066                       	dc.b $20, $66
0002475B 012B                       	dc.b $1, $2B
0002475D F2D2                       	dc.b $F2, $D2
0002475F B2E2                       	dc.b $B2, $E2
00024761 03                         DATALN6OG66R86I_D: dc.b $3
00024762 F2EE                       	dc.b $F2, $EE
00024764 B2FE                       	dc.b $B2, $FE
00024766 130A                       	dc.b $13, $A
00024768 05                         DATALN6OG66R86I_E: dc.b $5
00024769 F056                       	dc.b $F0, $56
0002476B 2066                       	dc.b $20, $66
0002476D 012B                       	dc.b $1, $2B
0002476F F2D2                       	dc.b $F2, $D2
00024771 B2E2                       	dc.b $B2, $E2
00024773 03                         DATALN6OG66R86I_F: dc.b $3
00024774 F2EE                       	dc.b $F2, $EE
00024776 B2FE                       	dc.b $B2, $FE
00024778 130A                       	dc.b $13, $A
0002477A 05                         DATALN6OG66R86I_10: dc.b $5
0002477B F056                       	dc.b $F0, $56
0002477D 2066                       	dc.b $20, $66
0002477F 012B                       	dc.b $1, $2B
00024781 F2D2                       	dc.b $F2, $D2
00024783 B2E2                       	dc.b $B2, $E2
00024785 03                         DATALN6OG66R86I_11: dc.b $3
00024786 F2EE                       	dc.b $F2, $EE
00024788 B2FE                       	dc.b $B2, $FE
0002478A 130A                       	dc.b $13, $A
0002478C 05                         DATALN6OG66R86I_12: dc.b $5
0002478D D069                       	dc.b $D0, $69
0002478F 51DE                       	dc.b $51, $DE
00024791 F403                       	dc.b $F4, $3
00024793 5413                       	dc.b $54, $13
00024795 4419                       	dc.b $44, $19
00024797 02                         DATALN6OG66R86I_13: dc.b $2
00024798 F455                       	dc.b $F4, $55
0002479A 9465                       	dc.b $94, $65
0002479C 05                         DATALN6OG66R86I_14: dc.b $5
0002479D D069                       	dc.b $D0, $69
0002479F 51DE                       	dc.b $51, $DE
000247A1 F403                       	dc.b $F4, $3
000247A3 5413                       	dc.b $54, $13
000247A5 4419                       	dc.b $44, $19
000247A7 02                         DATALN6OG66R86I_15: dc.b $2
000247A8 F455                       	dc.b $F4, $55
000247AA 9465                       	dc.b $94, $65
000247AC 05                         DATALN6OG66R86I_16: dc.b $5
000247AD D069                       	dc.b $D0, $69
000247AF 51DE                       	dc.b $51, $DE
000247B1 F403                       	dc.b $F4, $3
000247B3 5413                       	dc.b $54, $13
000247B5 4419                       	dc.b $44, $19
000247B7 02                         DATALN6OG66R86I_17: dc.b $2
000247B8 F455                       	dc.b $F4, $55
000247BA 9465                       	dc.b $94, $65
000247BC 04                         DATALN6OG66R86I_18: dc.b $4
000247BD F0EB                       	dc.b $F0, $EB
000247BF 30FB                       	dc.b $30, $FB
000247C1 F36A                       	dc.b $F3, $6A
000247C3 A37A                       	dc.b $A3, $7A
000247C5 04                         DATALN6OG66R86I_19: dc.b $4
000247C6 F077                       	dc.b $F0, $77
000247C8 2087                       	dc.b $20, $87
000247CA 11BA                       	dc.b $11, $BA
000247CC 8385                       	dc.b $83, $85
000247CE 04                         DATALN6OG66R86I_1A: dc.b $4
000247CF F0EB                       	dc.b $F0, $EB
000247D1 30FB                       	dc.b $30, $FB
000247D3 F36A                       	dc.b $F3, $6A
000247D5 A37A                       	dc.b $A3, $7A
000247D7 04                         DATALN6OG66R86I_1B: dc.b $4
000247D8 F077                       	dc.b $F0, $77
000247DA 2087                       	dc.b $20, $87
000247DC 11BA                       	dc.b $11, $BA
000247DE 8385                       	dc.b $83, $85
000247E0 04                         DATALN6OG66R86I_1C: dc.b $4
000247E1 F0EB                       	dc.b $F0, $EB
000247E3 30FB                       	dc.b $30, $FB
000247E5 F36A                       	dc.b $F3, $6A
000247E7 A37A                       	dc.b $A3, $7A
000247E9 04                         DATALN6OG66R86I_1D: dc.b $4
000247EA F077                       	dc.b $F0, $77
000247EC 2087                       	dc.b $20, $87
000247EE 11BA                       	dc.b $11, $BA
000247F0 8385                       	dc.b $83, $85
000247F2 07                         DATALN6OG66R86I_1E: dc.b $7
000247F3 F08A                       	dc.b $F0, $8A
000247F5 109A                       	dc.b $10, $9A
000247F7 0123                       	dc.b $1, $23
000247F9 A028                       	dc.b $A0, $28
000247FB 7250                       	dc.b $72, $50
000247FD F258                       	dc.b $F2, $58
000247FF 0268                       	dc.b $2, $68
00024801 06                         DATALN6OG66R86I_1F: dc.b $6
00024802 B09C                       	dc.b $B0, $9C
00024804 712C                       	dc.b $71, $2C
00024806 1033                       	dc.b $10, $33
00024808 7160                       	dc.b $71, $60
0002480A F269                       	dc.b $F2, $69
0002480C 7279                       	dc.b $72, $79
0002480E 06                         DATALN6OG66R86I_20: dc.b $6
0002480F B0A8                       	dc.b $B0, $A8
00024811 5134                       	dc.b $51, $34
00024813 B168                       	dc.b $B1, $68
00024815 7281                       	dc.b $72, $81
00024817 F289                       	dc.b $F2, $89
00024819 9299                       	dc.b $92, $99
0002481B 06                         DATALN6OG66R86I_21: dc.b $6
0002481C B0B4                       	dc.b $B0, $B4
0002481E 6124                       	dc.b $61, $24
00024820 A174                       	dc.b $A1, $74
00024822 52A3                       	dc.b $52, $A3
00024824 F2A9                       	dc.b $F2, $A9
00024826 B2B9                       	dc.b $B2, $B9
00024828 05                         DATALN6OG66R86I_22: dc.b $5
00024829 F0C0                       	dc.b $F0, $C0
0002482B 40D0                       	dc.b $40, $D0
0002482D F30C                       	dc.b $F3, $C
0002482F 331C                       	dc.b $33, $1C
00024831 B320                       	dc.b $B3, $20
00024833 04                         DATALN6OG66R86I_23: dc.b $4
00024834 F32C                       	dc.b $F3, $2C
00024836 F33C                       	dc.b $F3, $3C
00024838 F34C                       	dc.b $F3, $4C
0002483A D35C                       	dc.b $D3, $5C
0002483C 05                         DATALN6OG66R86I_24: dc.b $5
0002483D F0C0                       	dc.b $F0, $C0
0002483F 40D0                       	dc.b $40, $D0
00024841 F30C                       	dc.b $F3, $C
00024843 331C                       	dc.b $33, $1C
00024845 B320                       	dc.b $B3, $20
00024847 04                         DATALN6OG66R86I_25: dc.b $4
00024848 F32C                       	dc.b $F3, $2C
0002484A F33C                       	dc.b $F3, $3C
0002484C F34C                       	dc.b $F3, $4C
0002484E D35C                       	dc.b $D3, $5C
00024850 04                         DATALN6OG66R86I_26: dc.b $4
00024851 F41E                       	dc.b $F4, $1E
00024853 F42E                       	dc.b $F4, $2E
00024855 E43E                       	dc.b $E4, $3E
00024857 744D                       	dc.b $74, $4D
00024859 05                         DATALN6OG66R86I_27: dc.b $5
0002485A F0D5                       	dc.b $F0, $D5
0002485C 50E5                       	dc.b $50, $E5
0002485E F46F                       	dc.b $F4, $6F
00024860 F47F                       	dc.b $F4, $7F
00024862 848F                       	dc.b $84, $8F
00024864 04                         DATALN6OG66R86I_28: dc.b $4
00024865 F41E                       	dc.b $F4, $1E
00024867 F42E                       	dc.b $F4, $2E
00024869 E43E                       	dc.b $E4, $3E
0002486B 744D                       	dc.b $74, $4D
0002486D 05                         DATALN6OG66R86I_29: dc.b $5
0002486E F0D5                       	dc.b $F0, $D5
00024870 50E5                       	dc.b $50, $E5
00024872 F46F                       	dc.b $F4, $6F
00024874 F47F                       	dc.b $F4, $7F
00024876 848F                       	dc.b $84, $8F
00024878 04                         DATALN6OG66R86I_2A: dc.b $4
00024879 F38E                       	dc.b $F3, $8E
0002487B F39E                       	dc.b $F3, $9E
0002487D F3AE                       	dc.b $F3, $AE
0002487F 63BE                       	dc.b $63, $BE
00024881 05                         DATALN6OG66R86I_2B: dc.b $5
00024882 F3C5                       	dc.b $F3, $C5
00024884 F3D5                       	dc.b $F3, $D5
00024886 D3E5                       	dc.b $D3, $E5
00024888 73F3                       	dc.b $73, $F3
0002488A 73FB                       	dc.b $73, $FB
0002488C 04                         DATALN6OG66R86I_2C: dc.b $4
0002488D F38E                       	dc.b $F3, $8E
0002488F F39E                       	dc.b $F3, $9E
00024891 F3AE                       	dc.b $F3, $AE
00024893 63BE                       	dc.b $63, $BE
00024895 05                         DATALN6OG66R86I_2D: dc.b $5
00024896 F3C5                       	dc.b $F3, $C5
00024898 F3D5                       	dc.b $F3, $D5
0002489A D3E5                       	dc.b $D3, $E5
0002489C 73F3                       	dc.b $73, $F3
0002489E 73FB                       	dc.b $73, $FB
000248A0 03                         DATALN6OG66R86I_2E: dc.b $3
000248A1 F0FF                       	dc.b $F0, $FF
000248A3 F10F                       	dc.b $F1, $F
000248A5 311F                       	dc.b $31, $1F
000248A7 03                         DATALN6OG66R86I_2F: dc.b $3
000248A8 F0FF                       	dc.b $F0, $FF
000248AA F10F                       	dc.b $F1, $F
000248AC 311F                       	dc.b $31, $1F
000248AE 03                         DATALN6OG66R86I_30: dc.b $3
000248AF F0FF                       	dc.b $F0, $FF
000248B1 F10F                       	dc.b $F1, $F
000248B3 311F                       	dc.b $31, $1F
000248B5 03                         DATALN6OG66R86I_31: dc.b $3
000248B6 F0FF                       	dc.b $F0, $FF
000248B8 F10F                       	dc.b $F1, $F
000248BA 311F                       	dc.b $31, $1F
000248BC 03                         DATALN6OG66R86I_32: dc.b $3
000248BD F0FF                       	dc.b $F0, $FF
000248BF F10F                       	dc.b $F1, $F
000248C1 311F                       	dc.b $31, $1F
000248C3 00                         DATALN6OG66R86I_33: dc.b $0
000248C4 00                         DATALN6OG66R86I_34: dc.b $0
000248C5 00                         DATALN6OG66R86I_35: dc.b $0
000248C6 00                         DATALN6OG66R86I_36: dc.b $0
000248C7 00                         DATALN6OG66R86I_37: dc.b $0
000248C8 05                         DATALN6OG66R86I_38: dc.b $5
000248C9 F147                       	dc.b $F1, $47
000248CB 0157                       	dc.b $1, $57
000248CD F202                       	dc.b $F2, $2
000248CF F21E                       	dc.b $F2, $1E
000248D1 222E                       	dc.b $22, $2E
000248D3 00                         DATALN6OG66R86I_39: dc.b $0
000248D4 00                         DATALN6OG66R86I_3A: dc.b $0
000248D5 00                         DATALN6OG66R86I_3B: dc.b $0
000248D6 00                         DATALN6OG66R86I_3C: dc.b $0
000248D7 00                         DATALN6OG66R86I_3D: dc.b $0
000248D8 00                         DATALN6OG66R86I_3E: dc.b $0
000248D9 00                         DATALN6OG66R86I_3F: dc.b $0
000248DA 00                         DATALN6OG66R86I_40: dc.b $0
000248DB 00                         DATALN6OG66R86I_41: dc.b $0
000248DC 00                         DATALN6OG66R86I_42: dc.b $0
000248DD 00                         DATALN6OG66R86I_43: dc.b $0
000248DE 00                         DATALN6OG66R86I_44: dc.b $0
000248DF 00                         DATALN6OG66R86I_45: dc.b $0
000248E0 00                         DATALN6OG66R86I_46: dc.b $0
000248E1 00                         DATALN6OG66R86I_47: dc.b $0
000248E2 00                         DATALN6OG66R86I_48: dc.b $0
000248E3 00                         DATALN6OG66R86I_49: dc.b $0
000248E4 00                         DATALN6OG66R86I_4A: dc.b $0
000248E5 00                         DATALN6OG66R86I_4B: dc.b $0
000248E6 03                         DATALN6OG66R86I_4C: dc.b $3
000248E7 F1C4                       	dc.b $F1, $C4
000248E9 01D4                       	dc.b $1, $D4
000248EB C2C5                       	dc.b $C2, $C5
000248ED 00                         DATALN6OG66R86I_4D: dc.b $0
000248EE 00                         DATALN6OG66R86I_4E: dc.b $0
000248EF 00                         DATALN6OG66R86I_4F: dc.b $0
000248F0 00                         DATALN6OG66R86I_50: dc.b $0
000248F1 00                         DATALN6OG66R86I_51: dc.b $0
000248F2 00                         DATALN6OG66R86I_52: dc.b $0
000248F3 00                         DATALN6OG66R86I_53: dc.b $0
000248F4 00                         DATALN6OG66R86I_54: dc.b $0
000248F5 04                         DATALN6OG66R86I_55: dc.b $4
000248F6 F1E4                       	dc.b $F1, $E4
000248F8 11F4                       	dc.b $11, $F4
000248FA F231                       	dc.b $F2, $31
000248FC E241                       	dc.b $E2, $41
000248FE 00                         DATALN6OG66R86I_56: dc.b $0
000248FF 00                         DATALN6OG66R86I_57: dc.b $0
00024900                            	even
00024900                            	even
00024900                            
00024900                            ; ---------------------------------------------------------------------------
00024900                            ; Uncompressed graphics	- Sonic
00024900                            ; ---------------------------------------------------------------------------
00024900                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002EBC0                            		even
0002EBC0                            ; ---------------------------------------------------------------------------
0002EBC0                            ; Uncompressed graphics	- Pepsi
0002EBC0                            ; ---------------------------------------------------------------------------
0002EBC0                            Art_Pepsi:	incbin	artunc\pepsi.bin	; Pepsi
00038E80                            		even
00038E80                            ; ---------------------------------------------------------------------------
00038E80                            ; Uncompressed graphics	- Pepsi
00038E80                            ; ---------------------------------------------------------------------------
00038E80                            Art_Knuckles:	incbin	artunc\knuckles.bin	; Knuckles
00047560                            		even
00047560                            ; ---------------------------------------------------------------------------
00047560                            ; Uncompressed graphics	- Pepsiman
00047560                            ; ---------------------------------------------------------------------------
00047560                            Art_Pepsiman:	incbin	artunc\pepsiman.bin	; Pepsiman
000508E0                            		even
000508E0                            ; ---------------------------------------------------------------------------
000508E0                            ; Compressed graphics - various
000508E0                            ; ---------------------------------------------------------------------------
000508E0                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000509E4                            		even
000509E4                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00050A1E                            		even
00050A1E                            UnC_Shield:     incbin                artunc/shield.bin
00050D7E                                            align 2
00050D7E                            UnC_Stars:      incbin        artunc/stars.bin        ; invincibility stars
000511FE                                            align 2           
000511FE                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00051308                            		even
00051308                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0005135A                            		even
0005135A                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000515A2                            		even
000515A2                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00051728                            		even
00051728                            ; ---------------------------------------------------------------------------
00051728                            ; Sprite mappings - walls of the special stage
00051728                            ; ---------------------------------------------------------------------------
00051728                            Map_SSWalls:
00051728                            	include "_maps\SSwalls.asm"
00051728                            ; ---------------------------------------------------------------------------
00051728                            ; Sprite mappings - walls of the special stage
00051728                            ; ---------------------------------------------------------------------------
00051728 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0005172C 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00051730 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00051734 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00051738 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0005173C 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00051740 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00051744 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00051748 01                         byte_2C584:	dc.b 1
00051749 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0005174E 01                         byte_2C58A:	dc.b 1
0005174F F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00051754 01                         byte_2C590:	dc.b 1
00051755 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0005175A 01                         byte_2C596:	dc.b 1
0005175B F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00051760 01                         byte_2C59C:	dc.b 1
00051761 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00051766 01                         byte_2C5A2:	dc.b 1
00051767 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0005176C 01                         byte_2C5A8:	dc.b 1
0005176D F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00051772 01                         byte_2C5AE:	dc.b 1
00051773 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00051778 01                         byte_2C5B4:	dc.b 1
00051779 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0005177E 01                         byte_2C5BA:	dc.b 1
0005177F F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00051784 01                         byte_2C5C0:	dc.b 1
00051785 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0005178A 01                         byte_2C5C6:	dc.b 1
0005178B F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00051790 01                         byte_2C5CC:	dc.b 1
00051791 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00051796 01                         byte_2C5D2:	dc.b 1
00051797 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0005179C 01                         byte_2C5D8:	dc.b 1
0005179D F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000517A2 01                         byte_2C5DE:	dc.b 1
000517A3 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000517A8                            		even
000517A8                            		even
000517A8                            ; ---------------------------------------------------------------------------
000517A8                            ; Compressed graphics - special stage
000517A8                            ; ---------------------------------------------------------------------------
000517A8                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000520E0                            		even
000520E0                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00052214                            		even
00052214                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00052EA4                            		even
00052EA4                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000531A4                            		even
000531A4                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00053698                            		even
00053698                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00053786                            		even
00053786                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00053856                            		even
00053856                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0005394C                            		even
0005394C                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000539AA                            		even
000539AA                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00053A3C                            		even
00053A3C                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00053AFE                            		even
00053AFE                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00053BCC                            		even
00053BCC                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00053C98                            		even
00053C98                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00053D60                            		even
00053D60                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00053E2A                            		even
00053E2A                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00053EFA                            		even
00053EFA                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000540EE                            		even
000540EE                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00054256                            		even
00054256                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00054306                            		even
00054306                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000543E0                            		even
000543E0                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00054464                            		even
00054464                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000545E2                            		even
000545E2                            ; ---------------------------------------------------------------------------
000545E2                            ; Compressed graphics - GHZ stuff
000545E2                            ; ---------------------------------------------------------------------------
000545E2                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000545EE 00                         		even
000545EE                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00054714                            		even
00054714                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00054800                            		even
00054800                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00054848                            		even
00054848                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00054AB4                            		even
00054AB4                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00054B58                            		even
00054B58                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00054D6C                            		even
00054D6C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00054D78 00                         		even
00054D78                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00054D84 00                         		even
00054D84                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00054E22                            		even
00054E22                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00054E2E 00                         		even
00054E2E                            ; ---------------------------------------------------------------------------
00054E2E                            ; Compressed graphics - LZ stuff
00054E2E                            ; ---------------------------------------------------------------------------
00054E2E                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00054F52                            		even
00054F52                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00055746                            		even
00055746                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000558C6                            		even
000558C6                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00055A30                            		even
00055A30                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00056086                            		even
00056086                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0005613C                            		even
0005613C                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000561DE                            		even
000561DE                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0005633A                            		even
0005633A                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0005639E                            		even
0005639E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000564F0                            		even
000564F0                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000569D2                            		even
000569D2                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00056B42                            		even
00056B42                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00056DFA                            		even
00056DFA                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00056F32                            		even
00056F32                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0005705C                            		even
0005705C                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0005716C                            		even
0005716C                            ; ---------------------------------------------------------------------------
0005716C                            ; Compressed graphics - MZ stuff
0005716C                            ; ---------------------------------------------------------------------------
0005716C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00057608                            		even
00057608                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000576C6                            		even
000576C6                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000578EA                            		even
000578EA                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0005793E                            		even
0005793E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00057C04                            		even
00057C04                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0005851A                            		even
0005851A                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000586AE                            		even
000586AE                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00058736                            		even
00058736                            ; ---------------------------------------------------------------------------
00058736                            ; Compressed graphics - SLZ stuff
00058736                            ; ---------------------------------------------------------------------------
00058736                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00058972                            		even
00058972                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00058AB8                            		even
00058AB8                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00058CFC                            		even
00058CFC                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00058D5E                            		even
00058D5E                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00058E40                            		even
00058E40                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00059022                            		even
00059022                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0005912E                            		even
0005912E                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000591D2                            		even
000591D2                            ; ---------------------------------------------------------------------------
000591D2                            ; Compressed graphics - SYZ stuff
000591D2                            ; ---------------------------------------------------------------------------
000591D2                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000593AC                            		even
000593AC                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0005940E                            		even
0005940E                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000594F0                            		even
000594F0                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000597BC                            		even
000597BC                            ; ---------------------------------------------------------------------------
000597BC                            ; Compressed graphics - SBZ stuff
000597BC                            ; ---------------------------------------------------------------------------
000597BC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00059810                            		even
00059810                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00059AAC                            		even
00059AAC                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00059CB0                            		even
00059CB0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00059E4E                            		even
00059E4E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0005A17E                            		even
0005A17E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0005A35C                            		even
0005A35C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0005A3B4                            		even
0005A3B4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0005A534                            		even
0005A534                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0005A632                            		even
0005A632                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0005A7BE                            		even
0005A7BE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0005A80E                            		even
0005A80E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0005A866                            		even
0005A866                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0005A962                            		even
0005A962                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0005AA78                            		even
0005AA78                            ; ---------------------------------------------------------------------------
0005AA78                            ; Compressed graphics - enemies
0005AA78                            ; ---------------------------------------------------------------------------
0005AA78                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0005AE38                            		even
0005AE38                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0005B364 00                         		even
0005B364                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0005B7AE                            		even
0005B7AE                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0005B996                            		even
0005B996                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0005C080                            		even
0005C080                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0005C34E                            		even
0005C34E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0005C5D8                            		even
0005C5D8                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0005CAFC                            		even
0005CAFC                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0005CD6E                            		even
0005CD6E                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0005D364                            		even
0005D364                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0005D7B2                            		even
0005D7B2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0005DAAE                            		even
0005DAAE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0005DCF6                            		even
0005DCF6                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0005DFF2                            		even
0005DFF2                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0005E26A                            		even
0005E26A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0005E412                            		even
0005E412                            ; ---------------------------------------------------------------------------
0005E412                            ; Compressed graphics - various
0005E412                            ; ---------------------------------------------------------------------------
0005E412                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0005EA20                            		even
0005EA20                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0005EB86                            		even
0005EB86                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0005EC8C                            		even
0005EC8C                            Nem_Ring:	incbin	artnem\hud.bin	; rings
0005EDF2                            		even
0005EDF2                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0005F15C                            		even
0005F15C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0005F832                            		even
0005F832                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0005F8CC                            		even
0005F8CC                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0005FA5E                            		even
0005FA5E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0005FB84                            		even
0005FB84                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0005FC84                            		even
0005FC84                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00060100                            		even
00060100                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
000601EA                            		even
000601EA                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0006035E                            		even
0006035E                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00060660                            		even
00060660                            ; ---------------------------------------------------------------------------
00060660                            ; Compressed graphics - continue screen
00060660                            ; ---------------------------------------------------------------------------
00060660                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00060910                            		even
00060910                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00060B4A                            		even
00060B4A                            ; ---------------------------------------------------------------------------
00060B4A                            ; Compressed graphics - animals
00060B4A                            ; ---------------------------------------------------------------------------
00060B4A                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00060CA2                            		even
00060CA2                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00060DFE                            		even
00060DFE                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00060F7A                            		even
00060F7A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00061096                            		even
00061096                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000611CC                            		even
000611CC                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00061306                            		even
00061306                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00061462                            		even
00061462                            ; ---------------------------------------------------------------------------
00061462                            ; Compressed graphics - primary patterns and block mappings
00061462                            ; ---------------------------------------------------------------------------
00061462                            
00061462                            Nem_TIT_1st:	incbin	artnem\8x8tit1.bin	; Title primary patterns
00062AC2                            		even
00062AC2                            Nem_TIT_2nd:	incbin	artnem\8x8tit2.bin	; Title secondary patterns
00063E6A                            		even
00063E6A                            Blk16_GHZ:	incbin	map16\ghz.bin
00064914                            		even
00064914                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
000670D6                            		even
000670D6                            Blk256_GHZ:	incbin	map256\ghz.bin
00068306                            		even
00068306                            Blk16_LZ:	incbin	map16\lz.bin
000688E6                            		even
000688E6                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0006B85A                            		even
0006B85A                            Blk256_LZ:	incbin	map256\lz.bin
0006BBCC                            		even
0006BBCC                            Blk16_MZ:	incbin	map16\mz.bin
0006BF8C                            		even
0006BF8C                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0006D856                            		even
0006D856                            Blk256_MZ:	incbin	map256\mz.bin
0006E080                            		even
0006E080                            Blk16_SLZ:	incbin	map16\slz.bin
0006EB5E                            		even
0006EB5E                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000725AA                            		even
000725AA                            Blk256_SLZ:	incbin	map256\slz.bin
000732A2                            		even
000732A2                            Blk16_SYZ:	incbin	map16\syz.bin
00073C6C                            		even
00073C6C                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00076CB6                            		even
00076CB6                            Blk256_SYZ:	incbin	map256\syz.bin
00077DE6                            		even
00077DE6                            Blk16_SBZ:	incbin	map16\sbz.bin
000783D0                            		even
000783D0                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0007A446                            		even
0007A446                            Blk256_SBZ:	incbin	map256\sbz.bin
0007ACB6                            		even
0007ACB6                            Blk16_EPZ:	incbin	map16\epz.bin
0007B858                            		even
0007B858                            Nem_EPZ:	incbin	artnem\8x8epz.bin	; Egg Plant Zone primary patterns
0007D3AA                            		even
0007D3AA                            Blk256_EPZ:	incbin	map256\epz.bin
0007F290                            		even
0007F290                            Blk16_INZ:	incbin	map16\inz.bin
0007FDDA                            		even
0007FDDA                            Nem_INZ:	incbin	artnem\8x8inz.bin	; Egg Plant Zone primary patterns
00085432                            		even
00085432                            Blk256_INZ:	incbin	map256\inz.bin
00086CE2                            		even
00086CE2                            ; ---------------------------------------------------------------------------
00086CE2                            ; Compressed graphics - bosses and ending sequence
00086CE2                            ; ---------------------------------------------------------------------------
00086CE2                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00087546                            		even
00087546                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00087830                            		even
00087830                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000880B4                            		even
000880B4                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0008885C                            		even
0008885C                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00088F86                            		even
00088F86                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00089506                            		even
00089506                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00089626                            		even
00089626                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00089824                            		even
00089824                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0008AA02                            		even
0008AA02                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0008B346                            		even
0008B346                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0008B71C                            		even
0008B71C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0008BCAC                            		even
0008BCAC                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0008BF34                            		even
0008BF34                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0008C532                            		even
0008C532                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0008C7BA                            		even
0008C7BA                            		incbin	misc\padding2.bin
0008C8BE                            		even
0008C8BE                            ; ---------------------------------------------------------------------------
0008C8BE                            ; Collision data
0008C8BE                            ; ---------------------------------------------------------------------------
0008C8BE                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0008C9BE                            		even
0008C9BE                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0008D9BE                            		even
0008D9BE                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0008E9BE                            		even
0008E9BE                            Col_GHZ_1:	incbin	collide\ghz1.bin	; GHZ index 1
0008EB38                            		even
0008EB38                            Col_GHZ_2:	incbin	collide\ghz2.bin	; GHZ index 2
0008ECB2                            		even
0008ECB2                            Col_LZ_1:	incbin	collide\lz1.bin		; LZ index 1
0008EDF8                            		even
0008EDF8                            Col_LZ_2:	incbin	collide\lz2.bin		; LZ index 2
0008EF3E                            		even
0008EF3E                            Col_MZ_1:	incbin	collide\mz1.bin		; MZ index 1
0008EFF0                            		even
0008EFF0                            Col_MZ_2:	incbin	collide\mz2.bin		; MZ index 2
0008F0A2                            		even
0008F0A2                            Col_SLZ_1:	incbin	collide\slz1.bin	; SLZ index 1
0008F26C                            		even
0008F26C                            Col_SLZ_2:	incbin	collide\slz2.bin	; SLZ index 2
0008F436                            		even
0008F436                            Col_SYZ_1:	incbin	collide\syz1.bin	; SYZ index 1
0008F5DE                            		even
0008F5DE                            Col_SYZ_2:	incbin	collide\syz2.bin	; SYZ index 2
0008F786                            		even
0008F786                            Col_SBZ_1:	incbin	collide\sbz1.bin	; SBZ index 1
0008F898                            		even
0008F898                            Col_SBZ_2:	incbin	collide\sbz2.bin	; SBZ index 2
0008F9AA                            		even
0008F9AA                            Col_EPZ_1:	incbin	collide\epz1.bin	;Egg Plant Zone index 1
0008FB62                            		even
0008FB62                            Col_EPZ_2:	incbin	collide\epz2.bin	; EPZ index 2
0008FD1A                            		even
0008FD1A                            Col_INZ_1:	incbin	collide\inz1.bin	;Island Nowhere index 1
0008FEC4                            		even
0008FEC4                            Col_INZ_2:	incbin	collide\inz2.bin	; INZ index 2
0009006E                            		even
0009006E                            ; ---------------------------------------------------------------------------
0009006E                            ; Special layouts
0009006E                            ; ---------------------------------------------------------------------------
0009006E                            SS_1:		incbin	sslayout\1.bin
000902E8                            		even
000902E8                            SS_2:		incbin	sslayout\2.bin
000906FA                            		even
000906FA                            SS_3:		incbin	sslayout\3.bin
00090A56                            		even
00090A56                            SS_4:		incbin	sslayout\4.bin
00090F30                            		even
00090F30                            SS_5:		incbin	sslayout\5.bin
00091402                            		even
00091402                            SS_6:		incbin	sslayout\6.bin
00091712                            		even
00091712                            ; ---------------------------------------------------------------------------
00091712                            ; Animated uncompressed graphics
00091712                            ; ---------------------------------------------------------------------------
00091712                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00091912                            		even
00091912                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00091D12                            		even
00091D12                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00092192                            		even
00092192                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00092492                            		even
00092492                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00092A92                            		even
00092A92                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00092D92                            		even
00092D92                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00093812                            		even
00093812                            
00093812                            ; ---------------------------------------------------------------------------
00093812                            ; Level	layout index
00093812                            ; ---------------------------------------------------------------------------
00093812 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
0009381E 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
0009382A 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
00093836 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
00093842 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
0009384E 0000 0000 0000 0000 0000+  		dc.l byte_68D70, Level_LZbg, byte_6922E
0009385A 0000 0000 0000 0000 0000+  		dc.l byte_68D70, Level_LZbg, byte_6934C
00093866 0000 0000 0000 0000 0000+  		dc.l byte_68D70, Level_LZbg, byte_6940A
00093872 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
0009387E 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
0009388A 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
00093896 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
000938A2 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
000938AE 0000 0000 0000 0000 0000+  		dc.l byte_68D70, Level_SLZbg, byte_69B84
000938BA 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
000938C6 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
000938D2 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
000938DE 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
000938EA 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
000938F6 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
00093902 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
0009390E 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
0009391A 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
00093926 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
00093932 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0009393E 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0009394A 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
00093956 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
00093962 0000 0000 0000 0000 0000+  		dc.l Level_EPZ1, Level_EPZbg, byte_6A320
0009396E 0000 0000 0000 0000 0000+  		dc.l Level_EPZ2, Level_EPZbg, byte_6A320
0009397A 0000 0000 0000 0000 0000+  		dc.l Level_EPZ3, Level_EPZbg, byte_6A320
00093986 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
00093992 0000 0000 0000 0000 0000+  		dc.l Level_INZ1, Level_INZbg, byte_6A320
0009399E 0000 0000 0000 0000 0000+  		dc.l Level_INZ2, Level_INZbg, byte_6A320
000939AA 0000 0000 0000 0000 0000+  		dc.l Level_INZ3, Level_INZbg, byte_6A320
000939B6 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000939C2                            
000939C2                            Level_GHZ1:	incbin	levels\ghz1.bin
000949C2                            		even
000949C2 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000949C6                            Level_GHZ2:	incbin	levels\ghz2.bin
000959C6                            		even
000959C6 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000959CA                            Level_GHZ3:	incbin	levels\ghz3.bin
000969CA                            		even
000969CA                            Level_GHZbg:	incbin	levels\ghzbg.bin
000969EC                            		even
000969EC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000969F0 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000969F4                            
000969F4                            Level_LZ1:	incbin	levels\lz1.bin
000979F4                            		even
000979F4                            Level_LZbg:	incbin	levels\lzbg.bin
00097AF6                            		even
00097AF6 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00097AFA 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00097AFE                            Level_LZ3_WALL:	incbin	levels\lz3_wall.bin	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
00098AFE                            		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
00098AFE 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00098B02 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00098B06                            
00098B06                            Level_MZ1:	incbin	levels\mz1.bin
00099B06                            		even
00099B06                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00099B80                            		even
00099B80                            Level_MZ2:	incbin	levels\mz2.bin
0009AB80                            		even
0009AB80                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009AC12                            		even
0009AC12 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009AC16                            Level_MZ3:	incbin	levels\mz3.bin
0009BC16                            		even
0009BC16                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009BCBA                            		even
0009BCBA 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009BCBE 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009BCC2                            
0009BCC2                            Level_SLZ1:	incbin	levels\slz1.bin
0009CCC2                            		even
0009CCC2                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CD3C                            		even
0009CD3C                            Level_SLZ3:	incbin	levels\slz3.bin
0009DD3C                            		even
0009DD3C 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009DD40                            
0009DD40                            Level_SYZ1:	incbin	levels\syz1.bin
0009ED40                            		even
0009ED40                            Level_SYZbg:	incbin	levels\syzbg.bin
0009ED7A                            		even
0009ED7A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009ED7E                            Level_SYZ2:	incbin	levels\syz2.bin
0009FD7E                            		even
0009FD7E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009FD82                            Level_SYZ3:	incbin	levels\syz3.bin
000A0D82                            		even
000A0D82 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000A0D86 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000A0D8A                            
000A0D8A                            Level_SBZ1:	incbin	levels\sbz1.bin
000A1D8A                            		even
000A1D8A                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000A1DC8                            		even
000A1DC8                            Level_SBZ2:	incbin	levels\sbz2.bin
000A2DC8                            		even
000A2DC8                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000A2F32                            		even
000A2F32 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000A2F36 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000A2F3A                            Level_End:	incbin	levels\ending.bin
000A3F3A                            		even
000A3F3A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000A3F3E                            
000A3F3E                            Level_EPZ1:	incbin	levels\epz1.bin
000A4F3E                            		even
000A4F3E                            Level_EPZ2:	incbin	levels\epz2.bin
000A5F3E                            		even
000A5F3E                            Level_EPZ3:	incbin	levels\epz3.bin
000A6F3E                            		even
000A6F3E                            Level_EPZbg:	incbin	levels\epzbg.bin
000A6F60                            		even
000A6F60                            		
000A6F60                            Level_INZ1:	incbin	levels\inz1.bin
000A7F60                            		even
000A7F60                            Level_INZ2:	incbin	levels\inz2.bin
000A8F60                            		even
000A8F60                            Level_INZ3:	incbin	levels\inz3.bin
000A9F60                            		even
000A9F60                            Level_INZbg:	incbin	levels\inzbg.bin
000A9F82                            		even
000A9F82                            
000A9F82                            ; ---------------------------------------------------------------------------
000A9F82                            ; Animated uncompressed giant ring graphics
000A9F82                            ; ---------------------------------------------------------------------------
000A9F82                            Art_BigRing:	incbin	artunc\bigring.bin
000AABC2                            		even
000AABC2                            
000AABC2                            		incbin	misc\padding3.bin
000AAC5E                            		even
000AAC5E                            
000AAC5E                            ; ---------------------------------------------------------------------------
000AAC5E                            ; Sprite locations index
000AAC5E                            ; ---------------------------------------------------------------------------
000AAC5E                            
000AAC5E 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC62 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC66 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC6A 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC6E 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC72 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC76 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC7A 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC7E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC82 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC86 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC8A 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC8E 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC92 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC96 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC9A 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AAC9E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACA2 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACA6 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACAA 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACAE 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACB2 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACB6 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACBA 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACBE 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACC2 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACC6 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACCA 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACCE 0000 0000                  		dc.w ObjPos_EPZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACD2 0000 0000                  		dc.w ObjPos_EPZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACD6 0000 0000                  		dc.w ObjPos_EPZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACDA 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACDE 0000 0000                  		dc.w ObjPos_INZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACE2 0000 0000                  		dc.w ObjPos_INZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACE6 0000 0000                  		dc.w ObjPos_INZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACEA 0000 0000                  		dc.w ObjPos_Null-ObjPos_Index, ObjPos_Null-ObjPos_Index
000AACEE                            
000AACEE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000AB354                            		even
000AB354                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000AB9F6                            		even
000AB9F6                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000ABE46                            		even		
000ABE46                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000AC1F4                            		even
000AC1F4                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000AC6E6                            		even
000AC6E6                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000ACA2E                            		even
000ACA2E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000ACA4C                            		even
000ACA4C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000AD2E0                            		even
000AD2E0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000AD81A                            		even
000AD81A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000ADB62                            		even
000ADB62                            ObjPos_FZ:	incbin	objpos\fz.bin
000ADB86                            		even
000ADB86                            ObjPos_EPZ1:	incbin	objpos\epz1.bin
000AE060                            		even
000AE060                            ObjPos_EPZ2:	incbin	objpos\epz2.bin
000AE480                            		even
000AE480                            ObjPos_EPZ3:	incbin	objpos\epz3.bin
000AE9DE                            		even
000AE9DE                            ObjPos_INZ1:	incbin	objpos\inz1.bin
000AF536                            		even
000AF536                            ObjPos_INZ2:	incbin	objpos\inz2.bin
000B039A                            		even
000B039A                            ObjPos_INZ3:	incbin	objpos\inz3.bin
000B0ED4                            		even
000B0ED4                            		
000B0ED4 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000B0EDA                            		
000B0EDA 0000 FFFA                  ObjPos_IndexEncore:	dc.w ObjPos_GHZ1Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EDE 0000 FFFA                  		dc.w ObjPos_GHZ2Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EE2 0000 FFFA                  		dc.w ObjPos_GHZ3Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EE6 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EEA FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EEE FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EF2 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EF6 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EFA 0000 FFFA                  		dc.w ObjPos_MZ1Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0EFE 0000 FFFA                  		dc.w ObjPos_MZ2Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F02 0000 FFFA                  		dc.w ObjPos_MZ3Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F06 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F0A FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F0E FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F12 0000 FFFA                  		dc.w ObjPos_SLZ3Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F16 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F1A 0000 FFFA                  		dc.w ObjPos_SYZ1Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F1E 0000 FFFA                  		dc.w ObjPos_SYZ2Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F22 0000 FFFA                  		dc.w ObjPos_SYZ3Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F26 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F2A FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F2E FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F32 0000 FFFA                  		dc.w ObjPos_FZEncore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F36 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F3A FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F3E FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F42 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F46 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F4A 0000 FFFA                  		dc.w ObjPos_EPZ1Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F4E 0000 FFFA                  		dc.w ObjPos_EPZ2Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F52 0000 FFFA                  		dc.w ObjPos_EPZ3Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F56 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F5A 0000 FFFA                  		dc.w ObjPos_INZ1Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F5E 0000 FFFA                  		dc.w ObjPos_INZ2Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F62 0000 FFFA                  		dc.w ObjPos_INZ3Encore-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F66 FFFA FFFA                  		dc.w ObjPos_Null-ObjPos_IndexEncore, ObjPos_Null-ObjPos_IndexEncore
000B0F6A                            
000B0F6A                            ObjPos_GHZ2Encore:	incbin	objpos\ghz2encore.bin
000B164E                            		even
000B164E                            ObjPos_GHZ1Encore:	incbin	objpos\ghz1encore.bin
000B1B76                            		even
000B1B76                            ObjPos_GHZ3Encore:	incbin	objpos\ghz3encore.bin
000B1FAE                            		even
000B1FAE                            ObjPos_MZ1Encore:	incbin	objpos\mz1encore.bin
000B2398                            		even
000B2398                            ObjPos_MZ2Encore:	incbin	objpos\mz2encore.bin
000B276A                            		even
000B276A                            ObjPos_MZ3Encore:	incbin	objpos\mz3encore.bin
000B2CDA                            		even
000B2CDA                            ObjPos_SLZ3Encore:	incbin	objpos\slz3encore.bin
000B2EC0                            		even
000B2EC0                            ObjPos_SYZ1Encore:	incbin	objpos\syz1encore.bin
000B378A                            		even
000B378A                            ObjPos_SYZ2Encore:	incbin	objpos\syz2encore.bin
000B3DF6                            		even
000B3DF6                            ObjPos_SYZ3Encore:	incbin	objpos\syz3encore.bin
000B42BE                            		even
000B42BE                            ObjPos_FZEncore:	incbin	objpos\fzencore.bin
000B42E2                            		even
000B42E2                            ObjPos_EPZ1Encore:	incbin	objpos\epz1encore.bin
000B4552                            		even
000B4552                            ObjPos_EPZ2Encore:	incbin	objpos\epz2encore.bin
000B486A                            		even
000B486A                            ObjPos_EPZ3Encore:	incbin	objpos\epz3encore.bin
000B4CFC                            		even
000B4CFC                            ObjPos_INZ1Encore:	incbin	objpos\inz1encore.bin
000B567A                            		even
000B567A                            ObjPos_INZ2Encore:	incbin	objpos\inz2encore.bin
000B64D8                            		even
000B64D8                            ObjPos_INZ3Encore:	incbin	objpos\inz3encore.bin
000B700C                            		even
000B700C                            ; ---------------------------------------------------------------------------
000B700C                            		incbin	misc\padding4.bin
000B7636                            		even
000B7636                            
000B7636 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000B763A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000B763E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000B7642 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000B7646 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000B764A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000B764E                            ; ---------------------------------------------------------------------------
000B764E                            ; PSG instruments used in music
000B764E                            ; ---------------------------------------------------------------------------
000B764E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000B765A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000B7666 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000B7672                            PSG1:		incbin	sound\psg1.bin
000B7689                            PSG2:		incbin	sound\psg2.bin
000B7690                            PSG3:		incbin	sound\psg3.bin
000B76A1                            PSG4:		incbin	sound\psg4.bin
000B76AC                            PSG6:		incbin	sound\psg6.bin
000B76BB                            PSG5:		incbin	sound\psg5.bin
000B76E5                            PSG7:		incbin	sound\psg7.bin
000B7701                            PSG8:		incbin	sound\psg8.bin
000B7729                            PSG9:		incbin	sound\psg9.bin
000B773A                            
000B773A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000B7742                            ; ---------------------------------------------------------------------------
000B7742                            ; Music	Pointers
000B7742                            ; ---------------------------------------------------------------------------
000B7742 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000B774A 0000 0000 0000 0000        		dc.l Music83, Music84
000B7752 0000 0000 0000 0000        		dc.l Music85, Music86
000B775A 0000 0000 0000 0000        		dc.l Music87, Music88
000B7762 0000 0000 0000 0000        		dc.l Music89, Music8A
000B776A 0000 0000 0000 0000        		dc.l Music8B, Music8C
000B7772 0000 0000 0000 0000        		dc.l Music8D, Music8E
000B777A 0000 0000 0000 0000        		dc.l Music8F, Music90
000B7782 0000 0000 0000 0000        		dc.l Music91, Music92
000B778A 0000 0000 0000 0000        		dc.l Music93, Music94
000B7792 0000 0000 0000 0000        		dc.l Music95, Music96
000B779A 0000 0000 0000 0000        		dc.l Music97, Music98
000B77A2 0000 0000 0000 0000        		dc.l Music99, Music9A
000B77AA 0000 0000 0000 0000        		dc.l Music9B, Music9C
000B77B2 0000 0000 0000 0000        		dc.l Music9D, Music9E
000B77BA 0000 0000                  		dc.l Music9F
000B77BE 0000 0000 0000 0000 0000+  		dc.l MusicE5, MusicE6, MusicE7, MusicE8
000B77CE 0000 0000 0000 0000 0000+  		dc.l MusicE9, MusicEA, MusicEB, MusicEC
000B77DE 0000 0000 0000 0000 0000+  		dc.l MusicED, MusicEE, MusicEF, MusicF0
000B77EE 0000 0000 0000 0000 0000+  		dc.l MusicF1, MusicF2, MusicF3, MusicF4
000B77FE 0000 0000 0000 0000 0000+  		dc.l MusicF5, MusicF6, MusicF7, MusicF8
000B780E 0000 0000 0000 0000 0000+  		dc.l MusicF9, MusicFA, MusicFB, MusicFC
000B781E 0000 0000 0000 0000 0000+  		dc.l MusicFD, MusicFE, MusicFF
000B782A                            ; ---------------------------------------------------------------------------
000B782A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000B782A                            ; ---------------------------------------------------------------------------
000B782A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000B783A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000B784A 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000B785A 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000B786A 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000B787A 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000B788A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90	; $E0
000B789A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90	; $F0
000B78AA                            
000B78AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B78AA                            
000B78AA                            
000B78AA                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000B78AA                            ;		move.w	#$100,($A11100).l ; stop the Z80
000B78AA                            ;		nop	
000B78AA                            ;		nop	
000B78AA                            ;		nop	
000B78AA                            
000B78AA                            loc_71B5A:
000B78AA                            ;		btst	#0,($A11100).l
000B78AA                            ;		bne.s	loc_71B5A
000B78AA                            ; fuk all this dumb shite lmao
000B78AA                            ;		btst	#7,($A01FFD).l
000B78AA                            ;		beq.s	loc_71B82
000B78AA                            ;		move.w	#0,($A11100).l	; start	the Z80
000B78AA                            ;		nop	
000B78AA                            ;		nop	
000B78AA                            ;		nop	
000B78AA                            ;		nop	
000B78AA                            ;		nop	
000B78AA                            ;		bra.s	sub_71B4C
000B78AA                            ; ===========================================================================
000B78AA                            ;
000B78AA                            loc_71B82:
000B78AA 4DF9 00FF F000             		lea	($FFF000).l,a6
000B78B0 422E 000E                  		clr.b	$E(a6)
000B78B4 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000B78B8 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000B78BC 532E 0001                  		subq.b	#1,1(a6)
000B78C0 6600                       		bne.s	loc_71B9E
000B78C2 4EBA 0000                  		jsr	sub_7260C(pc)
000B78C6                            
000B78C6                            loc_71B9E:
000B78C6 102E 0004                  		move.b	4(a6),d0
000B78CA 6700                       		beq.s	loc_71BA8
000B78CC 4EBA 0000                  		jsr	sub_72504(pc)
000B78D0                            
000B78D0                            loc_71BA8:
000B78D0 4A2E 0024                  		tst.b	$24(a6)
000B78D4 6700                       		beq.s	loc_71BB2
000B78D6 4EBA 0000                  		jsr	sub_7267C(pc)
000B78DA                            
000B78DA                            loc_71BB2:
000B78DA 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000B78DE 6700                       		beq.s	loc_71BBC	; if not, branch
000B78E0 4EBA 0000                  		jsr	Sound_Play(pc)
000B78E4                            
000B78E4                            loc_71BBC:
000B78E4 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000B78EA 6700                       		beq.s	loc_71BC8
000B78EC 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000B78F0                            
000B78F0                            loc_71BC8:
000B78F0 4A38 C901                  		tst.b	($FFFFC901).w
000B78F4 6700                       		beq.s	@cont
000B78F6 5338 C901                  		subq.b	#1,($FFFFC901).w
000B78FA                            		
000B78FA                            @cont:
000B78FA 4BEE 0040                  		lea	$40(a6),a5
000B78FE 4A15                       		tst.b	(a5)
000B7900 6A00                       		bpl.s	loc_71BD4
000B7902 4EBA 0000                  		jsr	sub_71C4E(pc)
000B7906                            
000B7906                            loc_71BD4:
000B7906 422E 0008                  		clr.b	8(a6)
000B790A 7E05                       		moveq	#5,d7
000B790C                            
000B790C                            loc_71BDA:
000B790C DAFC 0030                  		adda.w	#$30,a5
000B7910 4A15                       		tst.b	(a5)
000B7912 6A00                       		bpl.s	loc_71BE6
000B7914 4EBA 0000                  		jsr	sub_71CCA(pc)
000B7918                            
000B7918                            loc_71BE6:
000B7918 51CF FFF2                  		dbf	d7,loc_71BDA
000B791C                            
000B791C 7E02                       		moveq	#2,d7
000B791E                            
000B791E                            loc_71BEC:
000B791E DAFC 0030                  		adda.w	#$30,a5
000B7922 4A15                       		tst.b	(a5)
000B7924 6A00                       		bpl.s	loc_71BF8
000B7926 4EBA 0000                  		jsr	sub_72850(pc)
000B792A                            
000B792A                            loc_71BF8:
000B792A 51CF FFF2                  		dbf	d7,loc_71BEC
000B792E                            
000B792E 1D7C 0080 000E             		move.b	#$80,$E(a6)
000B7934 7E02                       		moveq	#2,d7
000B7936                            
000B7936                            loc_71C04:
000B7936 DAFC 0030                  		adda.w	#$30,a5
000B793A 4A15                       		tst.b	(a5)
000B793C 6A00                       		bpl.s	loc_71C10
000B793E 4EBA 0000                  		jsr	sub_71CCA(pc)
000B7942                            
000B7942                            loc_71C10:
000B7942 51CF FFF2                  		dbf	d7,loc_71C04
000B7946                            
000B7946 7E02                       		moveq	#2,d7
000B7948                            
000B7948                            loc_71C16:
000B7948 DAFC 0030                  		adda.w	#$30,a5
000B794C 4A15                       		tst.b	(a5)
000B794E 6A00                       		bpl.s	loc_71C22
000B7950 4EBA 0000                  		jsr	sub_72850(pc)
000B7954                            
000B7954                            loc_71C22:
000B7954 51CF FFF2                  		dbf	d7,loc_71C16
000B7958 1D7C 0040 000E             		move.b	#$40,$E(a6)
000B795E DAFC 0030                  		adda.w	#$30,a5
000B7962 4A15                       		tst.b	(a5)
000B7964 6A00                       		bpl.s	loc_71C38
000B7966 4EBA 0000                  		jsr	sub_71CCA(pc)
000B796A                            
000B796A                            loc_71C38:
000B796A DAFC 0030                  		adda.w	#$30,a5
000B796E 4A15                       		tst.b	(a5)
000B7970 6A00                       		bpl.s	loc_71C44
000B7972 4EBA 0000                  		jsr	sub_72850(pc)
000B7976                            
000B7976                            loc_71C44:
000B7976                            ;                move.b  ($A04000).l,d2	; horray for lazy copy+pasting
000B7976                            ;                btst    #7,d2
000B7976                            ;                bne.s   loc_71C44
000B7976                            ;                move.b  #$2A,($A04000).l
000B7976                            ;		move.w	#0,($A11100).l	; start	the Z80
000B7976 4E75                       		rts	
000B7978                            ; End of function sub_71B4C
000B7978                            
000B7978                            
000B7978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7978                            
000B7978                            
000B7978                            sub_71C4E:				; XREF: sub_71B4C
000B7978 532D 000E                  		subq.b	#1,$E(a5)
000B797C 6600                       		bne.s	locret_71CAA
000B797E 1D7C 0080 0008             		move.b	#$80,8(a6)
000B7984 286D 0004                  		movea.l	4(a5),a4
000B7988                            
000B7988                            loc_71C5E:
000B7988 7A00                       		moveq	#0,d5
000B798A 1A1C                       		move.b	(a4)+,d5
000B798C 0C05 00E0                  		cmpi.b	#-$20,d5
000B7990 6500                       		bcs.s	loc_71C6E
000B7992 4EBA 0000                  		jsr	sub_72A5A(pc)
000B7996 60F0                       		bra.s	loc_71C5E
000B7998                            ; ===========================================================================
000B7998                            
000B7998                            loc_71C6E:
000B7998 4A05                       		tst.b	d5
000B799A 6A00                       		bpl.s	loc_71C84
000B799C 1B45 0010                  		move.b	d5,$10(a5)
000B79A0 1A1C                       		move.b	(a4)+,d5
000B79A2 6A00                       		bpl.s	loc_71C84
000B79A4 534C                       		subq.w	#1,a4
000B79A6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000B79AC 6000                       		bra.s	loc_71C88
000B79AE                            ; ===========================================================================
000B79AE                            
000B79AE                            loc_71C84:
000B79AE 4EBA 0000                  		jsr	sub_71D40(pc)
000B79B2                            
000B79B2                            loc_71C88:
000B79B2 2B4C 0004                  		move.l	a4,4(a5)
000B79B6 0815 0002                  		btst	#2,(a5)
000B79BA 6600                       		bne.s	locret_71CAA
000B79BC 7000                       		moveq	#0,d0
000B79BE 102D 0010                  		move.b	$10(a5),d0
000B79C2 0C00 0080                  		cmpi.b	#$80,d0
000B79C6 6700                       		beq.s	locret_71CAA
000B79C8                            ;		btst	#3,d0
000B79C8                            ;		bne.s	loc_71CAC
000B79C8 33FC 0100 00A1 1100 4E71+  		stopZ80
000B79E0 13C0 00A0 1FFF                     move.b    d0,($A01FFF).l
000B79E6 33FC 0000 00A1 1100                startZ80
000B79EE                            
000B79EE                            locret_71CAA:
000B79EE 4E75                       		rts	
000B79F0                            ; ===========================================================================
000B79F0                            
000B79F0                            loc_71CAC:
000B79F0 0400 0088                  		subi.b	#$88,d0
000B79F4 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000B79F8 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000B79FE 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000B7A06 4E75                       		rts	
000B7A08                            ; End of function sub_71C4E
000B7A08                            
000B7A08                            ; ===========================================================================
000B7A08 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000B7A0E                            
000B7A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7A0E                            
000B7A0E                            
000B7A0E                            sub_71CCA:				; XREF: sub_71B4C
000B7A0E 532D 000E                  		subq.b	#1,$E(a5)
000B7A12 6600                       		bne.s	loc_71CE0
000B7A14 0895 0004                  		bclr	#4,(a5)
000B7A18 4EBA 0000                  		jsr	sub_71CEC(pc)
000B7A1C 4EBA 0000                  		jsr	sub_71E18(pc)
000B7A20 6000 0000                  		bra.w	loc_726E2
000B7A24                            ; ===========================================================================
000B7A24                            
000B7A24                            loc_71CE0:
000B7A24 4EBA 0000                  		jsr	sub_71D9E(pc)
000B7A28 4EBA 0000                  		jsr	sub_71DC6(pc)
000B7A2C 6000 0000                  		bra.w	loc_71E24
000B7A30                            ; End of function sub_71CCA
000B7A30                            
000B7A30                            
000B7A30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7A30                            
000B7A30                            
000B7A30                            sub_71CEC:				; XREF: sub_71CCA
000B7A30 286D 0004                  		movea.l	4(a5),a4
000B7A34 0895 0001                  		bclr	#1,(a5)
000B7A38                            
000B7A38                            loc_71CF4:
000B7A38 7A00                       		moveq	#0,d5
000B7A3A 1A1C                       		move.b	(a4)+,d5
000B7A3C 0C05 00E0                  		cmpi.b	#-$20,d5
000B7A40 6500                       		bcs.s	loc_71D04
000B7A42 4EBA 0000                  		jsr	sub_72A5A(pc)
000B7A46 60F0                       		bra.s	loc_71CF4
000B7A48                            ; ===========================================================================
000B7A48                            
000B7A48                            loc_71D04:
000B7A48 4EBA 0000                  		jsr	sub_726FE(pc)
000B7A4C 4A05                       		tst.b	d5
000B7A4E 6A00                       		bpl.s	loc_71D1A
000B7A50 4EBA 0000                  		jsr	sub_71D22(pc)
000B7A54 1A1C                       		move.b	(a4)+,d5
000B7A56 6A00                       		bpl.s	loc_71D1A
000B7A58 534C                       		subq.w	#1,a4
000B7A5A 6000 0000                  		bra.w	sub_71D60
000B7A5E                            ; ===========================================================================
000B7A5E                            
000B7A5E                            loc_71D1A:
000B7A5E 4EBA 0000                  		jsr	sub_71D40(pc)
000B7A62 6000 0000                  		bra.w	sub_71D60
000B7A66                            ; End of function sub_71CEC
000B7A66                            
000B7A66                            
000B7A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7A66                            
000B7A66                            
000B7A66                            sub_71D22:				; XREF: sub_71CEC
000B7A66 0405 0080                  		subi.b	#$80,d5
000B7A6A 6700                       		beq.s	loc_71D58
000B7A6C DA2D 0008                  		add.b	8(a5),d5
000B7A70 0245 007F                  		andi.w	#$7F,d5
000B7A74 E34D                       		lsl.w	#1,d5
000B7A76 41FA 0000                  		lea	word_72790(pc),a0
000B7A7A 3C30 5000                  		move.w	(a0,d5.w),d6
000B7A7E 3B46 0010                  		move.w	d6,$10(a5)
000B7A82 4E75                       		rts	
000B7A84                            ; End of function sub_71D22
000B7A84                            
000B7A84                            
000B7A84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7A84                            
000B7A84                            
000B7A84                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000B7A84 1005                       		move.b	d5,d0
000B7A86 122D 0002                  		move.b	2(a5),d1
000B7A8A                            
000B7A8A                            loc_71D46:
000B7A8A 5301                       		subq.b	#1,d1
000B7A8C 6700                       		beq.s	loc_71D4E
000B7A8E D005                       		add.b	d5,d0
000B7A90 60F8                       		bra.s	loc_71D46
000B7A92                            ; ===========================================================================
000B7A92                            
000B7A92                            loc_71D4E:
000B7A92 1B40 000F                  		move.b	d0,$F(a5)
000B7A96 1B40 000E                  		move.b	d0,$E(a5)
000B7A9A 4E75                       		rts	
000B7A9C                            ; End of function sub_71D40
000B7A9C                            
000B7A9C                            ; ===========================================================================
000B7A9C                            
000B7A9C                            loc_71D58:				; XREF: sub_71D22
000B7A9C 08D5 0001                  		bset	#1,(a5)
000B7AA0 426D 0010                  		clr.w	$10(a5)
000B7AA4                            
000B7AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7AA4                            
000B7AA4                            
000B7AA4                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000B7AA4 2B4C 0004                  		move.l	a4,4(a5)
000B7AA8 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000B7AAE 0815 0004                  		btst	#4,(a5)
000B7AB2 6600                       		bne.s	locret_71D9C
000B7AB4 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000B7ABA 422D 000C                  		clr.b	$C(a5)
000B7ABE 0815 0003                  		btst	#3,(a5)
000B7AC2 6700                       		beq.s	locret_71D9C
000B7AC4 206D 0014                  		movea.l	$14(a5),a0
000B7AC8 1B58 0018                  		move.b	(a0)+,$18(a5)
000B7ACC 1B58 0019                  		move.b	(a0)+,$19(a5)
000B7AD0 1B58 001A                  		move.b	(a0)+,$1A(a5)
000B7AD4 1018                       		move.b	(a0)+,d0
000B7AD6 E208                       		lsr.b	#1,d0
000B7AD8 1B40 001B                  		move.b	d0,$1B(a5)
000B7ADC 426D 001C                  		clr.w	$1C(a5)
000B7AE0                            
000B7AE0                            locret_71D9C:
000B7AE0 4E75                       		rts	
000B7AE2                            ; End of function sub_71D60
000B7AE2                            
000B7AE2                            
000B7AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7AE2                            
000B7AE2                            
000B7AE2                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000B7AE2 4A2D 0012                  		tst.b	$12(a5)
000B7AE6 6700                       		beq.s	locret_71DC4
000B7AE8 532D 0012                  		subq.b	#1,$12(a5)
000B7AEC 6600                       		bne.s	locret_71DC4
000B7AEE 08D5 0001                  		bset	#1,(a5)
000B7AF2 4A2D 0001                  		tst.b	1(a5)
000B7AF6 6B00 0000                  		bmi.w	loc_71DBE
000B7AFA 4EBA 0000                  		jsr	sub_726FE(pc)
000B7AFE 584F                       		addq.w	#4,sp
000B7B00 4E75                       		rts	
000B7B02                            ; ===========================================================================
000B7B02                            
000B7B02                            loc_71DBE:
000B7B02 4EBA 0000                  		jsr	sub_729A0(pc)
000B7B06 584F                       		addq.w	#4,sp
000B7B08                            
000B7B08                            locret_71DC4:
000B7B08 4E75                       		rts	
000B7B0A                            ; End of function sub_71D9E
000B7B0A                            
000B7B0A                            
000B7B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7B0A                            
000B7B0A                            
000B7B0A                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000B7B0A 584F                       		addq.w	#4,sp
000B7B0C 0815 0003                  		btst	#3,(a5)
000B7B10 6700                       		beq.s	locret_71E16
000B7B12 4A2D 0018                  		tst.b	$18(a5)
000B7B16 6700                       		beq.s	loc_71DDA
000B7B18 532D 0018                  		subq.b	#1,$18(a5)
000B7B1C 4E75                       		rts	
000B7B1E                            ; ===========================================================================
000B7B1E                            
000B7B1E                            loc_71DDA:
000B7B1E 532D 0019                  		subq.b	#1,$19(a5)
000B7B22 6700                       		beq.s	loc_71DE2
000B7B24 4E75                       		rts	
000B7B26                            ; ===========================================================================
000B7B26                            
000B7B26                            loc_71DE2:
000B7B26 206D 0014                  		movea.l	$14(a5),a0
000B7B2A 1B68 0001 0019             		move.b	1(a0),$19(a5)
000B7B30 4A2D 001B                  		tst.b	$1B(a5)
000B7B34 6600                       		bne.s	loc_71DFE
000B7B36 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000B7B3C 442D 001A                  		neg.b	$1A(a5)
000B7B40 4E75                       		rts	
000B7B42                            ; ===========================================================================
000B7B42                            
000B7B42                            loc_71DFE:
000B7B42 532D 001B                  		subq.b	#1,$1B(a5)
000B7B46 1C2D 001A                  		move.b	$1A(a5),d6
000B7B4A 4886                       		ext.w	d6
000B7B4C DC6D 001C                  		add.w	$1C(a5),d6
000B7B50 3B46 001C                  		move.w	d6,$1C(a5)
000B7B54 DC6D 0010                  		add.w	$10(a5),d6
000B7B58 594F                       		subq.w	#4,sp
000B7B5A                            
000B7B5A                            locret_71E16:
000B7B5A 4E75                       		rts	
000B7B5C                            ; End of function sub_71DC6
000B7B5C                            
000B7B5C                            
000B7B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7B5C                            
000B7B5C                            
000B7B5C                            sub_71E18:				; XREF: sub_71CCA
000B7B5C 0815 0001                  		btst	#1,(a5)
000B7B60 6600                       		bne.s	locret_71E48
000B7B62 3C2D 0010                  		move.w	$10(a5),d6
000B7B66 6700                       		beq.s	loc_71E4A
000B7B68                            
000B7B68                            loc_71E24:				; XREF: sub_71CCA
000B7B68 102D 001E                  		move.b	$1E(a5),d0
000B7B6C 4880                       		ext.w	d0
000B7B6E DC40                       		add.w	d0,d6
000B7B70 0815 0002                  		btst	#2,(a5)
000B7B74 6600                       		bne.s	locret_71E48
000B7B76 3206                       		move.w	d6,d1
000B7B78 E049                       		lsr.w	#8,d1
000B7B7A 103C 00A4                  		move.b	#-$5C,d0
000B7B7E 4EBA 0000                  		jsr	sub_72722(pc)
000B7B82 1206                       		move.b	d6,d1
000B7B84 103C 00A0                  		move.b	#-$60,d0
000B7B88 4EBA 0000                  		jsr	sub_72722(pc)
000B7B8C                            
000B7B8C                            locret_71E48:
000B7B8C 4E75                       		rts	
000B7B8E                            ; ===========================================================================
000B7B8E                            
000B7B8E                            loc_71E4A:
000B7B8E 08D5 0001                  		bset	#1,(a5)
000B7B92 4E75                       		rts	
000B7B94                            ; End of function sub_71E18
000B7B94                            
000B7B94                            ; ===========================================================================
000B7B94                            
000B7B94                            loc_71E50:				; XREF: sub_71B4C
000B7B94 6B00                       		bmi.s	loc_71E94
000B7B96 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000B7B9C 6700 0000                  		beq.w	loc_71EFE
000B7BA0 1D7C 0002 0003             		move.b	#2,3(a6)
000B7BA6 7602                       		moveq	#2,d3
000B7BA8 103C 00B4                  		move.b	#-$4C,d0
000B7BAC 7200                       		moveq	#0,d1
000B7BAE                            
000B7BAE                            loc_71E6A:
000B7BAE 4EBA 0000                  		jsr	sub_7272E(pc)
000B7BB2 4EBA 0000                  		jsr	sub_72764(pc)
000B7BB6 5200                       		addq.b	#1,d0
000B7BB8 51CB FFF4                  		dbf	d3,loc_71E6A
000B7BBC                            
000B7BBC 7602                       		moveq	#2,d3
000B7BBE 7028                       		moveq	#$28,d0
000B7BC0                            
000B7BC0                            loc_71E7C:
000B7BC0 1203                       		move.b	d3,d1
000B7BC2 4EBA 0000                  		jsr	sub_7272E(pc)
000B7BC6 5801                       		addq.b	#4,d1
000B7BC8 4EBA 0000                  		jsr	sub_7272E(pc)
000B7BCC 51CB FFF2                  		dbf	d3,loc_71E7C
000B7BD0                            
000B7BD0 4EBA 0000                  		jsr	sub_729B6(pc)
000B7BD4 33FC 0100 00A1 1100 4E71+          stopZ80
000B7BEC 13FC 007F 00A0 1FFF                move.b    #$7F,($A01FFF).l; pause DAC
000B7BF4 33FC 0000 00A1 1100                startZ80
000B7BFC 6000 FD78                  		bra.w	loc_71C44
000B7C00                            ; ===========================================================================
000B7C00                            
000B7C00                            loc_71E94:				; XREF: loc_71E50
000B7C00 422E 0003                  		clr.b	3(a6)
000B7C04 7630                       		moveq	#$30,d3
000B7C06 4BEE 0040                  		lea	$40(a6),a5
000B7C0A 7806                       		moveq	#6,d4
000B7C0C                            
000B7C0C                            loc_71EA0:
000B7C0C 0815 0007                  		btst	#7,(a5)
000B7C10 6700                       		beq.s	loc_71EB8
000B7C12 0815 0002                  		btst	#2,(a5)
000B7C16 6600                       		bne.s	loc_71EB8
000B7C18 103C 00B4                  		move.b	#-$4C,d0
000B7C1C 122D 000A                  		move.b	$A(a5),d1
000B7C20 4EBA 0000                  		jsr	sub_72722(pc)
000B7C24                            
000B7C24                            loc_71EB8:
000B7C24 DAC3                       		adda.w	d3,a5
000B7C26 51CC FFE4                  		dbf	d4,loc_71EA0
000B7C2A                            
000B7C2A 4BEE 0220                  		lea	$220(a6),a5
000B7C2E 7802                       		moveq	#2,d4
000B7C30                            
000B7C30                            loc_71EC4:
000B7C30 0815 0007                  		btst	#7,(a5)
000B7C34 6700                       		beq.s	loc_71EDC
000B7C36 0815 0002                  		btst	#2,(a5)
000B7C3A 6600                       		bne.s	loc_71EDC
000B7C3C 103C 00B4                  		move.b	#-$4C,d0
000B7C40 122D 000A                  		move.b	$A(a5),d1
000B7C44 4EBA 0000                  		jsr	sub_72722(pc)
000B7C48                            
000B7C48                            loc_71EDC:
000B7C48 DAC3                                       adda.w  d3,a5
000B7C4A 51CC FFE4                                  dbf     d4,loc_71EC4
000B7C4E                            
000B7C4E 4BEE 0340                                  lea     $340(a6),a5
000B7C52 0815 0007                                  btst    #7,(a5)
000B7C56 6700                                       beq.s   @UnpauseDAC
000B7C58 0815 0002                                  btst    #2,(a5)
000B7C5C 6600                                       bne.s   @UnpauseDAC
000B7C5E 103C 00B4                                  move.b  #-$4C,d0
000B7C62 122D 000A                                  move.b  $A(a5),d1
000B7C66 4EBA 0000                                  jsr     sub_72722(pc)
000B7C6A                            
000B7C6A                            @UnpauseDAC:
000B7C6A 33FC 0100 00A1 1100 4E71+                  stopZ80
000B7C82 13FC 0000 00A0 1FFF                        move.b  #0,($A01FFF).l  ; unpause DAC
000B7C8A 33FC 0000 00A1 1100        				startZ80
000B7C92                            
000B7C92                            loc_71EFE:
000B7C92 6000 FCE2                  		bra.w	loc_71C44
000B7C96                            
000B7C96                            ; ---------------------------------------------------------------------------
000B7C96                            ; Subroutine to	play a sound or	music track
000B7C96                            ; ---------------------------------------------------------------------------
000B7C96                            
000B7C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7C96                            
000B7C96                            
000B7C96                            Sound_Play:				; XREF: sub_71B4C
000B7C96 2079 000B 7636             		movea.l	(Go_SoundTypes).l,a0
000B7C9C 43EE 000A                  		lea	$A(a6),a1	; load music track number
000B7CA0 1616                       		move.b	0(a6),d3
000B7CA2 7802                       		moveq	#2,d4
000B7CA4                            
000B7CA4                            loc_71F12:
000B7CA4 1011                       		move.b	(a1),d0		; move track number to d0
000B7CA6 1200                       		move.b	d0,d1
000B7CA8 4219                       		clr.b	(a1)+
000B7CAA 0400 0081                  		subi.b	#$81,d0
000B7CAE 6500                       		bcs.s	loc_71F3E
000B7CB0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000B7CB6 6700                       		beq.s	loc_71F2C
000B7CB8 1D41 000A                  		move.b	d1,$A(a6)
000B7CBC 6000                       		bra.s	loc_71F3E
000B7CBE                            ; ===========================================================================
000B7CBE                            
000B7CBE                            loc_71F2C:
000B7CBE 0240 007F                  		andi.w	#$7F,d0
000B7CC2 1430 0000                  		move.b	(a0,d0.w),d2
000B7CC6 B403                       		cmp.b	d3,d2
000B7CC8 6500                       		bcs.s	loc_71F3E
000B7CCA 1602                       		move.b	d2,d3
000B7CCC 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000B7CD0                            
000B7CD0                            loc_71F3E:
000B7CD0 51CC FFD2                  		dbf	d4,loc_71F12
000B7CD4                            
000B7CD4 4A03                       		tst.b	d3
000B7CD6 6B00                       		bmi.s	locret_71F4A
000B7CD8 1C83                       		move.b	d3,0(a6)
000B7CDA                            
000B7CDA                            locret_71F4A:
000B7CDA 4E75                       		rts	
000B7CDC                            ; End of function Sound_Play
000B7CDC                            
000B7CDC                            
000B7CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B7CDC                            
000B7CDC                            
000B7CDC                            Sound_ChkValue:				; XREF: sub_71B4C
000B7CDC 7E00                       		moveq	#0,d7
000B7CDE 1E2E 0009                  		move.b	9(a6),d7
000B7CE2 6700 0000                  		beq.w	Sound_E4
000B7CE6 6A00                       		bpl.s	locret_71F8C
000B7CE8 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000B7CEE 0C07 009F                  		cmpi.b	#$9F,d7
000B7CF2 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000B7CF6 0C07 00A0                  		cmpi.b	#$A0,d7
000B7CFA 6500 0000                  		bcs.w	locret_71F8C
000B7CFE 0C07 00CF                  		cmpi.b	#$CF,d7
000B7D02 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000B7D06 0C07 00D0                  		cmpi.b	#$D0,d7
000B7D0A 6500 0000                  		bcs.w	locret_71F8C
000B7D0E 0C07 00D1                  		cmpi.b	#$D1,d7
000B7D12 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
000B7D16 0C07 00DF                  		cmpi.b	#$DF,d7
000B7D1A 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
000B7D1E 0C07 00E4                  		cmpi.b	#$E4,d7
000B7D22 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000B7D24 0C07 00FF                  		cmpi.b	#$FF,d7
000B7D28 6300 0000                  		bls.w	Sound_PlayMoreBGM
000B7D2C                            
000B7D2C                            locret_71F8C:
000B7D2C 4E75                       		rts	
000B7D2E                            ; ===========================================================================
000B7D2E                            
000B7D2E                            Sound_E0toE4:				; XREF: Sound_ChkValue
000B7D2E 0407 00E0                  		subi.b	#$E0,d7
000B7D32 E54F                       		lsl.w	#2,d7
000B7D34 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000B7D38                            ; ===========================================================================
000B7D38                            
000B7D38                            Sound_ExIndex:
000B7D38 6000 0000                  		bra.w	Sound_E0
000B7D3C                            ; ===========================================================================
000B7D3C 6000 0000                  		bra.w	Sound_E1
000B7D40                            ; ===========================================================================
000B7D40 6000 0000                  		bra.w	Sound_E2
000B7D44                            ; ===========================================================================
000B7D44 6000 0000                  		bra.w	Sound_E3
000B7D48                            ; ===========================================================================
000B7D48 6000 0000                  		bra.w	Sound_E4
000B7D4C                            ; ===========================================================================
000B7D4C                            ; ---------------------------------------------------------------------------
000B7D4C                            ; Play "Say-gaa" PCM sound
000B7D4C                            ; ---------------------------------------------------------------------------
000B7D4C                            
000B7D4C                            Sound_E1:				  
000B7D4C 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000B7D52 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000B7D58 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000B7D60                            PlayPCM_Loop:	  
000B7D60 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000B7D66 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000B7D6A 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000B7D6E 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000B7D70 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000B7D72 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000B7D76 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000B7D7C 4EB8 0FE8                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000B7D80 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000B7D86 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000B7D88 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000B7D8A                            return_PlayPCM: 
000B7D8A 584F                       		addq.w	#4,sp 
000B7D8C 4E75                       		rts
000B7D8E                            
000B7D8E                            ; ===========================================================================
000B7D8E                            ; ---------------------------------------------------------------------------
000B7D8E                            ; Play music track $81-$9F
000B7D8E                            ; ---------------------------------------------------------------------------
000B7D8E                            
000B7D8E                            Sound_PlayMoreBGM:	; Sound_E5toFF
000B7D8E 0407 0045                  		subi.b	#$45, d7	; map E5-FF range to A0-BA
000B7D92                            		; fall through to Sound_PlayBGM
000B7D92                            
000B7D92                            Sound_81to9F:				; XREF: Sound_ChkValue
000B7D92 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000B7D96 6600                       		bne.s	loc_72024	; if not, branch
000B7D98 4A2E 0027                  		tst.b	$27(a6)
000B7D9C 6600 0000                  		bne.w	loc_721B6
000B7DA0 4BEE 0040                  		lea	$40(a6),a5
000B7DA4 7009                       		moveq	#9,d0
000B7DA6                            
000B7DA6                            loc_71FE6:
000B7DA6 0895 0002                  		bclr	#2,(a5)
000B7DAA DAFC 0030                  		adda.w	#$30,a5
000B7DAE 51C8 FFF6                  		dbf	d0,loc_71FE6
000B7DB2                            
000B7DB2 4BEE 0220                  		lea	$220(a6),a5
000B7DB6 7005                       		moveq	#5,d0
000B7DB8                            
000B7DB8                            loc_71FF8:
000B7DB8 0895 0007                  		bclr	#7,(a5)
000B7DBC DAFC 0030                  		adda.w	#$30,a5
000B7DC0 51C8 FFF6                  		dbf	d0,loc_71FF8
000B7DC4 4216                       		clr.b	0(a6)
000B7DC6 204E                       		movea.l	a6,a0
000B7DC8 43EE 03A0                  		lea	$3A0(a6),a1
000B7DCC 303C 0087                  		move.w	#$87,d0
000B7DD0                            
000B7DD0                            loc_72012:
000B7DD0 22D8                       		move.l	(a0)+,(a1)+
000B7DD2 51C8 FFFC                  		dbf	d0,loc_72012
000B7DD6                            
000B7DD6 1D7C 0080 0027             		move.b	#$80,$27(a6)
000B7DDC 4216                       		clr.b	0(a6)
000B7DDE 6000                       		bra.s	loc_7202C
000B7DE0                            ; ===========================================================================
000B7DE0                            
000B7DE0                            loc_72024:
000B7DE0 422E 0027                  		clr.b	$27(a6)
000B7DE4 422E 0026                  		clr.b	$26(a6)
000B7DE8                            
000B7DE8                            loc_7202C:
000B7DE8 4EBA 0000                  		jsr	sub_725CA(pc)
000B7DEC 2879 000B 7646             		movea.l	(off_719A0).l,a4
000B7DF2 0407 0081                  		subi.b	#$81,d7
000B7DF6 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000B7DFC 2879 000B 763E             		movea.l	(Go_MusicIndex).l,a4
000B7E02 E54F                       		lsl.w	#2,d7
000B7E04 2874 7000                  		movea.l	(a4,d7.w),a4
000B7E08 7000                       		moveq	#0,d0
000B7E0A 3014                       		move.w	(a4),d0
000B7E0C D08C                       		add.l	a4,d0
000B7E0E 2D40 0018                  		move.l	d0,$18(a6)
000B7E12 102C 0005                  		move.b	5(a4),d0
000B7E16 1D40 0028                  		move.b	d0,$28(a6)
000B7E1A 4A2E 002A                  		tst.b	$2A(a6)
000B7E1E 6700                       		beq.s	loc_72068
000B7E20 102E 0029                  		move.b	$29(a6),d0
000B7E24                            
000B7E24                            loc_72068:
000B7E24 1D40 0002                  		move.b	d0,2(a6)
000B7E28 1D40 0001                  		move.b	d0,1(a6)
000B7E2C 7200                       		moveq	#0,d1
000B7E2E 264C                       		movea.l	a4,a3
000B7E30 5C4C                       		addq.w	#6,a4
000B7E32 7E00                       		moveq	#0,d7
000B7E34 1E2B 0002                  		move.b	2(a3),d7
000B7E38 6700 0000                  		beq.w	loc_72114
000B7E3C 5307                       		subq.b	#1,d7
000B7E3E 123C 00C0                  		move.b	#-$40,d1
000B7E42 182B 0004                  		move.b	4(a3),d4
000B7E46 7C30                       		moveq	#$30,d6
000B7E48 1A3C 0001                  		move.b	#1,d5
000B7E4C 43EE 0040                  		lea	$40(a6),a1
000B7E50 45FA 0000                  		lea	byte_721BA(pc),a2
000B7E54                            
000B7E54                            loc_72098:
000B7E54 08D1 0007                  		bset	#7,(a1)
000B7E58 135A 0001                  		move.b	(a2)+,1(a1)
000B7E5C 1344 0002                  		move.b	d4,2(a1)
000B7E60 1346 000D                  		move.b	d6,$D(a1)
000B7E64 1341 000A                  		move.b	d1,$A(a1)
000B7E68 1345 000E                  		move.b	d5,$E(a1)
000B7E6C 7000                       		moveq	#0,d0
000B7E6E 301C                       		move.w	(a4)+,d0
000B7E70 D08B                       		add.l	a3,d0
000B7E72 2340 0004                  		move.l	d0,4(a1)
000B7E76 335C 0008                  		move.w	(a4)+,8(a1)
000B7E7A D2C6                       		adda.w	d6,a1
000B7E7C 51CF FFD6                  		dbf	d7,loc_72098
000B7E80 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000B7E86 6600                       		bne.s	loc_720D8
000B7E88 702B                       		moveq	#$2B,d0
000B7E8A 7200                       		moveq	#0,d1
000B7E8C 4EBA 0000                  		jsr	sub_7272E(pc)
000B7E90 6000 0000                  		bra.w	loc_72114
000B7E94                            ; ===========================================================================
000B7E94                            
000B7E94                            loc_720D8:
000B7E94 7028                       		moveq	#$28,d0
000B7E96 7206                       		moveq	#6,d1
000B7E98 4EBA 0000                  		jsr	sub_7272E(pc)
000B7E9C 103C 0042                  		move.b	#$42,d0
000B7EA0 727F                       		moveq	#$7F,d1
000B7EA2 4EBA 0000                  		jsr	sub_72764(pc)
000B7EA6 103C 004A                  		move.b	#$4A,d0
000B7EAA 727F                       		moveq	#$7F,d1
000B7EAC 4EBA 0000                  		jsr	sub_72764(pc)
000B7EB0 103C 0046                  		move.b	#$46,d0
000B7EB4 727F                       		moveq	#$7F,d1
000B7EB6 4EBA 0000                  		jsr	sub_72764(pc)
000B7EBA 103C 004E                  		move.b	#$4E,d0
000B7EBE 727F                       		moveq	#$7F,d1
000B7EC0 4EBA 0000                  		jsr	sub_72764(pc)
000B7EC4 103C 00B6                  		move.b	#-$4A,d0
000B7EC8 123C 00C0                  		move.b	#-$40,d1
000B7ECC 4EBA 0000                  		jsr	sub_72764(pc)
000B7ED0                            
000B7ED0                            loc_72114:
000B7ED0 7E00                       		moveq	#0,d7
000B7ED2 1E2B 0003                  		move.b	3(a3),d7
000B7ED6 6700                       		beq.s	loc_72154
000B7ED8 5307                       		subq.b	#1,d7
000B7EDA 43EE 0190                  		lea	$190(a6),a1
000B7EDE 45FA 0000                  		lea	byte_721C2(pc),a2
000B7EE2                            
000B7EE2                            loc_72126:
000B7EE2 08D1 0007                  		bset	#7,(a1)
000B7EE6 135A 0001                  		move.b	(a2)+,1(a1)
000B7EEA 1344 0002                  		move.b	d4,2(a1)
000B7EEE 1346 000D                  		move.b	d6,$D(a1)
000B7EF2 1345 000E                  		move.b	d5,$E(a1)
000B7EF6 7000                       		moveq	#0,d0
000B7EF8 301C                       		move.w	(a4)+,d0
000B7EFA D08B                       		add.l	a3,d0
000B7EFC 2340 0004                  		move.l	d0,4(a1)
000B7F00 335C 0008                  		move.w	(a4)+,8(a1)
000B7F04 101C                       		move.b	(a4)+,d0
000B7F06 135C 000B                  		move.b	(a4)+,$B(a1)
000B7F0A D2C6                       		adda.w	d6,a1
000B7F0C 51CF FFD4                  		dbf	d7,loc_72126
000B7F10                            
000B7F10                            loc_72154:
000B7F10 43EE 0220                  		lea	$220(a6),a1
000B7F14 7E05                       		moveq	#5,d7
000B7F16                            
000B7F16                            loc_7215A:
000B7F16 4A11                       		tst.b	(a1)
000B7F18 6A00 0000                  		bpl.w	loc_7217C
000B7F1C 7000                       		moveq	#0,d0
000B7F1E 1029 0001                  		move.b	1(a1),d0
000B7F22 6B00                       		bmi.s	loc_7216E
000B7F24 5500                       		subq.b	#2,d0
000B7F26 E508                       		lsl.b	#2,d0
000B7F28 6000                       		bra.s	loc_72170
000B7F2A                            ; ===========================================================================
000B7F2A                            
000B7F2A                            loc_7216E:
000B7F2A E608                       		lsr.b	#3,d0
000B7F2C                            
000B7F2C                            loc_72170:
000B7F2C 41FA 0000                  		lea	dword_722CC(pc),a0
000B7F30 2070 0000                  		movea.l	(a0,d0.w),a0
000B7F34 08D0 0002                  		bset	#2,(a0)
000B7F38                            
000B7F38                            loc_7217C:
000B7F38 D2C6                       		adda.w	d6,a1
000B7F3A 51CF FFDA                  		dbf	d7,loc_7215A
000B7F3E                            
000B7F3E 4A6E 0340                  		tst.w	$340(a6)
000B7F42 6A00                       		bpl.s	loc_7218E
000B7F44 08EE 0002 0100             		bset	#2,$100(a6)
000B7F4A                            
000B7F4A                            loc_7218E:
000B7F4A 4A6E 0370                  		tst.w	$370(a6)
000B7F4E 6A00                       		bpl.s	loc_7219A
000B7F50 08EE 0002 01F0             		bset	#2,$1F0(a6)
000B7F56                            
000B7F56                            loc_7219A:
000B7F56 4BEE 0070                  		lea	$70(a6),a5
000B7F5A 7805                       		moveq	#5,d4
000B7F5C                            
000B7F5C                            loc_721A0:
000B7F5C 4EBA 0000                  		jsr	sub_726FE(pc)
000B7F60 DAC6                       		adda.w	d6,a5
000B7F62 51CC FFF8                  		dbf	d4,loc_721A0
000B7F66 7802                       		moveq	#2,d4
000B7F68                            
000B7F68                            loc_721AC:
000B7F68 4EBA 0000                  		jsr	sub_729A0(pc)
000B7F6C DAC6                       		adda.w	d6,a5
000B7F6E 51CC FFF8                  		dbf	d4,loc_721AC
000B7F72                            
000B7F72                            loc_721B6:
000B7F72 584F                       		addq.w	#4,sp
000B7F74 4E75                       		rts	
000B7F76                            ; ===========================================================================
000B7F76 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000B7F7E                            		even
000B7F7E 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000B7F82                            		even
000B7F82                            ; ===========================================================================
000B7F82                            ; ---------------------------------------------------------------------------
000B7F82                            ; Play normal sound effect
000B7F82                            ; ---------------------------------------------------------------------------
000B7F82                            
000B7F82                            Sound_D1toDF:
000B7F82 4A2E 0027                  		tst.b	$27(a6)
000B7F86 6600 0000                  		bne.w	loc_722C6
000B7F8A 4A2E 0004                  		tst.b	4(a6)
000B7F8E 6600 0000                  		bne.w	loc_722C6
000B7F92 4A2E 0024                  		tst.b	$24(a6)
000B7F96 6600 0000                  		bne.w	loc_722C6
000B7F9A 4238 C900                  		clr.b	($FFFFC900).w
000B7F9E 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
000B7FA2 6600                       		bne.s	@cont3	; if not, branch
000B7FA4 3F00                       		move.w	d0,-(sp)
000B7FA6 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
000B7FAA 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
000B7FAE 6600                       		bne.s	@cont1		; if it is, branch
000B7FB0 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
000B7FB4                            		
000B7FB4                            @cont1:
000B7FB4 5200                       		addq.b	#1,d0
000B7FB6 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
000B7FBA 6400                       		bcc.s	@cont2		; if it has, branch
000B7FBC 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
000B7FC0                            		
000B7FC0                            @cont2:
000B7FC0 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
000B7FC6 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
000B7FCC 301F                       		move.w	(sp)+,d0
000B7FCE                            		
000B7FCE                            @cont3:
000B7FCE 2079 000B 7642             		movea.l	(Go_SoundIndex).l,a0
000B7FD4 0407 00A1                  		sub.b	#$A1,d7
000B7FD8 6000 0000                  		bra	SoundEffects_Common
000B7FDC                            		
000B7FDC                            Sound_A0toCF:				; XREF: Sound_ChkValue
000B7FDC 4A2E 0027                  		tst.b	$27(a6)
000B7FE0 6600 0000                  		bne.w	loc_722C6
000B7FE4 4A2E 0004                  		tst.b	4(a6)
000B7FE8 6600 0000                  		bne.w	loc_722C6
000B7FEC 4A2E 0024                  		tst.b	$24(a6)
000B7FF0 6600 0000                  		bne.w	loc_722C6
000B7FF4 4238 C900                  		clr.b	($FFFFC900).w
000B7FF8 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000B7FFC 6600                       		bne.s	Sound_notB5	; if not, branch
000B7FFE 4A2E 002B                  		tst.b	$2B(a6)
000B8002 6600                       		bne.s	loc_721EE
000B8004 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000B8008                            
000B8008                            loc_721EE:
000B8008 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000B800E                            
000B800E                            Sound_notB5:
000B800E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000B8012 6600                       		bne.s	Sound_notA7	; if not, branch
000B8014 4A2E 002C                  		tst.b	$2C(a6)
000B8018 6600 0000                  		bne.w	locret_722C4
000B801C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000B8022                            
000B8022                            Sound_notA7:
000B8022 2079 000B 7642             		movea.l	(Go_SoundIndex).l,a0
000B8028 0407 00A0                  		subi.b	#$A0,d7
000B802C                            SoundEffects_Common:
000B802C E54F                       		lsl.w	#2,d7
000B802E 2670 7000                  		movea.l	(a0,d7.w),a3
000B8032 224B                       		movea.l	a3,a1
000B8034 7200                       		moveq	#0,d1
000B8036 3219                       		move.w	(a1)+,d1
000B8038 D28B                       		add.l	a3,d1
000B803A 1A19                       		move.b	(a1)+,d5
000B803C 1E19                       		move.b	(a1)+,d7
000B803E 5307                       		subq.b	#1,d7
000B8040 7C30                       		moveq	#$30,d6
000B8042                            		
000B8042                            loc_72228:
000B8042 7600                       		moveq	#0,d3
000B8044 1629 0001                  		move.b	1(a1),d3
000B8048 1803                       		move.b	d3,d4
000B804A 6B00                       		bmi.s	loc_72244
000B804C 5543                       		subq.w	#2,d3
000B804E E54B                       		lsl.w	#2,d3
000B8050 4BFA 0000                  		lea	dword_722CC(pc),a5
000B8054 2A75 3000                  		movea.l	(a5,d3.w),a5
000B8058 08D5 0002                  		bset	#2,(a5)
000B805C 6000                       		bra.s	loc_7226E
000B805E                            ; ===========================================================================
000B805E                            
000B805E                            loc_72244:
000B805E E64B                       		lsr.w	#3,d3
000B8060 4BFA 0000                  		lea	dword_722CC(pc),a5
000B8064 2A75 3000                  		movea.l	(a5,d3.w),a5
000B8068 08D5 0002                  		bset	#2,(a5)
000B806C 0C04 00C0                  		cmpi.b	#$C0,d4
000B8070 6600                       		bne.s	loc_7226E
000B8072 1004                       		move.b	d4,d0
000B8074 0000 001F                  		ori.b	#$1F,d0
000B8078 13C0 00C0 0011             		move.b	d0,($C00011).l
000B807E 0840 0005                  		bchg	#5,d0
000B8082 13C0 00C0 0011             		move.b	d0,($C00011).l
000B8088                            
000B8088                            loc_7226E:
000B8088 4BFA 0000                  		lea	dword_722EC(pc),a5
000B808C 2A75 3000                  		movea.l	(a5,d3.w),a5
000B8090 244D                       		movea.l	a5,a2
000B8092 700B                       		moveq	#$B,d0
000B8094                            
000B8094                            loc_72276:
000B8094 429A                       		clr.l	(a2)+
000B8096 51C8 FFFC                  		dbf	d0,loc_72276
000B809A                            
000B809A 3A99                       		move.w	(a1)+,(a5)
000B809C 1B45 0002                  		move.b	d5,2(a5)
000B80A0 7000                       		moveq	#0,d0
000B80A2 3019                       		move.w	(a1)+,d0
000B80A4 D08B                       		add.l	a3,d0
000B80A6 2B40 0004                  		move.l	d0,4(a5)
000B80AA 3B59 0008                  		move.w	(a1)+,8(a5)
000B80AE 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
000B80B2 6700                       		beq.s	@cont		; if not, branch
000B80B4 3F00                       		move.w	d0,-(sp)
000B80B6 1038 C902                  		move.b	($FFFFC902).w,d0
000B80BA D12D 0008                  		add.b	d0,8(a5)
000B80BE 301F                       		move.w	(sp)+,d0
000B80C0                            		
000B80C0                            @cont:
000B80C0 1B7C 0001 000E             		move.b	#1,$E(a5)
000B80C6 1B46 000D                  		move.b	d6,$D(a5)
000B80CA 4A04                       		tst.b	d4
000B80CC 6B00                       		bmi.s	loc_722A8
000B80CE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000B80D4 2B41 0020                  		move.l	d1,$20(a5)
000B80D8                            
000B80D8                            loc_722A8:
000B80D8 51CF FF68                  		dbf	d7,loc_72228
000B80DC                            
000B80DC 4A2E 0250                  		tst.b	$250(a6)
000B80E0 6A00                       		bpl.s	loc_722B8
000B80E2 08EE 0002 0340             		bset	#2,$340(a6)
000B80E8                            
000B80E8                            loc_722B8:
000B80E8 4A2E 0310                  		tst.b	$310(a6)
000B80EC 6A00                       		bpl.s	locret_722C4
000B80EE 08EE 0002 0370             		bset	#2,$370(a6)
000B80F4                            
000B80F4                            locret_722C4:
000B80F4 4E75                       		rts	
000B80F6                            ; ===========================================================================
000B80F6                            
000B80F6                            loc_722C6:
000B80F6 4216                       		clr.b	0(a6)
000B80F8 4E75                       		rts	
000B80FA                            ; ===========================================================================
000B80FA 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000B80FE 0000 0000                  		dc.l 0
000B8102 00FF F100                  		dc.l $FFF100
000B8106 00FF F130                  		dc.l $FFF130
000B810A 00FF F190                  		dc.l $FFF190
000B810E 00FF F1C0                  		dc.l $FFF1C0
000B8112 00FF F1F0                  		dc.l $FFF1F0
000B8116 00FF F1F0                  		dc.l $FFF1F0
000B811A 00FF F220                  dword_722EC:	dc.l $FFF220
000B811E 0000 0000                  		dc.l 0
000B8122 00FF F250                  		dc.l $FFF250
000B8126 00FF F280                  		dc.l $FFF280
000B812A 00FF F2B0                  		dc.l $FFF2B0
000B812E 00FF F2E0                  		dc.l $FFF2E0
000B8132 00FF F310                  		dc.l $FFF310
000B8136 00FF F310                  		dc.l $FFF310
000B813A                            ; ===========================================================================
000B813A                            ; ---------------------------------------------------------------------------
000B813A                            ; Play GHZ waterfall sound
000B813A                            ; ---------------------------------------------------------------------------
000B813A                            
000B813A                            Sound_D0toDF:				; XREF: Sound_ChkValue
000B813A 4A2E 0027                  		tst.b	$27(a6)
000B813E 6600 0000                  		bne.w	locret_723C6
000B8142 4A2E 0004                  		tst.b	4(a6)
000B8146 6600 0000                  		bne.w	locret_723C6
000B814A 4A2E 0024                  		tst.b	$24(a6)
000B814E 6600 0000                  		bne.w	locret_723C6
000B8152 2079 000B 763A             		movea.l	(Go_SoundD0).l,a0
000B8158 0407 00D0                  		subi.b	#$D0,d7
000B815C E54F                       		lsl.w	#2,d7
000B815E 2670 7000                  		movea.l	(a0,d7.w),a3
000B8162 224B                       		movea.l	a3,a1
000B8164 7000                       		moveq	#0,d0
000B8166 3019                       		move.w	(a1)+,d0
000B8168 D08B                       		add.l	a3,d0
000B816A 2D40 0020                  		move.l	d0,$20(a6)
000B816E 1A19                       		move.b	(a1)+,d5
000B8170 1E19                       		move.b	(a1)+,d7
000B8172 5307                       		subq.b	#1,d7
000B8174 7C30                       		moveq	#$30,d6
000B8176                            
000B8176                            loc_72348:
000B8176 1829 0001                  		move.b	1(a1),d4
000B817A 6B00                       		bmi.s	loc_7235A
000B817C 08EE 0002 0100             		bset	#2,$100(a6)
000B8182 4BEE 0340                  		lea	$340(a6),a5
000B8186 6000                       		bra.s	loc_72364
000B8188                            ; ===========================================================================
000B8188                            
000B8188                            loc_7235A:
000B8188 08EE 0002 01F0             		bset	#2,$1F0(a6)
000B818E 4BEE 0370                  		lea	$370(a6),a5
000B8192                            
000B8192                            loc_72364:
000B8192 244D                       		movea.l	a5,a2
000B8194 700B                       		moveq	#$B,d0
000B8196                            
000B8196                            loc_72368:
000B8196 429A                       		clr.l	(a2)+
000B8198 51C8 FFFC                  		dbf	d0,loc_72368
000B819C                            
000B819C 3A99                       		move.w	(a1)+,(a5)
000B819E 1B45 0002                  		move.b	d5,2(a5)
000B81A2 7000                       		moveq	#0,d0
000B81A4 3019                       		move.w	(a1)+,d0
000B81A6 D08B                       		add.l	a3,d0
000B81A8 2B40 0004                  		move.l	d0,4(a5)
000B81AC 3B59 0008                  		move.w	(a1)+,8(a5)
000B81B0 1B7C 0001 000E             		move.b	#1,$E(a5)
000B81B6 1B46 000D                  		move.b	d6,$D(a5)
000B81BA 4A04                       		tst.b	d4
000B81BC 6B00                       		bmi.s	loc_72396
000B81BE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000B81C4                            
000B81C4                            loc_72396:
000B81C4 51CF FFB0                  		dbf	d7,loc_72348
000B81C8                            
000B81C8 4A2E 0250                  		tst.b	$250(a6)
000B81CC 6A00                       		bpl.s	loc_723A6
000B81CE 08EE 0002 0340             		bset	#2,$340(a6)
000B81D4                            
000B81D4                            loc_723A6:
000B81D4 4A2E 0310                  		tst.b	$310(a6)
000B81D8 6A00                       		bpl.s	locret_723C6
000B81DA 08EE 0002 0370             		bset	#2,$370(a6)
000B81E0 0004 001F                  		ori.b	#$1F,d4
000B81E4 13C4 00C0 0011             		move.b	d4,($C00011).l
000B81EA 0844 0005                  		bchg	#5,d4
000B81EE 13C4 00C0 0011             		move.b	d4,($C00011).l
000B81F4                            
000B81F4                            locret_723C6:
000B81F4 4E75                       		rts	
000B81F6                            ; End of function Sound_ChkValue
000B81F6                            
000B81F6                            ; ===========================================================================
000B81F6 00FF F100                  		dc.l $FFF100
000B81FA 00FF F1F0                  		dc.l $FFF1F0
000B81FE 00FF F250                  		dc.l $FFF250
000B8202 00FF F310                  		dc.l $FFF310
000B8206 00FF F340                  		dc.l $FFF340
000B820A 00FF F370                  		dc.l $FFF370
000B820E                            
000B820E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B820E                            
000B820E                            
000B820E                            Snd_FadeOut1:				; XREF: Sound_E0
000B820E 4216                       		clr.b	0(a6)
000B8210 4BEE 0220                  		lea	$220(a6),a5
000B8214 7E05                       		moveq	#5,d7
000B8216                            
000B8216                            loc_723EA:
000B8216 4A15                       		tst.b	(a5)
000B8218 6A00 0000                  		bpl.w	loc_72472
000B821C 0895 0007                  		bclr	#7,(a5)
000B8220 7600                       		moveq	#0,d3
000B8222 162D 0001                  		move.b	1(a5),d3
000B8226 6B00                       		bmi.s	loc_7243C
000B8228 4EBA 0000                  		jsr	sub_726FE(pc)
000B822C 0C03 0004                  		cmpi.b	#4,d3
000B8230 6600                       		bne.s	loc_72416
000B8232 4A2E 0340                  		tst.b	$340(a6)
000B8236 6A00                       		bpl.s	loc_72416
000B8238 4BEE 0340                  		lea	$340(a6),a5
000B823C 226E 0020                  		movea.l	$20(a6),a1
000B8240 6000                       		bra.s	loc_72428
000B8242                            ; ===========================================================================
000B8242                            
000B8242                            loc_72416:
000B8242 5503                       		subq.b	#2,d3
000B8244 E50B                       		lsl.b	#2,d3
000B8246 41FA FEB2                  		lea	dword_722CC(pc),a0
000B824A 264D                       		movea.l	a5,a3
000B824C 2A70 3000                  		movea.l	(a0,d3.w),a5
000B8250 226E 0018                  		movea.l	$18(a6),a1
000B8254                            
000B8254                            loc_72428:
000B8254 0895 0002                  		bclr	#2,(a5)
000B8258 08D5 0001                  		bset	#1,(a5)
000B825C 102D 000B                  		move.b	$B(a5),d0
000B8260 4EBA 0000                  		jsr	sub_72C4E(pc)
000B8264 2A4B                       		movea.l	a3,a5
000B8266 6000                       		bra.s	loc_72472
000B8268                            ; ===========================================================================
000B8268                            
000B8268                            loc_7243C:
000B8268 4EBA 0000                  		jsr	sub_729A0(pc)
000B826C 41EE 0370                  		lea	$370(a6),a0
000B8270 0C03 00E0                  		cmpi.b	#$E0,d3
000B8274 6700                       		beq.s	loc_7245A
000B8276 0C03 00C0                  		cmpi.b	#$C0,d3
000B827A 6700                       		beq.s	loc_7245A
000B827C E60B                       		lsr.b	#3,d3
000B827E 41FA FE7A                  		lea	dword_722CC(pc),a0
000B8282 2070 3000                  		movea.l	(a0,d3.w),a0
000B8286                            
000B8286                            loc_7245A:
000B8286 0890 0002                  		bclr	#2,(a0)
000B828A 08D0 0001                  		bset	#1,(a0)
000B828E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000B8294 6600                       		bne.s	loc_72472
000B8296 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000B829E                            
000B829E                            loc_72472:
000B829E DAFC 0030                  		adda.w	#$30,a5
000B82A2 51CF FF72                  		dbf	d7,loc_723EA
000B82A6                            
000B82A6 4E75                       		rts	
000B82A8                            ; End of function Snd_FadeOut1
000B82A8                            
000B82A8                            
000B82A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B82A8                            
000B82A8                            
000B82A8                            Snd_FadeOut2:				; XREF: Sound_E0
000B82A8 4BEE 0340                  		lea	$340(a6),a5
000B82AC 4A15                       		tst.b	(a5)
000B82AE 6A00                       		bpl.s	loc_724AE
000B82B0 0895 0007                  		bclr	#7,(a5)
000B82B4 0815 0002                  		btst	#2,(a5)
000B82B8 6600                       		bne.s	loc_724AE
000B82BA 4EBA 0000                  		jsr	loc_7270A(pc)
000B82BE 4BEE 0100                  		lea	$100(a6),a5
000B82C2 0895 0002                  		bclr	#2,(a5)
000B82C6 08D5 0001                  		bset	#1,(a5)
000B82CA 4A15                       		tst.b	(a5)
000B82CC 6A00                       		bpl.s	loc_724AE
000B82CE 226E 0018                  		movea.l	$18(a6),a1
000B82D2 102D 000B                  		move.b	$B(a5),d0
000B82D6 4EBA 0000                  		jsr	sub_72C4E(pc)
000B82DA                            
000B82DA                            loc_724AE:
000B82DA 4BEE 0370                  		lea	$370(a6),a5
000B82DE 4A15                       		tst.b	(a5)
000B82E0 6A00                       		bpl.s	locret_724E4
000B82E2 0895 0007                  		bclr	#7,(a5)
000B82E6 0815 0002                  		btst	#2,(a5)
000B82EA 6600                       		bne.s	locret_724E4
000B82EC 4EBA 0000                  		jsr	loc_729A6(pc)
000B82F0 4BEE 01F0                  		lea	$1F0(a6),a5
000B82F4 0895 0002                  		bclr	#2,(a5)
000B82F8 08D5 0001                  		bset	#1,(a5)
000B82FC 4A15                       		tst.b	(a5)
000B82FE 6A00                       		bpl.s	locret_724E4
000B8300 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000B8306 6600                       		bne.s	locret_724E4
000B8308 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000B8310                            
000B8310                            locret_724E4:
000B8310 4E75                       		rts	
000B8312                            ; End of function Snd_FadeOut2
000B8312                            
000B8312                            ; ===========================================================================
000B8312                            ; ---------------------------------------------------------------------------
000B8312                            ; Fade out music
000B8312                            ; ---------------------------------------------------------------------------
000B8312                            
000B8312                            Sound_E0:				; XREF: Sound_ExIndex
000B8312 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000B8316 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000B831A 1D7C 0003 0006             		move.b	#3,6(a6)
000B8320 1D7C 0028 0004             		move.b	#$28,4(a6)
000B8326 422E 0040                  		clr.b	$40(a6)
000B832A 422E 002A                  		clr.b	$2A(a6)
000B832E 4E75                       		rts	
000B8330                            
000B8330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8330                            
000B8330                            
000B8330                            sub_72504:				; XREF: sub_71B4C
000B8330 102E 0006                  		move.b	6(a6),d0
000B8334 6700                       		beq.s	loc_72510
000B8336 532E 0006                  		subq.b	#1,6(a6)
000B833A 4E75                       		rts	
000B833C                            ; ===========================================================================
000B833C                            
000B833C                            loc_72510:
000B833C 532E 0004                  		subq.b	#1,4(a6)
000B8340 6700 0000                  		beq.w	Sound_E4
000B8344 1D7C 0003 0006             		move.b	#3,6(a6)
000B834A 4BEE 0070                  		lea	$70(a6),a5
000B834E 7E05                       		moveq	#5,d7
000B8350                            
000B8350                            loc_72524:
000B8350 4A15                       		tst.b	(a5)
000B8352 6A00                       		bpl.s	loc_72538
000B8354 522D 0009                  		addq.b	#1,9(a5)
000B8358 6A00                       		bpl.s	loc_72534
000B835A 0895 0007                  		bclr	#7,(a5)
000B835E 6000                       		bra.s	loc_72538
000B8360                            ; ===========================================================================
000B8360                            
000B8360                            loc_72534:
000B8360 4EBA 0000                  		jsr	sub_72CB4(pc)
000B8364                            
000B8364                            loc_72538:
000B8364 DAFC 0030                  		adda.w	#$30,a5
000B8368 51CF FFE6                  		dbf	d7,loc_72524
000B836C                            
000B836C 7E02                       		moveq	#2,d7
000B836E                            
000B836E                            loc_72542:
000B836E 4A15                       		tst.b	(a5)
000B8370 6A00                       		bpl.s	loc_72560
000B8372 522D 0009                  		addq.b	#1,9(a5)
000B8376 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000B837C 6500                       		bcs.s	loc_72558
000B837E 0895 0007                  		bclr	#7,(a5)
000B8382 6000                       		bra.s	loc_72560
000B8384                            ; ===========================================================================
000B8384                            
000B8384                            loc_72558:
000B8384 1C2D 0009                  		move.b	9(a5),d6
000B8388 4EBA 0000                  		jsr	sub_7296A(pc)
000B838C                            
000B838C                            loc_72560:
000B838C DAFC 0030                  		adda.w	#$30,a5
000B8390 51CF FFDC                  		dbf	d7,loc_72542
000B8394                            
000B8394 4E75                       		rts	
000B8396                            ; End of function sub_72504
000B8396                            
000B8396                            
000B8396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8396                            
000B8396                            
000B8396                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000B8396 7602                       		moveq	#2,d3
000B8398 7028                       		moveq	#$28,d0
000B839A                            
000B839A                            loc_7256E:
000B839A 1203                       		move.b	d3,d1
000B839C 4EBA 0000                  		jsr	sub_7272E(pc)
000B83A0 5801                       		addq.b	#4,d1
000B83A2 4EBA 0000                  		jsr	sub_7272E(pc)
000B83A6 51CB FFF2                  		dbf	d3,loc_7256E
000B83AA                            
000B83AA 7040                       		moveq	#$40,d0
000B83AC 727F                       		moveq	#$7F,d1
000B83AE 7802                       		moveq	#2,d4
000B83B0                            
000B83B0                            loc_72584:
000B83B0 7603                       		moveq	#3,d3
000B83B2                            
000B83B2                            loc_72586:
000B83B2 4EBA 0000                  		jsr	sub_7272E(pc)
000B83B6 4EBA 0000                  		jsr	sub_72764(pc)
000B83BA 5840                       		addq.w	#4,d0
000B83BC 51CB FFF4                  		dbf	d3,loc_72586
000B83C0                            
000B83C0 0400 000F                  		subi.b	#$F,d0
000B83C4 51CC FFEA                  		dbf	d4,loc_72584
000B83C8                            
000B83C8 4E75                       		rts	
000B83CA                            ; End of function sub_7256A
000B83CA                            
000B83CA                            ; ===========================================================================
000B83CA                            ; ---------------------------------------------------------------------------
000B83CA                            ; Stop music
000B83CA                            ; ---------------------------------------------------------------------------
000B83CA                            
000B83CA                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000B83CA 702B                       		moveq	#$2B,d0
000B83CC 123C 0080                  		move.b	#$80,d1
000B83D0 4EBA 0000                  		jsr	sub_7272E(pc)
000B83D4 7027                       		moveq	#$27,d0
000B83D6 7200                       		moveq	#0,d1
000B83D8 4EBA 0000                  		jsr	sub_7272E(pc)
000B83DC 204E                       		movea.l	a6,a0
000B83DE 303C 00E3                  		move.w	#$E3,d0
000B83E2                            
000B83E2                            loc_725B6:
000B83E2 4298                       		clr.l	(a0)+
000B83E4 51C8 FFFC                  		dbf	d0,loc_725B6
000B83E8                            
000B83E8 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000B83EE 4EBA FFA6                  		jsr	sub_7256A(pc)
000B83F2 33FC 0100 00A1 1100 4E71+  		stopZ80
000B840A 13FC 0080 00A0 1FFF        		move.b  #$80,($A01FFF).l ; stop DAC playback
000B8412 33FC 0000 00A1 1100        		startZ80
000B841A 6000 0000                  		bra.w	sub_729B6
000B841E                            
000B841E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B841E                            
000B841E                            
000B841E                            sub_725CA:				; XREF: Sound_ChkValue
000B841E 204E                       		movea.l	a6,a0
000B8420 1216                       		move.b	0(a6),d1
000B8422 142E 0027                  		move.b	$27(a6),d2
000B8426 162E 002A                  		move.b	$2A(a6),d3
000B842A 182E 0026                  		move.b	$26(a6),d4
000B842E 3A2E 000A                  		move.w	$A(a6),d5
000B8432 303C 0087                  		move.w	#$87,d0
000B8436                            
000B8436                            loc_725E4:
000B8436 4298                       		clr.l	(a0)+
000B8438 51C8 FFFC                  		dbf	d0,loc_725E4
000B843C                            
000B843C 1C81                       		move.b	d1,0(a6)
000B843E 1D42 0027                  		move.b	d2,$27(a6)
000B8442 1D43 002A                  		move.b	d3,$2A(a6)
000B8446 1D44 0026                  		move.b	d4,$26(a6)
000B844A 3D45 000A                  		move.w	d5,$A(a6)
000B844E 1D7C 0080 0009             		move.b	#$80,9(a6)
000B8454 4EBA FF40                  		jsr	sub_7256A(pc)
000B8458 6000 0000                  		bra.w	sub_729B6
000B845C                            ; End of function sub_725CA
000B845C                            
000B845C                            
000B845C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B845C                            
000B845C                            
000B845C                            sub_7260C:				; XREF: sub_71B4C
000B845C 1D6E 0002 0001             		move.b	2(a6),1(a6)
000B8462 41EE 004E                  		lea	$4E(a6),a0
000B8466 7030                       		moveq	#$30,d0
000B8468 7209                       		moveq	#9,d1
000B846A                            
000B846A                            loc_7261A:
000B846A 5210                       		addq.b	#1,(a0)
000B846C D0C0                       		adda.w	d0,a0
000B846E 51C9 FFFA                  		dbf	d1,loc_7261A
000B8472                            
000B8472 4E75                       		rts	
000B8474                            ; End of function sub_7260C
000B8474                            
000B8474                            ; ===========================================================================
000B8474                            ; ---------------------------------------------------------------------------
000B8474                            ; Speed	up music
000B8474                            ; ---------------------------------------------------------------------------
000B8474                            
000B8474                            Sound_E2:				; XREF: Sound_ExIndex
000B8474 4A2E 0027                  		tst.b	$27(a6)
000B8478 6600                       		bne.s	loc_7263E
000B847A 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000B8480 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000B8486 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000B848C 4E75                       		rts	
000B848E                            ; ===========================================================================
000B848E                            
000B848E                            loc_7263E:
000B848E 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000B8494 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000B849A 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000B84A0 4E75                       		rts	
000B84A2                            ; ===========================================================================
000B84A2                            ; ---------------------------------------------------------------------------
000B84A2                            ; Change music back to normal speed
000B84A2                            ; ---------------------------------------------------------------------------
000B84A2                            
000B84A2                            Sound_E3:				; XREF: Sound_ExIndex
000B84A2 4A2E 0027                  		tst.b	$27(a6)
000B84A6 6600                       		bne.s	loc_7266A
000B84A8 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000B84AE 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000B84B4 422E 002A                  		clr.b	$2A(a6)
000B84B8 4E75                       		rts	
000B84BA                            ; ===========================================================================
000B84BA                            
000B84BA                            loc_7266A:
000B84BA 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000B84C0 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000B84C6 422E 03CA                  		clr.b	$3CA(a6)
000B84CA 4E75                       		rts	
000B84CC                            
000B84CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B84CC                            
000B84CC                            
000B84CC                            sub_7267C:				; XREF: sub_71B4C
000B84CC 4A2E 0025                  		tst.b	$25(a6)
000B84D0 6700                       		beq.s	loc_72688
000B84D2 532E 0025                  		subq.b	#1,$25(a6)
000B84D6 4E75                       		rts	
000B84D8                            ; ===========================================================================
000B84D8                            
000B84D8                            loc_72688:
000B84D8 4A2E 0026                  		tst.b	$26(a6)
000B84DC 6700                       		beq.s	loc_726D6
000B84DE 532E 0026                  		subq.b	#1,$26(a6)
000B84E2 1D7C 0002 0025             		move.b	#2,$25(a6)
000B84E8 4BEE 0070                  		lea	$70(a6),a5
000B84EC 7E05                       		moveq	#5,d7
000B84EE                            
000B84EE                            loc_7269E:
000B84EE 4A15                       		tst.b	(a5)
000B84F0 6A00                       		bpl.s	loc_726AA
000B84F2 532D 0009                  		subq.b	#1,9(a5)
000B84F6 4EBA 0000                  		jsr	sub_72CB4(pc)
000B84FA                            
000B84FA                            loc_726AA:
000B84FA DAFC 0030                  		adda.w	#$30,a5
000B84FE 51CF FFEE                  		dbf	d7,loc_7269E
000B8502 7E02                       		moveq	#2,d7
000B8504                            
000B8504                            loc_726B4:
000B8504 4A15                       		tst.b	(a5)
000B8506 6A00                       		bpl.s	loc_726CC
000B8508 532D 0009                  		subq.b	#1,9(a5)
000B850C 1C2D 0009                  		move.b	9(a5),d6
000B8510 0C06 0010                  		cmpi.b	#$10,d6
000B8514 6500                       		bcs.s	loc_726C8
000B8516 7C0F                       		moveq	#$F,d6
000B8518                            
000B8518                            loc_726C8:
000B8518 4EBA 0000                  		jsr	sub_7296A(pc)
000B851C                            
000B851C                            loc_726CC:
000B851C DAFC 0030                  		adda.w	#$30,a5
000B8520 51CF FFE2                  		dbf	d7,loc_726B4
000B8524 4E75                       		rts	
000B8526                            ; ===========================================================================
000B8526                            
000B8526                            loc_726D6:
000B8526 08AE 0002 0040             		bclr	#2,$40(a6)
000B852C 422E 0024                  		clr.b	$24(a6)
000B8530 4E75                       		rts	
000B8532                            ; End of function sub_7267C
000B8532                            
000B8532                            ; ===========================================================================
000B8532                            
000B8532                            loc_726E2:				; XREF: sub_71CCA
000B8532 0815 0001                  		btst	#1,(a5)
000B8536 6600                       		bne.s	locret_726FC
000B8538 0815 0002                  		btst	#2,(a5)
000B853C 6600                       		bne.s	locret_726FC
000B853E 7028                       		moveq	#$28,d0
000B8540 122D 0001                  		move.b	1(a5),d1
000B8544 0001 00F0                  		ori.b	#-$10,d1
000B8548 6000 0000                  		bra.w	sub_7272E
000B854C                            ; ===========================================================================
000B854C                            
000B854C                            locret_726FC:
000B854C 4E75                       		rts	
000B854E                            
000B854E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B854E                            
000B854E                            
000B854E                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000B854E 0815 0004                  		btst	#4,(a5)
000B8552 6600                       		bne.s	locret_72714
000B8554 0815 0002                  		btst	#2,(a5)
000B8558 6600                       		bne.s	locret_72714
000B855A                            
000B855A                            loc_7270A:				; XREF: Snd_FadeOut2
000B855A 7028                       		moveq	#$28,d0
000B855C 122D 0001                  		move.b	1(a5),d1
000B8560 6000 0000                  		bra.w	sub_7272E
000B8564                            ; ===========================================================================
000B8564                            
000B8564                            locret_72714:
000B8564 4E75                       		rts	
000B8566                            ; End of function sub_726FE
000B8566                            
000B8566                            ; ===========================================================================
000B8566                            
000B8566                            loc_72716:				; XREF: sub_72A5A
000B8566 0815 0002                  		btst	#2,(a5)
000B856A 6600                       		bne.s	locret_72720
000B856C 6000 0000                  		bra.w	sub_72722
000B8570                            ; ===========================================================================
000B8570                            
000B8570                            locret_72720:
000B8570 4E75                       		rts	
000B8572                            
000B8572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8572                            
000B8572                            
000B8572                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000B8572 082D 0002 0001             		btst	#2,1(a5)
000B8578 6600                       		bne.s	loc_7275A
000B857A D02D 0001                  		add.b	1(a5),d0
000B857E                            ; End of function sub_72722
000B857E                            
000B857E                            
000B857E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B857E                            
000B857E                            
000B857E                            sub_7272E:                ; XREF: loc_71E6A
000B857E 33FC 0100 00A1 1100 4E71+          stopZ80
000B8596 1439 00A0 4000 0802 0007+          waitYM
000B85A2 13C0 00A0 4000                     move.b    d0,($A04000).l
000B85A8 1439 00A0 4000 0802 0007+          waitYM
000B85B4 13C1 00A0 4001                     move.b    d1,($A04001).l
000B85BA 1439 00A0 4000 0802 0007+          waitYM
000B85C6 13FC 002A 00A0 4000                move.b    #$2A,($A04000).l
000B85CE 33FC 0000 00A1 1100                startZ80
000B85D6 4E75                               rts
000B85D8                            ; End of function sub_7272E	
000B85D8                            
000B85D8                            loc_72746:
000B85D8 1439 00A0 4000             		move.b	($A04000).l,d2
000B85DE 0802 0007                  		btst	#7,d2
000B85E2 66F4                       		bne.s	loc_72746
000B85E4                            
000B85E4 13C1 00A0 4001             		move.b	d1,($A04001).l
000B85EA 4E75                       		rts	
000B85EC                            ; End of function sub_7272E
000B85EC                            
000B85EC                            ; ===========================================================================
000B85EC                            
000B85EC                            loc_7275A:				; XREF: sub_72722
000B85EC 142D 0001                  		move.b	1(a5),d2
000B85F0 0882 0002                  		bclr	#2,d2
000B85F4 D002                       		add.b	d2,d0
000B85F6                            
000B85F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B85F6                            
000B85F6                            
000B85F6                            sub_72764:                ; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000B85F6 33FC 0100 00A1 1100 4E71+          stopZ80
000B860E 1439 00A0 4000 0802 0007+          waitYM
000B861A 13C0 00A0 4002                     move.b    d0,($A04002).l
000B8620 1439 00A0 4000 0802 0007+          waitYM
000B862C 13C1 00A0 4003                     move.b    d1,($A04003).l
000B8632 1439 00A0 4000 0802 0007+          waitYM
000B863E 13FC 002A 00A0 4000                move.b    #$2A,($A04000).l
000B8646 33FC 0000 00A1 1100                startZ80
000B864E 4E75                               rts
000B8650                            ; End of function sub_72764
000B8650                            
000B8650                            loc_7277C:
000B8650 1439 00A0 4000             		move.b	($A04000).l,d2
000B8656 0802 0007                  		btst	#7,d2
000B865A 66F4                       		bne.s	loc_7277C
000B865C                            
000B865C 13C1 00A0 4003             		move.b	d1,($A04003).l
000B8662 4E75                       		rts	
000B8664                            ; End of function sub_72764
000B8664                            
000B8664                            ; ===========================================================================
000B8664 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000B8676 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000B8688 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000B8698 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000B86A8 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000B86B8 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000B86C8 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000B86D8 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000B86E8 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000B86F8 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000B8708 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000B8718 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000B8724                            
000B8724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8724                            
000B8724                            
000B8724                            sub_72850:				; XREF: sub_71B4C
000B8724 532D 000E                  		subq.b	#1,$E(a5)
000B8728 6600                       		bne.s	loc_72866
000B872A 0895 0004                  		bclr	#4,(a5)
000B872E 4EBA 0000                  		jsr	sub_72878(pc)
000B8732 4EBA 0000                  		jsr	sub_728DC(pc)
000B8736 6000 0000                  		bra.w	loc_7292E
000B873A                            ; ===========================================================================
000B873A                            
000B873A                            loc_72866:
000B873A 4EBA F3A6                  		jsr	sub_71D9E(pc)
000B873E 4EBA 0000                  		jsr	sub_72926(pc)
000B8742 4EBA F3C6                  		jsr	sub_71DC6(pc)
000B8746 4EBA 0000                  		jsr	sub_728E2(pc)
000B874A 4E75                       		rts	
000B874C                            ; End of function sub_72850
000B874C                            
000B874C                            
000B874C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B874C                            
000B874C                            
000B874C                            sub_72878:				; XREF: sub_72850
000B874C 0895 0001                  		bclr	#1,(a5)
000B8750 286D 0004                  		movea.l	4(a5),a4
000B8754                            
000B8754                            loc_72880:
000B8754 7A00                       		moveq	#0,d5
000B8756 1A1C                       		move.b	(a4)+,d5
000B8758 0C05 00E0                  		cmpi.b	#$E0,d5
000B875C 6500                       		bcs.s	loc_72890
000B875E 4EBA 0000                  		jsr	sub_72A5A(pc)
000B8762 60F0                       		bra.s	loc_72880
000B8764                            ; ===========================================================================
000B8764                            
000B8764                            loc_72890:
000B8764 4A05                       		tst.b	d5
000B8766 6A00                       		bpl.s	loc_728A4
000B8768 4EBA 0000                  		jsr	sub_728AC(pc)
000B876C 1A1C                       		move.b	(a4)+,d5
000B876E 4A05                       		tst.b	d5
000B8770 6A00                       		bpl.s	loc_728A4
000B8772 534C                       		subq.w	#1,a4
000B8774 6000 F32E                  		bra.w	sub_71D60
000B8778                            ; ===========================================================================
000B8778                            
000B8778                            loc_728A4:
000B8778 4EBA F30A                  		jsr	sub_71D40(pc)
000B877C 6000 F326                  		bra.w	sub_71D60
000B8780                            ; End of function sub_72878
000B8780                            
000B8780                            
000B8780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8780                            
000B8780                            
000B8780                            sub_728AC:				; XREF: sub_72878
000B8780 0405 0081                  		subi.b	#$81,d5
000B8784 6500                       		bcs.s	loc_728CA
000B8786 DA2D 0008                  		add.b	8(a5),d5
000B878A 0245 007F                  		andi.w	#$7F,d5
000B878E E34D                       		lsl.w	#1,d5
000B8790 41FA 0000                  		lea	word_729CE(pc),a0
000B8794 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000B879A 6000 F308                  		bra.w	sub_71D60
000B879E                            ; ===========================================================================
000B879E                            
000B879E                            loc_728CA:
000B879E 08D5 0001                  		bset	#1,(a5)
000B87A2 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000B87A8 4EBA F2FA                  		jsr	sub_71D60(pc)
000B87AC 6000 0000                  		bra.w	sub_729A0
000B87B0                            ; End of function sub_728AC
000B87B0                            
000B87B0                            
000B87B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B87B0                            
000B87B0                            
000B87B0                            sub_728DC:				; XREF: sub_72850
000B87B0 3C2D 0010                  		move.w	$10(a5),d6
000B87B4 6B00                       		bmi.s	loc_72920
000B87B6                            ; End of function sub_728DC
000B87B6                            
000B87B6                            
000B87B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B87B6                            
000B87B6                            
000B87B6                            sub_728E2:				; XREF: sub_72850
000B87B6 102D 001E                  		move.b	$1E(a5),d0
000B87BA 4880                       		ext.w	d0
000B87BC DC40                       		add.w	d0,d6
000B87BE 0815 0002                  		btst	#2,(a5)
000B87C2 6600                       		bne.s	locret_7291E
000B87C4 0815 0001                  		btst	#1,(a5)
000B87C8 6600                       		bne.s	locret_7291E
000B87CA 102D 0001                  		move.b	1(a5),d0
000B87CE 0C00 00E0                  		cmpi.b	#$E0,d0
000B87D2 6600                       		bne.s	loc_72904
000B87D4 103C 00C0                  		move.b	#$C0,d0
000B87D8                            
000B87D8                            loc_72904:
000B87D8 3206                       		move.w	d6,d1
000B87DA 0201 000F                  		andi.b	#$F,d1
000B87DE 8001                       		or.b	d1,d0
000B87E0 E84E                       		lsr.w	#4,d6
000B87E2 0206 003F                  		andi.b	#$3F,d6
000B87E6 13C0 00C0 0011             		move.b	d0,($C00011).l
000B87EC 13C6 00C0 0011             		move.b	d6,($C00011).l
000B87F2                            
000B87F2                            locret_7291E:
000B87F2 4E75                       		rts	
000B87F4                            ; End of function sub_728E2
000B87F4                            
000B87F4                            ; ===========================================================================
000B87F4                            
000B87F4                            loc_72920:				; XREF: sub_728DC
000B87F4 08D5 0001                  		bset	#1,(a5)
000B87F8 4E75                       		rts	
000B87FA                            
000B87FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B87FA                            
000B87FA                            
000B87FA                            sub_72926:				; XREF: sub_72850
000B87FA 4A2D 000B                  		tst.b	$B(a5)
000B87FE 6700 0000                  		beq.w	locret_7298A
000B8802                            
000B8802                            loc_7292E:				; XREF: sub_72850
000B8802 1C2D 0009                  		move.b	9(a5),d6
000B8806 7000                       		moveq	#0,d0
000B8808 102D 000B                  		move.b	$B(a5),d0
000B880C 6700                       		beq.s	sub_7296A
000B880E 2079 000B 764A             		movea.l	(Go_PSGIndex).l,a0
000B8814 5340                       		subq.w	#1,d0
000B8816 E548                       		lsl.w	#2,d0
000B8818 2070 0000                  		movea.l	(a0,d0.w),a0
000B881C 102D 000C                  		move.b	$C(a5),d0
000B8820 1030 0000                  		move.b	(a0,d0.w),d0
000B8824 522D 000C                  		addq.b	#1,$C(a5)
000B8828 0800 0007                  		btst	#7,d0
000B882C 6700                       		beq.s	loc_72960
000B882E 0C00 0080                  		cmpi.b	#$80,d0
000B8832 6700                       		beq.s	loc_7299A
000B8834                            
000B8834                            loc_72960:
000B8834 DC40                       		add.w	d0,d6
000B8836 0C06 0010                  		cmpi.b	#$10,d6
000B883A 6500                       		bcs.s	sub_7296A
000B883C 7C0F                       		moveq	#$F,d6
000B883E                            ; End of function sub_72926
000B883E                            
000B883E                            
000B883E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B883E                            
000B883E                            
000B883E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000B883E 0815 0001                  		btst	#1,(a5)
000B8842 6600                       		bne.s	locret_7298A
000B8844 0815 0002                  		btst	#2,(a5)
000B8848 6600                       		bne.s	locret_7298A
000B884A 0815 0004                  		btst	#4,(a5)
000B884E 6600                       		bne.s	loc_7298C
000B8850                            
000B8850                            loc_7297C:
000B8850 8C2D 0001                  		or.b	1(a5),d6
000B8854 0606 0010                  		addi.b	#$10,d6
000B8858 13C6 00C0 0011             		move.b	d6,($C00011).l
000B885E                            
000B885E                            locret_7298A:
000B885E 4E75                       		rts	
000B8860                            ; ===========================================================================
000B8860                            
000B8860                            loc_7298C:
000B8860 4A2D 0013                  		tst.b	$13(a5)
000B8864 67EA                       		beq.s	loc_7297C
000B8866 4A2D 0012                  		tst.b	$12(a5)
000B886A 66E4                       		bne.s	loc_7297C
000B886C 4E75                       		rts	
000B886E                            ; End of function sub_7296A
000B886E                            
000B886E                            ; ===========================================================================
000B886E                            
000B886E                            loc_7299A:				; XREF: sub_72926
000B886E 532D 000C                  		subq.b	#1,$C(a5)
000B8872 4E75                       		rts	
000B8874                            
000B8874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8874                            
000B8874                            
000B8874                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000B8874 0815 0002                  		btst	#2,(a5)
000B8878 6600                       		bne.s	locret_729B4
000B887A                            
000B887A                            loc_729A6:				; XREF: Snd_FadeOut2
000B887A 102D 0001                  		move.b	1(a5),d0
000B887E 0000 001F                  		ori.b	#$1F,d0
000B8882 13C0 00C0 0011             		move.b	d0,($C00011).l
000B8888                            
000B8888                            locret_729B4:
000B8888 4E75                       		rts	
000B888A                            ; End of function sub_729A0
000B888A                            
000B888A                            
000B888A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B888A                            
000B888A                            
000B888A                            sub_729B6:				; XREF: loc_71E7C
000B888A 41F9 00C0 0011             		lea	($C00011).l,a0
000B8890 10BC 009F                  		move.b	#$9F,(a0)
000B8894 10BC 00BF                  		move.b	#$BF,(a0)
000B8898 10BC 00DF                  		move.b	#$DF,(a0)
000B889C 10BC 00FF                  		move.b	#$FF,(a0)
000B88A0 4E75                       		rts	
000B88A2                            ; End of function sub_729B6
000B88A2                            
000B88A2                            ; ===========================================================================
000B88A2 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000B88B4 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000B88C6 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000B88DA 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000B88EE 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000B8902 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000B8916 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000B892A 0011 0000                  		dc.w $11, 0
000B892E                            
000B892E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B892E                            
000B892E                            
000B892E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000B892E 0445 00E0                  		subi.w	#$E0,d5
000B8932 E54D                       		lsl.w	#2,d5
000B8934 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000B8938                            ; End of function sub_72A5A
000B8938                            
000B8938                            ; ===========================================================================
000B8938                            
000B8938                            loc_72A64:
000B8938 6000 0000                  		bra.w	loc_72ACC
000B893C                            ; ===========================================================================
000B893C 6000 0000                  		bra.w	loc_72AEC
000B8940                            ; ===========================================================================
000B8940 6000 0000                  		bra.w	loc_72AF2
000B8944                            ; ===========================================================================
000B8944 6000 0000                  		bra.w	loc_72AF8
000B8948                            ; ===========================================================================
000B8948 6000 0000                  		bra.w	loc_72B14
000B894C                            ; ===========================================================================
000B894C 6000 0000                  		bra.w	loc_72B9E
000B8950                            ; ===========================================================================
000B8950 6000 0000                  		bra.w	loc_72BA4
000B8954                            ; ===========================================================================
000B8954 6000 0000                  		bra.w	loc_72BAE
000B8958                            ; ===========================================================================
000B8958 6000 0000                  		bra.w	loc_72BB4
000B895C                            ; ===========================================================================
000B895C 6000 0000                  		bra.w	loc_72BBE
000B8960                            ; ===========================================================================
000B8960 6000 0000                  		bra.w	loc_72BC6
000B8964                            ; ===========================================================================
000B8964 6000 0000                  		bra.w	loc_72BD0
000B8968                            ; ===========================================================================
000B8968 6000 0000                  		bra.w	loc_72BE6
000B896C                            ; ===========================================================================
000B896C 6000 0000                  		bra.w	loc_72BEE
000B8970                            ; ===========================================================================
000B8970 6000 0000                  		bra.w	loc_72BF4
000B8974                            ; ===========================================================================
000B8974 6000 0000                  		bra.w	loc_72C26
000B8978                            ; ===========================================================================
000B8978 6000 0000                  		bra.w	loc_72D30
000B897C                            ; ===========================================================================
000B897C 6000 0000                  		bra.w	loc_72D52
000B8980                            ; ===========================================================================
000B8980 6000 0000                  		bra.w	loc_72D58
000B8984                            ; ===========================================================================
000B8984 6000 0000                  		bra.w	loc_72E06
000B8988                            ; ===========================================================================
000B8988 6000 0000                  		bra.w	loc_72E20
000B898C                            ; ===========================================================================
000B898C 6000 0000                  		bra.w	loc_72E26
000B8990                            ; ===========================================================================
000B8990 6000 0000                  		bra.w	loc_72E2C
000B8994                            ; ===========================================================================
000B8994 6000 0000                  		bra.w	loc_72E38
000B8998                            ; ===========================================================================
000B8998 6000 0000                  		bra.w	loc_72E52
000B899C                            ; ===========================================================================
000B899C 6000 0000                  		bra.w	loc_72E64
000B89A0                            ; ===========================================================================
000B89A0                            
000B89A0                            loc_72ACC:				; XREF: loc_72A64
000B89A0 121C                       		move.b	(a4)+,d1
000B89A2 4A2D 0001                  		tst.b	1(a5)
000B89A6 6B00                       		bmi.s	locret_72AEA
000B89A8 102D 000A                  		move.b	$A(a5),d0
000B89AC 0200 0037                  		andi.b	#$37,d0
000B89B0 8200                       		or.b	d0,d1
000B89B2 1B41 000A                  		move.b	d1,$A(a5)
000B89B6 103C 00B4                  		move.b	#$B4,d0
000B89BA 6000 FBAA                  		bra.w	loc_72716
000B89BE                            ; ===========================================================================
000B89BE                            
000B89BE                            locret_72AEA:
000B89BE 4E75                       		rts	
000B89C0                            ; ===========================================================================
000B89C0                            
000B89C0                            loc_72AEC:				; XREF: loc_72A64
000B89C0 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000B89C4 4E75                       		rts	
000B89C6                            ; ===========================================================================
000B89C6                            
000B89C6                            loc_72AF2:				; XREF: loc_72A64
000B89C6 1D5C 0007                  		move.b	(a4)+,7(a6)
000B89CA 4E75                       		rts	
000B89CC                            ; ===========================================================================
000B89CC                            
000B89CC                            loc_72AF8:				; XREF: loc_72A64
000B89CC 7000                       		moveq	#0,d0
000B89CE 102D 000D                  		move.b	$D(a5),d0
000B89D2 2875 0000                  		movea.l	(a5,d0.w),a4
000B89D6 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000B89DE 544C                       		addq.w	#2,a4
000B89E0 5800                       		addq.b	#4,d0
000B89E2 1B40 000D                  		move.b	d0,$D(a5)
000B89E6 4E75                       		rts	
000B89E8                            ; ===========================================================================
000B89E8                            
000B89E8                            loc_72B14:				; XREF: loc_72A64
000B89E8 204E                       		movea.l	a6,a0
000B89EA 43EE 03A0                  		lea	$3A0(a6),a1
000B89EE 303C 0087                  		move.w	#$87,d0
000B89F2                            
000B89F2                            loc_72B1E:
000B89F2 20D9                       		move.l	(a1)+,(a0)+
000B89F4 51C8 FFFC                  		dbf	d0,loc_72B1E
000B89F8                            
000B89F8 08EE 0002 0040             		bset	#2,$40(a6)
000B89FE 264D                       		movea.l	a5,a3
000B8A00 1C3C 0028                  		move.b	#$28,d6
000B8A04 9C2E 0026                  		sub.b	$26(a6),d6
000B8A08 7E05                       		moveq	#5,d7
000B8A0A 4BEE 0070                  		lea	$70(a6),a5
000B8A0E                            
000B8A0E                            loc_72B3A:
000B8A0E 0815 0007                  		btst	#7,(a5)
000B8A12 6700                       		beq.s	loc_72B5C
000B8A14 08D5 0001                  		bset	#1,(a5)
000B8A18 DD2D 0009                  		add.b	d6,9(a5)
000B8A1C 0815 0002                  		btst	#2,(a5)
000B8A20 6600                       		bne.s	loc_72B5C
000B8A22 7000                       		moveq	#0,d0
000B8A24 102D 000B                  		move.b	$B(a5),d0
000B8A28 226E 0018                  		movea.l	$18(a6),a1
000B8A2C 4EBA 0000                  		jsr	sub_72C4E(pc)
000B8A30                            
000B8A30                            loc_72B5C:
000B8A30 DAFC 0030                  		adda.w	#$30,a5
000B8A34 51CF FFD8                  		dbf	d7,loc_72B3A
000B8A38                            
000B8A38 7E02                       		moveq	#2,d7
000B8A3A                            
000B8A3A                            loc_72B66:
000B8A3A 0815 0007                  		btst	#7,(a5)
000B8A3E 6700                       		beq.s	loc_72B78
000B8A40 08D5 0001                  		bset	#1,(a5)
000B8A44 4EBA FE2E                  		jsr	sub_729A0(pc)
000B8A48 DD2D 0009                  		add.b	d6,9(a5)
000B8A4C                            
000B8A4C                            loc_72B78:
000B8A4C DAFC 0030                  		adda.w	#$30,a5
000B8A50 51CF FFE8                  		dbf	d7,loc_72B66
000B8A54 2A4B                       		movea.l	a3,a5
000B8A56 1D7C 0080 0024             		move.b	#$80,$24(a6)
000B8A5C 1D7C 0028 0026             		move.b	#$28,$26(a6)
000B8A62 422E 0027                  		clr.b	$27(a6)
000B8A66 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000B8A6E 504F                       		addq.w	#8,sp
000B8A70 4E75                       		rts	
000B8A72                            ; ===========================================================================
000B8A72                            
000B8A72                            loc_72B9E:				; XREF: loc_72A64
000B8A72 1B5C 0002                  		move.b	(a4)+,2(a5)
000B8A76 4E75                       		rts	
000B8A78                            ; ===========================================================================
000B8A78                            
000B8A78                            loc_72BA4:				; XREF: loc_72A64
000B8A78 101C                       		move.b	(a4)+,d0
000B8A7A D12D 0009                  		add.b	d0,9(a5)
000B8A7E 6000 0000                  		bra.w	sub_72CB4
000B8A82                            ; ===========================================================================
000B8A82                            
000B8A82                            loc_72BAE:				; XREF: loc_72A64
000B8A82 08D5 0004                  		bset	#4,(a5)
000B8A86 4E75                       		rts	
000B8A88                            ; ===========================================================================
000B8A88                            
000B8A88                            loc_72BB4:				; XREF: loc_72A64
000B8A88 1B54 0012                  		move.b	(a4),$12(a5)
000B8A8C 1B5C 0013                  		move.b	(a4)+,$13(a5)
000B8A90 4E75                       		rts	
000B8A92                            ; ===========================================================================
000B8A92                            
000B8A92                            loc_72BBE:				; XREF: loc_72A64
000B8A92 101C                       		move.b	(a4)+,d0
000B8A94 D12D 0008                  		add.b	d0,8(a5)
000B8A98 4E75                       		rts	
000B8A9A                            ; ===========================================================================
000B8A9A                            
000B8A9A                            loc_72BC6:				; XREF: loc_72A64
000B8A9A 1D54 0002                  		move.b	(a4),2(a6)
000B8A9E 1D5C 0001                  		move.b	(a4)+,1(a6)
000B8AA2 4E75                       		rts	
000B8AA4                            ; ===========================================================================
000B8AA4                            
000B8AA4                            loc_72BD0:				; XREF: loc_72A64
000B8AA4 41EE 0040                  		lea	$40(a6),a0
000B8AA8 101C                       		move.b	(a4)+,d0
000B8AAA 7230                       		moveq	#$30,d1
000B8AAC 7409                       		moveq	#9,d2
000B8AAE                            
000B8AAE                            loc_72BDA:
000B8AAE 1140 0002                  		move.b	d0,2(a0)
000B8AB2 D0C1                       		adda.w	d1,a0
000B8AB4 51CA FFF8                  		dbf	d2,loc_72BDA
000B8AB8                            
000B8AB8 4E75                       		rts	
000B8ABA                            ; ===========================================================================
000B8ABA                            
000B8ABA                            loc_72BE6:				; XREF: loc_72A64
000B8ABA 101C                       		move.b	(a4)+,d0
000B8ABC D12D 0009                  		add.b	d0,9(a5)
000B8AC0 4E75                       		rts	
000B8AC2                            ; ===========================================================================
000B8AC2                            
000B8AC2                            loc_72BEE:				; XREF: loc_72A64
000B8AC2 422E 002C                  		clr.b	$2C(a6)
000B8AC6 4E75                       		rts	
000B8AC8                            ; ===========================================================================
000B8AC8                            
000B8AC8                            loc_72BF4:				; XREF: loc_72A64
000B8AC8 0895 0007                  		bclr	#7,(a5)
000B8ACC 0895 0004                  		bclr	#4,(a5)
000B8AD0 4EBA FA7C                  		jsr	sub_726FE(pc)
000B8AD4 4A2E 0250                  		tst.b	$250(a6)
000B8AD8 6B00                       		bmi.s	loc_72C22
000B8ADA 264D                       		movea.l	a5,a3
000B8ADC 4BEE 0100                  		lea	$100(a6),a5
000B8AE0 226E 0018                  		movea.l	$18(a6),a1
000B8AE4 0895 0002                  		bclr	#2,(a5)
000B8AE8 08D5 0001                  		bset	#1,(a5)
000B8AEC 102D 000B                  		move.b	$B(a5),d0
000B8AF0 4EBA 0000                  		jsr	sub_72C4E(pc)
000B8AF4 2A4B                       		movea.l	a3,a5
000B8AF6                            
000B8AF6                            loc_72C22:
000B8AF6 504F                       		addq.w	#8,sp
000B8AF8 4E75                       		rts	
000B8AFA                            ; ===========================================================================
000B8AFA                            
000B8AFA                            loc_72C26:				; XREF: loc_72A64
000B8AFA 7000                       		moveq	#0,d0
000B8AFC 101C                       		move.b	(a4)+,d0
000B8AFE 1B40 000B                  		move.b	d0,$B(a5)
000B8B02 0815 0002                  		btst	#2,(a5)
000B8B06 6600 0000                  		bne.w	locret_72CAA
000B8B0A 226E 0018                  		movea.l	$18(a6),a1
000B8B0E 4A2E 000E                  		tst.b	$E(a6)
000B8B12 6700                       		beq.s	sub_72C4E
000B8B14 226D 0020                  		movea.l	$20(a5),a1
000B8B18 4A2E 000E                  		tst.b	$E(a6)
000B8B1C 6B00                       		bmi.s	sub_72C4E
000B8B1E 226E 0020                  		movea.l	$20(a6),a1
000B8B22                            
000B8B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8B22                            
000B8B22                            
000B8B22                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000B8B22 5340                       		subq.w	#1,d0
000B8B24 6B00                       		bmi.s	loc_72C5C
000B8B26 323C 0019                  		move.w	#$19,d1
000B8B2A                            
000B8B2A                            loc_72C56:
000B8B2A D2C1                       		adda.w	d1,a1
000B8B2C 51C8 FFFC                  		dbf	d0,loc_72C56
000B8B30                            
000B8B30                            loc_72C5C:
000B8B30 1219                       		move.b	(a1)+,d1
000B8B32 1B41 001F                  		move.b	d1,$1F(a5)
000B8B36 1801                       		move.b	d1,d4
000B8B38 103C 00B0                  		move.b	#$B0,d0
000B8B3C 4EBA FA34                  		jsr	sub_72722(pc)
000B8B40 45FA 0000                  		lea	byte_72D18(pc),a2
000B8B44 7613                       		moveq	#$13,d3
000B8B46                            
000B8B46                            loc_72C72:
000B8B46 101A                       		move.b	(a2)+,d0
000B8B48 1219                       		move.b	(a1)+,d1
000B8B4A 4EBA FA26                  		jsr	sub_72722(pc)
000B8B4E 51CB FFF6                  		dbf	d3,loc_72C72
000B8B52 7A03                       		moveq	#3,d5
000B8B54 0244 0007                  		andi.w	#7,d4
000B8B58 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000B8B5C 162D 0009                  		move.b	9(a5),d3
000B8B60                            
000B8B60                            loc_72C8C:
000B8B60 101A                       		move.b	(a2)+,d0
000B8B62 1219                       		move.b	(a1)+,d1
000B8B64 E20C                       		lsr.b	#1,d4
000B8B66 6400                       		bcc.s	loc_72C96
000B8B68 D203                       		add.b	d3,d1
000B8B6A                            
000B8B6A                            loc_72C96:
000B8B6A 4EBA FA06                  		jsr	sub_72722(pc)
000B8B6E 51CD FFF0                  		dbf	d5,loc_72C8C
000B8B72 103C 00B4                  		move.b	#$B4,d0
000B8B76 122D 000A                  		move.b	$A(a5),d1
000B8B7A 4EBA F9F6                  		jsr	sub_72722(pc)
000B8B7E                            
000B8B7E                            locret_72CAA:
000B8B7E 4E75                       		rts	
000B8B80                            ; End of function sub_72C4E
000B8B80                            
000B8B80                            ; ===========================================================================
000B8B80 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000B8B88                            
000B8B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000B8B88                            
000B8B88                            
000B8B88                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000B8B88 0815 0002                  		btst	#2,(a5)
000B8B8C 6600                       		bne.s	locret_72D16
000B8B8E 7000                       		moveq	#0,d0
000B8B90 102D 000B                  		move.b	$B(a5),d0
000B8B94 226E 0018                  		movea.l	$18(a6),a1
000B8B98 4A2E 000E                  		tst.b	$E(a6)
000B8B9C 6700                       		beq.s	loc_72CD8
000B8B9E 226E 0020                  		movea.l	$20(a6),a1
000B8BA2 4A2E 000E                  		tst.b	$E(a6)
000B8BA6 6B00                       		bmi.s	loc_72CD8
000B8BA8 226E 0020                  		movea.l	$20(a6),a1
000B8BAC                            
000B8BAC                            loc_72CD8:
000B8BAC 5340                       		subq.w	#1,d0
000B8BAE 6B00                       		bmi.s	loc_72CE6
000B8BB0 323C 0019                  		move.w	#$19,d1
000B8BB4                            
000B8BB4                            loc_72CE0:
000B8BB4 D2C1                       		adda.w	d1,a1
000B8BB6 51C8 FFFC                  		dbf	d0,loc_72CE0
000B8BBA                            
000B8BBA                            loc_72CE6:
000B8BBA D2FC 0015                  		adda.w	#$15,a1
000B8BBE 45FA 0000                  		lea	byte_72D2C(pc),a2
000B8BC2 102D 001F                  		move.b	$1F(a5),d0
000B8BC6 0240 0007                  		andi.w	#7,d0
000B8BCA 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000B8BCE 162D 0009                  		move.b	9(a5),d3
000B8BD2 6B00                       		bmi.s	locret_72D16
000B8BD4 7A03                       		moveq	#3,d5
000B8BD6                            
000B8BD6                            loc_72D02:
000B8BD6 101A                       		move.b	(a2)+,d0
000B8BD8 1219                       		move.b	(a1)+,d1
000B8BDA E20C                       		lsr.b	#1,d4
000B8BDC 6400                       		bcc.s	loc_72D12
000B8BDE D203                       		add.b	d3,d1
000B8BE0 6500                       		bcs.s	loc_72D12
000B8BE2 4EBA F98E                  		jsr	sub_72722(pc)
000B8BE6                            
000B8BE6                            loc_72D12:
000B8BE6 51CD FFEE                  		dbf	d5,loc_72D02
000B8BEA                            
000B8BEA                            locret_72D16:
000B8BEA 4E75                       		rts	
000B8BEC                            ; End of function sub_72CB4
000B8BEC                            
000B8BEC                            ; ===========================================================================
000B8BEC 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000B8BF6 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000B8C00 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000B8C04                            ; ===========================================================================
000B8C04                            
000B8C04                            loc_72D30:				; XREF: loc_72A64
000B8C04 08D5 0003                  		bset	#3,(a5)
000B8C08 2B4C 0014                  		move.l	a4,$14(a5)
000B8C0C 1B5C 0018                  		move.b	(a4)+,$18(a5)
000B8C10 1B5C 0019                  		move.b	(a4)+,$19(a5)
000B8C14 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000B8C18 101C                       		move.b	(a4)+,d0
000B8C1A E208                       		lsr.b	#1,d0
000B8C1C 1B40 001B                  		move.b	d0,$1B(a5)
000B8C20 426D 001C                  		clr.w	$1C(a5)
000B8C24 4E75                       		rts	
000B8C26                            ; ===========================================================================
000B8C26                            
000B8C26                            loc_72D52:				; XREF: loc_72A64
000B8C26 08D5 0003                  		bset	#3,(a5)
000B8C2A 4E75                       		rts	
000B8C2C                            ; ===========================================================================
000B8C2C                            
000B8C2C                            loc_72D58:				; XREF: loc_72A64
000B8C2C 0895 0007                  		bclr	#7,(a5)
000B8C30 0895 0004                  		bclr	#4,(a5)
000B8C34 4A2D 0001                  		tst.b	1(a5)
000B8C38 6B00                       		bmi.s	loc_72D74
000B8C3A 4A2E 0008                  		tst.b	8(a6)
000B8C3E 6B00 0000                  		bmi.w	loc_72E02
000B8C42 4EBA F90A                  		jsr	sub_726FE(pc)
000B8C46 6000                       		bra.s	loc_72D78
000B8C48                            ; ===========================================================================
000B8C48                            
000B8C48                            loc_72D74:
000B8C48 4EBA FC2A                  		jsr	sub_729A0(pc)
000B8C4C                            
000B8C4C                            loc_72D78:
000B8C4C 4A2E 000E                  		tst.b	$E(a6)
000B8C50 6A00 0000                  		bpl.w	loc_72E02
000B8C54 4216                       		clr.b	0(a6)
000B8C56 7000                       		moveq	#0,d0
000B8C58 102D 0001                  		move.b	1(a5),d0
000B8C5C 6B00                       		bmi.s	loc_72DCC
000B8C5E 41FA F49A                  		lea	dword_722CC(pc),a0
000B8C62 264D                       		movea.l	a5,a3
000B8C64 0C00 0004                  		cmpi.b	#4,d0
000B8C68 6600                       		bne.s	loc_72DA8
000B8C6A 4A2E 0340                  		tst.b	$340(a6)
000B8C6E 6A00                       		bpl.s	loc_72DA8
000B8C70 4BEE 0340                  		lea	$340(a6),a5
000B8C74 226E 0020                  		movea.l	$20(a6),a1
000B8C78 6000                       		bra.s	loc_72DB8
000B8C7A                            ; ===========================================================================
000B8C7A                            
000B8C7A                            loc_72DA8:
000B8C7A 5500                       		subq.b	#2,d0
000B8C7C E508                       		lsl.b	#2,d0
000B8C7E 2A70 0000                  		movea.l	(a0,d0.w),a5
000B8C82 4A15                       		tst.b	(a5)
000B8C84 6A00                       		bpl.s	loc_72DC8
000B8C86 226E 0018                  		movea.l	$18(a6),a1
000B8C8A                            
000B8C8A                            loc_72DB8:
000B8C8A 0895 0002                  		bclr	#2,(a5)
000B8C8E 08D5 0001                  		bset	#1,(a5)
000B8C92 102D 000B                  		move.b	$B(a5),d0
000B8C96 4EBA FE8A                  		jsr	sub_72C4E(pc)
000B8C9A                            
000B8C9A                            loc_72DC8:
000B8C9A 2A4B                       		movea.l	a3,a5
000B8C9C 6000                       		bra.s	loc_72E02
000B8C9E                            ; ===========================================================================
000B8C9E                            
000B8C9E                            loc_72DCC:
000B8C9E 41EE 0370                  		lea	$370(a6),a0
000B8CA2 4A10                       		tst.b	(a0)
000B8CA4 6A00                       		bpl.s	loc_72DE0
000B8CA6 0C00 00E0                  		cmpi.b	#$E0,d0
000B8CAA 6700                       		beq.s	loc_72DEA
000B8CAC 0C00 00C0                  		cmpi.b	#$C0,d0
000B8CB0 6700                       		beq.s	loc_72DEA
000B8CB2                            
000B8CB2                            loc_72DE0:
000B8CB2 41FA F446                  		lea	dword_722CC(pc),a0
000B8CB6 E608                       		lsr.b	#3,d0
000B8CB8 2070 0000                  		movea.l	(a0,d0.w),a0
000B8CBC                            
000B8CBC                            loc_72DEA:
000B8CBC 0890 0002                  		bclr	#2,(a0)
000B8CC0 08D0 0001                  		bset	#1,(a0)
000B8CC4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000B8CCA 6600                       		bne.s	loc_72E02
000B8CCC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000B8CD4                            
000B8CD4                            loc_72E02:
000B8CD4 504F                       		addq.w	#8,sp
000B8CD6 4E75                       		rts	
000B8CD8                            ; ===========================================================================
000B8CD8                            
000B8CD8                            loc_72E06:				; XREF: loc_72A64
000B8CD8 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000B8CDE 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000B8CE2 0815 0002                  		btst	#2,(a5)
000B8CE6 6600                       		bne.s	locret_72E1E
000B8CE8 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000B8CF0                            
000B8CF0                            locret_72E1E:
000B8CF0 4E75                       		rts	
000B8CF2                            ; ===========================================================================
000B8CF2                            
000B8CF2                            loc_72E20:				; XREF: loc_72A64
000B8CF2 0895 0003                  		bclr	#3,(a5)
000B8CF6 4E75                       		rts	
000B8CF8                            ; ===========================================================================
000B8CF8                            
000B8CF8                            loc_72E26:				; XREF: loc_72A64
000B8CF8 1B5C 000B                  		move.b	(a4)+,$B(a5)
000B8CFC 4E75                       		rts	
000B8CFE                            ; ===========================================================================
000B8CFE                            
000B8CFE                            loc_72E2C:				; XREF: loc_72A64
000B8CFE 101C                       		move.b	(a4)+,d0
000B8D00 E148                       		lsl.w	#8,d0
000B8D02 101C                       		move.b	(a4)+,d0
000B8D04 D8C0                       		adda.w	d0,a4
000B8D06 534C                       		subq.w	#1,a4
000B8D08 4E75                       		rts	
000B8D0A                            ; ===========================================================================
000B8D0A                            
000B8D0A                            loc_72E38:				; XREF: loc_72A64
000B8D0A 7000                       		moveq	#0,d0
000B8D0C 101C                       		move.b	(a4)+,d0
000B8D0E 121C                       		move.b	(a4)+,d1
000B8D10 4A35 0024                  		tst.b	$24(a5,d0.w)
000B8D14 6600                       		bne.s	loc_72E48
000B8D16 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000B8D1A                            
000B8D1A                            loc_72E48:
000B8D1A 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000B8D1E 66DE                       		bne.s	loc_72E2C
000B8D20 544C                       		addq.w	#2,a4
000B8D22 4E75                       		rts	
000B8D24                            ; ===========================================================================
000B8D24                            
000B8D24                            loc_72E52:				; XREF: loc_72A64
000B8D24 7000                       		moveq	#0,d0
000B8D26 102D 000D                  		move.b	$D(a5),d0
000B8D2A 5900                       		subq.b	#4,d0
000B8D2C 2B8C 0000                  		move.l	a4,(a5,d0.w)
000B8D30 1B40 000D                  		move.b	d0,$D(a5)
000B8D34 60C8                       		bra.s	loc_72E2C
000B8D36                            ; ===========================================================================
000B8D36                            
000B8D36                            loc_72E64:				; XREF: loc_72A64
000B8D36 103C 0088                  		move.b	#$88,d0
000B8D3A 123C 000F                  		move.b	#$F,d1
000B8D3E 4EBA F83E                  		jsr	sub_7272E(pc)
000B8D42 103C 008C                  		move.b	#$8C,d0
000B8D46 123C 000F                  		move.b	#$F,d1
000B8D4A 6000 F832                  		bra.w	sub_7272E
000B8D4E                            ; ===========================================================================
000B8D4E                            Kos_Z80:    include 'MegaPCM.asm'
000B8D4E                            
000B8D4E                            ; ===============================================================
000B8D4E                            ; Mega PCM Driver Include File
000B8D4E                            ; (c) 2012, Vladikcomper
000B8D4E                            ; ===============================================================
000B8D4E                            
000B8D4E                            ; ---------------------------------------------------------------
000B8D4E                            ; Variables used in DAC table
000B8D4E                            ; ---------------------------------------------------------------
000B8D4E                            
000B8D4E                            ; flags
000B8D4E =000000C0                  panLR	= $C0
000B8D4E =00000080                  panL	= $80
000B8D4E =00000040                  panR	= $40
000B8D4E =00000000                  pcm	= 0
000B8D4E =00000004                  dpcm	= 4
000B8D4E =00000002                  loop	= 2
000B8D4E =00000001                  pri	= 1
000B8D4E                            
000B8D4E                            ; ---------------------------------------------------------------
000B8D4E                            ; Macros
000B8D4E                            ; ---------------------------------------------------------------
000B8D4E                            
000B8D4E                            z80word macro Value
000B8D4E                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
000B8D4E                            	endm
000B8D4E                            
000B8D4E                            DAC_Entry macro Pitch,Offset,Flags
000B8D4E                            	dc.b	\Flags			; 00h	- Flags
000B8D4E                            	dc.b	\Pitch			; 01h	- Pitch
000B8D4E                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
000B8D4E                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
000B8D4E                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
000B8D4E                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
000B8D4E                            	endm
000B8D4E                            	
000B8D4E                            IncludeDAC macro Name,Extension
000B8D4E                            \Name:
000B8D4E                            	if strcmp('\extension','wav')
000B8D4E                            		incbin	'dac/\Name\.\Extension\',$3A
000B8D4E                            	else
000B8D4E                            		incbin	'dac/\Name\.\Extension\'
000B8D4E                            	endc
000B8D4E                            \Name\_End:
000B8D4E                            	endm
000B8D4E                            
000B8D4E                            ; ---------------------------------------------------------------
000B8D4E                            ; Driver's code
000B8D4E                            ; ---------------------------------------------------------------
000B8D4E                            
000B8D4E                            MegaPCM:
000B8D4E                            	incbin	'MegaPCM.z80'
000B8F5E                            
000B8F5E                            ; ---------------------------------------------------------------
000B8F5E                            ; DAC Samples Table
000B8F5E                            ; ---------------------------------------------------------------
000B8F5E                            
000B8F5E 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
000B8F66 0408 0000 0000 0000        	DAC_Entry	$08, Snare, dpcm		; $82	- Snare
000B8F6E 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
000B8F76 0408 0000 0000 0000        	DAC_Entry	$08, Clap, dpcm		; $84	- Clap
000B8F7E 0408 0000 0000 0000        	DAC_Entry	$08, Cymbal, dpcm	; $85	- Cymbal
000B8F86 0408 0000 0000 0000        	DAC_Entry	$08, Ride_Cymbal, dpcm	; $86	- Ride Cymbal
000B8F8E 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
000B8F96 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
000B8F9E 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
000B8FA6 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
000B8FAE 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
000B8FB6 040E 0000 0000 0000        	DAC_Entry	$0E, Go, dpcm	; $8C	- GO! Sound
000B8FBE 0303 0000 0000 0000        	DAC_Entry	$03, PizzaTime, pcm+pri+loop		; $9F	- Pizza Time
000B8FC6 0000 0000 0000 0000        	dc.l	0,0					; $8E	- <Free>
000B8FCE 0000 0000 0000 0000        	dc.l	0,0					; $8F	- <Free>
000B8FD6 0000 0000 0000 0000        	dc.l	0,0					; $90	- <Free>
000B8FDE 0000 0000 0000 0000        	dc.l	0,0					; $91	- <Free>
000B8FE6 0000 0000 0000 0000        	dc.l	0,0					; $92	- <Free>
000B8FEE 0000 0000 0000 0000        	dc.l	0,0					; $93	- <Free>
000B8FF6 0000 0000 0000 0000        	dc.l	0,0					; $94	- <Free>
000B8FFE 0000 0000 0000 0000        	dc.l	0,0					; $95	- <Free>
000B9006 0000 0000 0000 0000        	dc.l	0,0					; $96	- <Free>
000B900E 0000 0000 0000 0000        	dc.l	0,0					; $97	- <Free>
000B9016 0000 0000 0000 0000        	dc.l	0,0					; $98	- <Free>
000B901E 0000 0000 0000 0000        	dc.l	0,0					; $99	- <Free>
000B9026 0107 0000 0000 0000        	DAC_Entry	$07, PINGAS, pcm+pri	; $9A	- PINGAS
000B902E 010B 0000 0000 0000        	DAC_Entry   $0B, PEPSIMAN, pcm+pri            ; $9B   - 'Pepsiman' voice (sega sound)
000B9036 0107 0000 0000 0000        	DAC_Entry	$07, OhNo, pcm+pri            ; $9C	- Hurt sound
000B903E 0307 0000 0000 0000        	DAC_Entry	$07, wakemeup, pcm+pri+loop          ; $9D - Hidden song (Kids Bop - Bring Me To life)
000B9046 0307 0000 0000 0000        	DAC_Entry	$07, knuckles, pcm+pri+loop			 ; $9E	- Hidden song (Knuckles from K.N.U.C.K.L.E.S)
000B904E                            
000B904E                            MegaPCM_End:
000B904E                            
000B904E                            ; ---------------------------------------------------------------
000B904E                            ; DAC Samples Files
000B904E                            ; ---------------------------------------------------------------
000B904E                            
00358DB0 00                         	even
00358DB0                            
00358DB0                            
00358DB0                            Music81:	incbin	sound\music81.bin
0035B4B6 00                         		even
0035B4B6                            Music82:	incbin	sound\music82.bin
0035B906                            		even
0035B906                            Music83:	incbin	sound\music83.bin
0035D4D6                            		even
0035D4D6                            Music84:	incbin	sound\music84.bin
0035DB8E 00                         		even
0035DB8E                            Music85:	incbin	sound\music85.bin
00360CF2 00                         		even
00360CF2                            Music86:	incbin	sound\music86.bin
00361242                            		even
00361242                            Music87:	incbin	sound\music87.bin
0036630C                            		even
0036630C                            Music88:	incbin	sound\music88.bin
003663FA                            		even
003663FA                            Music89:	incbin	sound\music89.bin
0036A13C 00                         		even
0036A13C                            Music8A:	incbin	sound\music8A.bin
0036AA38                            		even
0036AA38                            Music8B:	incbin	sound\music8B.bin
0036ACD2                            		even
0036ACD2                            Music8C:	incbin	sound\music8C.bin
0036B69C 00                         		even
0036B69C                            Music8D:	incbin	sound\music8D.bin
0036E050                            		even
0036E050                            Music8E:	incbin	sound\music8E.bin
0036E1A6                            		even
0036E1A6                            Music8F:	incbin	sound\music8F.bin
0036E2F6                            		even
0036E2F6                            Music90:	incbin	sound\music90.bin
0036E454                            		even
0036E454                            Music91:	incbin	sound\music91.bin
00371820 00                         		even
00371820                            Music92:	incbin	sound\music92.bin
0037194A                            		even
0037194A                            Music93:	incbin	sound\music93.bin
00371A18                            		even
00371A18                            Music94:	incbin	sound\music94.bin
00373938                            		even
00373938                            Music95:	incbin	sound\music95.bin
0037565C 00                         		even
0037565C                            Music96:	incbin	sound\music96.bin
00376026 00                         		even
00376026                            Music97:	incbin	sound\music97.bin
00377CEA 00                         		even
00377CEA                            Music98:	incbin	sound\music98.bin
00378668 00                         		even
00378668                            Music99:	incbin	sound\music99.bin
0037A1AC 00                         		even
0037A1AC                            Music9A:	incbin	sound\music9A.bin
0038175E 00                         		even
0038175E                            Music9B:	incbin	sound\music9B.bin
00381F9A                            		even
00381F9A                            Music9C:	incbin	sound\music9C.bin
00382964 00                         		even
00382964                            Music9D:	incbin	sound\music9D.bin
0038332E 00                         		even
0038332E                            Music9E:	incbin	sound\music9E.bin
00383BC6 00                         		even
00383BC6                            Music9F:	incbin	sound\music9F.bin	; note to self: make this the encore core zone track
00386496 00                         		even
00386496                            MusicE5:	incbin	sound\musicE5.bin
00386E60 00                         		even
00386E60                            MusicE6:	incbin	sound\musicE6.bin
0038782A 00                         		even
0038782A                            MusicE7:	incbin	sound\musicE7.bin
003881F4 00                         		even
003881F4                            MusicE8:	incbin	sound\musicE8.bin
00388BBE 00                         		even
00388BBE                            MusicE9:	incbin	sound\musicE9.bin
00389588 00                         		even
00389588                            MusicEA:	incbin	sound\musicEA.bin
00389F52 00                         		even
00389F52                            MusicEB:	incbin	sound\musicEB.bin
0038A91C 00                         		even
0038A91C                            MusicEC:	incbin	sound\musicEC.bin
0038B2E6 00                         		even
0038B2E6                            MusicED:	incbin	sound\musicED.bin
0038BCB0 00                         		even
0038BCB0                            MusicEE:	incbin	sound\musicEE.bin
0038C67A 00                         		even
0038C67A                            MusicEF:	incbin	sound\musicEF.bin
0038D044 00                         		even
0038D044                            MusicF0:	incbin	sound\musicF0.bin
0038DA0E 00                         		even
0038DA0E                            MusicF1:	incbin	sound\musicF1.bin
0038F92E                            		even
0038F92E                            MusicF2:	incbin	sound\musicF2.bin
0039184E                            		even
0039184E                            MusicF3:	incbin	sound\musicF3.bin
0039376E                            		even
0039376E                            MusicF4:	incbin	sound\musicF4.bin
0039568E                            		even
0039568E                            MusicF5:	incbin	sound\musicF5.bin
003975AE                            		even
003975AE                            MusicF6:	incbin	sound\musicF6.bin
003994CE                            		even
003994CE                            MusicF7:	incbin	sound\musicF7.bin
0039B3EE                            		even
0039B3EE                            MusicF8:	incbin	sound\musicF8.bin
0039D30E                            		even
0039D30E                            MusicF9:	incbin	sound\musicF9.bin
0039F22E                            		even
0039F22E                            MusicFA:	incbin	sound\musicFA.bin
003A114E                            		even
003A114E                            MusicFB:	incbin	sound\musicFB.bin
003AA0DC 00                         		even
003AA0DC                            MusicFC:	incbin	sound\musicFC.bin
003B1BDA 00                         		even
003B1BDA                            MusicFD:	incbin	sound\musicFD.bin
003B7EF8                            		even
003B7EF8                            MusicFE:	incbin	sound\musicFE.bin
003BCFC2                            		even
003BCFC2                            MusicFF:	incbin	sound\musicFF.bin
003C16BE                            		even
003C16BE                            ; ---------------------------------------------------------------------------
003C16BE                            ; Sound	effect pointers
003C16BE 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
003C16CA 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
003C16D6 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
003C16E2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
003C16EE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
003C16FA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
003C1706 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
003C1712 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
003C171E 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
003C172A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
003C1736 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
003C1742 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
003C174E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
003C175A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
003C1766 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
003C1772 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
003C177E 0000 0000                  		dc.l SoundD1
003C1782 0000 0000                  SoundD0Index:	dc.l SoundD0
003C1786                            SoundA0:	incbin	sound\soundA0.bin
003C179C                            		even
003C179C                            SoundA1:	incbin	sound\soundA1.bin
003C17C6                            		even
003C17C6                            SoundA2:	incbin	sound\soundA2.bin
003C17E6                            		even
003C17E6                            SoundA3:	incbin	sound\soundA3.bin
003C1818                            		even
003C1818                            SoundA4:	incbin	sound\soundA4.bin
003C184E                            		even
003C184E                            SoundA5:	incbin	sound\soundA5.bin
003C187A                            		even
003C187A                            SoundA6:	incbin	sound\soundA6.bin
003C18AA                            		even
003C18AA                            SoundA7:	incbin	sound\soundA7.bin
003C18DA                            		even
003C18DA                            SoundA8:	incbin	sound\soundA8.bin
003C190E                            		even
003C190E                            SoundA9:	incbin	sound\soundA9.bin
003C1920                            		even
003C1920                            SoundAA:	incbin	sound\soundAA.bin
003C1962                            		even
003C1962                            SoundAB:	incbin	sound\soundAB.bin
003C1982                            		even
003C1982                            SoundAC:	incbin	sound\soundAC.bin
003C19B6                            		even
003C19B6                            SoundAD:	incbin	sound\soundAD.bin
003C19EC                            		even
003C19EC                            SoundAE:	incbin	sound\soundAE.bin
003C1A36                            		even
003C1A36                            SoundAF:	incbin	sound\soundAF.bin
003C1A64                            		even
003C1A64                            SoundB0:	incbin	sound\soundB0.bin
003C1A96                            		even
003C1A96                            SoundB1:	incbin	sound\soundB1.bin
003C1AC2                            		even
003C1AC2                            SoundB2:	incbin	sound\soundB2.bin
003C1B12                            		even
003C1B12                            SoundB3:	incbin	sound\soundB3.bin
003C1B5C                            		even
003C1B5C                            SoundB4:	incbin	sound\soundB4.bin
003C1BB8                            		even
003C1BB8                            SoundB5:	incbin	sound\soundB5.bin
003C1BE6                            		even
003C1BE6                            SoundB6:	incbin	sound\soundB6.bin
003C1C04                            		even
003C1C04                            SoundB7:	incbin	sound\soundB7.bin
003C1C40                            		even
003C1C40                            SoundB8:	incbin	sound\soundB8.bin
003C1C5E                            		even
003C1C5E                            SoundB9:	incbin	sound\soundB9.bin
003C1CC2                            		even
003C1CC2                            SoundBA:	incbin	sound\soundBA.bin
003C1CEA                            		even
003C1CEA                            SoundBB:	incbin	sound\soundBB.bin
003C1D16                            		even
003C1D16                            SoundBC:	incbin	sound\soundBC.bin
003C1D58                            		even
003C1D58                            SoundBD:	incbin	sound\soundBD.bin
003C1DAC                            		even
003C1DAC                            SoundBE:	incbin	sound\soundBE.bin
003C1DE6                            		even
003C1DE6                            SoundBF:	incbin	sound\soundBF.bin
003C1E58                            		even
003C1E58                            SoundC0:	incbin	sound\soundC0.bin
003C1E86                            		even
003C1E86                            SoundC1:	incbin	sound\soundC1.bin
003C1EC0                            		even
003C1EC0                            SoundC2:	incbin	sound\soundC2.bin
003C1EEA                            		even
003C1EEA                            SoundC3:	incbin	sound\soundC3.bin
003C1F64                            		even
003C1F64                            SoundC4:	incbin	sound\soundC4.bin
003C1F8C                            		even
003C1F8C                            SoundC5:	incbin	sound\soundC5.bin
003C1FF4                            		even
003C1FF4                            SoundC6:	incbin	sound\soundC6.bin
003C2036                            		even
003C2036                            SoundC7:	incbin	sound\soundC7.bin
003C2064                            		even
003C2064                            SoundC8:	incbin	sound\soundC8.bin
003C2076                            		even
003C2076                            SoundC9:	incbin	sound\soundC9.bin
003C20A4                            		even
003C20A4                            SoundCA:	incbin	sound\soundCA.bin
003C20D2                            		even
003C20D2                            SoundCB:	incbin	sound\soundCB.bin
003C211E                            		even
003C211E                            SoundCC:	incbin	sound\soundCC.bin
003C2158                            		even
003C2158                            SoundCD:	incbin	sound\soundCD.bin
003C2166                            		even
003C2166                            SoundCE:	incbin	sound\soundCE.bin
003C2194                            		even
003C2194                            SoundCF:	incbin	sound\soundCF.bin
003C21CC                            		even
003C21CC                            SoundD0:	incbin	sound\soundD0.bin
003C2206                            		even
003C2206                            SoundD1:	incbin	sound\soundD1.bin
003C2242                            		even
003C2242                            SegaPCM:	incbin	sound\segapcm.bin
003C8BBA                            SegaPCM_End	even
003C8BBA                            
003C8BBA                            ; -----------------------------------------------------------------------------
003C8BBA                            ; Replace the player's "Speed To Pos" calls for standing and spinning with
003C8BBA                            ; A call to this routine to move across a diagonal line one unit at a time,
003C8BBA                            ; testing and adjusting for path collision all along the way, instead of moving
003C8BBA                            ; directly to the new position and testing/adjusting afterward
003C8BBA                            ; (This method is very slow)
003C8BBA                            ; -----------------------------------------------------------------------------
003C8BBA                            Sonic_Path_Move:
003C8BBA                            
003C8BBA 4A28 0023                  		tst.b	$23(a0)
003C8BBE 6600 0000                  		bne	Sonic_Path_Move_UseFineMotion
003C8BC2 4EB9 0000 DD28             		jsr	SpeedToPos
003C8BC8 4EF9 0001 523A             		jmp Sonic_AnglePos
003C8BCE                            
003C8BCE                            Sonic_Path_Move_UseFineMotion:
003C8BCE                            
003C8BCE 117C 0000 0023             		move.b	#0,$23(a0)
003C8BD4 4EB9 0000 0000             		jsr		Sonic_FloorPos_GetSide
003C8BDA                            
003C8BDA 7000                       		moveq.l	#0,d0			; Clear d0
003C8BDC 3028 0010                  		move.w	$10(a0),d0	; Copy Horizontal velocity
003C8BE0 48C0                       		ext.l		d0				; Sign extend the value to a long
003C8BE2 7200                       		moveq.l	#0,d1			; Clear d1
003C8BE4 3228 0012                  		move.w	$12(a0),d1	; Copy Vertical velocity
003C8BE8 48C1                       		ext.l		d1				; Sign extend the value to a long
003C8BEA                            
003C8BEA 243C 0008 0000             		move.l	#$80000,d2	; This value represents one pixel unit of movement (load for horizontal)
003C8BF0 263C 0008 0000             		move.l	#$80000,d3	; This value represents one pixel unit of movement (load for vertical)
003C8BF6 4A80                       		tst.l		d0				; Test whether horizontal velocity is positive or negative
003C8BF8 6A00 0000                  		bpl		Sonic_Path_Move_PositiveHorizontal
003C8BFC 4480                       		neg.l		d0				; If negative, make it positive (absolute value)
003C8BFE 4482                       		neg.l		d2				; And make the accumulator value negative
003C8C00                            Sonic_Path_Move_PositiveHorizontal:
003C8C00 4A81                       		tst.l		d1				; Test whether vertical velocity is positive or negative
003C8C02 6A00 0000                  		bpl		Sonic_Path_Move_PositiveVertical
003C8C06 4481                       		neg.l		d1				; If negative, make it positive (absolute value)
003C8C08 4483                       		neg.l		d3				; And make the accumulator value negative
003C8C0A                            Sonic_Path_Move_PositiveVertical:
003C8C0A                            
003C8C0A 2800                       		move.l	d0,d4			; Keep a backup of the absolute value of the horizontal velocity
003C8C0C 2A01                       		move.l	d1,d5			; Keep a backup of the absolute value of the vertical velocity
003C8C0E 7C00                       		moveq.l	#0,d6			; Clear the secondary direction accumulator
003C8C10                            
003C8C10 B280                       		cmp.l		d0,d1			; Test whether there is more horizontal velocity than vertical, or more vertical than horizontal
003C8C12 6500 0000                  		bcs		Sonic_Path_Move_GoHorizontalPre
003C8C16 0C81 0000 0800             		cmpi.l	#$800,d1		
003C8C1C 6500 0000                  		bcs		Sonic_Path_Move_End_2
003C8C20 6000 0000                  		bra		Sonic_Path_Move_GoVertical_2
003C8C24                            
003C8C24                            Sonic_Path_Move_GoVertical:
003C8C24                            
003C8C24 48E7 FE00                  		movem.l	d0-d6,-(sp)
003C8C28 4E95                       		jsr	(a5)
003C8C2A 4CDF 007F                  		movem.l	(sp)+,d0-d6
003C8C2E                            
003C8C2E 0C81 0000 0800             		cmpi.l	#$800,d1		; Test if there are still whole pixels left for vertical movement
003C8C34 6500 0000                  		bcs		Sonic_Path_Move_End
003C8C38                            		
003C8C38                            Sonic_Path_Move_GoVertical_2
003C8C38                            
003C8C38 D7A8 000C                  		add.l		d3,$C(a0)	; Move the player vertically in the appropriate direction by one pixel
003C8C3C 0481 0000 0800             		sub.l		#$800,d1		; Subtract one whole pixel from the Y velocity counter
003C8C42                            
003C8C42 DC84                       		add.l		d4,d6			; Add the absolute value of X velocity to the accumulator
003C8C44 BA86                       		cmp.l		d6,d5			; Compare it to the absolute value of Y velocity
003C8C46 65DC                       		bcs		Sonic_Path_Move_GoVertical	;If the accumulator has not reached the Y velocity value, there is no X movement this pixel. Repeat the loop for remaining Y movement
003C8C48                            
003C8C48 D5A8 0008                  		add.l		d2,$8(a0)	; Move the player horizontally in the appropriate direction by one pixel
003C8C4C 9C85                       		sub.l		d5,d6			; Subtract absolute value Y velocity from the accumulator, leaving anything above that value in place
003C8C4E 0480 0000 0800             		sub.l		#$800,d0		; Subtract one whole pixel from the X velocity counter
003C8C54                            
003C8C54 60CE                       		bra		Sonic_Path_Move_GoVertical	;Repeat the loop for remaining Y movement
003C8C56                            		
003C8C56                            Sonic_Path_Move_GoHorizontalPre:
003C8C56 0C81 0000 0800             		cmpi.l	#$800,d1		
003C8C5C 6500 0000                  		bcs		Sonic_Path_Move_End_2
003C8C60 6000 0000                  		bra		Sonic_Path_Move_GoHorizontal_2
003C8C64                            
003C8C64                            Sonic_Path_Move_GoHorizontal:
003C8C64                            
003C8C64 48E7 FE00                  		movem.l	d0-d6,-(sp)
003C8C68 4E95                       		jsr	(a5)
003C8C6A 4CDF 007F                  		movem.l	(sp)+,d0-d6
003C8C6E                            
003C8C6E 0C80 0000 0800             		cmpi.l	#$800,d0		; Test if there are still whole pixels left for horizontal movement
003C8C74 6500 0000                  		bcs		Sonic_Path_Move_End
003C8C78                            		
003C8C78                            Sonic_Path_Move_GoHorizontal_2:
003C8C78                            
003C8C78 D5A8 0008                  		add.l		d2,$8(a0)	; Move the player horizontally in the appropriate direction by one pixel
003C8C7C 0480 0000 0800             		sub.l		#$800,d0		; Subtract one whole pixel from the X velocity counter
003C8C82                            
003C8C82 DC85                       		add.l		d5,d6			; Add the absolute value of Y velocity to the accumulator
003C8C84 B886                       		cmp.l		d6,d4			; Compare it to the absolute value of X velocity
003C8C86 65DC                       		bcs		Sonic_Path_Move_GoHorizontal	;If the accumulator has not reached the X velocity value, there is no Y movement this pixel. Repeat the loop for remaining X movement
003C8C88                            
003C8C88 D7A8 000C                  		add.l		d3,$C(a0)	; Move the player vertically in the appropriate direction by one pixel
003C8C8C 9C84                       		sub.l		d4,d6			; Subtract absolute value X velocity from the accumulator, leaving anything above that value in place
003C8C8E 0481 0000 0800             		sub.l		#$800,d1		; Subtract one whole pixel from the Y velocity counter
003C8C94                            
003C8C94 60CE                       		bra		Sonic_Path_Move_GoHorizontal	;Repeat the loop for remaining X movement
003C8C96                            
003C8C96                            Sonic_Path_Move_End:
003C8C96                            
003C8C96 48E7 FE00                  		movem.l	d0-d6,-(sp)
003C8C9A 4EB9 0001 523A             		jsr	Sonic_AnglePos	; Obtain the correct angle before the final movement, so Sonic will check for solidity in the right direction in the call below
003C8CA0 4CDF 007F                  		movem.l	(sp)+,d0-d6
003C8CA4                            		
003C8CA4                            Sonic_Path_Move_End_2:
003C8CA4                            
003C8CA4 E188                       		lsl.l		#8,d0			; Multiply remaining X velocity by $100
003C8CA6 4A82                       		tst.l		d2				; Test whether horizontal velocity was positive or negative
003C8CA8 6A00 0000                  		bpl		Sonic_Path_Move_End_PositiveHorizontal
003C8CAC 4480                       		neg.l		d0
003C8CAE                            Sonic_Path_Move_End_PositiveHorizontal:
003C8CAE D1A8 0008                  		add.l		d0,$8(a0)	; Add to X position
003C8CB2 E189                       		lsl.l		#8,d1			; Multiply remaining Y velocity by $100
003C8CB4 4A83                       		tst.l		d3				; Test whether vertical velocity was positive or negative
003C8CB6 6A00 0000                  		bpl		Sonic_Path_Move_End_PositiveVertical
003C8CBA 4481                       		neg.l		d1
003C8CBC                            Sonic_Path_Move_End_PositiveVertical:
003C8CBC D3A8 000C                  		add.l		d1,$C(a0)	; Add to Y position
003C8CC0                            
003C8CC0 4EB9 0001 523A             		jsr	Sonic_AnglePos
003C8CC6                            
003C8CC6 4E75                       		rts
003C8CC8                            
003C8CC8                            
003C8CC8                            
003C8CC8                            ; ---------------------------------------------------------------------------
003C8CC8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
003C8CC8                            ; ---------------------------------------------------------------------------
003C8CC8                            
003C8CC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
003C8CC8                            
003C8CC8                            
003C8CC8                            Sonic_FloorPos_GetSide:
003C8CC8 0828 0003 0022             		btst	#3,$22(a0)								;Check the Ride-on flag
003C8CCE 6700                       		beq.s	Sonic_FloorPos_GetSide_NotRideOn
003C8CD0 4BF9 0000 0000             		lea	(Sonic_FloorPos_Return).l,a5		;If the player is standing on a sprite rather than the level, don't do height adjustment
003C8CD6 7000                       		moveq	#0,d0
003C8CD8 11C0 F768                  		move.b	d0,($FFFFF768).w
003C8CDC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
003C8CE0                            Sonic_FloorPos_Return:
003C8CE0 4E75                       		rts
003C8CE2                            
003C8CE2                            Sonic_FloorPos_GetSide_NotRideOn:
003C8CE2 7003                       		moveq	#3,d0
003C8CE4 11C0 F768                  		move.b	d0,($FFFFF768).w
003C8CE8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
003C8CEC 1028 0025                  		move.b	$25(a0),d0
003C8CF0 0600 0020                  		addi.b	#$20,d0
003C8CF4 6A00                       		bpl.s	Sonic_FloorPos_1E286
003C8CF6 1028 0025                  		move.b	$25(a0),d0
003C8CFA 6A00                       		bpl.s	Sonic_FloorPos_1E280
003C8CFC 5300                       		subq.b	#1,d0
003C8CFE                            
003C8CFE                            Sonic_FloorPos_1E280:
003C8CFE 0600 0020                  		addi.b	#$20,d0
003C8D02 6000                       		bra.s	Sonic_FloorPos_1E292
003C8D04                            		
003C8D04                            ; ===========================================================================
003C8D04                            
003C8D04                            Sonic_FloorPos_1E286:
003C8D04 1028 0025                  		move.b	$25(a0),d0
003C8D08 6A00                       		bpl.s	Sonic_FloorPos_1E28E
003C8D0A 5200                       		addq.b	#1,d0
003C8D0C                            
003C8D0C                            Sonic_FloorPos_1E28E:
003C8D0C 0600 001F                  		addi.b	#$1F,d0
003C8D10                            
003C8D10                            Sonic_FloorPos_1E292:
003C8D10 0200 00C0                  		andi.b	#$C0,d0
003C8D14 0C00 0040                  		cmpi.b	#$40,d0
003C8D18 6700 0000                  		beq.w	Sonic_FloorPos_SetWalkVertL
003C8D1C 0C00 0080                  		cmpi.b	#$80,d0
003C8D20 6700 0000                  		beq.w	Sonic_FloorPos_SetWalkCeiling
003C8D24 0C00 00C0                  		cmpi.b	#$C0,d0
003C8D28 6700 0000                  		beq.w	Sonic_FloorPos_SetWalkVertR
003C8D2C 4BF9 0000 0000             		lea	(Sonic_StickyWalkFloor).l,a5
003C8D32 4E75                       		rts
003C8D34                            Sonic_FloorPos_SetWalkVertL
003C8D34 4BF9 0000 0000             		lea	(Sonic_StickyWalkVertL).l,a5
003C8D3A 4E75                       		rts
003C8D3C                            Sonic_FloorPos_SetWalkCeiling:
003C8D3C 4BF9 0000 0000             		lea	(Sonic_StickyWalkCeiling).l,a5
003C8D42 4E75                       		rts
003C8D44                            Sonic_FloorPos_SetWalkVertR:
003C8D44 4BF9 0000 0000             		lea	(Sonic_StickyWalkVertR).l,a5
003C8D4A 4E75                       		rts
003C8D4C                            
003C8D4C                            Sonic_StickyWalkFloor:
003C8D4C 3428 000C                  		move.w	$C(a0),d2
003C8D50 3628 0008                  		move.w	8(a0),d3
003C8D54 7000                       		moveq	#0,d0
003C8D56 1028 0016                  		move.b	$16(a0),d0
003C8D5A 4880                       		ext.w	d0
003C8D5C D440                       		add.w	d0,d2
003C8D5E 1028 0017                  		move.b	$17(a0),d0
003C8D62 4880                       		ext.w	d0
003C8D64 D640                       		add.w	d0,d3
003C8D66 49F8 F768                  		lea	($FFFFF768).w,a4
003C8D6A 367C 0010                  		movea.w	#$10,a3
003C8D6E 3C3C 0000                  		move.w	#0,d6
003C8D72 7A00                       		moveq	#$0,d5
003C8D74 1A38 FF4A                  		move.b	($FFFFFF4A).w,d5
003C8D78 4EB9 0001 563C             		jsr		FindFloor
003C8D7E 3F01                       		move.w	d1,-(sp)
003C8D80 3428 000C                  		move.w	$C(a0),d2
003C8D84 3628 0008                  		move.w	8(a0),d3
003C8D88 7000                       		moveq	#0,d0
003C8D8A 1028 0016                  		move.b	$16(a0),d0
003C8D8E 4880                       		ext.w	d0
003C8D90 D440                       		add.w	d0,d2
003C8D92 1028 0017                  		move.b	$17(a0),d0
003C8D96 4880                       		ext.w	d0
003C8D98 4440                       		neg.w	d0
003C8D9A D640                       		add.w	d0,d3
003C8D9C 49F8 F76A                  		lea	($FFFFF76A).w,a4
003C8DA0 4EB9 0001 563C             		jsr		FindFloor
003C8DA6 301F                       		move.w	(sp)+,d0
003C8DA8 6100 0000                  		bsr.w	Sonic_StickyAngle
003C8DAC 4A41                       		tst.w	d1
003C8DAE 6700                       		beq.s	StickyLocret_146BE
003C8DB0 6A00                       		bpl.s	StickyLoc_146C0
003C8DB2 0C41 FFF2                  		cmpi.w	#-$E,d1
003C8DB6 6D00                       		blt.s	StickyLocret_146E6
003C8DB8 D368 000C                  		add.w	d1,$C(a0)
003C8DBC                            
003C8DBC                            StickyLocret_146BE:
003C8DBC 4E75                       		rts
003C8DBE                            ; ===========================================================================
003C8DBE                            
003C8DBE                            StickyLoc_146C0:
003C8DBE 0C41 000E                  		cmpi.w	#$E,d1
003C8DC2 6E00                       		bgt.s	StickyLoc_146CC
003C8DC4                            
003C8DC4                            StickyLoc_146C6:
003C8DC4 D368 000C                  		add.w	d1,$C(a0)
003C8DC8 4E75                       		rts
003C8DCA                            ; ===========================================================================
003C8DCA                            
003C8DCA                            StickyLoc_146CC:
003C8DCA 4A28 0038                  		tst.b	$38(a0)
003C8DCE 66F4                       		bne.s	StickyLoc_146C6
003C8DD0 08E8 0001 0022             		bset	#1,$22(a0)
003C8DD6 08A8 0005 0022             		bclr	#5,$22(a0)
003C8DDC 117C 0001 001D             		move.b	#1,$1D(a0)
003C8DE2 4E75                       		rts
003C8DE4                            ; ===========================================================================
003C8DE4                            
003C8DE4                            StickyLocret_146E6:
003C8DE4 4E75                       		rts
003C8DE6                            ; End of function Sonic_AnglePos
003C8DE6                            
003C8DE6                            ; ===========================================================================
003C8DE6 2428 0008                  		move.l	8(a0),d2
003C8DEA 3028 0010                  		move.w	$10(a0),d0
003C8DEE 48C0                       		ext.l	d0
003C8DF0 E180                       		asl.l	#8,d0
003C8DF2 9480                       		sub.l	d0,d2
003C8DF4 2142 0008                  		move.l	d2,8(a0)
003C8DF8 303C 0038                  		move.w	#$38,d0
003C8DFC 48C0                       		ext.l	d0
003C8DFE E180                       		asl.l	#8,d0
003C8E00 9680                       		sub.l	d0,d3
003C8E02 2143 000C                  		move.l	d3,$C(a0)
003C8E06 4E75                       		rts
003C8E08                            ; ===========================================================================
003C8E08                            
003C8E08                            StickyLocret_1470A:
003C8E08 4E75                       		rts
003C8E0A                            ; ===========================================================================
003C8E0A 2628 000C                  		move.l	$C(a0),d3
003C8E0E 3028 0012                  		move.w	$12(a0),d0
003C8E12 0440 0038                  		subi.w	#$38,d0
003C8E16 3140 0012                  		move.w	d0,$12(a0)
003C8E1A 48C0                       		ext.l	d0
003C8E1C E180                       		asl.l	#8,d0
003C8E1E 9680                       		sub.l	d0,d3
003C8E20 2143 000C                  		move.l	d3,$C(a0)
003C8E24 4E75                       		rts
003C8E26 4E75                       		rts
003C8E28                            ; ===========================================================================
003C8E28 2428 0008                  		move.l	8(a0),d2
003C8E2C 2628 000C                  		move.l	$C(a0),d3
003C8E30 3028 0010                  		move.w	$10(a0),d0
003C8E34 48C0                       		ext.l	d0
003C8E36 E180                       		asl.l	#8,d0
003C8E38 9480                       		sub.l	d0,d2
003C8E3A 3028 0012                  		move.w	$12(a0),d0
003C8E3E 48C0                       		ext.l	d0
003C8E40 E180                       		asl.l	#8,d0
003C8E42 9680                       		sub.l	d0,d3
003C8E44 2142 0008                  		move.l	d2,8(a0)
003C8E48 2143 000C                  		move.l	d3,$C(a0)
003C8E4C 4E75                       		rts
003C8E4E                            
003C8E4E                            ; ---------------------------------------------------------------------------
003C8E4E                            ; Subroutine to	change Sonic's angle as he walks along the floor
003C8E4E                            ; ---------------------------------------------------------------------------
003C8E4E                            
003C8E4E                            Sonic_StickyAngle:				; XREF: Sonic_AnglePos; et al ;New Angle Routine for better path sticking
003C8E4E B240                       		cmp.w	d0,d1
003C8E50 6F00                       		ble.s	StickyLoc_1475E
003C8E52 3200                       		move.w	d0,d1
003C8E54                            
003C8E54                            StickyLoc_1475E:
003C8E54 4E75                       		rts
003C8E56                            ; End of function Sonic_StickyAngle
003C8E56                            
003C8E56                            ; ---------------------------------------------------------------------------
003C8E56                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
003C8E56                            ; ---------------------------------------------------------------------------
003C8E56                            
003C8E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
003C8E56                            
003C8E56                            
003C8E56                            Sonic_StickyWalkVertR:			; XREF: Sonic_AnglePos
003C8E56 3428 000C                  		move.w	$C(a0),d2
003C8E5A 3628 0008                  		move.w	8(a0),d3
003C8E5E 7000                       		moveq	#0,d0
003C8E60 1028 0017                  		move.b	$17(a0),d0
003C8E64 4880                       		ext.w	d0
003C8E66 4440                       		neg.w	d0
003C8E68 D440                       		add.w	d0,d2
003C8E6A 1028 0016                  		move.b	$16(a0),d0
003C8E6E 4880                       		ext.w	d0
003C8E70 D640                       		add.w	d0,d3
003C8E72 49F8 F768                  		lea	($FFFFF768).w,a4
003C8E76 367C 0010                  		movea.w	#$10,a3
003C8E7A 3C3C 0000                  		move.w	#0,d6
003C8E7E 7A00                       		moveq	#$0,d5
003C8E80 1A38 FF4A                  		move.b	($FFFFFF4A).w,d5
003C8E84 4EB9 0001 5782             		jsr		FindWall
003C8E8A 3F01                       		move.w	d1,-(sp)
003C8E8C 3428 000C                  		move.w	$C(a0),d2
003C8E90 3628 0008                  		move.w	8(a0),d3
003C8E94 7000                       		moveq	#0,d0
003C8E96 1028 0017                  		move.b	$17(a0),d0
003C8E9A 4880                       		ext.w	d0
003C8E9C D440                       		add.w	d0,d2
003C8E9E 1028 0016                  		move.b	$16(a0),d0
003C8EA2 4880                       		ext.w	d0
003C8EA4 D640                       		add.w	d0,d3
003C8EA6 49F8 F76A                  		lea	($FFFFF76A).w,a4
003C8EAA 4EB9 0001 5782             		jsr		FindWall
003C8EB0 301F                       		move.w	(sp)+,d0
003C8EB2 6100 FF9A                  		bsr.w	Sonic_StickyAngle
003C8EB6 4A41                       		tst.w	d1
003C8EB8 6700                       		beq.s	StickyLocret_147F0
003C8EBA 6A00                       		bpl.s	StickyLoc_147F2
003C8EBC 0C41 FFF2                  		cmpi.w	#-$E,d1
003C8EC0 6D00 FF46                  		blt.w	StickyLocret_1470A
003C8EC4 D368 0008                  		add.w	d1,8(a0)
003C8EC8                            
003C8EC8                            StickyLocret_147F0:
003C8EC8 4E75                       		rts
003C8ECA                            ; ===========================================================================
003C8ECA                            
003C8ECA                            StickyLoc_147F2:
003C8ECA 0C41 000E                  		cmpi.w	#$E,d1
003C8ECE 6E00                       		bgt.s	StickyLoc_147FE
003C8ED0                            
003C8ED0                            StickyLoc_147F8:
003C8ED0 D368 0008                  		add.w	d1,8(a0)
003C8ED4 4E75                       		rts
003C8ED6                            ; ===========================================================================
003C8ED6                            
003C8ED6                            StickyLoc_147FE:
003C8ED6 4A28 0038                  		tst.b	$38(a0)
003C8EDA 66F4                       		bne.s	StickyLoc_147F8
003C8EDC 08E8 0001 0022             		bset	#1,$22(a0)
003C8EE2 08A8 0005 0022             		bclr	#5,$22(a0)
003C8EE8 117C 0001 001D             		move.b	#1,$1D(a0)
003C8EEE 4E75                       		rts
003C8EF0                            ; End of function Sonic_StickyWalkVertR
003C8EF0                            
003C8EF0                            ; ---------------------------------------------------------------------------
003C8EF0                            ; Subroutine allowing Sonic to walk upside-down
003C8EF0                            ; ---------------------------------------------------------------------------
003C8EF0                            
003C8EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
003C8EF0                            
003C8EF0                            
003C8EF0                            Sonic_StickyWalkCeiling:			; XREF: Sonic_AnglePos
003C8EF0 3428 000C                  		move.w	$C(a0),d2
003C8EF4 3628 0008                  		move.w	8(a0),d3
003C8EF8 7000                       		moveq	#0,d0
003C8EFA 1028 0016                  		move.b	$16(a0),d0
003C8EFE 4880                       		ext.w	d0
003C8F00 9440                       		sub.w	d0,d2
003C8F02 0A42 000F                  		eori.w	#$F,d2
003C8F06 1028 0017                  		move.b	$17(a0),d0
003C8F0A 4880                       		ext.w	d0
003C8F0C D640                       		add.w	d0,d3
003C8F0E 49F8 F768                  		lea	($FFFFF768).w,a4
003C8F12 367C FFF0                  		movea.w	#-$10,a3
003C8F16 3C3C 1000                  		move.w	#$1000,d6
003C8F1A 7A00                       		moveq	#$0,d5
003C8F1C 1A38 FF4A                  		move.b	($FFFFFF4A).w,d5
003C8F20 4EB9 0001 563C             		jsr		FindFloor
003C8F26 3F01                       		move.w	d1,-(sp)
003C8F28 3428 000C                  		move.w	$C(a0),d2
003C8F2C 3628 0008                  		move.w	8(a0),d3
003C8F30 7000                       		moveq	#0,d0
003C8F32 1028 0016                  		move.b	$16(a0),d0
003C8F36 4880                       		ext.w	d0
003C8F38 9440                       		sub.w	d0,d2
003C8F3A 0A42 000F                  		eori.w	#$F,d2
003C8F3E 1028 0017                  		move.b	$17(a0),d0
003C8F42 4880                       		ext.w	d0
003C8F44 9640                       		sub.w	d0,d3
003C8F46 49F8 F76A                  		lea	($FFFFF76A).w,a4
003C8F4A 4EB9 0001 563C             		jsr		FindFloor
003C8F50 301F                       		move.w	(sp)+,d0
003C8F52 6100 FEFA                  		bsr.w	Sonic_StickyAngle
003C8F56 4A41                       		tst.w	d1
003C8F58 6700                       		beq.s	StickyLocret_14892
003C8F5A 6A00                       		bpl.s	StickyLoc_14894
003C8F5C 0C41 FFF2                  		cmpi.w	#-$E,d1
003C8F60 6D00 FE82                  		blt.w	StickyLocret_146E6
003C8F64 9368 000C                  		sub.w	d1,$C(a0)
003C8F68                            
003C8F68                            StickyLocret_14892:
003C8F68 4E75                       		rts
003C8F6A                            ; ===========================================================================
003C8F6A                            
003C8F6A                            StickyLoc_14894:
003C8F6A 0C41 000E                  		cmpi.w	#$E,d1
003C8F6E 6E00                       		bgt.s	StickyLoc_148A0
003C8F70                            
003C8F70                            StickyLoc_1489A:
003C8F70 9368 000C                  		sub.w	d1,$C(a0)
003C8F74 4E75                       		rts
003C8F76                            ; ===========================================================================
003C8F76                            
003C8F76                            StickyLoc_148A0:
003C8F76 4A28 0038                  		tst.b	$38(a0)
003C8F7A 66F4                       		bne.s	StickyLoc_1489A
003C8F7C 08E8 0001 0022             		bset	#1,$22(a0)
003C8F82 08A8 0005 0022             		bclr	#5,$22(a0)
003C8F88 117C 0001 001D             		move.b	#1,$1D(a0)
003C8F8E 4E75                       		rts
003C8F90                            ; End of function Sonic_StickyWalkCeiling
003C8F90                            
003C8F90                            ; ---------------------------------------------------------------------------
003C8F90                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
003C8F90                            ; ---------------------------------------------------------------------------
003C8F90                            
003C8F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
003C8F90                            
003C8F90                            
003C8F90                            Sonic_StickyWalkVertL:			; XREF: Sonic_AnglePos
003C8F90 3428 000C                  		move.w	$C(a0),d2
003C8F94 3628 0008                  		move.w	8(a0),d3
003C8F98 7000                       		moveq	#0,d0
003C8F9A 1028 0017                  		move.b	$17(a0),d0
003C8F9E 4880                       		ext.w	d0
003C8FA0 9440                       		sub.w	d0,d2
003C8FA2 1028 0016                  		move.b	$16(a0),d0
003C8FA6 4880                       		ext.w	d0
003C8FA8 9640                       		sub.w	d0,d3
003C8FAA 0A43 000F                  		eori.w	#$F,d3
003C8FAE 49F8 F768                  		lea	($FFFFF768).w,a4
003C8FB2 367C FFF0                  		movea.w	#-$10,a3
003C8FB6 3C3C 0800                  		move.w	#$800,d6
003C8FBA 7A00                       		moveq	#$0,d5
003C8FBC 1A38 FF4A                  		move.b	($FFFFFF4A).w,d5
003C8FC0 4EB9 0001 5782             		jsr		FindWall
003C8FC6 3F01                       		move.w	d1,-(sp)
003C8FC8 3428 000C                  		move.w	$C(a0),d2
003C8FCC 3628 0008                  		move.w	8(a0),d3
003C8FD0 7000                       		moveq	#0,d0
003C8FD2 1028 0017                  		move.b	$17(a0),d0
003C8FD6 4880                       		ext.w	d0
003C8FD8 D440                       		add.w	d0,d2
003C8FDA 1028 0016                  		move.b	$16(a0),d0
003C8FDE 4880                       		ext.w	d0
003C8FE0 9640                       		sub.w	d0,d3
003C8FE2 0A43 000F                  		eori.w	#$F,d3
003C8FE6 49F8 F76A                  		lea	($FFFFF76A).w,a4
003C8FEA 4EB9 0001 5782             		jsr		FindWall
003C8FF0 301F                       		move.w	(sp)+,d0
003C8FF2 6100 FE5A                  		bsr.w	Sonic_StickyAngle
003C8FF6 4A41                       		tst.w	d1
003C8FF8 6700                       		beq.s	StickyLocret_14934
003C8FFA 6A00                       		bpl.s	StickyLoc_14936
003C8FFC 0C41 FFF2                  		cmpi.w	#-$E,d1
003C9000 6D00 FE06                  		blt.w	StickyLocret_1470A
003C9004 9368 0008                  		sub.w	d1,8(a0)
003C9008                            
003C9008                            StickyLocret_14934:
003C9008 4E75                       		rts
003C900A                            ; ===========================================================================
003C900A                            
003C900A                            StickyLoc_14936:
003C900A 0C41 000E                  		cmpi.w	#$E,d1
003C900E 6E00                       		bgt.s	StickyLoc_14942
003C9010                            
003C9010                            StickyLoc_1493C:
003C9010 9368 0008                  		sub.w	d1,8(a0)
003C9014 4E75                       		rts
003C9016                            ; ===========================================================================
003C9016                            
003C9016                            StickyLoc_14942:
003C9016 4A28 0038                  		tst.b	$38(a0)
003C901A 66F4                       		bne.s	StickyLoc_1493C
003C901C 08E8 0001 0022             		bset	#1,$22(a0)
003C9022 08A8 0005 0022             		bclr	#5,$22(a0)
003C9028 117C 0001 001D             		move.b	#1,$1D(a0)
003C902E 4E75                       		rts
003C9030                            ; End of function Sonic_StickyWalkVertL
003C9030                            
003C9030                            ; =========================================================================================
003C9030                            
003C9030                            ; ============ THE CODE BELOW WAS DONE BY STEALTH!!! HE IS AWESOME ========================
003C9030                            
003C9030                            ; ===========================================================================
003C9030                            ; ---------------------------------------------------------------------------
003C9030                            ; CurveGrip - While colliding with player, flags player to use "fine collision"
003C9030                            ;             to better "trace" the path, and limits max speed to prevent the
003C9030                            ;             player from overshooting the hotspot transition area without
003C9030                            ;             obtaining a new angle and falling off
003C9030                            ; ---------------------------------------------------------------------------
003C9030                            
003C9030                            CurveGrip:	; object 8D
003C9030 7000                       		moveq	#0,d0
003C9032 1028 0024                  		move.b	$24(a0),d0
003C9036 323B 0000                  		move.w	CurveGrip_Index(pc,d0.w),d1
003C903A 4EFB 1000                  		jmp	CurveGrip_Index(pc,d1.w)
003C903E                            ; ===========================================================================
003C903E                            CurveGrip_Index:
003C903E 0000                       		dc.w CurveGrip_Main-CurveGrip_Index
003C9040 0000                       		dc.w CurveGrip_Action-CurveGrip_Index
003C9042                            ; ===========================================================================
003C9042                            CurveGrip_Sizes:
003C9042 20                         		dc.b	$20
003C9043 30                         		dc.b	$30
003C9044 40                         		dc.b	$40
003C9045 50                         		dc.b	$50
003C9046                            ; ===========================================================================
003C9046                            CurveGrip_Main:
003C9046                            
003C9046 5428 0024                  		addq.b	#2,$24(a0)
003C904A 1028 0028                  		move.b	$28(a0),d0
003C904E 117B 00F2 0038             		move.b	CurveGrip_Sizes(pc,d0.w),$38(a0)
003C9054                            
003C9054                            CurveGrip_Action:
003C9054 7400                       		moveq	#0,d2
003C9056 1428 0038                  		move.b	$38(a0),d2
003C905A 3602                       		move.w	d2,d3
003C905C D643                       		add.w	d3,d3
003C905E 43F8 D000                  		lea	($FFFFD000).w,a1		;Handle Sonic first
003C9062 6100 0000                  		bsr	CurveGrip_MovePlayer	;Test for collision and speed, cap speed and set flags
003C9066 6000 0000                  		bra.w	CurveGrip_ChkDel
003C906A                            
003C906A                            CurveGrip_MovePlayer:
003C906A 3029 0008                  		move.w	8(a1),d0
003C906E 9068 0008                  		sub.w	$8(a0),d0
003C9072 D042                       		add.w	d2,d0
003C9074 B043                       		cmp.w	d3,d0
003C9076 6400                       		bcc.s	CurveGrip_CheckNegativeVel_Return
003C9078 3229 000C                  		move.w	$C(a1),d1
003C907C 9268 000C                  		sub.w	$C(a0),d1
003C9080 D242                       		add.w	d2,d1
003C9082 B243                       		cmp.w	d3,d1
003C9084 6400                       		bcc.s	CurveGrip_CheckNegativeVel_Return
003C9086                            
003C9086 137C 0001 0023             		move.b	#1,$23(a1)
003C908C                            
003C908C 3029 0014                  		move.w	$14(a1),d0
003C9090 6A00                       		bpl.s	CurveGrip_CheckPositiveVel
003C9092                            
003C9092 0C40 EE00                  		cmpi.w	#-$1200,d0
003C9096 6C00                       		bge.s	CurveGrip_CheckNegativeVel_Return
003C9098 337C EE00 0014             		move.w	#-$1200,$14(a1)
003C909E                            
003C909E                            CurveGrip_CheckNegativeVel_Return:
003C909E 4E75                       		rts
003C90A0                            ; ===========================================================================
003C90A0                            
003C90A0                            CurveGrip_CheckPositiveVel:
003C90A0 0C40 1200                  		cmpi.w	#$1200,d0
003C90A4 6F00                       		ble.s	CurveGrip_CheckPositiveVel_Return
003C90A6 337C 1200 0014             		move.w	#$1200,$14(a1)
003C90AC                            
003C90AC                            CurveGrip_CheckPositiveVel_Return:
003C90AC 4E75                       		rts
003C90AE                            ; ===========================================================================
003C90AE                            
003C90AE                            CurveGrip_ChkDel:
003C90AE 3028 0008                  		move.w	8(a0),d0
003C90B2 0240 FF80                  		andi.w	#$FF80,d0
003C90B6 3238 F700                  		move.w	($FFFFF700).w,d1
003C90BA 0441 0080                  		subi.w	#$80,d1
003C90BE 0241 FF80                  		andi.w	#$FF80,d1
003C90C2 9041                       		sub.w	d1,d0
003C90C4 0C40 0280                  		cmpi.w	#$280,d0
003C90C8 6200                       		bhi.s	CurveGrip_Delete
003C90CA 4E75                       		rts
003C90CC                            ; ===========================================================================
003C90CC                            
003C90CC                            CurveGrip_Delete:
003C90CC 4EF9 0000 DD7E             		jmp	DeleteObject
003C90D2                            ; ===========================================================================
003C90D2                            
003C90D2                            ; ============ THE CODE ABOVE WAS DONE BY STEALTH!!! HE IS AWESOME ========================
003C90D2                            
003C90D2                            ; ==============================================================================
003C90D2                            
003C90D2                            ; ===============================================================
003C90D2                            ; ---------------------------------------------------------------
003C90D2                            ; Error handling module
003C90D2                            ; ---------------------------------------------------------------
003C90D2                            
003C90D2 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
003C90D6 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
003C90E0 01                         		dc.b	1				; extended stack frame
003C90E2 00                         		even
003C90E2                            
003C90E2 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
003C90E6 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
003C90F4 01                         		dc.b	1				; extended stack frame
003C90F6 00                         		even
003C90F6                            
003C90F6 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
003C90FA 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
003C910E 00                         		dc.b	0				; extended stack frame
003C9110 00                         		even
003C9110                            
003C9110 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
003C9114 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
003C9120 00                         		dc.b	0				; extended stack frame
003C9122 00                         		even
003C9122                            
003C9122 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
003C9126 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
003C9136 00                         		dc.b	0				; extended stack frame
003C9138 00                         		even
003C9138                            
003C9138 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
003C913C 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
003C914E 00                         		dc.b	0				; extended stack frame
003C9150 00                         		even
003C9150                            
003C9150 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
003C9154 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
003C9168 00                         		dc.b	0				; extended stack frame
003C916A 00                         		even
003C916A                            
003C916A 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
003C916E 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
003C9174 00                         		dc.b	0				; extended stack frame
003C9176 00                         		even
003C9176                            
003C9176 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
003C917A 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
003C918D 00                         		dc.b	0				; extended stack frame
003C918E                            		even
003C918E                            
003C918E 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
003C9192 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
003C91A5 00                         		dc.b	0				; extended stack frame
003C91A6                            		even
003C91A6                            
003C91A6 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
003C91AA 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
003C91BA 00                         		dc.b	0				; extended stack frame
003C91BC 00                         		even
003C91BC                            
003C91BC                            ErrorHandler:	incbin	"ErrorHandler.bin"
003C99A0                            
003C99A0                            EndOfRom:
003C99A0                            
003C99A0                            
